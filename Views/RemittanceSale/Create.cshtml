@using DataAccess
@using DataAccess.POCO

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = ViewData["SiteName"].ToString();
    ViewBag.PageTitle = "New Remittance Sale";
    ViewBag.NewRemittanceSales = "active open";
}

<style>
/* This only works with JavaScript,
if it's not present, don't show loader */

.preload {
	position: fixed;
	left: 0px;
	top: 0px;
	width: 100%;
	height: 100%;
	z-index: 9999;
	background: url('@Url.Content("~/Content/images/Preloader_2.gif")') center no-repeat #fff;
    opacity: 0.7;
}

.field-validation-error{
    display:inline-block!important;
}
</style>

<div class="preload" style="display:none;"></div>

<div class="panel">
    <div class="panel-body container-fluid">
        <div class="row row-lg">
            <div class="col-xlg-12 col-md-12">
                @if (TempData["Result"] != null)
                {
                    string[] result = TempData["Result"].ToString().Split('|');

                    <div class="alert alert-@result[0]">
                        <button type="button" class="close" data-dismiss="alert">&times;</button>
                        @result[1]
                    </div>
                }

                @using (Html.BeginForm("Create", "RemittanceSale", FormMethod.Post, new { @class = "form-horizontal", @id = "form-create" }))
                {

                    @*<input type="hidden" id="PendingChequeLog" name="PendingChequeLog" value="@ViewData["PendingChequeLog"].ToString()">
                        <input type="hidden" id="PendingBankTransferLog" name="PendingBankTransferLog" value="@ViewData["PendingBankTransferLog"].ToString()">

                        <input type="hidden" id="PendingLocalCheque1Log" name="PendingLocalCheque1Log" value="@ViewData["PendingLocalCheque1Log"].ToString()">
                        <input type="hidden" id="PendingLocalCheque2Log" name="PendingLocalCheque2Log" value="@ViewData["PendingLocalCheque2Log"].ToString()">
                        <input type="hidden" id="PendingLocalCheque3Log" name="PendingLocalCheque3Log" value="@ViewData["PendingLocalCheque3Log"].ToString()">
                        <input type="hidden" id="PendingLocalBankTransferLog" name="PendingLocalBankTransferLog" value="@ViewData["PendingLocalBankTransferLog"].ToString()">*@


                    Remittances sales = new Remittances();

                    <div class="form-group">
                        @Html.LabelFor(s => sales.MemoID, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            @Html.TextBoxFor(s => sales.MemoID, new { @class = "form-control", @placeholder = "ID will be Assigned after Creation", @disabled = "disabled" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(s => sales.CustomerParticularId, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            @Html.DropDownListFor(s => sales.CustomerParticularId, (SelectList)ViewData["CustomerDropdown"], new { @class = "form-control", @data_plugin = "select2", @data_placeholder = "Search by Customer Name or Company Name", @data_allow_clear = "true", @onchange = "GetCustomerDetail()" })
                            @Html.ValidationMessageFor(s => sales.CustomerParticularId)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Contact:", new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            @Html.TextBox("CustomerContact", ViewData["CustomerContact"].ToString(), new { @class = "form-control", @disabled = "disabled" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Address:", new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            @Html.TextBox("CustomerAddress", ViewData["CustomerAddress"].ToString(), new { @class = "form-control", @disabled = "disabled" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Shipping Address:", new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            @Html.TextBox("CustomerShippingAddress", ViewData["CustomerShippingAddress"].ToString(), new { @class = "form-control", @disabled = "disabled" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(s => sales.IssueDate, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="icon wb-calendar"></i></span>
                                @Html.TextBoxFor(s => sales.IssueDate, DateTime.Today.ToString("dd/MM/yyyy"), new { @class = "form-control", @disabled = "disabled" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(s => sales.CreatedBy, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            @Html.TextBoxFor(s => sales.CreatedBy, new { @class = "form-control", @disabled = "disabled", Value = Session["UserName"].ToString() })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(s => sales.IsUrgent, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            <div class="radio-custom radio-primary radio-inline">
                                <input type="radio" id="non-urgent" name="sales.Urgent" value="1" @ViewData["NonUrgentRadio"].ToString() />
                                <label for="non-urgent">Non-Urgent</label>
                            </div>
                            <div class="radio-custom radio-primary radio-inline">
                                <input type="radio" id="urgent" name="sales.Urgent" value="2" @ViewData["UrgentRadio"].ToString() />
                                <label for="urgent">Urgent</label>
                            </div>
                            @Html.ValidationMessageFor(s => sales.IsUrgent)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(s => sales.Remarks, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            @Html.TextAreaFor(s => sales.Remarks, new { @class = "form-control", @rows = "4" })
                            @Html.ValidationMessageFor(s => sales.Remarks)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(s => sales.CustomerRemarks, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            @Html.TextAreaFor(s => sales.CustomerRemarks, new { @class = "form-control", @rows = "4" })
                            @Html.ValidationMessageFor(s => sales.CustomerRemarks)
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="@sales.AgentId" class="col-sm-3 control-label">Agent:</label>
                        <div class="col-sm-9">
                            @Html.DropDownList("AgentId", (SelectList)ViewData["AgentDropdown"], new { @class = "form-control", @data_plugin = "select2", @data_placeholder = "Search by Agent Name or Company Name", @data_allow_clear = "true" })
                            @*@Html.ValidationMessageFor(s => sales.AgentId)*@
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="" class="col-sm-3 control-label">Cost Price:</label>
                        <div class="col-sm-9">
                            @*@Html.TextBoxFor(p => products.MaxAmount, new { @class = "form-control" })
                                @Html.ValidationMessageFor(p => products.MaxAmount)*@
                            <div class="input-group">
                                <span class="input-group-addon">SGD $</span>
                                @Html.TextBoxFor(s => sales.CostPrice, ViewData["CostPrice"].ToString(), new { @class = "form-control" })
                                @*<input type="text" class="form-control" name="sales.CostPrice" id="remittance_costPrice" value="@ViewData["CostPrice"]" placeholder="Amount">*@
                            </div>
                            @Html.ValidationMessageFor(s => sales.CostPrice)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(s => sales.AgentRate, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            @Html.TextBoxFor(s => sales.AgentRate, ViewData["AgentRate"].ToString(), new { @class = "form-control" })
                            @Html.ValidationMessageFor(s => sales.AgentRate)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(s => sales.AgentFee, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            <div class="input-group">
                                <span class="input-group-addon">SGD $</span>
                                @Html.TextBoxFor(s => sales.AgentFee, ViewData["AgentFee"].ToString(), new { @class = "form-control" })
                            </div>
                            @Html.ValidationMessageFor(s => sales.AgentFee)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-12">
                            <h4>Transaction Details</h4>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-sm-6">
                            <button id="add-new-transaction" type="button" class="btn btn-primary" onclick="AddNewTransaction()">Add New Transaction </button>
                        </div>
                        <div class="col-sm-6">@Html.ValidationMessage("Transaction")</div>
                        <div class="col-sm-6" style="text-align:right">
                            <input type="file" id="bulkupload" data-plugin="dropify" data-default-file="" class="bulk-upload-file" />
                            <label for="bulkupload" class="bulk-upload-btn btn-primary btn">Bulk Upload</label>
                            <p><a href="~/FileUploads/BulkOrderTemplate/remittance_order.xlsx">Download Template for Bulk Orders</a></p>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-9">
                            <div id="BulkUploadErrorMessage"></div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-12">
                            <table id="table-transaction" class="table table-hover table-condensed table-bordered table-split" data-striped="true" data-height="250" data-mobile-responsive="true">

                                @if (ViewData["SaleTransactionsData"] != null)
                                {
                                    List<RemittanceOrderData> transactionData = (List<RemittanceOrderData>)ViewData["SaleTransactionsData"];
                                    var totalCount = transactionData.Count;
                                    if (transactionData.Count > 0)
                                    {
                                        <!-- #region Remittance Transaction Type -->
                                        @*<thead>
                                                <tr>
                                                    <th style="min-width: 50px;">ID</th>
                                                    <th style="min-width: 50px;">Type</th>
                                                    <th style="min-width: 120px;">Get Currency</th>
                                                    <th style="min-width: 150px;">Get Amount</th>
                                                    <th style="min-width: 150px;">Get Type</th>
                                                    <th style="min-width: 130px;">Rate</th>
                                                    <th style="min-width: 150px;">Transaction Fees</th>
                                                    <th style="min-width: 120px;">Pay Currency</th>
                                                    <th style="min-width: 150px;">Pay Amount</th>
                                                    <th style="min-width: 150px;">Pay Type</th>
                                                    <th style="min-width: 180px;">Pay Cheque No.</th>
                                                    <th style="min-width: 180px;">Pay Bank Transfer No.</th>
                                                    <th style="min-width: 130px;">Deposit Account</th>
                                                    <th style="min-width: 100px;">Beneficiary</th>
                                                    <th style="min-width: 100px;">Action</th>
                                                </tr>
                                            </thead>*@
                                        <tbody class="d-inline-block">
                                            @foreach (RemittanceOrderData transaction in transactionData)
                                            {
                                                var style1 = "remittance-sales-order-tr-next";
                                                if (transaction.RowId == "1")
                                                { style1 = "remittance-sales-order-tr-first"; }
                                                <tr id="transaction-row-@transaction.RowId" class="@style1">
                                                    <td style="width:100%;background-color:lightgray">
                                                        <span style="font-weight:bold;color:black;font-size:15px;vertical-align: -webkit-baseline-middle;">#@transaction.transactionID</span>
                                                        @Html.Hidden("Transaction_ID_" + transaction.RowId, transaction.transactionID)
                                                        <input type="hidden" id="payRate_@transaction.RowId" name="payRate_@transaction.RowId" value="@transaction.transactionPayrate" />
                                                        <input type="hidden" id="getRate_@transaction.RowId" name="getRate_@transaction.RowId" value="@transaction.transactionGetrate" />
                                                        <input type="hidden" id="payDecimalFormat_@transaction.RowId" value="@transaction.payDecimalFormat" />
                                                        <input type="hidden" id="getDecimalFormat_@transaction.RowId" value="@transaction.getDecimalFormat" />
                                                        <input type="hidden" id="gettransactionFees_@transaction.RowId" name="gettransactionFees_@transaction.RowId" value="@transaction.gettransactionFees" />
                                                        <input type="hidden" id="paytransactionFees_@transaction.RowId" value="" />
                                                        <input type="hidden" id="finalRate_@transaction.RowId" value="" />
                                                        @Html.Hidden("Transaction_Type_" + transaction.RowId, "Remittance")
                                                        @if (Convert.ToInt32(transaction.RowId) > 1)
                                                        {
                                                            <div style="float:right;margin-left:5px">
                                                                <button class="btn btn-danger btn-sm" type="button" onclick="RemoveTransaction(@transaction.RowId)"><i aria-hidden="true" class="icon wb-close"></i> Remove</button>
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <div style="float:right;margin-left:5px">
                                                                <button class="btn btn-danger btn-sm" type="button" disabled><i aria-hidden="true" class="icon wb-close"></i> Remove</button>
                                                            </div>
                                                        }
                                                        <div style="float:right">
                                                            <a id="update-Beneficiary-btn-@transaction.RowId" class="btn btn-sm btn-primary" href="javascript:void(0)" onclick="UpdateBeneficiary(@transaction.RowId)" style="text-decoration: none;" data-toggle="tooltip" data-original-title="Beneficiary Account"><i class="icon wb-edit" aria-hidden="true"></i>Beneficiary Form</a>
                                                        </div>
                                                        <div class="modal fade modal-select" id="beneficiary-modal_@transaction.RowId" aria-hidden="false" aria-labelledby="modal-label"
                                                             role="dialog">
                                                            <div class="modal-dialog modal-lg">
                                                                <div class="modal-content form-horizontal">
                                                                    <div class="modal-header">
                                                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                                            <span aria-hidden="true">×</span>
                                                                        </button>
                                                                        <h4 class="modal-title" id="modal-label">Beneficiary Info</h4>
                                                                        @*<div class="form-group">
                                                                                <div class="col-sm-12">
                                                                                    <h4>Beneficiary Info</h4>
                                                                                </div>
                                                                            </div>*@

                                                                        <div class="form-group">
                                                                            @*<div class="col-sm-9">
                                                                                    <button id="add-new-transaction" type="button" class="btn btn-primary" onclick="AddNewTransaction()">Add New Beneficiary </button>
                                                                                </div>*@
                                                                            <div class="col-sm-9">@Html.ValidationMessage("Transaction")</div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            @Html.Label("Beneficiary Friendly Name:", new { @class = "col-sm-3 control-label" })
                                                                            <div class="col-sm-9">
                                                                                @Html.DropDownList("Transaction_BeneficiaryFriendly_" + transaction.RowId, (SelectList)ViewData["BeneficiaryDropdown"], new { @class = "form-control", @data_placeholder = "Search by Beneficiary Name or Company Name", @data_allow_clear = "true", @onchange = "GetBeneficiaryDetail(" + transaction.RowId + ")", @data_plugin = "select2" })
                                                                                @Html.ValidationMessage("Transaction_BeneficiaryFriendly_" + transaction.RowId)
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            @Html.Label("Beneficiary Type:", new { @class = "col-sm-3 control-label" })
                                                                            <div class="col-sm-9">
                                                                                <div class="radio-custom radio-primary radio-inline">
                                                                                    <input type="radio" id="individual_@transaction.RowId" name="Transaction_BeneficiaryType_@transaction.RowId" value="individual" @ViewData["IndividualRadio_" + transaction.RowId].ToString() onclick="individualSection(@transaction.RowId)" />
                                                                                    <label for="individual">Individual</label>
                                                                                </div>
                                                                                <div class="radio-custom radio-primary radio-inline">
                                                                                    <input type="radio" id="business_@transaction.RowId" name="Transaction_BeneficiaryType_@transaction.RowId" value="business" @ViewData["BusinessRadio_" + transaction.RowId].ToString() onclick="businessSection(@transaction.RowId)" />
                                                                                    <label for="business">Business</label>
                                                                                </div>
                                                                                @Html.ValidationMessage("Transaction_BeneficiaryType_" + transaction.RowId)
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            @Html.Label("Full Name:", new { @class = "col-sm-3 control-label" })
                                                                            <div class="col-sm-9">
                                                                                @Html.TextBox("Transaction_BeneficiaryName_" + transaction.RowId, transaction.BeneficiaryFullName, new { @class = "form-control" })
                                                                                @Html.ValidationMessage("Transaction_BeneficiaryName_" + transaction.RowId)
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            @Html.Label("Contact No:", new { @class = "col-sm-3 control-label" })
                                                                            <div class="col-sm-9">
                                                                                @Html.TextBox("Transaction_ContactNoMain_" + transaction.RowId, transaction.BeneficiaryContactNoMain, new { @class = "form-control" })
                                                                                @Html.ValidationMessage("Transaction_ContactNoMain_" + transaction.RowId)
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            @Html.Label("Address:", new { @class = "col-sm-3 control-label" })
                                                                            <div class="col-sm-9">
                                                                                @Html.TextBox("Transaction_AddressMain_" + transaction.RowId, transaction.BeneficiaryAddressMain, new { @class = "form-control" })
                                                                                @Html.ValidationMessage("Transaction_AddressMain_" + transaction.RowId)
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            @Html.Label("Bank Country:", new { @class = "col-sm-3 control-label" })
                                                                            <div class="col-sm-9">
                                                                                @Html.DropDownList("Transaction_BeneficiaryBankCountry_" + transaction.RowId, transaction.countriesDDL, new { @id = "Transaction_BeneficiaryBankCountry_" + transaction.RowId, @class = "form-control", @data_placeholder = "Search by Bank Country List", @data_allow_clear = "true", @data_plugin = "select2", @onchange = "otherField(1," + transaction.RowId + ")" })
                                                                                @Html.ValidationMessage("Transaction_BeneficiaryBankCountry_" + transaction.RowId)
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            @Html.Label("Other Bank Country:", new { @class = "col-sm-3 control-label" })
                                                                            <div class="col-sm-9">
                                                                                @Html.TextBox("Transaction_OtherBankCountry_" + transaction.RowId, transaction.BankCountryIfOthers, new { @id = "Transaction_OtherBankCountry_" + transaction.RowId, @class = "form-control", transaction.disabledBankCountryIfOthers, @maxlength = "255" })
                                                                                @Html.ValidationMessage("Transaction_OtherBankCountry_" + transaction.RowId)
                                                                            </div>
                                                                        </div>
                                                                        <div class="individualSection_@transaction.RowId">
                                                                            <div class="form-group">
                                                                                @Html.Label("Nationality:", new { @class = "col-sm-3 control-label" })
                                                                                <div class="col-sm-9">
                                                                                    @Html.DropDownList("Transaction_BeneficiaryNationality_" + transaction.RowId, transaction.nationalitiesDDL, new { @class = "form-control", @data_placeholder = "Search by Nationalities", @data_allow_clear = "true", @data_plugin = "select2", @onchange = "otherField(2," + transaction.RowId + ")" })
                                                                                    @Html.ValidationMessage("Transaction_BeneficiaryNationality_" + transaction.RowId)
                                                                                </div>
                                                                            </div>
                                                                            <div class="form-group">
                                                                                @Html.Label("Other Nationality:", new { @class = "col-sm-3 control-label" })
                                                                                <div class="col-sm-9">
                                                                                    @Html.TextBox("Transaction_OtherNationality_" + transaction.RowId, transaction.BeneficiaryNationalityIfOthers, new { @id = "Transaction_OtherNationality_" + transaction.RowId, @class = "form-control", transaction.disabledBeneficiaryNationalityIfOthers, @maxlength = "255" })
                                                                                    @Html.ValidationMessage("Transaction_OtherNationality_" + transaction.RowId)
                                                                                </div>
                                                                            </div>
                                                                        </div>

                                                                        <div class="businessSection_@transaction.RowId">
                                                                            <div class="form-group">
                                                                                @Html.Label("Company Registration No:", new { @class = "col-sm-3 control-label" })
                                                                                <div class="col-sm-9">
                                                                                    @Html.TextBox("Transaction_BeneficiaryCompanyRegistration_" + transaction.RowId, transaction.BeneficiaryCompanyRegistrationNo, new { @class = "form-control" })
                                                                                    @Html.ValidationMessage("Transaction_BeneficiaryCompanyRegistration_" + transaction.RowId)
                                                                                </div>
                                                                            </div>
                                                                            <div class="form-group">
                                                                                @Html.Label("Category of Business:", new { @class = "col-sm-3 control-label" })
                                                                                <div class="col-sm-9">
                                                                                    @Html.DropDownList("Transaction_BeneficiaryCategoryBusiness_" + transaction.RowId, transaction.categoryBusinessDDL, new { @class = "form-control", @data_placeholder = "Search by Business Category", @data_allow_clear = "true", @data_plugin = "select2", @onchange = "otherField(3," + transaction.RowId + ")" })
                                                                                    @Html.ValidationMessage("Transaction_BeneficiaryCategoryBusiness_" + transaction.RowId)
                                                                                </div>
                                                                            </div>
                                                                            <div class="form-group">
                                                                                @Html.Label("Other Category of Business:", new { @class = "col-sm-3 control-label" })
                                                                                <div class="col-sm-9">
                                                                                    @Html.TextBox("Transaction_OtherCategoryBusiness_" + transaction.RowId, transaction.BeneficiaryBusinessCategoryIfOthers, new { @id = "Transaction_OtherCategoryBusiness_" + transaction.RowId, @class = "form-control", transaction.disabledBeneficiaryBusinessCategoryIfOthers, @maxlength = "255" })
                                                                                    @Html.ValidationMessage("Transaction_OtherCategoryBusiness_" + transaction.RowId)
                                                                                </div>
                                                                            </div>
                                                                            <div class="form-group">
                                                                                @Html.Label("Company Contact No:", new { @class = "col-sm-3 control-label" })
                                                                                <div class="col-sm-9">
                                                                                    @Html.TextBox("Transaction_BeneficiaryCompanyContact_" + transaction.RowId, transaction.BeneficiaryCompanyContactNo, new { @class = "form-control" })
                                                                                    @Html.ValidationMessage("Transaction_BeneficiaryCompanyContact_" + transaction.RowId)
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            @Html.Label("Bank Name:", new { @class = "col-sm-3 control-label" })
                                                                            <div class="col-sm-9">
                                                                                @Html.TextBox("Transaction_BeneficiaryBankName_" + transaction.RowId, transaction.BeneficiaryBankName, new { @class = "form-control" })
                                                                                @Html.ValidationMessage("Transaction_BeneficiaryBankName_" + transaction.RowId)
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            @Html.Label("Bank Account No:", new { @class = "col-sm-3 control-label" })
                                                                            <div class="col-sm-9">
                                                                                @Html.TextBox("Transaction_BeneficiaryBankAccount_" + transaction.RowId, transaction.BeneficiaryBankAccountNo, new { @class = "form-control" })
                                                                                @Html.ValidationMessage("Transaction_BeneficiaryBankAccount_" + transaction.RowId)
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            @Html.Label("Bank Address:", new { @class = "col-sm-3 control-label" })
                                                                            <div class="col-sm-9">
                                                                                @Html.TextBox("Transaction_BeneficiaryBankAddress_" + transaction.RowId, transaction.BeneficiaryBankAddress, new { @class = "form-control" })
                                                                                @Html.ValidationMessage("Transaction_BeneficiaryBankAddress_" + transaction.RowId)
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            @Html.Label("Bank Code / SWIFT:", new { @class = "col-sm-3 control-label" })
                                                                            <div class="col-sm-9">
                                                                                @Html.TextBox("Transaction_BeneficiaryBankCode_" + transaction.RowId, transaction.BeneficiaryBankCode, new { @id = "Transaction_BeneficiaryBankCode_" + transaction.RowId, @class = "form-control" })
                                                                                @Html.ValidationMessage("Transaction_BeneficiaryBankCode_" + transaction.RowId)

                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            @Html.Label("BIC / EUROPE IBAN NO / AUSTRALIA BSB / USA FED WIRE / USA ABA / UK SORT:", new { @class = "col-sm-3 control-label" })
                                                                            <div class="col-sm-9">
                                                                                @Html.TextBox("Transaction_IBANEuropeBSBAustralia_" + transaction.RowId, transaction.IBANEuropeBSBAustralia, new { @class = "form-control" })
                                                                                @Html.ValidationMessage("Transaction_IBANEuropeBSBAustralia_" + transaction.RowId)

                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            @Html.Label("Payment Details / Instructions:", new { @class = "col-sm-3 control-label" })
                                                                            <div class="col-sm-9">
                                                                                @Html.TextArea("Transaction_BeneficiaryPaymentDetails_" + transaction.RowId, transaction.BeneficiaryPaymentDetails, new { @class = "form-control", @row = "4" })
                                                                                @Html.ValidationMessage("Transaction_BeneficiaryPaymentDetails_" + transaction.RowId)
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            @Html.Label("Purpose of Payment:", new { @class = "col-sm-3 control-label" })
                                                                            <div class="col-sm-9">
                                                                                @Html.DropDownList("Transaction_BeneficiaryPurposePayment_" + transaction.RowId, transaction.paymentListDDL, new { @class = "form-control", @data_placeholder = "Search by Purpose of Payment", @data_allow_clear = "true", @data_plugin = "select2", @onchange = "otherField(4," + transaction.RowId + ")" })
                                                                                @Html.ValidationMessage("Transaction_BeneficiaryPurposePayment_" + transaction.RowId)
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            @Html.Label("Other Purpose of Payment:", new { @class = "col-sm-3 control-label" })
                                                                            <div class="col-sm-9">
                                                                                @Html.TextBox("Transaction_OtherPurposePayment_" + transaction.RowId, transaction.PurposeOfPaymentIfOthers, new { @id = "Transaction_OtherPurposePayment_" + transaction.RowId, @class = "form-control", transaction.disabledPurposeOfPaymentIfOthers, @maxlength = "255" })
                                                                                @Html.ValidationMessage("Transaction_OtherPurposePayment_" + transaction.RowId)
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            @Html.Label("Source of Funds:", new { @class = "col-sm-3 control-label" })
                                                                            <div class="col-sm-9">
                                                                                @Html.DropDownList("Transaction_BeneficiarySourceFund_" + transaction.RowId, transaction.fundListDDL, new { @class = "form-control", @data_placeholder = "Search by Source of Fund", @data_allow_clear = "true", @data_plugin = "select2", @onchange = "otherField(5," + transaction.RowId + ")" })
                                                                                @Html.ValidationMessage("Transaction_BeneficiarySourceFund_" + transaction.RowId)
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            @Html.Label("Other Source of Funds:", new { @class = "col-sm-3 control-label" })
                                                                            <div class="col-sm-9">
                                                                                @Html.TextBox("Transaction_OtherSourceFund_" + transaction.RowId, transaction.SourceOfPaymentIfOthers, new { @id = "Transaction_OtherSourceFund_" + transaction.RowId, @class = "form-control", transaction.disabledSourceOfPaymentIfOthers, @maxlength = "255" })
                                                                                @Html.ValidationMessage("Transaction_OtherSourceFund_" + transaction.RowId)
                                                                            </div>
                                                                        </div>
                                                                        <div class="individualSection_@transaction.RowId">
                                                                            <div class="form-group">
                                                                                @Html.Label("Upload ID/Passport:", new { @class = "col-sm-3 control-label" })
                                                                                <div class="col-sm-9">
                                                                                    <div class="input-group input-group-file">
                                                                                        <input type="text" class="form-control" readonly>
                                                                                        <span class="input-group-btn">
                                                                                            <span class="btn btn-primary btn-file">
                                                                                                <i class="icon wb-upload" aria-hidden="true"></i>
                                                                                                <input id="support-document-IDuploader_@transaction.RowId" type="file" multiple onchange="uploadIDPassport(this,@transaction.RowId)">
                                                                                                @Html.Hidden("Transaction_BeneficiaryUploadIDPassport_" + transaction.RowId, transaction.BeneficiaryUploadIDCopy, new { @id = "Transaction_BeneficiaryUploadSuporting_" + transaction.RowId })
                                                                                            </span>
                                                                                        </span>
                                                                                    </div>
                                                                                    <span class="help-block"><i class="wb-info-circle"></i> Accepts .jpg, .png, .pdf format</span>
                                                                                    @Html.ValidationMessage("Transaction_BeneficiaryUploadIDPassport_" + transaction.RowId)
                                                                                    <div id="support-document-IDfiles_@transaction.RowId">
                                                                                        @if (!string.IsNullOrEmpty(transaction.BeneficiaryUploadIDCopy))
                                                                                        {
                                                                                            string[] files = transaction.BeneficiaryUploadIDCopy.Split(',');
                                                                                            foreach (string file in files)
                                                                                            {
                                                                                                <div class="margin-top-10 small">
                                                                                                    <a href="@Url.Content("~/FileUploads/Temp/" + file)" target="_blank">@file</a>
                                                                                                    <button type="button" class="btn btn-pure btn-xs btn-danger icon wb-close" onclick="RemoveIDPassport(this)"></button>
                                                                                                </div>
                                                                                            }
                                                                                        }
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            @Html.Label("Supporting Document Type:", new { @class = "col-sm-3 control-label" })
                                                                            <div class="col-sm-9">
                                                                                @Html.DropDownList("Transaction_BeneficiarySupportDocType_" + transaction.RowId, transaction.suppDocDDL, new { @class = "form-control", @data_placeholder = "Search by Supporting Document Type List", @data_allow_clear = "true", @data_plugin = "select2", @onchange = "otherField(6," + transaction.RowId + ")" })
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            @Html.Label("Other Supporting Document Type:", new { @class = "col-sm-3 control-label" })
                                                                            <div class="col-sm-9">
                                                                                @Html.TextBox("Transaction_OtherSupportDocType_" + transaction.RowId, transaction.UploadSupportingTypeIfOthers, new { @id = "Transaction_OtherSupportDocType_" + transaction.RowId, @class = "form-control", transaction.disabledUploadSupportingTypeIfOthers, @maxlength = "255" })
                                                                                @Html.ValidationMessage("Transaction_OtherSupportDocType_" + transaction.RowId)
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            @Html.Label("Upload Supporting:", new { @class = "col-sm-3 control-label" })
                                                                            <div class="col-sm-9">
                                                                                <div class="input-group input-group-file">
                                                                                    <input type="text" class="form-control" readonly>
                                                                                    <span class="input-group-btn">
                                                                                        <span class="btn btn-primary btn-file">
                                                                                            <i class="icon wb-upload" aria-hidden="true"></i>
                                                                                            <input id="support-document-uploader_@transaction.RowId" type="file" multiple onchange="uploadSupportingDocFile(this,@transaction.RowId)">
                                                                                            @Html.Hidden("Transaction_BeneficiaryUploadSuporting_" + transaction.RowId, transaction.BeneficiaryUploadSupportingFile, new { @id = "Transaction_BeneficiaryUploadSuporting_" + transaction.RowId })
                                                                                        </span>
                                                                                    </span>
                                                                                </div>
                                                                                <span class="help-block"><i class="wb-info-circle"></i> Accepts .jpg, .png, .pdf, .doc, .xls format</span>
                                                                                @Html.ValidationMessage("Transaction_BeneficiaryUploadSuporting_" + transaction.RowId)
                                                                                <div id="support-document-files_@transaction.RowId">
                                                                                    @if (!string.IsNullOrEmpty(transaction.BeneficiaryUploadSupportingFile))
                                                                                    {
                                                                                        string[] files = transaction.BeneficiaryUploadSupportingFile.Split(',');
                                                                                        foreach (string file in files)
                                                                                        {
                                                                                            <div class="margin-top-10 small">
                                                                                                <a href="@Url.Content("~/FileUploads/Temp/" + file)" target="_blank">@file</a>
                                                                                                <button type="button" class="btn btn-pure btn-xs btn-danger icon wb-close" onclick="RemoveBasisOfAuthorityFile(this)"></button>
                                                                                            </div>
                                                                                        }
                                                                                    }
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <a style="text-decoration:none" class="btn btn-success" onclick="btnBeneficiaryModelConfirm(@transaction.RowId)">Confirm</a>
                                                                    </div>
                                                                    <div class="modal-body"></div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        @Html.ValidationMessage("Transaction_BeneficiaryForm_" + transaction.RowId)
                                                    </td>
                                                    <td style="width:12%">
                                                        <span style="text-align:center;display: block;">Get Currency</span>
                                                        @Html.DropDownList("Transaction_GetCurrency_" + transaction.RowId, transaction.GetCurrencyDDL, new { @id = "Transaction_GetCurrency_" + transaction.RowId, @data_plugin = "select2", @class = "form-control", @onchange = "CurrencyChange(" + transaction.RowId + ",2)" })
                                                        @Html.ValidationMessage("Transaction_GetCurrency_" + transaction.RowId)
                                                    </td>
                                                    <td style="width:20%">
                                                        <span style="text-align:center;display: block;">Get Amount</span>
                                                        <div class="input-group">
                                                            @Html.TextBox("Transaction_GetAmount_" + transaction.RowId, transaction.GetAmount, new { @id = "Transaction_GetAmount_" + transaction.RowId, @class = "form-control", @oninput = "calculatePayGetAmount(" + transaction.RowId + ", 2, " + totalCount + ")", @onchange = "amountChange(" + transaction.RowId + ")" })
                                                        </div>
                                                        @Html.ValidationMessage("Transaction_GetAmount_" + transaction.RowId)
                                                    </td>
                                                    <td style="width:16%">
                                                        <span style="text-align:center;display: block;">Get Type</span>
                                                        @Html.DropDownList("Transaction_GetPaymentType_" + transaction.RowId, transaction.GetPaymentModeDDL, new { @class = "form-control", @data_plugin="select2" })
                                                        @Html.ValidationMessage("Transaction_GetPaymentType_" + transaction.RowId)
                                                    </td>

                                                    <td style="width:26%">
                                                        <span style="text-align:center;display: block;">Rate</span>
                                                        @Html.TextBox("Transaction_Rate_" + transaction.RowId, transaction.Rate, new
                                                        {
                                                            @id = "Transaction_Rate_" + transaction.RowId,
                                                            @class = "form-control"@*@onchange = "RateChange(" + transaction.RowId + ")"*@,
@onblur = "calculatePayGetAmount(" + transaction.RowId + ", 4, " + totalCount + ")"
})
                                                        @Html.ValidationMessage("Transaction_Rate_" + transaction.RowId)
                                                    </td>
                                                    <td style="width:26%">
                                                        <span style="text-align:center;display: block;">Fee</span>
                                                        <small id="transationFeesSelectedCurrency_@transaction.RowId" style="float: right;padding: 8px 5px;"></small>
                                                        @Html.TextBox("Transaction_Fee_" + transaction.RowId, transaction.transactionFees, new { @id = "Transaction_Fee_" + transaction.RowId, @class = "form-control", @style = "width:70%", @onblur = "calculatePayGetAmount(" + transaction.RowId + ", 3, " + totalCount + ")" })
                                                        @Html.ValidationMessage("Transaction_Fee_" + transaction.RowId)
                                                    </td>
                                                    <td style="width:12%">
                                                        @if (Convert.ToInt32(transaction.RowId) > 1)
                                                        {
                                                            <span style="text-align:center;display: block;">Pay Currency</span>
                                                            @Html.DropDownList("Transaction_PayCurrency_" + transaction.RowId, transaction.PayCurrencyDDL, new { @id = "Transaction_PayCurrency_" + transaction.RowId, @data_plugin = "select2", @class = "form-control", @onchange = "CurrencyChange(" + transaction.RowId + ", 1, " + totalCount + ")", @disabled = "disabled" })
                                                            @Html.Hidden("Transaction_PayCurrency_" + transaction.RowId, transaction.PayCurrencyDDL.SelectedValue, new { @id = "Transaction_PayCurrencys_" + transaction.RowId })
                                                        }
                                                        else
                                                        {
                                                            <span style="text-align:center;display: block;">Pay Currency</span>
                                                            @Html.DropDownList("Transaction_PayCurrency_" + transaction.RowId, transaction.PayCurrencyDDL, new { @id = "Transaction_PayCurrency_" + transaction.RowId, @data_plugin = "select2", @class = "form-control", @onchange = "CurrencyChange(" + transaction.RowId + ", 1, " + totalCount + ")" })
                                                        }
                                                        @Html.ValidationMessage("Transaction_PayCurrency_" + transaction.RowId)
                                                    </td>
                                                    <td style="width:20%">
                                                        <span style="text-align:center;display: block;">Pay Amount</span>
                                                        <div class="input-group">
                                                            @Html.TextBox("Transaction_PayAmount_" + transaction.RowId, transaction.PayAmount, new { @id = "Transaction_PayAmount_" + transaction.RowId, @class = "form-control", @oninput = "calculatePayGetAmount(" + transaction.RowId + ", 1," + totalCount + ")", @onchange = "amountChange(" + transaction.RowId + ")" })
                                                        </div>
                                                        @Html.ValidationMessage("Transaction_PayAmount_" + transaction.RowId)
                                                    </td>

                                                    <td style="width:16%">
                                                        <span style="text-align:center;display: block;">Pay Type</span>
                                                        @Html.DropDownList("Transaction_PayPaymentType_" + transaction.RowId, transaction.PayPaymentModeDDL, new { @id = "Transaction_PayPaymentType_" + transaction.RowId, @class = "form-control", @onchange = "PaymentModeChange(" + transaction.RowId + ")", @data_plugin="select2" })
                                                        @Html.ValidationMessage("Transaction_PayPaymentType_" + transaction.RowId)
                                                    </td>
                                                    <td style="width:20%">
                                                        @if (transaction.DisabledChequeNo == "disabled")
                                                        {
                                                            <span style="text-align:center;display: block;">Cheque No</span>
                                                            <div class="col-sm-10" style="padding-left: 0;padding-right: 5px; width:80%;">@Html.TextBox("Transaction_ChequeNo_" + transaction.RowId, transaction.ChequeNo, new { @class = "form-control", @disabled = "disabled" })</div>
                                                            <div><a id="update-cheque-btn-@transaction.RowId" class="btn btn-sm btn-icon btn-round btn-primary" href="javascript:void(0)" style="text-decoration: none;pointer-events: none;" data-toggle="tooltip" data-original-title="Add Cheque"><i class="icon wb-edit" aria-hidden="true"></i></a></div>
                                                        }
                                                        else
                                                        {
                                                            <span style="text-align:center;display: block;">Cheque No</span>
                                                            <div class="col-sm-10" style="padding-left: 0;padding-right: 5px; width:80%;">@Html.TextBox("Transaction_ChequeNo_" + transaction.RowId, transaction.ChequeNo, new { @class = "form-control", @readonly = "readonly" })</div>
                                                            <div><a id="update-cheque-btn-@transaction.RowId" class="btn btn-sm btn-icon btn-round btn-primary" href="javascript:void(0)" onclick="UpdateCheque(@transaction.RowId)" style="text-decoration: none;" data-toggle="tooltip" data-original-title="Add Cheque"><i class="icon wb-edit" aria-hidden="true"></i></a></div>
                                                        }
                                                        @Html.ValidationMessage("Transaction_ChequeNo_" + transaction.RowId)
                                                    </td>
                                                    <td style="width:20%">
                                                        @if (transaction.DisabledBankTransferNo == "disabled")
                                                        {
                                                            <span style="text-align:center;display: block;">Bank Transfer No</span>
                                                            <div class="col-sm-10" style="padding-left: 0;padding-right: 5px; width:80%;">@Html.TextBox("Transaction_BankTransferNo_" + transaction.RowId, null, new { @class = "form-control", @disabled = "disabled" })</div>
                                                            <div><a id="update-bank-transfer-btn-@transaction.RowId" class="btn btn-sm btn-icon btn-round btn-primary" href="javascript:void(0)" style="text-decoration: none;pointer-events: none;" data-toggle="tooltip" data-original-title="Add Bank Transfer"><i class="icon wb-edit" aria-hidden="true"></i></a></div>
                                                        }
                                                        else
                                                        {
                                                            <span style="text-align:center;display: block;">Bank Transfer No</span>
                                                            <div class="col-sm-10" style="padding-left: 0;padding-right: 5px; width:80%;">@Html.TextBox("Transaction_BankTransferNo_" + transaction.RowId, transaction.BankTransferNo, new { @class = "form-control", @readonly = "readonly" })</div>
                                                            <div><a id="update-bank-transfer-btn-@transaction.RowId" class="btn btn-sm btn-icon btn-round btn-primary" href="javascript:void(0)" onclick="UpdateBankTransfer(@transaction.RowId)" style="text-decoration: none;" data-toggle="tooltip" data-original-title="Add Bank Transfer"><i class="icon wb-edit" aria-hidden="true"></i></a></div>
                                                        }
                                                        @Html.ValidationMessage("Transaction_BankTransferNo_" + transaction.RowId)
                                                    </td>
                                                    <td style="width:12%">
                                                        @if (transaction.DisabledDepositAccount == "disabled")
                                                        {
                                                            <span style="text-align:center;display: block;">Deposit Account</span>
                                                            @Html.DropDownList("Transaction_DepositAccount_" + transaction.RowId, transaction.DepositAccountDDL, new { @class = "form-control", disabled = "disabled", @data_plugin = "select2" })
                                                            @Html.ValidationMessage("Transaction_DepositAccount_" + transaction.RowId)
                                                        }
                                                        else
                                                        {
                                                            <span style="text-align:center;display: block;">Deposit Account</span>
                                                            @Html.DropDownList("Transaction_DepositAccount_" + transaction.RowId, transaction.DepositAccountDDL, new { @class = "form-control", @data_plugin = "select2" })
                                                            @Html.ValidationMessage("Transaction_DepositAccount_" + transaction.RowId)
                                                        }

                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                        <tfoot>
                                            <tr style="padding-top: 20px;">
                                                @*<th colspan="2" style="text-align: right;">Total (Get)</th>
                                                    <th>
                                                        <div id="total-amount-local">$@ViewData["TotalForeign"].ToString()</div>
                                                    </th>*@
                                                <th colspan="8" style="text-align: right;width:15%;font-weight:bold;font-size:15px">Total (Pay)</th>
                                                <th style="width:85%;font-weight:bold;font-size:15px">
                                                    <div id="total-pay"><span id="paySymbol">@ViewData["PaySymbol"].ToString()</span><span id="total-amount-foreign">@ViewData["TotalLocal"].ToString()</span></div>
                                                </th>
                                                @*<th colspan="6"></th>*@
                                            </tr>
                                        </tfoot>
                                        <!-- #endregion -->

                                    }
                                }
                            </table>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-12">
                            <button type="button" class="btn btn-primary margin-top-10" id="disable_button" onclick="disableButton(this, event)">Save</button>
                            <a href="@Url.Action("Create")" class="btn btn-default btn-outline margin-top-10">Reset</a>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="cheque-modal" aria-hidden="false" aria-labelledby="modal-label"
     role="dialog" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content form-horizontal">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
                <h4 class="modal-title" id="modal-label">New Cheque No</h4>
            </div>
            <div class="modal-body"></div>
        </div>
    </div>
</div>

<div class="modal fade" id="bank-transfer-modal" aria-hidden="false" aria-labelledby="modal-label"
     role="dialog" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content form-horizontal">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
                <h4 class="modal-title" id="modal-label">New Bank Transfer</h4>
            </div>
            <div class="modal-body"></div>
        </div>
    </div>
</div>

<div class="modal fade" id="cheque1No-modal" aria-hidden="false" aria-labelledby="modal-label"
     role="dialog" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content form-horizontal">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
                <h4 class="modal-title" id="modal-label">New Cheque 1</h4>
            </div>
            <div class="modal-body">
                <div class="form-group row">
                    <label for="staticCheque" class="col-sm-2 col-form-label">Cheque 1 No.:</label>
                    <div class="col-sm-10">
                        @Html.TextBox("LocalCheque1NoModel", null, new { @class = "form-control" })
                        <span class="field-validation-error" id="LocalCheque1NoErrorMessage"></span>
                    </div>
                    <div style="float:right; padding-top: 20px; padding-right:15px;">
                        <button class="btn btn-primary" onclick="btnLocalCheque1NoConfirm()">Confirm</button>
                        <button class="btn btn-danger" onclick="btnLocalCheque1NoCancel()">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="cheque2No-modal" aria-hidden="false" aria-labelledby="modal-label"
     role="dialog" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content form-horizontal">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
                <h4 class="modal-title" id="modal-label">New Cheque 2</h4>
            </div>
            <div class="modal-body">
                <div class="form-group row">
                    <label for="staticCheque" class="col-sm-2 col-form-label">Cheque 2 No.:</label>
                    <div class="col-sm-10">
                        @Html.TextBox("LocalCheque2NoModel", null, new { @class = "form-control" })
                        <span class="field-validation-error" id="LocalCheque2NoErrorMessage"></span>
                    </div>
                    <div style="float:right; padding-top: 20px; padding-right:15px;">
                        <button class="btn btn-primary" onclick="btnLocalCheque2NoConfirm()">Confirm</button>
                        <button class="btn btn-danger" onclick="btnLocalCheque2NoCancel()">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="cheque3No-modal" aria-hidden="false" aria-labelledby="modal-label"
     role="dialog" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content form-horizontal">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
                <h4 class="modal-title" id="modal-label">New Cheque 3</h4>
            </div>
            <div class="modal-body">
                <div class="form-group row">
                    <label for="staticCheque" class="col-sm-2 col-form-label">Cheque 3 No.:</label>
                    <div class="col-sm-10">
                        @Html.TextBox("LocalCheque3NoModel", null, new { @class = "form-control" })
                        <span class="field-validation-error" id="LocalCheque3NoErrorMessage"></span>
                    </div>
                    <div style="float:right; padding-top: 20px; padding-right:15px;">
                        <button class="btn btn-primary" onclick="btnLocalCheque3NoConfirm()">Confirm</button>
                        <button class="btn btn-danger" onclick="btnLocalCheque3NoCancel()">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="local-bank-transfer-modal" aria-hidden="false" aria-labelledby="modal-label"
     role="dialog" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content form-horizontal">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
                <h4 class="modal-title" id="modal-label">New Local Bank Transfer No.</h4>
            </div>
            <div class="modal-body">
                <div class="form-group row">
                    <label for="staticCheque" class="col-sm-2 col-form-label">Local Bank Transfer No.:</label>
                    <div class="col-sm-10">
                        @Html.TextBox("LocalBankTransferNoModel", null, new { @class = "form-control" })
                        <span class="field-validation-error" id="LocalBankTransferNoErrorMessage"></span>
                    </div>
                    <div style="float:right; padding-top: 20px; padding-right:15px;">
                        <button class="btn btn-primary" onclick="btnLocalBankTransferNoConfirm()">Confirm</button>
                        <button class="btn btn-danger" onclick="btnLocalBankTransferNoCancel()">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<link rel="stylesheet" href="@Url.Content("~/Content/vendor/bootstrap-datepicker/css/bootstrap-datepicker.css")">
<script src="@Url.Content("~/Content/vendor/bootstrap-datepicker/js/bootstrap-datepicker.js")"></script>

<script>
    var transactionType = "";

    $(document).ready(function () {
        RegisterEnterKey();

        $("#sales_CollectionDate").datepicker({
            autoclose: true,
            format: "dd/mm/yyyy DD"
        });

        var transaction = $("input[name='sales.TransactionType']:checked");
        if (transaction.length > 0) {
            transactionType = transaction[0].id;
        }

        TransactionTypeChange(transactionType);

        var transactionCount = $("#table-transaction > tbody > tr").length;

        if (transactionCount > 0) {
            if (transactionType == "Encashment" || transactionType == "Swap" || transactionType == "CrossCurrency") {
                $(".currency-dropdown").each(function () {
                    var id = this.id.split("_")[2];
                    FilterCurrency(id);
                });
            }

            HighlightPaired();

            for (var i = 1; i <= transactionCount; i++) {
            var getYouPayValue = $("#Transaction_PayCurrency_" + i + " :selected").val();

            $('#Transaction_GetCurrency_' + i + ' option').prop('disabled', false);
            $('#Transaction_GetCurrency_' + i + ' option[value="' + getYouPayValue + '"]').prop('disabled', true);
            var getYouGetValue = $('#Transaction_GetCurrency_' + i + ' option:not([disabled]):first').val();

            $('#Transaction_GetCurrency_' + i).select2();

            var getYouGetValue = $("#Transaction_GetCurrency_" + i + " :selected").val();

		    //$('#Transaction_PayCurrency_'+i +' option').prop('disabled', false);
            $('#Transaction_PayCurrency_' + i + ' option[value="' + getYouGetValue + '"]').prop('disabled', true);
            var getYouPayValue = $('#Transaction_PayCurrency_' + i + ' option:not([disabled]):first').val();

            $('#Transaction_PayCurrency_' + i).select2();
            var getdata = $('#Transaction_PayCurrency_' + i).select2('data');
            $("#transationFeesSelectedCurrency_" + i).text(getdata[0].text);
			//$("#transationFeesSelectedCurrency_" + i).text("SGD");
            $("#Transaction_BeneficiaryBankCountry_" +i).find("option:contains('Others')").appendTo($("#Transaction_BeneficiaryBankCountry_" +i));
            loadOtherField(i);
            }
                            $('#Transaction_PayCurrency_1' + ' option').prop('disabled', false);
                            for (var i = 1; i <= transactionCount; i++) {
                                var getYouGetValue = $("#Transaction_GetCurrency_" + i + " :selected").val();

                                $('#Transaction_PayCurrency_1' + ' option[value="' + getYouGetValue + '"]').prop('disabled', true);
                            }
                            $('#Transaction_PayCurrency_1').select2();
        }

        //LocalPaymentModeClick("cash", "payment-mode-cash");
        //LocalPaymentModeClick("cheque-1", "payment-mode-cheque-1");
        //LocalPaymentModeClick("cheque-2", "payment-mode-cheque-2");
        //LocalPaymentModeClick("cheque-3", "payment-mode-cheque-3");
        //LocalPaymentModeClick("bank-transfer", "payment-mode-transfer");
    })

    function RegisterEnterKey() {
        $('#table-transaction tbody input').on('keyup keypress', function (e) {
            var keyCode = e.keyCode || e.which;
            if (keyCode === 13) {
                e.preventDefault();

                $(this).blur();

                setTimeout(function () {
                    $("form").submit();
                }, 700);
            }
        });
    }

    function GetCustomerDetail() {
        var cid = $("#sales_CustomerParticularId").val();
        var transactionCount = $("#table-transaction > tbody > tr").length;
        if (cid != null && cid != "") {
            var url = "@Url.Action("GetCustomerDetail")"

            $.ajax({
                type: "POST",
                cache: false,
                url: url,
                data: { cid: cid },
                success: function (data) {
                    data = JSON.parse(data);

                    if (data.Result) {
                        $("#CustomerContact").val(data.CustomerContact);
                        $("#CustomerAddress").val(data.CustomerAddress);
                        $("#CustomerShippingAddress").val(data.CustomerShippingAddress);
                        $("#sales_CustomerRemarks").val(data.CustomerRemarks);
                        if (transactionCount > 0) {
                            CurrencyChange2(1, 1, 0);
                        }

                        //Recalculate Rate
                    }
                    else {
                        alertify.alert(data.ErrorMessage);
                    }
                },
                error: function (e) {
                    console.log(e.status + " - " + e.statusText);
                    alertify.alert("An error occured while retrieving customer details!");
                }
            });
        }
        else {
            $("#CustomerContact").val("");
            $("#CustomerAddress").val("");
            $("#sales_CustomerRemarks").val("");
        }
    }
    function CurrencyChange2(rowId, type, totalCount) {
        var url = "@Url.Action("GetAmount2")";
        var payID = $("#Transaction_PayCurrency_1").val();
        var getID = $("#Transaction_GetCurrency_" + rowId).val();
        var amount = $("#Transaction_PayAmount_" + rowId).val();
        var form = $("#table-transaction input, #table-transaction select").serialize();
            $.ajax({
                type: "POST",
                cache: false,
                url: url + "?type=" + type,
                data: form,
                beforeSend: function () {
                    $(".preload").show();
                },
                success: function (data) {
                    //data = JSON.parse(data);
                    if (data.length > 0) {

                    for (var i = 0; i < data.length; i++) {

                            var rowId = data[i].RowID;
                            $("#payRate_" + rowId).val(data[i].PayRate);
                            $("#getRate_" + rowId).val(data[i].GetRate);
                            $("#payDecimalFormat_" + rowId).val(data[i].PayDecimalformat);
                            $("#getDecimalFormat_" + rowId).val(data[i].GetDecimalformat);
                            $("#gettransactionFees_" + rowId).val(data[i].GetTransactionFees);
                            $("#paytransactionFees_" + rowId).val(data[i].PayTransactionFees);
                            //$("#finalRate_" + rowId).val(data.FinalRate);

                        if (type === 1) {
                            $("#Transaction_Rate_" + rowId).val(data[i].Rate);
                            $("#Transaction_Fee_" + rowId).val(data[i].Fee);
                            $("#Transaction_GetAmount_" + rowId).val(data[i].GetAmount);
                            $("#Transaction_PayAmount_" + rowId).val(data[i].PayAmount);
                            var getYouPayValue = data[i].PayProductID;
                            $('#Transaction_GetCurrency_' + rowId + ' option').prop('disabled', false);
                            $('#Transaction_GetCurrency_' + rowId + ' option[value="' + getYouPayValue + '"]').prop('disabled', true);
                            var getYouGetValue = data[i].GetProductID;
                            console.log(getYouGetValue);
                            $('#Transaction_GetCurrency_' + rowId).select2();
                            changePayCurrency(rowId);
                        setTimeout(function () {
                            amountChange(rowId);
                            var getdata = $('#Transaction_PayCurrency_' + rowId).select2('data')
							$("#transationFeesSelectedCurrency_" + rowId).text(getdata[0].text);
							//$("#transationFeesSelectedCurrency_" + rowId).text("SGD");
                        }, 1200);
                        }
                        else if (type === 2) {
                            amount = $("#Transaction_PayAmount_" + rowId).val();
                            var getYouGetValue = data[i].GetProductID;
		                    $('#Transaction_PayCurrency_' + rowId +' option').prop('disabled', false);
                            $('#Transaction_PayCurrency_' + rowId + ' option[value="' + getYouGetValue + '"]').prop('disabled', true);
                            var getYouPayValue = $('#Transaction_PayCurrency_' + rowId + ' option:not([disabled]):first').val();
                            $("#Transaction_Rate_" + rowId).val(data[i].Rate);
                            $("#Transaction_Fee_" + rowId).val(data[i].Fee);
                            var rate = $("#Transaction_Rate_" + rowId).val();
                            var fee = $("#Transaction_Fee_" + rowId).val();
                            calculateAmount(1, data[i].PayRate, data[i].GetRate, fee, rowId,data[i].PayDecimalformat, data[i].GetDecimalformat, rate);
                            setTimeout(function () {
                                amountChange(rowId);
                                var getdata = $('#Transaction_PayCurrency_' + rowId).select2('data')
								$("#transationFeesSelectedCurrency_" + rowId).text(getdata[0].text);
								//$("#transationFeesSelectedCurrency_" + rowId).text("SGD");
                            }, 1200);
                            //changeGetCurrency(rowId);
                        }

                        else {
                            alertify.alert(data.ErrorMessage);
                        }
                    }
                        if (type === 2) {
                            $('#Transaction_PayCurrency_' + data[0].RowID + ' option').prop('disabled', false);
                            for (var i = 0; i < data.length; i++) {
                                var getYouGetValue = data[i].GetProductID;
                                console.log("productID:" + getYouGetValue);
                                $('#Transaction_PayCurrency_' + data[0].RowID + ' option[value="' + getYouGetValue + '"]').prop('disabled', true);
                            }
                            $('#Transaction_PayCurrency_' + data[0].RowID).select2();
                        }



                    }
                    else {
                        alertify.alert(data.ErrorMessage);
                    }
                    //To enable back the table all input field after finished update currency type.
                    //$("#table-transaction :input").prop("disabled", false);

                    $(".preload").hide();
                },
                error: function (e) {
                    console.log(e.status + " - " + e.statusText);
                    alertify.alert("An error occured while updating transaction details!");
                    $(".preload").hide();
                }
            });
    }
	function TransactionTypeClick(type)
	{
        var transactionCount = $("#table-transaction > tbody > tr").length;
        if (transactionType != "" && transactionCount > 0) {
            if (type != transactionType) {
                alertify.confirm("<div style='margin-top: -15px;text-align: center;'>Are you sure you want to make changes to Transaction Type?<br/>This will remove all the transactions added.</div>", function (e) {
                    if (e) {
                        transactionType = type;
                        $("#table-transaction").html("");
                        TransactionTypeChange(type);
                    }
                    else {
                        $("#" + type).iCheck("uncheck");
                        $("#" + transactionType).iCheck("check");
                    }
                });
            }
        }
        else {
            transactionType = type;
            TransactionTypeChange(type);
        }
    }

	function TransactionTypeChange(type)
	{
		if (type == "Buy" || type == "Sell")
		{

			//check if is in sell mode
			//var transactionType = $(".radio-transaction-type:checked").val();
			//console.log("transactionType: " + transactionType);

			if (type == "Sell") {
				//Update the 3 field css
				//show the button div
				if ($("#cheque-1")[0].checked)
				{
					$("#update-chequeNo1-input-div").css('width', '90%');
					$("#sales_Cheque1No").attr('readonly', true);
					$("#sales_Cheque1No").removeAttr("disabled");
					$("#update-chequeNo1-input-div").css('padding-left', '0px');
					$("#update-chequeNo1-input-div").css('padding-right', '5px');
					$("#update-chequeNo1-div").show();
				}
				else
				{
					$("#update-chequeNo1-input-div").css('width', '100%');
					$("#sales_Cheque1No").attr("disabled", "disabled");
					$("#update-chequeNo1-div").hide();
					$("#update-chequeNo1-input-div").css('padding-left', '0px');
					$("#update-chequeNo1-input-div").css('padding-right', '0px');
				}

				if ($("#cheque-2")[0].checked)
				{
					$("#update-chequeNo2-input-div").css('width', '90%');
					$("#sales_Cheque2No").attr('readonly', true);
					$("#sales_Cheque2No").removeAttr("disabled");
					$("#update-chequeNo2-input-div").css('padding-left', '0px');
					$("#update-chequeNo2-input-div").css('padding-right', '5px');
					$("#update-chequeNo2-div").show();
				}
				else
				{
					$("#update-chequeNo2-input-div").css('width', '100%');
					$("#sales_Cheque2No").attr("disabled", "disabled");
					$("#update-chequeNo2-input-div").css('padding-left', '0px');
					$("#update-chequeNo2-input-div").css('padding-right', '0px');
					$("#update-chequeNo2-div").hide();
				}

				if ($("#cheque-3")[0].checked)
				{
					$("#update-chequeNo3-input-div").css('width', '90%');
					$("#sales_Cheque3No").attr('readonly', true);
					$("#sales_Cheque3No").removeAttr("disabled");
					$("#update-chequeNo3-input-div").css('padding-left', '0px');
					$("#update-chequeNo3-input-div").css('padding-right', '5px');
					$("#update-chequeNo3-div").show();
				}
				else
				{
					$("#update-chequeNo3-input-div").css('width', '100%');
					$("#sales_Cheque3No").attr("disabled", "disabled");
					$("#update-chequeNo3-input-div").css('padding-left', '0px');
					$("#update-chequeNo3-input-div").css('padding-right', '0px');
					$("#update-chequeNo3-div").hide();
				}

				if ($("#bank-transfer")[0].checked)
				{
					$("#update-local-bank-transfer-input-div").css('width', '90%');
					$("#sales_BankTransferNo").attr('readonly', true);
					$("#sales_BankTransferNo").removeAttr("disabled");
					$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
					$("#update-local-bank-transfer-input-div").css('padding-right', '5px');
					$("#update-local-bank-transfer-div").show();
				}
				else
				{
					$("#update-local-bank-transfer-input-div").css('width', '100%');
					$("#sales_BankTransferNo").attr("disabled", "disabled");
					$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
					$("#update-local-bank-transfer-input-div").css('padding-right', '0px');
					$("#update-local-bank-transfer-div").hide();
				}

			}
			else if(transactionType == "Buy")
			{
				//Update the 3 field css
				//show the button div
				//var checked = $("#" + id);
				$("#update-chequeNo1-input-div").css('padding-left', '0px');
				$("#update-chequeNo1-input-div").css('padding-right', '0px');
				$("#update-chequeNo2-input-div").css('padding-left', '0px');
				$("#update-chequeNo2-input-div").css('padding-right', '0px');
				$("#update-chequeNo3-input-div").css('padding-left', '0px');
				$("#update-chequeNo3-input-div").css('padding-right', '0px');
				$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
				$("#update-local-bank-transfer-input-div").css('padding-right', '0px');

				if ($("#cheque-1")[0].checked)
				{
					$("#update-chequeNo1-input-div").css('width', '100%');
					$("#sales_Cheque1No").attr('readonly', false);
					$("#sales_Cheque1No").removeAttr("disabled");
					$("#update-chequeNo1-div").hide();
				}
				else
				{
					$("#update-chequeNo1-input-div").css('width', '100%');
					$("#sales_Cheque1No").attr("disabled", "disabled");
					$("#update-chequeNo1-div").hide();
				}

				if ($("#cheque-2")[0].checked)
				{
					$("#update-chequeNo2-input-div").css('width', '100%');
					$("#sales_Cheque2No").attr('readonly', false);
					$("#sales_Cheque2No").removeAttr("disabled");
					$("#update-chequeNo2-div").hide();
				}
				else
				{
					$("#update-chequeNo2-input-div").css('width', '100%');
					$("#sales_Cheque2No").attr("disabled", "disabled");
					$("#update-chequeNo2-div").hide();
				}

				if ($("#cheque-3")[0].checked)
				{
					$("#update-chequeNo3-input-div").css('width', '100%');
					$("#sales_Cheque3No").attr('readonly', false);
					$("#sales_Cheque3No").removeAttr("disabled");
					$("#update-chequeNo3-div").hide();
				}
				else
				{
					$("#update-chequeNo3-input-div").css('width', '100%');
					$("#sales_Cheque3No").attr("disabled", "disabled");
					$("#update-chequeNo3-div").hide();
				}

				if ($("#bank-transfer")[0].checked)
				{
					$("#update-local-bank-transfer-input-div").css('width', '100%');
					$("#sales_BankTransferNo").attr('readonly', false);
					$("#sales_BankTransferNo").removeAttr("disabled");
					$("#update-local-bank-transfer-div").hide();
				}
				else
				{
					$("#update-local-bank-transfer-input-div").css('width', '100%');
					$("#sales_BankTransferNo").attr("disabled", "disabled");
					$("#update-local-bank-transfer-div").hide();
				}
			}

            $("#local-payment-mode").fadeIn();
        }
		else
		{
            $("#local-payment-mode").fadeOut();
        }

        //SetLocalPaymentModeAmount("");
    }

    function AddNewTransaction() {

        var errorMsg = "";
        var cid = $("#sales_CustomerParticularId").val();
        var paycurrency = "";
        if ($("#Transaction_PayCurrency_1").val() === "") {
        }
        else {
            paycurrency = $("#Transaction_PayCurrency_1").val();
        }
        var type = "";

        if (cid == "") {
            errorMsg += "Please select a Customer!<br/>";
        }

            type = "Remittance";

        if (errorMsg == "") {
			var rowId = 1;
			var OriginalID = 1;
            var transactionCount = $("#table-transaction > tbody > tr").length;
            if (transactionCount > 0) {
                var id = $("#table-transaction > tbody > tr:last")[0].id.split("-");
				rowId = parseInt(id[2]) + 1;
				OriginalID = id[2];
            }
            $("#add-new-transaction").attr("disabled", "disabled");
            var url = "@Url.Action("AddNewTransaction")";
            $.ajax({
                type: "POST",
                cache: false,
                url: url,
                data: { cid: cid, type: type, rowId: rowId, paycurrency: paycurrency },
                success: function (data) {
                    data = JSON.parse(data);

                    if (data.Result) {
                        if (rowId == 1) {
							$("#table-transaction").append(data.View);

                        }
                        else {
                            $("#table-transaction > tbody").append(data.View);
						}

						$('select').select2();
                        individualSection(rowId);
                        //if (transaction[0].value == "Encashment" || transaction[0].value == "Swap" || transaction[0].value == "Cross Currency") {
                        //    HighlightPaired();
                        //    FilterCurrency(rowId);
                        //}
                        RegisterEnterKey();

                        if (rowId === 1) {
                            var getYouPayValue = $("#Transaction_PayCurrency_" + rowId + " :selected").val();
                            $('#Transaction_GetCurrency_' + rowId + ' option').prop('disabled', false);
                            $('#Transaction_GetCurrency_' + rowId + ' option[value="' + getYouPayValue + '"]').prop('disabled', true);
                            var getYouGetValue = $('#Transaction_GetCurrency_' + rowId + ' option:not([disabled]):first').val();
                            $('#Transaction_GetCurrency_' + rowId).select2().val(getYouGetValue).trigger('change.select2');
                        }
                        else {
                            $("#Transaction_PayCurrency_" + rowId).val($("#Transaction_PayCurrency_" + 1 + " :selected").val());
                            var getYouPayValue = $("#Transaction_PayCurrency_" + rowId + " :selected").val();
		                    $('#Transaction_GetCurrency_'+rowId +' option').prop('disabled', false);
                            $('#Transaction_GetCurrency_' + rowId + ' option[value="' + getYouPayValue + '"]').prop('disabled', true);
                            var getYouGetValue = $('#Transaction_GetCurrency_' + rowId + ' option:not([disabled]):first').val();
                            $('#Transaction_GetCurrency_' + rowId).select2().val(getYouGetValue).trigger('change.select2');
                        }
                        $('#Transaction_PayCurrency_' + 1).select2();
                        var getdata = $('#Transaction_PayCurrency_' + 1).select2('data')
						$("#transationFeesSelectedCurrency_" + rowId).text(getdata[0].text);
						//$("#transationFeesSelectedCurrency_" + rowId).text("SGD");
                        $("#beneficiary-modal_" + OriginalID).modal('hide');
                        $("#Transaction_BeneficiaryBankCountry_" +rowId).find("option:contains('Others')").appendTo($("#Transaction_BeneficiaryBankCountry_" +rowId));
                    }
                    else {
                        alertify.alert(data.ErrorMessage);
                    }

                    $("#add-new-transaction").removeAttr("disabled");
                },
                error: function (e) {
                    console.log(e.status + " - " + e.statusText);
                    alertify.alert("An error occured while adding transaction!");
                    $("#add-new-transaction").removeAttr("disabled");
                }
            });
        }
        else {
            alertify.alert(errorMsg);
        }
    }

    function HighlightPaired() {
        var pairedCls = [];
        var row = $("#table-transaction > tbody > tr[class^=paired-row]");
        row.each(function () {
            if ($.inArray(this.classList[0], pairedCls) == -1) {
                pairedCls.push(this.classList[0]);
            }
        });

        var highlightCls = "bg-grey-200";
        for (var i = 0; i < pairedCls.length; i++) {
            if (i % 2 == 0) {
                if (!$("tr." + pairedCls[i]).hasClass(highlightCls)) {
                    $("tr." + pairedCls[i]).addClass(highlightCls);
                }
            }
            else {
                if ($("tr." + pairedCls[i]).hasClass(highlightCls)) {
                    $("tr." + pairedCls[i]).removeClass(highlightCls);
                }
            }
        }
    }

    function FilterCurrency(currentId) {
        var transaction = $("input[name='sales.TransactionType']:checked");
        if (transaction[0].value != "Swap") {
            var pairedId = 0;
            if (parseInt(currentId) % 2 == 0) {
                pairedId = parseInt(currentId) - 1;
            }
            else {
                pairedId = parseInt(currentId) + 1;
            }
            var selectedVal = $("#Transaction_Currency_" + currentId).val();
            var pairedVal = $("#Transaction_Currency_" + pairedId).val();

            $("#Transaction_Currency_" + currentId + " option").each(function () {
                if (this.value == pairedVal) {
                    this.disabled = true;
                    this.hidden = true;
                    this.selected = false;
                }
                else {
                    if (this.value == selectedVal) {
                        this.disabled = false;
                        this.hidden = false;
                        this.selected = true;
                    }
                    else {
                        this.disabled = false;
                        this.hidden = false;
                        this.selected = false;
                    }
                }
            });

            $("#Transaction_Currency_" + pairedId + " option").each(function () {
                if (this.value == selectedVal) {
                    this.disabled = true;
                    this.hidden = true;
                    this.selected = false;
                }
                else {
                    if (this.value == pairedVal) {
                        this.disabled = false;
                        this.hidden = false;
                        this.selected = true;
                    }
                    else {
                        this.disabled = false;
                        this.hidden = false;
                        this.selected = false;
                    }
                }
            });
        }
    }

    function CurrencyChange(rowId, type, totalCount) {

                      //  if (type === 1) {
                      //      var getYouPayValue = $("#Transaction_PayCurrency_" + rowId + " :selected").val();
		                    //$('#Transaction_GetCurrency_'+rowId +' option').prop('disabled', false);
                      //      $('#Transaction_GetCurrency_' + rowId + ' option[value="' + getYouPayValue + '"]').prop('disabled', true);
                      //      var getYouGetValue = $('#Transaction_GetCurrency_' + rowId + ' option:not([disabled]):first').val();
		                    //$('#Transaction_GetCurrency_' + rowId).select2().val(getYouGetValue).trigger('change.select2');
                      //  }
                      //  else {
                      //      var getYouGetValue = $("#Transaction_GetCurrency_" + rowId + " :selected").val();
		                    //$('#Transaction_PayCurrency_'+rowId +' option').prop('disabled', false);
                      //      $('#Transaction_PayCurrency_' + rowId + ' option[value="' + getYouGetValue + '"]').prop('disabled', true);
                      //      var getYouPayValue = $('#Transaction_PayCurrency_' + rowId + ' option:not([disabled]):first').val();
		                    //$('#Transaction_PayCurrency_' + rowId).select2().val(getYouPayValue).trigger('change.select2');
                      //  }
        var url = "@Url.Action("GetAmount")";
        var payID = $("#Transaction_PayCurrency_1").val();
        var getID = $("#Transaction_GetCurrency_" + rowId).val();
        var amount = $("#Transaction_GetAmount_" + rowId).val();
        var currentrate = $("#Transaction_Rate_" + rowId).val();
        var currentfee = $("#Transaction_Fee_" + rowId).val();
        var currentCid = $("#sales_CustomerParticularId").val();

            $.ajax({
                type: "POST",
                cache: false,
                url: url,
                data: {
                rowID: rowId,
                getproductID: getID,
                payproductID: payID,
                Amount: amount,
                type: type,
                currentRate: currentrate,
                currentFee: currentfee,
                cid: currentCid
            },
                beforeSend: function () {
                    $(".preload").show();
                },
                success: function (data) {
                    data = JSON.parse(data);

                    if (data.Result) {
                        $("#payRate_" + rowId).val(data.PayRate);
                        $("#getRate_" + rowId).val(data.GetRate);
                        $("#payDecimalFormat_" + rowId).val(data.PayDecimalFormat);
                        $("#getDecimalFormat_" + rowId).val(data.GetDecimalFormat);
                        $("#gettransactionFees_" + rowId).val(data.GetTransactionFees);
                        $("#paytransactionFees_" + rowId).val(data.PayTransactionFees);
                        //$("#finalRate_" + rowId).val(data.FinalRate);



        if (type === 1) {
                        $("#Transaction_Rate_" + rowId).val(data.rate);
                        $("#Transaction_Fee_" + rowId).val(data.fee);
                        $("#Transaction_GetAmount_" + rowId).val("");
                        $("#Transaction_PayAmount_" + rowId).val("");
            var getYouPayValue = $("#Transaction_PayCurrency_" + rowId + " :selected").val();
            $('#Transaction_GetCurrency_' + rowId + ' option').prop('disabled', false);
            $('#Transaction_GetCurrency_' + rowId + ' option[value="' + getYouPayValue + '"]').prop('disabled', true);
            var getYouGetValue = $('#Transaction_GetCurrency_' + rowId + ' option:not([disabled]):first').val();

            $('#Transaction_GetCurrency_' + rowId).select2();
            changePayCurrency(rowId);
        setTimeout(function () {
            amountChange(rowId);
                    var transactionCount = $("#table-transaction > tbody > tr").length;
                    var getdata = $('#Transaction_PayCurrency_' + 1).select2('data');
                    for (var i = 1; i <= transactionCount; i++) {
						$("#transationFeesSelectedCurrency_" + i).text(getdata[0].text);
						//$("#transationFeesSelectedCurrency_" + i).text("SGD");
                    }
        }, 1200);
        }
        else if (type === 2) {
            amount = $("#Transaction_PayAmount_" + rowId).val();
                        $("#Transaction_Rate_" + rowId).val(data.rate);
                        $("#Transaction_Fee_" + rowId).val(data.fee);
            var getYouGetValue = $("#Transaction_GetCurrency_" + rowId + " :selected").val();
		    $('#Transaction_PayCurrency_' + 1 +' option').prop('disabled', false);
            $('#Transaction_PayCurrency_' + 1 + ' option[value="' + getYouGetValue + '"]').prop('disabled', true);
            var getYouPayValue = $('#Transaction_PayCurrency_' + rowId + ' option:not([disabled]):first').val();
            var rate = $("#Transaction_Rate_" + rowId).val();
            calculateAmount(1, data.PayRate, data.GetRate, data.fee, rowId, $("#payDecimalFormat_" + rowId).val(), $("#getDecimalFormat_" + rowId).val(), rate);

            setTimeout(function () {
                amountChange(rowId);
                //$('#Transaction_PayCurrency_' + 1).select2();
                //var getdata = $('#Transaction_PayCurrency_' + 1).select2('data');
                //$("#transationFeesSelectedCurrency_" + rowId).text(getdata[0].text);
            }, 1200);
            //changeGetCurrency(rowId);
            $('#Transaction_PayCurrency_' + 1).select2();
                        }
                        var transactionCount = $("#table-transaction > tbody > tr").length;

                        if (type === 2) {
                            $('#Transaction_PayCurrency_1' + ' option').prop('disabled', false);
                            for (var i = 1; i <= transactionCount; i++) {
                                var getYouGetValue = $('#Transaction_GetCurrency_'+i).val();
                                //console.log("productID:" + getYouGetValue);
                                $('#Transaction_PayCurrency_1' + ' option[value="' + getYouGetValue + '"]').prop('disabled', true);
                            }
                            $('#Transaction_PayCurrency_1').select2();
                        }
                    }

                    else {
                        alertify.alert(data.ErrorMessage);
                    }
                    //To enable back the table all input field after finished update currency type.
                    //$("#table-transaction :input").prop("disabled", false);

                    $(".preload").hide();
                },
                error: function (e) {
                    console.log(e.status + " - " + e.statusText);
                    alertify.alert("An error occured while updating transaction details!");
                    $(".preload").hide();
                }
            });
    }

   function changePayCurrency(rowId) {
        var url = "@Url.Action("ChangePayCurrencySelectValue")?rowId=" + rowId + "&type=Remittance";
        var form = $("#table-transaction input, #table-transaction select").serialize();
	   
        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: form,
            beforeSend: function () {
                $(".preload").show();
            },
			success: function (data) {
				console.log("test");
				console.log(data);
				if (data.length > 0)
				{
                    $("#paySymbol").html(data[0].PaySymbol);

					for (var i = 0; i < data.length; i++)
					{
						console.log(data.length);
						if (i > 0)
						{
                            $("#Transaction_PayCurrency_" + data[i].RowID).val(data[i].PayCurrencyValue);
                            $('#Transaction_PayCurrency_' + data[i].RowID + ' option').prop('disabled', false);
                            $('#Transaction_PayCurrency_' + data[i].RowID + ' option[value="' + data[i].PayCurrencyValue + '"]').prop('disabled', true);
                            $('#Transaction_PayCurrency_' + data[i].RowID).select2();
                            $("#Transaction_PayCurrencys_" + data[i].RowID).val(data[i].PayCurrencyValue);
                            $('#Transaction_GetCurrency_' + data[i].RowID + ' option').prop('disabled', false);
                            $('#Transaction_GetCurrency_' + data[i].RowID + ' option[value="' + data[i].PayCurrencyValue + '"]').prop('disabled', true);
                            $('#Transaction_GetCurrency_' + data[i].RowID).select2();
                            $("#Transaction_GetAmount_" + data[i].RowID).val("");
                            $("#Transaction_PayAmount_" + data[i].RowID).val("");
                            $("#Transaction_Rate_" + data[i].RowID).val("");
                            $("#Transaction_Fee_" + data[i].RowID).val("");
                            $("#payRate_" + data[i].RowID).val($("#payRate_1").val());
                            $("#payDecimalFormat_" + data[i].RowID).val($("#payDecimalFormat_1").val());
                            $("#paytransactionFees_" + data[i].RowID).val($("#paytransactionFees_1").val());

							var getSelectedValue = $('#Transaction_PayPaymentType_' + data[i].RowID).val();
                            $("#Transaction_PayPaymentType_" + data[i].RowID).empty();
                            $(data[i].PayPaymentModeDDL).each(function () {
                                $('#Transaction_PayPaymentType_' + data[i].RowID).append($("<option></option>").val(this.Value).html(this.Text));
								//PaymentModeChange(data[i].RowID);
							});
							$('#Transaction_PayPaymentType_' + data[i].RowID).val(getSelectedValue);
							PaymentModeChange(data[i].RowID);
                        }
						else {
							var getSelectedValue = $('#Transaction_PayPaymentType_' + data[i].RowID).val();
                            $("#Transaction_PayPaymentType_" + data[i].RowID).empty();
                            $(data[i].PayPaymentModeDDL).each(function () {
								$('#Transaction_PayPaymentType_' + data[i].RowID).append($("<option></option>").val(this.Value).html(this.Text));
							});
							$('#Transaction_PayPaymentType_' + data[i].RowID).val(getSelectedValue);
							PaymentModeChange(data[i].RowID);
                        }
                    }
                }

                $(".preload").hide();
            },
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                alertify.alert("An error occured while calculating amount local!");
                $(".preload").hide();
            }
        });
    }

   function changeGetCurrency(rowId) {
        var url = "@Url.Action("ChangePayCurrencySelectValue")?rowId=" + rowId + "&type=Remittance";
        var form = $("#table-transaction input, #table-transaction select").serialize();

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: form,
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                if (data.length > 0) {
                    console.log(data.length);
		                    $('#Transaction_PayCurrency_1' +' option').prop('disabled', false);
                    for (var i = 0; i <= data.length; i++){
                            $('#Transaction_PayCurrency_1' + ' option[value="' + data[i].GetCurrencyValue + '"]').prop('disabled', true);
                            //console.log(data.length);
                    }
                    $('#Transaction_PayCurrency_1').select2();

                }

                $(".preload").hide();
            },
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                alertify.alert("An error occured while calculating amount local!");
                $(".preload").hide();
            }
        });
    }


    function EncashmentCurrencyChange(rowId) {

        FilterCurrency(rowId);

        var cid = $("#sales_CustomerParticularId").val();
        var type = $("input[name='sales.TransactionType']:checked")[0].id;
        var form = $("#table-transaction input, #table-transaction select").serialize();

        var current = $("#transaction-row-" + rowId)[0];
        var pairedCls = current.classList[0];
        var pairedCurrency = $("tr." + pairedCls + "[id!='transaction-row-" + rowId + "'] select.currency-dropdown")[0];
        var pairedCurrencyOptions = pairedCurrency.options;
        var optionsVal = "";
        for (var i = 0; i < pairedCurrencyOptions.length; i++) {
            if (!pairedCurrencyOptions[i].disabled) {
                optionsVal += pairedCurrencyOptions[i].text + ",";
            }
        }
        if (optionsVal.length > 0) {
            optionsVal = optionsVal.slice(0, optionsVal.length - 1);
        }

        var url = "@Url.Action("CurrencyChange")?cid=" + cid + "&rowId=" + rowId + "&type=" + type + "&pairedCurrency=" + optionsVal;

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: form,
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);

                if (data.Result) {
                    if (!data.IsValid) {
                        if (data.ModelErrors) {
                            var errors = "";
                            for (var i = 0; i < data.ModelErrors.length; i++) {
                                if (data.ModelErrors[i][1] != "") {
                                    errors += data.ModelErrors[i][1] + "<br/>";
                                }
                            }

                            if (errors != "") {
                                alertify.alert(errors);
                            }
                        }
                    }

                    if (data.RowChanged == "Sell") {
                        //Sell Type
                        $("#span-amount-foreign-symbol-" + data.RowIdSell).html(data.SymbolSell);
                        $("#Transaction_AmountForeign_" + data.RowIdSell).val(data.AmountForeignSell); //enable
                        $("#Transaction_Rate_" + data.RowIdSell).val(data.RateSell);//enable
                        $("#Transaction_EncashmentRate_" + data.RowIdSell).val(data.EncashmentRateSell); //enable
                        $("#Transaction_Unit_" + data.RowIdSell + "[type=hidden]").val(data.UnitSell); //disable
                        $("#Transaction_Unit_" + data.RowIdSell + "[type=text]").val(data.UnitSell); //disable
                        $("#Transaction_Amount_Local_" + data.RowIdSell).val(data.AmountLocalSell); //disable
                        $("#Transaction_AmountLocal_" + data.RowIdSell).val(data.AmountLocalSell); //disable
                        $("#Transaction_PaymentMode_" + data.RowIdSell).html(data.PaymentModesDDLSell);
                        if (data.DisableChequeNoSell) {
                            $("#Transaction_ChequeNo_" + data.RowIdSell).attr("disabled", "disabled");
                        }
                        else {
                            $("#Transaction_ChequeNo_" + data.RowIdSell).removeAttr("disabled");
                        }
                        if (data.DisableBankTransferNoSell) {
                            $("#Transaction_BankTransferNo_" + data.RowIdSell).attr("disabled", "disabled");
                        }
                        else {
                            $("#Transaction_BankTransferNo_" + data.RowIdSell).removeAttr("disabled");
                        }
                        $("#denomination-total-calculated-foreign-symbol-" + data.RowIdSell).html(data.SymbolSell);
                        $("#denomination-remaining-foreign-symbol-" + data.RowIdSell).html(data.SymbolSell);
                        $("#denomination-total-order-foreign-symbol-" + data.RowIdSell).html(data.SymbolSell);

                        $("#denomination-remaining-foreign-" + data.RowIdSell)[0].innerHTML = data.AmountForeignSell;
                        $("#Denomination_Remaining_Foreign_" + data.RowIdSell).val(data.AmountForeignSell);

                        $("#denomination-total-order-foreign-" + data.RowIdSell)[0].innerHTML = data.AmountForeignSell;
                        $("#Denomination_Total_Order_Foreign_" + data.RowIdSell).val(data.AmountForeignSell);

                        RemoveDenomination(data.RowIdSell);

                        //Buy Type
                        $("#Transaction_Currency_" + data.RowIdBuy).val(data.CurrencyIdBuy);
                        FilterCurrency(data.RowIdBuy);

                        $("#span-amount-foreign-symbol-" + data.RowIdBuy).html(data.SymbolBuy);
                        $("#Transaction_Amount_Foreign_" + data.RowIdBuy).val(data.AmountForeignBuy);
                        $("#Transaction_AmountForeign_" + data.RowIdBuy).val(data.AmountForeignBuy);
                        $("#Transaction_rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Unit_" + data.RowIdBuy + "[type=hidden]").val(data.UnitBuy);
                        $("#Transaction_Unit_" + data.RowIdBuy + "[type=text]").val(data.UnitBuy);
                        $("#Transaction_Amount_Local_" + data.RowIdBuy).val(data.AmountLocalBuy);
                        $("#Transaction_AmountLocal_" + data.RowIdBuy).val(data.AmountLocalBuy);
                        $("#Transaction_PaymentMode_" + data.RowIdBuy).html(data.PaymentModesDDLBuy);
                        if (data.DisableChequeNoBuy) {
                            $("#Transaction_ChequeNo_" + data.RowIdBuy).attr("disabled", "disabled");
                        }
                        else {
                            $("#Transaction_ChequeNo_" + data.RowIdBuy).removeAttr("disabled");
                        }
                        if (data.DisableBankTransferNoBuy) {
                            $("#Transaction_BankTransferNo_" + data.RowIdBuy).attr("disabled", "disabled");
                        }
                        else {
                            $("#Transaction_BankTransferNo_" + data.RowIdBuy).removeAttr("disabled");
                        }

                        $("#total-amount-foreign").html(data.TotalAmountLocal);
                        $("#total-amount-local").html(data.TotalAmountForeign);

                    }
                    else if (data.RowChanged == "Buy") {
                        //console.log(data);
                        //$("#table-transaction :input").removeAttr("disabled");

                        //Sell Type
                        $("#Transaction_AmountForeign_" + data.RowIdSell).val(data.AmountForeignSell); //enable
                        $("#Transaction_Rate_" + data.RowIdSell).val(data.RateSell);//enable
                        $("#Transaction_EncashmentRate_" + data.RowIdSell).val(data.EncashmentRateSell);//enable
                        $("#Transaction_Amount_Local_" + data.RowIdSell).val(data.AmountLocalSell);
                        $("#Transaction_AmountLocal_" + data.RowIdSell).val(data.AmountLocalSell);

                        //Buy Type
                        FilterCurrency(data.RowIdBuy);

                        $("#span-amount-foreign-symbol-" + data.RowIdBuy).html(data.SymbolBuy);//disable
                        $("#Transaction_Amount_Foreign_" + data.RowIdBuy).val(data.AmountForeignBuy); //disable
                        $("#Transaction_AmountForeign_" + data.RowIdBuy).val(data.AmountForeignBuy); //disable
                        $("#Transaction_rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Unit_" + data.RowIdBuy + "[type=hidden]").val(data.UnitBuy);
                        $("#Transaction_Unit_" + data.RowIdBuy + "[type=text]").val(data.UnitBuy);
                        $("#Transaction_Amount_Local_" + data.RowIdBuy).val(data.AmountLocalBuy);
                        $("#Transaction_AmountLocal_" + data.RowIdBuy).val(data.AmountLocalBuy);
                        $("#Transaction_PaymentMode_" + data.RowIdBuy).html(data.PaymentModesDDLBuy);
                        if (data.DisableChequeNoBuy) {
                            $("#Transaction_ChequeNo_" + data.RowIdBuy).attr("disabled", "disabled");
                        }
                        else {
                            $("#Transaction_ChequeNo_" + data.RowIdBuy).removeAttr("disabled");
                        }
                        if (data.DisableBankTransferNoBuy) {
                            $("#Transaction_BankTransferNo_" + data.RowIdBuy).attr("disabled", "disabled");
                        }
                        else {
                            $("#Transaction_BankTransferNo_" + data.RowIdBuy).removeAttr("disabled");
                        }
                    }
                }
                else {
                    alertify.alert(data.ErrorMessage);
                }

                $(".preload").hide();
            },
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                alertify.alert("An error occured while updating transaction details!");
                $(".preload").hide();
            }
        });
    }

    function SwapCurrencyChange(rowId) {
        var cid = $("#sales_CustomerParticularId").val();
        var type = $("input[name='sales.TransactionType']:checked")[0].id;
        var form = $("#table-transaction input, #table-transaction select").serialize();

        var current = $("#transaction-row-" + rowId)[0];
        var pairedCls = current.classList[0];
        var pairedCurrency = $("tr." + pairedCls + "[id!='transaction-row-" + rowId + "'] select.currency-dropdown")[0];
        var pairedCurrencyOptions = pairedCurrency.options;
        var optionsVal = "";
        for (var i = 0; i < pairedCurrencyOptions.length; i++) {
            if (!pairedCurrencyOptions[i].disabled) {
                optionsVal += pairedCurrencyOptions[i].text + ",";
            }
        }
        if (optionsVal.length > 0) {
            optionsVal = optionsVal.slice(0, optionsVal.length - 1);
        }

        var url = "@Url.Action("CurrencyChange")?cid=" + cid + "&rowId=" + rowId + "&type=" + type + "&pairedCurrency=" + optionsVal;

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: form,
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);

                if (data.Result) {
                    if (!data.IsValid) {
                        if (data.ModelErrors) {
                            var errors = "";
                            for (var i = 0; i < data.ModelErrors.length; i++) {
                                if (data.ModelErrors[i][1] != "") {
                                    errors += data.ModelErrors[i][1] + "<br/>";
                                }
                            }

                            if (errors != "") {
                                alertify.alert(errors);
                            }
                        }
                    }

                    if (data.RowChanged == "Buy") {
                        //Buy Type
                        $("#span-amount-foreign-symbol-" + data.RowIdBuy).html(data.SymbolBuy);
                        $("#Transaction_AmountForeign_" + data.RowIdBuy).val(data.AmountForeignBuy);
                        $("#Transaction_Rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_EncashmentRate_" + data.RowIdBuy).val(data.EncashmentRateBuy);
                        $("#Transaction_Unit_" + data.RowIdBuy + "[type=hidden]").val(data.UnitBuy);
                        $("#Transaction_Unit_" + data.RowIdBuy + "[type=text]").val(data.UnitBuy);
                        $("#Transaction_Amount_Local_" + data.RowIdBuy).val(data.AmountLocalBuy);
                        $("#Transaction_AmountLocal_" + data.RowIdBuy).val(data.AmountLocalBuy);
                        $("#Transaction_PaymentMode_" + data.RowIdBuy).html(data.PaymentModesDDLBuy);
                        if (data.DisableChequeNoBuy) {
                            $("#Transaction_ChequeNo_" + data.RowIdBuy).attr("disabled", "disabled");
                        }
                        else {
                            $("#Transaction_ChequeNo_" + data.RowIdBuy).removeAttr("disabled");
                        }
                        if (data.DisableBankTransferNoBuy) {
                            $("#Transaction_BankTransferNo_" + data.RowIdBuy).attr("disabled", "disabled");
                        }
                        else {
                            $("#Transaction_BankTransferNo_" + data.RowIdBuy).removeAttr("disabled");
                        }
                        $("#denomination-total-calculated-foreign-symbol-" + data.RowIdBuy).html(data.SymbolBuy);
                        $("#denomination-remaining-foreign-symbol-" + data.RowIdBuy).html(data.SymbolBuy);
                        $("#denomination-total-order-foreign-symbol-" + data.RowIdBuy).html(data.SymbolBuy);

                        $("#denomination-remaining-foreign-" + data.RowIdBuy)[0].innerHTML = data.AmountForeignBuy;
                        $("#Denomination_Remaining_Foreign_" + data.RowIdBuy).val(data.AmountForeignBuy);

                        $("#denomination-total-order-foreign-" + data.RowIdBuy)[0].innerHTML = data.AmountForeignBuy;
                        $("#Denomination_Total_Order_Foreign_" + data.RowIdBuy).val(data.AmountForeignBuy);

                        RemoveDenomination(data.RowIdBuy);

                        //Sell Type
                        $("#Transaction_Currency_" + data.RowIdSell).val(data.CurrencyIdSell);
                        $("#span-amount-foreign-symbol-" + data.RowIdSell).html(data.SymbolSell);
                        $("#Transaction_Amount_Foreign_" + data.RowIdSell).val(data.AmountForeignSell);
                        $("#Transaction_AmountForeign_" + data.RowIdSell).val(data.AmountForeignSell);
                        $("#Transaction_rate_" + data.RowIdSell).val(data.RateSell);
                        $("#Transaction_Rate_" + data.RowIdSell).val(data.RateSell);
                        $("#Transaction_Unit_" + data.RowIdSell + "[type=hidden]").val(data.UnitSell);
                        $("#Transaction_Unit_" + data.RowIdSell + "[type=text]").val(data.UnitSell);
                        $("#Transaction_Amount_Local_" + data.RowIdSell).val(data.AmountLocalSell);
                        $("#Transaction_AmountLocal_" + data.RowIdSell).val(data.AmountLocalSell);
                        $("#Transaction_PaymentMode_" + data.RowIdSell).html(data.PaymentModesDDLSell);
                        if (data.DisableChequeNoSell) {
                            $("#Transaction_ChequeNo_" + data.RowIdSell).attr("disabled", "disabled");
                        }
                        else {
                            $("#Transaction_ChequeNo_" + data.RowIdSell).removeAttr("disabled");
                        }
                        if (data.DisableBankTransferNoSell) {
                            $("#Transaction_BankTransferNo_" + data.RowIdSell).attr("disabled", "disabled");
                        }
                        else {
                            $("#Transaction_BankTransferNo_" + data.RowIdSell).removeAttr("disabled");
                        }
                    }
                    else if (data.RowChanged == "Sell") {
                        //Sell Type
                        $("#span-amount-foreign-symbol-" + data.RowIdSell).html(data.SymbolSell);
                        $("#Transaction_Amount_Foreign_" + data.RowIdSell).val(data.AmountForeignSell);
                        $("#Transaction_AmountForeign_" + data.RowIdSell).val(data.AmountForeignSell);
                        $("#Transaction_Unit_" + data.RowIdSell + "[type=hidden]").val(data.UnitSell);
                        $("#Transaction_Unit_" + data.RowIdSell + "[type=text]").val(data.UnitSell);
                        $("#Transaction_PaymentMode_" + data.RowIdSell).html(data.PaymentModesDDLSell);
                        if (data.DisableChequeNoSell) {
                            $("#Transaction_ChequeNo_" + data.RowIdSell).attr("disabled", "disabled");
                        }
                        else {
                            $("#Transaction_ChequeNo_" + data.RowIdSell).removeAttr("disabled");
                        }
                        if (data.DisableBankTransferNoSell) {
                            $("#Transaction_BankTransferNo_" + data.RowIdSell).attr("disabled", "disabled");
                        }
                        else {
                            $("#Transaction_BankTransferNo_" + data.RowIdSell).removeAttr("disabled");
                        }
                    }

                    $("#total-amount-foreign").html("$" + data.TotalAmountLocal);
                    $("#total-amount-local").html("$" + data.TotalAmountForeign);
                }
                else {
                    alertify.alert(data.ErrorMessage);
                }
                $(".preload").hide();
            },
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                alertify.alert("An error occured while updating transaction details!");
                $(".preload").hide();
            }
        });
    }

    function CrossCurrencyChange(rowId) {
        FilterCurrency(rowId);

        var cid = $("#sales_CustomerParticularId").val();
        var type = $("input[name='sales.TransactionType']:checked")[0].id;
        var form = $("#table-transaction input, #table-transaction select").serialize();

        var url = "@Url.Action("CurrencyChange")?cid=" + cid + "&rowId=" + rowId + "&type=" + type;

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: form,
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);

                if (data.Result) {
                    if (!data.IsValid) {
                        if (data.ModelErrors) {
                            var errors = "";
                            for (var i = 0; i < data.ModelErrors.length; i++) {
                                if (data.ModelErrors[i][1] != "") {
                                    errors += data.ModelErrors[i][1] + "<br/>";
                                }
                            }

                            if (errors != "") {
                                alertify.alert(errors);
                            }
                        }
                    }

                    if (data.RowChanged == "Sell") {
                        //Sell Type
                        $("#span-amount-foreign-symbol-" + data.RowIdSell).html(data.SymbolSell);
                        $("#Transaction_AmountForeign_" + data.RowIdSell).val(data.AmountForeignSell);
                        $("#Transaction_Rate_" + data.RowIdSell).val(data.RateSell);
                        $("#Transaction_CrossRate_" + data.RowIdSell).val(data.CrossRateSell);
                        $("#Transaction_Unit_" + data.RowIdSell + "[type=hidden]").val(data.UnitSell);
                        $("#Transaction_Unit_" + data.RowIdSell + "[type=text]").val(data.UnitSell);
                        $("#Transaction_Amount_Local_" + data.RowIdSell).val(data.AmountLocalSell);
                        $("#Transaction_AmountLocal_" + data.RowIdSell).val(data.AmountLocalSell);
                        $("#Transaction_PaymentMode_" + data.RowIdSell).html(data.PaymentModesDDLSell);
                        if (data.DisableChequeNoSell) {
                            $("#Transaction_ChequeNo_" + data.RowIdSell).attr("disabled", "disabled");
                        }
                        else {
                            $("#Transaction_ChequeNo_" + data.RowIdSell).removeAttr("disabled");
                        }
                        if (data.DisableBankTransferNoSell) {
                            $("#Transaction_BankTransferNo_" + data.RowIdSell).attr("disabled", "disabled");
                        }
                        else {
                            $("#Transaction_BankTransferNo_" + data.RowIdSell).removeAttr("disabled");
                        }
                        $("#denomination-total-calculated-foreign-symbol-" + data.RowIdSell).html(data.SymbolSell);
                        $("#denomination-remaining-foreign-symbol-" + data.RowIdSell).html(data.SymbolSell);
                        $("#denomination-total-order-foreign-symbol-" + data.RowIdSell).html(data.SymbolSell);

                        $("#denomination-remaining-foreign-" + data.RowIdSell)[0].innerHTML = data.AmountForeignSell;
                        $("#Denomination_Remaining_Foreign_" + data.RowIdSell).val(data.AmountForeignSell);

                        $("#denomination-total-order-foreign-" + data.RowIdSell)[0].innerHTML = data.AmountForeignSell;
                        $("#Denomination_Total_Order_Foreign_" + data.RowIdSell).val(data.AmountForeignSell);

                        RemoveDenomination(data.RowIdSell);

                        //Buy Type
                        $("#Transaction_rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Amount_Local_" + data.RowIdBuy).val(data.AmountLocalBuy);
                        $("#Transaction_AmountLocal_" + data.RowIdBuy).val(data.AmountLocalBuy);

                        $("#total-amount-foreign").html("$" + data.TotalAmountForeign);
                        $("#total-amount-local").html("$" + data.TotalAmountLocal);
                    }
                    else if (data.RowChanged == "Buy") {
                        //Buy Type
                        FilterCurrency(data.RowIdBuy);

                        $("#span-amount-foreign-symbol-" + data.RowIdBuy).html(data.SymbolBuy);
                        $("#Transaction_AmountForeign_" + data.RowIdBuy).val(data.AmountForeignBuy);
                        $("#Transaction_rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Unit_" + data.RowIdBuy + "[type=hidden]").val(data.UnitBuy);
                        $("#Transaction_Unit_" + data.RowIdBuy + "[type=text]").val(data.UnitBuy);
                        $("#Transaction_Amount_Local_" + data.RowIdBuy).val(data.AmountLocalBuy);
                        $("#Transaction_AmountLocal_" + data.RowIdBuy).val(data.AmountLocalBuy);
                        $("#Transaction_PaymentMode_" + data.RowIdBuy).html(data.PaymentModesDDLBuy);
                        if (data.DisableChequeNoBuy) {
                            $("#Transaction_ChequeNo_" + data.RowIdBuy).attr("disabled", "disabled");
                        }
                        else {
                            $("#Transaction_ChequeNo_" + data.RowIdBuy).removeAttr("disabled");
                        }
                        if (data.DisableBankTransferNoBuy) {
                            $("#Transaction_BankTransferNo_" + data.RowIdBuy).attr("disabled", "disabled");
                        }
                        else {
                            $("#Transaction_BankTransferNo_" + data.RowIdBuy).removeAttr("disabled");
                        }
                        $("#denomination-total-calculated-foreign-symbol-" + data.RowIdBuy).html(data.SymbolBuy);
                        $("#denomination-remaining-foreign-symbol-" + data.RowIdBuy).html(data.SymbolBuy);
                        $("#denomination-total-order-foreign-symbol-" + data.RowIdBuy).html(data.SymbolBuy);

                        $("#denomination-remaining-foreign-" + data.RowIdBuy)[0].innerHTML = data.AmountForeignBuy;
                        $("#Denomination_Remaining_Foreign_" + data.RowIdBuy).val(data.AmountForeignBuy);

                        $("#denomination-total-order-foreign-" + data.RowIdBuy)[0].innerHTML = data.AmountForeignBuy;
                        $("#Denomination_Total_Order_Foreign_" + data.RowIdBuy).val(data.AmountForeignBuy);

                        RemoveDenomination(data.RowIdBuy);

                        //Sell Type
                        $("#Transaction_CrossRate_" + data.RowIdSell).val(data.CrossRateSell);
                        $("#Transaction_Amount_Local_" + data.RowIdSell).val(data.AmountLocalSell);
                        $("#Transaction_AmountLocal_" + data.RowIdSell).val(data.AmountLocalSell);

                        $("#total-amount-foreign").html("$" + data.TotalAmountForeign);
                        $("#total-amount-local").html("$" + data.TotalAmountLocal);
                    }
                }
                else {
                    alertify.alert(data.ErrorMessage);
                }

                $(".preload").hide();
            },
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                alertify.alert("An error occured while updating transaction details!");
                $(".preload").hide();
            }
        });
    }

    @*function AmountForeignChange(rowId) {
        var type = $("input[name='sales.TransactionType']:checked")[0].id;
        var form = $("#table-transaction input, #table-transaction select").serialize();
        var url = "@Url.Action("AmountForeignChange")?rowId=" + rowId + "&type=" + type;

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: form,
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);

                if (data.Result) {
                    if (!data.IsValid) {
                        if (data.ModelErrors) {
                            var errors = "";
                            for (var i = 0; i < data.ModelErrors.length; i++) {
                                if (data.ModelErrors[i][1] != "") {
                                    errors += data.ModelErrors[i][1] + "<br/>";
                                }
                            }

                            if (errors != "") {
                                alertify.alert(errors);
                            }
                        }
                    }

                    $("#Transaction_AmountForeign_" + rowId).val(data.AmountForeign);
                    $("#Transaction_Amount_Local_" + rowId).val(data.AmountLocal);
                    $("#Transaction_AmountLocal_" + rowId).val(data.AmountLocal);

                    if (type == "Encashment") {
                        $("#Transaction_Amount_Foreign_" + data.RowIdBuy).val(data.AmountForeignBuy);
                        $("#Transaction_AmountForeign_" + data.RowIdBuy).val(data.AmountForeignBuy);
                        $("#Transaction_rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Amount_Local_" + data.RowIdBuy).val(data.AmountLocalBuy);
                        $("#Transaction_AmountLocal_" + data.RowIdBuy).val(data.AmountLocalBuy);
                    }
                    else if (type == "Swap") {
                        $("#Transaction_Amount_Foreign_" + data.RowIdSell).val(data.AmountForeignSell);
                        $("#Transaction_AmountForeign_" + data.RowIdSell).val(data.AmountForeignSell);
                        $("#Transaction_rate_" + data.RowIdSell).val(data.RateSell);
                        $("#Transaction_Rate_" + data.RowIdSell).val(data.RateSell);
                        $("#Transaction_Amount_Local_" + data.RowIdSell).val(data.AmountLocalSell);
                        $("#Transaction_AmountLocal_" + data.RowIdSell).val(data.AmountLocalSell);
                    }
                    else if (type == "CrossCurrency") {
                        $("#Transaction_CrossRate_" + data.RowIdSell).val(data.CrossRateSell);
                        $("#Transaction_rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Rate_" + data.RowIdBuy).val(data.RateBuy);

                        if (data.RowChanged == "Sell") {
                            $("#Transaction_Amount_Local_" + data.RowIdBuy).val(data.AmountLocalBuy);
                            $("#Transaction_AmountLocal_" + data.RowIdBuy).val(data.AmountLocalBuy);
                        }
                        else {
                            $("#Transaction_Amount_Local_" + data.RowIdSell).val(data.AmountLocalSell);
                            $("#Transaction_AmountLocal_" + data.RowIdSell).val(data.AmountLocalSell);
                        }
                    }
                }
                else {
                    alertify.alert(data.ErrorMessage);
                }

                $("#denomination-total-calculated-foreign-" + rowId)[0].innerHTML = data.DenoTotalCalculated;
                $("#Denomination_Total_Calculated_Foreign_" + rowId).val(data.DenoTotalCalculated);

                $("#denomination-remaining-foreign-" + rowId)[0].innerHTML = data.DenoTotalRemaining;
                $("#Denomination_Remaining_Foreign_" + rowId).val(data.DenoTotalRemaining);

                $("#denomination-total-order-foreign-" + rowId)[0].innerHTML = data.DenoTotalOrder;
                $("#Denomination_Total_Order_Foreign_" + rowId).val(data.DenoTotalOrder);

                $("#total-amount-foreign").html("$" + data.TotalAmountForeign);
                $("#total-amount-local").html("$" + data.TotalAmountLocal);

                if (type == "Buy" || type == "Sell") {
                    SetLocalPaymentModeAmount(data.TotalAmountLocal);
                }
                $(".preload").hide();
            },
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                alertify.alert("An error occured while calculating amount local!");
                $(".preload").hide();
            }
        });
    }*@

    function RateChange(rowId) {
        var type = $("input[name='sales.TransactionType']:checked")[0].id;
        var form = $("#table-transaction input, #table-transaction select").serialize();
        var url = "@Url.Action("RateChange")?rowId=" + rowId + "&type=" + type;

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: form,
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);

                if (data.Result) {
                    if (!data.IsValid) {
                        if (data.ModelErrors) {
                            var errors = "";
                            for (var i = 0; i < data.ModelErrors.length; i++) {
                                if (data.ModelErrors[i][1] != "") {
                                    errors += data.ModelErrors[i][1] + "<br/>";
                                }
                            }

                            if (errors != "") {
                                alertify.alert(errors);
                            }
                        }
                    }
                    $("#Transaction_Rate_" + rowId).val(data.Rate);
                    $("#Transaction_Amount_Local_" + rowId).val(data.AmountLocal);
                    $("#Transaction_AmountLocal_" + rowId).val(data.AmountLocal);

                    if (type == "Encashment") {
                        $("#Transaction_Amount_Foreign_" + data.RowIdBuy).val(data.AmountForeignBuy);
                        $("#Transaction_AmountForeign_" + data.RowIdBuy).val(data.AmountForeignBuy);
                        $("#Transaction_rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Amount_Local_" + data.RowIdBuy).val(data.AmountLocalBuy);
                        $("#Transaction_AmountLocal_" + data.RowIdBuy).val(data.AmountLocalBuy);
                    }
                    else if (type == "Swap") {
                        $("#Transaction_Amount_Foreign_" + data.RowIdSell).val(data.AmountForeignSell);
                        $("#Transaction_AmountForeign_" + data.RowIdSell).val(data.AmountForeignSell);
                        $("#Transaction_rate_" + data.RowIdSell).val(data.RateSell);
                        $("#Transaction_Rate_" + data.RowIdSell).val(data.RateSell);
                        $("#Transaction_Amount_Local_" + data.RowIdSell).val(data.AmountLocalSell);
                        $("#Transaction_AmountLocal_" + data.RowIdSell).val(data.AmountLocalSell);
                    }
                    else if (type == "CrossCurrency") {
                        $("#Transaction_CrossRate_" + data.RowIdSell).val(data.CrossRateSell);
                        $("#Transaction_rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Amount_Local_" + data.RowIdBuy).val(data.AmountLocalBuy);
                        $("#Transaction_AmountLocal_" + data.RowIdBuy).val(data.AmountLocalBuy);
                    }

                    $("#total-amount-foreign").html("$" + data.TotalAmountForeign);
                    $("#total-amount-local").html("$" + data.TotalAmountLocal);

                    if (type == "Buy" || type == "Sell") {
                        SetLocalPaymentModeAmount(data.TotalAmountLocal);
                    }
                    $(".preload").hide();
                }
                else {
                    alertify.alert(data.ErrorMessage);
                    $(".preload").hide();
                }
            },
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                alertify.alert("An error occured while calculating amount local!");
                $(".preload").hide();
            }
        });
    }

    function EncashmentRateChange(rowId) {
        var type = $("input[name='sales.TransactionType']:checked")[0].id;
        var form = $("#table-transaction input, #table-transaction select").serialize();
        var url = "@Url.Action("EncashmentRateChange")?rowId=" + rowId + "&type=" + type;

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: form,
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);

                if (data.Result) {
                    if (!data.IsValid) {
                        if (data.ModelErrors) {
                            var errors = "";
                            for (var i = 0; i < data.ModelErrors.length; i++) {
                                if (data.ModelErrors[i][1] != "") {
                                    errors += data.ModelErrors[i][1] + "<br/>";
                                }
                            }

                            if (errors != "") {
                                alertify.alert(errors);
                            }
                        }
                    }
                    $("#Transaction_EncashmentRate_" + rowId).val(data.EncashmentRate);

                    if (type == "Encashment") {
                        $("#Transaction_Amount_Foreign_" + data.RowIdBuy).val(data.AmountForeignBuy);
                        $("#Transaction_AmountForeign_" + data.RowIdBuy).val(data.AmountForeignBuy);
                        $("#Transaction_rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Rate_" + data.RowIdBuy).val(data.RateBuy);
                    }
                    else if (type == "Swap") {
                        $("#Transaction_Amount_Foreign_" + data.RowIdSell).val(data.AmountForeignSell);
                        $("#Transaction_AmountForeign_" + data.RowIdSell).val(data.AmountForeignSell);
                        $("#Transaction_rate_" + data.RowIdSell).val(data.RateSell);
                        $("#Transaction_Rate_" + data.RowIdSell).val(data.RateSell);

                        $("#total-amount-foreign").html("$" + data.TotalAmountForeign);
                        $("#total-amount-local").html("$" + data.TotalAmountLocal);
                    }
                    $(".preload").hide();
                }
                else {
                    alertify.alert(data.ErrorMessage);
                    $(".preload").hide();
                }
            },
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                alertify.alert("An error occured while calculating amount local!");
                $(".preload").hide();
            }
        });
    }

    function CrossRateChange(rowId) {
        var form = $("#table-transaction input, #table-transaction select").serialize();
        var url = "@Url.Action("CrossRateChange")?rowId=" + rowId;

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: form,
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);

                if (data.Result) {
                    if (data.ModelErrors) {
                        var errors = "";
                        for (var i = 0; i < data.ModelErrors.length; i++) {
                            if (data.ModelErrors[i][1] != "") {
                                errors += data.ModelErrors[i][1] + "<br/>";
                            }
                        }

                        if (errors != "") {
                            alertify.alert(errors);
                        }
                    }

                    $("#Transaction_CrossRate_" + rowId).val(data.CrossRate);
                    $(".preload").hide();
                }
                else {
                    alertify.alert(data.ErrorMessage);
                    $(".preload").hide();
                }
            }
            ,
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                $(".preload").hide();
            }
        });
    }

	function PaymentModeChange(rowId)
	{

		var mode = $("#Transaction_PayPaymentType_" + rowId).val();
		//var check = $("#Transaction_PayPaymentType_1").val();
		//console.log("Inside PaymentModeChange");
		//console.log($('#Transaction_PayPaymentType_1 :selected').text());
		if (mode == "2")
		{
			//Enable Cheque Button.
			$("#update-cheque-btn-" + rowId).attr('onclick', 'UpdateCheque(' + rowId + ')');
			$("#update-cheque-btn-" + rowId).css('pointer-events', '');
			$("#Transaction_ChequeNo_" + rowId).attr('readonly', true);
			$("#Transaction_ChequeNo_" + rowId).removeAttr("disabled");
			$("#Transaction_DepositAccount_" + rowId).removeAttr("disabled");

			//Disable Bank Transfer Button
			$("#update-bank-transfer-btn-" + rowId).prop("onclick", null);
			$("#update-bank-transfer-btn-" + rowId).css('pointer-events', 'none');
            $("#Transaction_BankTransferNo_" + rowId).attr("disabled", "disabled");
        }
		else if (mode == "3")
		{
			//Disable Cheque Button.
			$("#update-cheque-btn-" + rowId).prop("onclick", null);
			$("#update-cheque-btn-" + rowId).css('pointer-events', 'none');
			$("#Transaction_ChequeNo_" + rowId).attr("disabled", "disabled");

			//Enable Cheque Button.
			$("#update-bank-transfer-btn-" + rowId).attr('onclick', 'UpdateBankTransfer(' + rowId + ')');
			$("#update-bank-transfer-btn-" + rowId).css('pointer-events', '');
			$("#Transaction_BankTransferNo_" + rowId).attr('readonly', true);
            $("#Transaction_BankTransferNo_" + rowId).removeAttr("disabled");
            $("#Transaction_DepositAccount_" + rowId).removeAttr("disabled");
        }
		else
		{
			//Disable Cheque Button.
			$("#update-cheque-btn-" + rowId).prop("onclick", null);
			$("#update-cheque-btn-" + rowId).css('pointer-events', 'none');
			$("#Transaction_ChequeNo_" + rowId).attr("disabled", "disabled");
			$("#Transaction_DepositAccount_" + rowId).attr("disabled", "disabled");

			//Disable Bank Transfer Button
			$("#update-bank-transfer-btn-" + rowId).prop("onclick", null);
			$("#update-bank-transfer-btn-" + rowId).css('pointer-events', 'none');
            $("#Transaction_BankTransferNo_" + rowId).attr("disabled", "disabled");
        }
    }

    function OpenDenominationModal(rowId) {
        var denominationCount = $("#table-transaction-denomination-" + rowId + " tbody tr").length;

        if (denominationCount == 0) {
            var pid = $("#Transaction_Currency_" + rowId).val();
            var amountForeign = $("#Transaction_AmountForeign_" + rowId).val();
            var url = "@Url.Action("OpenDenomination")";

            $.ajax({
                type: "POST",
                cache: false,
                url: url,
                data: { pid: pid, rowId: rowId, amountForeign: amountForeign },
                beforeSend: function () {
                    $(".preload").show();
                },
                success: function (data) {
                    data = JSON.parse(data);

                    if (data.Result) {
                        $("#modal-label-" + rowId).html(data.ModalTitle);
                        $("#AmtCurr-" + rowId)[0].innerHTML = data.ColumnName;
                        $("#table-transaction-denomination-" + rowId + " tbody").html(data.View);

                        $("#denomination-remaining-foreign-" + rowId).html(amountForeign);
                        $("#Denomination_Remaining_Foreign_" + rowId).val(amountForeign);

                        $("#denomination-total-order-foreign-" + rowId).html(amountForeign);
                        $("#Denomination_Total_Order_Foreign_" + rowId).val(amountForeign);
                        $("#modal-transaction-denomination-" + rowId).modal("show");
                        $(".preload").hide();
                    }
                    else {
                        alertify.alert(data.ErrorMessage);
                        $(".preload").hide();
                    }
                },
                error: function (e) {
                    console.log(e.status + " - " + e.statusText);
                    alertify.alert("An error occured while opening denomination modal!");
                    $(".preload").hide();
                }
            });
        }
        else {
            $("#modal-transaction-denomination-" + rowId).modal("show");
            $(".preload").hide();
        }
    }

    function PiecesChange(rowId, rowId2) {
        var form = $("#table-transaction-denomination-" + rowId + " input, #table-transaction select#Transaction_Currency_" + rowId + ", #table-transaction input#Transaction_AmountForeign_" + rowId).serialize();
        var url = "@Url.Action("PiecesChange")?rowId=" + rowId + "&rowId2=" + rowId2;

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: form,
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);

                if (data.Result) {
                    if (!data.IsValid) {
                        if (data.ModelErrors) {
                            var errors = "";
                            for (var i = 0; i < data.ModelErrors.length; i++) {
                                if (data.ModelErrors[i][1] != "") {
                                    errors += data.ModelErrors[i][1] + "<br/>";
                                }
                            }

                            if (errors != "") {
                                alertify.alert(errors);
                            }
                        }
                    }

                    $("#Denomination_Value_Pieces_" + rowId + "_" + rowId2).val(data.Pieces);
                    $("#denomination-amount-foreign-" + rowId + "-" + rowId2).html(data.DenoAmountForeign);
                    $("#Denomination_Value_AmountForeign_" + rowId + "_" + rowId2).val(data.DenoAmountForeign);

                    $("#denomination-total-calculated-foreign-" + rowId)[0].innerHTML = data.DenoTotalCalculated;
                    $("#Denomination_Total_Calculated_Foreign_" + rowId).val(data.DenoTotalCalculated);

                    $("#denomination-remaining-foreign-" + rowId)[0].innerHTML = data.DenoTotalRemaining;
                    $("#Denomination_Remaining_Foreign_" + rowId).val(data.DenoTotalRemaining);

                    $("#denomination-total-order-foreign-" + rowId)[0].innerHTML = data.DenoTotalOrder;
                    $("#Denomination_Total_Order_Foreign_" + rowId).val(data.DenoTotalOrder);
                    $(".preload").hide();
                }
                else {
                    alertify.alert(data.ErrorMessage);
                    $(".preload").hide();
                }
            },
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                alertify.alert("An error occured while validating pieces!");
                $(".preload").hide();
            }
        });
    }

    function CoinsChange(rowId, rowId2) {
        var form = $("#table-transaction-denomination-" + rowId + " input, #table-transaction select#Transaction_Currency_" + rowId + ", #table-transaction input#Transaction_AmountForeign_" + rowId).serialize();
        var url = "@Url.Action("CoinsChange")?rowId=" + rowId + "&rowId2=" + rowId2;

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: form,
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);

                if (data.Result) {
                    if (!data.IsValid) {
                        if (data.ModelErrors) {
                            var errors = "";
                            for (var i = 0; i < data.ModelErrors.length; i++) {
                                if (data.ModelErrors[i][1] != "") {
                                    errors += data.ModelErrors[i][1] + "<br/>";
                                }
                            }

                            if (errors != "") {
                                alertify.alert(errors);
                            }
                        }
                    }

                    $("#Denomination_Value_AmountForeign_" + rowId + "_" + rowId2).val(data.DenoAmountForeign);

                    $("#denomination-total-calculated-foreign-" + rowId)[0].innerHTML = data.DenoTotalCalculated;
                    $("#Denomination_Total_Calculated_Foreign_" + rowId).val(data.DenoTotalCalculated);

                    $("#denomination-remaining-foreign-" + rowId)[0].innerHTML = data.DenoTotalRemaining;
                    $("#Denomination_Remaining_Foreign_" + rowId).val(data.DenoTotalRemaining);

                    $("#denomination-total-order-foreign-" + rowId)[0].innerHTML = data.DenoTotalOrder;
                    $("#Denomination_Total_Order_Foreign_" + rowId).val(data.DenoTotalOrder);
                    $(".preload").hide();
                }
                else {
                    alertify.alert(data.ErrorMessage);
                    $(".preload").hide();
                }
            },
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                alertify.alert("An error occured while validating coins!");
                $(".preload").hide();
            }
        });
    }

    function RemoveDenomination(rowId) {
        $("#table-transaction-denomination-" + rowId + " tbody").html("");

        $("#denomination-total-calculated-foreign-" + rowId)[0].innerHTML = "0.00";
        $("#Denomination_Total_Calculated_Foreign_" + rowId).val("0.00");

        $("#modal-transaction-denomination-" + rowId).modal("hide");
    }

    function RemoveTransaction(rowId) {
        $("#transaction-row-" + rowId).remove();

        var transactionCount = $("#table-transaction > tbody > tr").length;

        if (transactionCount == 0) {
            $("#table-transaction").html("");
        }
        else {
            var type = "Remittance";
            var form = $("#table-transaction input, #table-transaction select").serialize();
            var url = "@Url.Action("RemoveTransaction")?type=" + type;
            //$('#table-transaction > tbody > tr').each(function () {
            //     var count = 1;
            //     var value = this.id;
            //    var getID = value.split('-');

            //    if (getID[2] !== count) {
            //        console.log("id"+$("#transaction-row-" + getID).id)
            //        $("#transaction-row-" + getID).id = "transaction-row-"+count;
            //    }
            //    count++;
            //  })

            $.ajax({
                type: "POST",
                cache: false,
                url: url,
                data: form,
                beforeSend: function () {
                    $(".preload").show();
                },
                success: function (data) {
                    data = JSON.parse(data);

                    if (data.Result) {
                        $("#total-amount-foreign").html("$" + data.TotalAmountLocal);
                        $("#total-amount-local").html("$" + data.TotalAmountForeign);

                        //SetLocalPaymentModeAmount(data.TotalAmountLocal);
                        $(".preload").hide();
                    }
                    else {
                        alertify.alert(data.ErrorMessage);
                        $(".preload").hide();
                    }
                },
                error: function (e) {
                    console.log(e.status + " - " + e.statusText);
                    alertify.alert("An error occured while removing transaction!");
                    $(".preload").hide();
                }
            });
        }
    }

    function RemovePairedTransaction(pairedId) {
        $("#table-transaction > tbody > tr.paired-row-" + pairedId).remove();

        var transactionCount = $("#table-transaction > tbody > tr").length;

        if (transactionCount == 0) {
            $("#table-transaction").html("");
        }
        else {
            var type = $("input[name='sales.TransactionType']:checked")[0].id;
            var form = $("#table-transaction input, #table-transaction select").serialize();
            var url = "@Url.Action("RemoveTransaction")?type=" + type;

            $.ajax({
                type: "POST",
                cache: false,
                url: url,
                data: form,
                beforeSend: function () {
                    $(".preload").show();
                },
                success: function (data) {
                    data = JSON.parse(data);

                    if (data.Result) {
                        $("#total-amount-foreign").html("$" + data.TotalAmountForeign);
                        $("#total-amount-local").html("$" + data.TotalAmountLocal);
                        $(".preload").hide();
                    }
                    else {
                        alertify.alert(data.ErrorMessage);
                        $(".preload").hide();
                    }
                },
                error: function (e) {
                    console.log(e.status + " - " + e.statusText);
                    alertify.alert("An error occured while removing transaction!");
                    $(".preload").hide();
                }
            });
        }

        HighlightPaired();
    }

    function SetLocalPaymentModeAmount(amountLocal) {
        if ($("input#cash")[0].checked) {
            $("#sales_CashAmount").val(amountLocal);
        }
    }

    function LocalPaymentAmountChange(id) {
        var amount = $("#" + id).val();
        var url = "@Url.Action("ValidateAmount")";

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: { amount: amount },
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);
                if (data.Result) {
                    $("#" + id).val(data.Amount);
                    $(".preload").hide();
                }
                else {
                    alertify.alert(data.ErrorMessage);
                    $(".preload").hide();
                }
            },
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                alertify.alert("An error occured while validating amount!");
                $(".preload").hide();
            }
        });
    }

	//function LocalPaymentModeClick(id, cls)
	//{
	//	var checked = $("#" + id);

	//	if (checked[0].checked)
	//	{

	//		//check if is in sell mode
	//		var transactionType = $(".radio-transaction-type:checked").val();

	//		if (transactionType == "Sell") {
	//			//Update the 3 field css
	//			//show the button div

	//			if (cls == "payment-mode-cheque-1") {
	//				$("#update-chequeNo1-input-div").css('width', '90%');
	//				$("#sales_Cheque1No").attr('readonly', true);
	//				$("#sales_Cheque1No").removeAttr("disabled");
	//				$("#update-chequeNo1-input-div").css('padding-left', '0px');
	//				$("#update-chequeNo1-input-div").css('padding-right', '5px');
	//				$("#update-chequeNo1-div").show();
	//			}
	//			else if (cls == "payment-mode-cheque-2") {
	//				$("#update-chequeNo2-input-div").css('width', '90%');
	//				$("#sales_Cheque2No").attr('readonly', true);
	//				$("#sales_Cheque2No").removeAttr("disabled");
	//				$("#update-chequeNo2-input-div").css('padding-left', '0px');
	//				$("#update-chequeNo2-input-div").css('padding-right', '5px');
	//				$("#update-chequeNo2-div").show();
	//			}
	//			else if (cls == "payment-mode-cheque-3") {
	//				$("#update-chequeNo3-input-div").css('width', '90%');
	//				$("#sales_Cheque3No").attr('readonly', true);
	//				$("#sales_Cheque3No").removeAttr("disabled");
	//				$("#update-chequeNo3-input-div").css('padding-left', '0px');
	//				$("#update-chequeNo3-input-div").css('padding-right', '5px');
	//				$("#update-chequeNo3-div").show();
	//			}
	//			else if (cls == "payment-mode-transfer") {
	//				$("#update-local-bank-transfer-input-div").css('width', '90%');
	//				$("#sales_BankTransferNo").attr('readonly', true);
	//				$("#sales_BankTransferNo").removeAttr("disabled");
	//				$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
	//				$("#update-local-bank-transfer-input-div").css('padding-right', '5px');
	//				$("#update-local-bank-transfer-div").show();
	//			}
	//		}
	//		else if(transactionType == "Buy")
	//		{
	//			//Update the 3 field css
	//			//show the button div

	//			$("#update-chequeNo1-input-div").css('padding-left', '0px');
	//			$("#update-chequeNo1-input-div").css('padding-right', '0px');
	//			$("#update-chequeNo2-input-div").css('padding-left', '0px');
	//			$("#update-chequeNo2-input-div").css('padding-right', '0px');
	//			$("#update-chequeNo3-input-div").css('padding-left', '0px');
	//			$("#update-chequeNo3-input-div").css('padding-right', '0px');
	//			$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
	//			$("#update-local-bank-transfer-input-div").css('padding-right', '0px');

	//			if (cls == "payment-mode-cheque-1")
	//			{
	//				$("#update-chequeNo1-input-div").css('width', '100%');
	//				$("#sales_Cheque1No").attr('readonly', false);
	//				$("#sales_Cheque1No").removeAttr("disabled");
	//				$("#update-chequeNo1-div").hide();
	//			}
	//			else if (cls == "payment-mode-cheque-2") {
	//				$("#update-chequeNo2-input-div").css('width', '100%');
	//				$("#sales_Cheque2No").attr('readonly', false);
	//				$("#sales_Cheque2No").removeAttr("disabled");
	//				$("#update-chequeNo2-div").hide();
	//			}
	//			else if (cls == "payment-mode-cheque-3") {
	//				$("#update-chequeNo3-input-div").css('width', '100%');
	//				$("#sales_Cheque3No").attr('readonly', false);
	//				$("#sales_Cheque3No").removeAttr("disabled");
	//				$("#update-chequeNo3-div").hide();
	//			}
	//			else if (cls == "payment-mode-transfer") {
	//				$("#update-local-bank-transfer-input-div").css('width', '100%');
	//				$("#sales_BankTransferNo").attr('readonly', false);
	//				$("#sales_BankTransferNo").removeAttr("disabled");
	//				$("#update-local-bank-transfer-div").hide();
	//			}
	//		}

	//		$("input." + cls).removeAttr("disabled");

	//		if (cls != "payment-mode-cash")
	//		{
 //               $("select." + cls).removeAttr("disabled");
 //               $("select." + cls).select2();
 //           }
 //       }
	//	else
	//	{
	//			if (cls == "payment-mode-cheque-1")
	//			{
	//				$("#update-chequeNo1-input-div").css('width', '100%');
	//				$("#sales_Cheque1No").attr("disabled", "disabled");
	//				$("#update-chequeNo1-input-div").css('padding-left', '0px');
	//				$("#update-chequeNo1-input-div").css('padding-right', '0px');
	//				$("#update-chequeNo1-div").hide();
	//			}
	//			else if (cls == "payment-mode-cheque-2")
	//			{
	//				$("#update-chequeNo2-input-div").css('width', '100%');
	//				$("#sales_Cheque2No").attr("disabled", "disabled");
	//				$("#update-chequeNo2-input-div").css('padding-left', '0px');
	//				$("#update-chequeNo2-input-div").css('padding-right', '0px');
	//				$("#update-chequeNo2-div").hide();
	//			}
	//			else if (cls == "payment-mode-cheque-3")
	//			{
	//				$("#update-chequeNo3-input-div").css('width', '100%');
	//				$("#sales_Cheque3No").attr("disabled", "disabled");
	//				$("#update-chequeNo3-input-div").css('padding-left', '0px');
	//				$("#update-chequeNo3-input-div").css('padding-right', '0px');
	//				$("#update-chequeNo3-div").hide();
	//			}
	//			else if (cls == "payment-mode-transfer")
	//			{
	//				$("#update-local-bank-transfer-input-div").css('width', '100%');
	//				$("#sales_BankTransferNo").attr("disabled", "disabled");
	//				$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
	//				$("#update-local-bank-transfer-input-div").css('padding-right', '0px');
	//				$("#update-local-bank-transfer-div").hide();
	//			}

 //           $("input." + cls).attr("disabled", "disabled");
 //           if (cls != "payment-mode-cash") {
 //               $("select." + cls).attr("disabled", "disabled");
 //               $("select." + cls).select2();
 //           }
 //       }

 //       CheckLocalPaymentMode();
 //   }

    function CheckLocalPaymentMode() {
        var checked = $("input[type=checkbox]:checked").length;

        if (checked >= 4) {
            $("input[type=checkbox]:not(:checked)").attr("disabled", "disabled");
        }
        else {
            $("input[type=checkbox]:disabled").removeAttr("disabled");
        }
    }

    function AmountChange(id, n) {
        var url = "@Url.Action("ValidateAmount2")";
        var amount = $("#" + id).val();

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: { amount: amount, allowedNegative: n },
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);

                if (data.Result) {
                    $("#" + id).val(data.Amount);
                    $(".preload").hide();
                }
                else {
                    alertify.alert(data.ErrorMessage);
                    $(".preload").hide();
                }
            },
            error: function (e) {
                console.log(e);
                alertify.alert("An error occured while validating amount!");
                $(".preload").hide();
            }
        });
    }

    function disableButton(obj, event)
	{
		//event.stopImmediatePropagation();
		event.preventDefault();
        $("#disable_button").attr("disabled", true);
        setTimeout(function () {
        $("#form-create").submit();
        }, 700)
	}

	//Update Cheque Model
	function UpdateCheque(id)
	{
		//console.log("Update Cheque with ID " + id);
        var url = "@Url.Action("AddChequeModel")";
        $.ajax({
			type: "GET",
			beforeSend: function() {
				 $(".preload").show();
			},
            url: url,
            data: { id: id },
			success: function (data)
			{
                $("#cheque-modal .modal-body").html(data);
				$("#cheque-modal").modal("show");
				$(".preload").hide();
			},
			error: function (e)
			{
                console.log(e.status + " - " + e.statusText);
                $(".preload").hide();
            }
        });
	}

	//Update Bank Transfer Model
	function UpdateBankTransfer(id)
	{
		//console.log("Update Bank Transfer with ID " + id);
        var url = "@Url.Action("AddBankTransferModel")";
        $.ajax({
			type: "GET",
			beforeSend: function() {
				 $(".preload").show();
			},
            url: url,
            data: { id: id },
			success: function (data)
			{
                $("#bank-transfer-modal .modal-body").html(data);
				$("#bank-transfer-modal").modal("show");
				$(".preload").hide();
			},
			error: function (e)
			{
                console.log(e.status + " - " + e.statusText);
                $(".preload").hide();
            }
        });
	}

	//Update Cheque 1 No Model
	function UpdateCheque1No()
	{
        $("#cheque1No-modal").modal("show");
	}

	//Update Cheque 2 No Model
	function UpdateCheque2No()
	{
        $("#cheque2No-modal").modal("show");
	}

	//Update Cheque 3 No Model
	function UpdateCheque3No()
	{
        $("#cheque3No-modal").modal("show");
	}

	//Update Local Bank Transfer Model
	function UpdateLocalBankTransfer()
	{
        $("#local-bank-transfer-modal").modal("show");
	}

	function btnLocalCheque1NoConfirm()
	{
		//hide modal
		var getCheque1NoModalValue = document.getElementById("LocalCheque1NoModel").value;//by id

		if (getCheque1NoModalValue === "")
		{
			//prompt error
			document.getElementById("LocalCheque1NoErrorMessage").textContent = "Cheque 1 No. is required!";
		}
		else
		{
			//update value and append into the div
			//Transaction_ChequeNo_
			$("#sales_Cheque1No").val(getCheque1NoModalValue);
			$("#cheque1No-modal").modal("hide");
			$("#PendingLocalCheque1Log").val(1);
		}

	}

	function btnLocalCheque1NoCancel()
	{
		//hide modal
		$("#cheque1No-modal").modal("hide");
	}

	function btnLocalCheque2NoConfirm()
	{
		//hide modal
		var getCheque2NoModalValue = document.getElementById("LocalCheque2NoModel").value;//by id

		if (getCheque2NoModalValue === "")
		{
			//prompt error
			document.getElementById("LocalCheque2NoErrorMessage").textContent = "Cheque 2 No. is required!";
		}
		else
		{
			//update value and append into the div
			//Transaction_ChequeNo_
			$("#sales_Cheque2No").val(getCheque2NoModalValue);
			$("#cheque2No-modal").modal("hide");
			$("#PendingLocalCheque2Log").val(1);
		}

	}

	function btnLocalCheque2NoCancel()
	{
		//hide modal
		$("#cheque2No-modal").modal("hide");
	}

	function btnLocalCheque3NoConfirm()
	{
		//hide modal
		var getCheque3NoModalValue = document.getElementById("LocalCheque3NoModel").value;//by id

		if (getCheque3NoModalValue === "")
		{
			//prompt error
			document.getElementById("LocalCheque3NoErrorMessage").textContent = "Cheque 3 No. is required!";
		}
		else
		{
			//update value and append into the div
			//Transaction_ChequeNo_
			$("#sales_Cheque3No").val(getCheque3NoModalValue);
			$("#cheque3No-modal").modal("hide");
			$("#PendingLocalCheque3Log").val(1);
		}

	}

	function btnLocalCheque3NoCancel()
	{
		//hide modal
		$("#cheque3No-modal").modal("hide");
	}

	function btnLocalBankTransferNoConfirm()
	{
		//hide modal
		var getLocalBankTransferModalValue = document.getElementById("LocalBankTransferNoModel").value;//by id

		if (getLocalBankTransferModalValue === "")
		{
			//prompt error
			document.getElementById("LocalBankTransferNoErrorMessage").textContent = "Bank Transfer No. is required!";
		}
		else
		{
			//update value and append into the div
			//Transaction_ChequeNo_
			$("#sales_BankTransferNo").val(getLocalBankTransferModalValue);
			$("#local-bank-transfer-modal").modal("hide");
			$("#PendingLocalBankTransferLog").val(1);
		}
	}

	function btnLocalBankTransferNoCancel()
	{
		//hide modal
		$("#local-bank-transfer-modal").modal("hide");
	}

	function btnChequeConfirm(id)
	{
		//hide modal
		var getChequeModalValue = document.getElementById("Transaction_ChequeNoModel_" + id).value;//by id

		if (getChequeModalValue === "")
		{
			//prompt error
			document.getElementById("ChequeErrorMessage_"+ id).textContent = "Cheque No. is required!";
		}
		else
		{
			//update value and append into the div
			//Transaction_ChequeNo_
			$("#Transaction_ChequeNo_" + id).val(getChequeModalValue);
			$("#cheque-modal").modal("hide");
			//update hidden value to 1
			$("#PendingChequeLog").val(1);
		}

	}

	function btnChequeCancel()
	{
		//hide modal
		$("#cheque-modal").modal("hide");
	}

	function btnBankTransferConfirm(id)
	{
		//hide modal
		var getBankTransferModalValue = document.getElementById("Transaction_BankTransferNoModel_" + id).value;//by id

		if (getBankTransferModalValue === "")
		{
			//prompt error
			document.getElementById("BankTransferErrorMessage_"+ id).textContent = "Bank Transfer No. is required!";
		}
		else
		{
			//update value and append into the div
			//Transaction_BankTransferNo_
			$("#Transaction_BankTransferNo_" + id).val(getBankTransferModalValue);
			$("#bank-transfer-modal").modal("hide");
			$("#PendingBankTransferLog").val(1);
		}

	}

	function btnBankTransferCancel()
	{
		//hide modal
		$("#bank-transfer-modal").modal("hide");
	}

	function btnBeneficiaryModelConfirm(id)
	{
		//hide modal
		$("#beneficiary-modal_"+id).modal("hide");
	}

	function btnBeneficiaryModelCancel(id)
	{
		//hide modal
		$("#beneficiary-modal_"+id).modal("hide");
	}

	$(window).resize(function ()
	{
		if (window.innerWidth > 920)
		{
			if (transactionType == "Sell")
			{

				//Update the 3 field css
				//show the button div
				if ($("#cheque-1")[0].checked)
				{
					$("#update-chequeNo1-input-div").css('width', '90%');
					$("#update-chequeNo1-input-div").css('padding-left', '0px');
					$("#update-chequeNo1-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo1-input-div").css('width', '100%');
					$("#update-chequeNo1-input-div").css('padding-left', '0px');
					$("#update-chequeNo1-input-div").css('padding-right', '0px');
					$(".payment-mode-cheque-1").css('width', '100%');
				}

				if ($("#cheque-2")[0].checked)
				{
					$("#update-chequeNo2-input-div").css('width', '90%');
					$("#update-chequeNo2-input-div").css('padding-left', '0px');
					$("#update-chequeNo2-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo2-input-div").css('width', '100%');
					$("#update-chequeNo2-input-div").css('padding-left', '0px');
					$("#update-chequeNo2-input-div").css('padding-right', '0px');
				}

				if ($("#cheque-3")[0].checked)
				{
					$("#update-chequeNo3-input-div").css('width', '90%');
					$("#update-chequeNo3-input-div").css('padding-left', '0px');
					$("#update-chequeNo3-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo3-input-div").css('width', '100%');
					$("#update-chequeNo3-input-div").css('padding-left', '0px');
					$("#update-chequeNo3-input-div").css('padding-right', '0px');
				}

				if ($("#bank-transfer")[0].checked)
				{
					$("#update-local-bank-transfer-input-div").css('width', '90%');
					$("#sales_BankTransferNo").attr('readonly', true);
					$("#sales_BankTransferNo").removeAttr("disabled");
					$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
					$("#update-local-bank-transfer-input-div").css('padding-right', '5px');
					$("#update-local-bank-transfer-div").show();
				}
				else
				{
					$("#update-local-bank-transfer-input-div").css('width', '100%');
					$("#sales_BankTransferNo").attr("disabled", "disabled");
					$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
					$("#update-local-bank-transfer-input-div").css('padding-right', '0px');
					$("#update-local-bank-transfer-div").hide();
				}

			}
			else if(transactionType == "Buy")
			{
				//Update the 3 field css
				//show the button div
				//var checked = $("#" + id);
				$("#update-chequeNo1-input-div").css('padding-left', '0px');
				$("#update-chequeNo1-input-div").css('padding-right', '0px');
				$("#update-chequeNo2-input-div").css('padding-left', '0px');
				$("#update-chequeNo2-input-div").css('padding-right', '0px');
				$("#update-chequeNo3-input-div").css('padding-left', '0px');
				$("#update-chequeNo3-input-div").css('padding-right', '0px');
				$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
				$("#update-local-bank-transfer-input-div").css('padding-right', '0px');
				$("#update-chequeNo1-input-div").css('width', '100%');
				$("#update-chequeNo2-input-div").css('width', '100%');
				$("#update-chequeNo3-input-div").css('width', '100%');
				$("#update-local-bank-transfer-input-div").css('width', '100%');
			}
		}
		else if (window.innerWidth > 800 && window.innerWidth <= 920)
		{
			if (transactionType == "Sell")
			{

				//Update the 3 field css
				//show the button div
				if ($("#cheque-1")[0].checked)
				{
					$("#update-chequeNo1-input-div").css('width', '89%');
					$("#update-chequeNo1-input-div").css('padding-left', '0px');
					$("#update-chequeNo1-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo1-input-div").css('width', '100%');
					$("#update-chequeNo1-input-div").css('padding-left', '0px');
					$("#update-chequeNo1-input-div").css('padding-right', '0px');
					$(".payment-mode-cheque-1").css('width', '100%');
				}

				if ($("#cheque-2")[0].checked)
				{
					$("#update-chequeNo2-input-div").css('width', '89%');
					$("#update-chequeNo2-input-div").css('padding-left', '0px');
					$("#update-chequeNo2-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo2-input-div").css('width', '100%');
					$("#update-chequeNo2-input-div").css('padding-left', '0px');
					$("#update-chequeNo2-input-div").css('padding-right', '0px');
				}

				if ($("#cheque-3")[0].checked)
				{
					$("#update-chequeNo3-input-div").css('width', '89%');
					$("#update-chequeNo3-input-div").css('padding-left', '0px');
					$("#update-chequeNo3-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo3-input-div").css('width', '100%');
					$("#update-chequeNo3-input-div").css('padding-left', '0px');
					$("#update-chequeNo3-input-div").css('padding-right', '0px');
				}

				if ($("#bank-transfer")[0].checked)
				{
					$("#update-local-bank-transfer-input-div").css('width', '89%');
					$("#sales_BankTransferNo").attr('readonly', true);
					$("#sales_BankTransferNo").removeAttr("disabled");
					$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
					$("#update-local-bank-transfer-input-div").css('padding-right', '5px');
					$("#update-local-bank-transfer-div").show();
				}
				else
				{
					$("#update-local-bank-transfer-input-div").css('width', '100%');
					$("#sales_BankTransferNo").attr("disabled", "disabled");
					$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
					$("#update-local-bank-transfer-input-div").css('padding-right', '0px');
					$("#update-local-bank-transfer-div").hide();
				}

			}
			else if(transactionType == "Buy")
			{
				//Update the 3 field css
				//show the button div
				//var checked = $("#" + id);
				$("#update-chequeNo1-input-div").css('padding-left', '0px');
				$("#update-chequeNo1-input-div").css('padding-right', '0px');
				$("#update-chequeNo2-input-div").css('padding-left', '0px');
				$("#update-chequeNo2-input-div").css('padding-right', '0px');
				$("#update-chequeNo3-input-div").css('padding-left', '0px');
				$("#update-chequeNo3-input-div").css('padding-right', '0px');
				$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
				$("#update-local-bank-transfer-input-div").css('padding-right', '0px');
				$("#update-chequeNo1-input-div").css('width', '100%');
				$("#update-chequeNo2-input-div").css('width', '100%');
				$("#update-chequeNo3-input-div").css('width', '100%');
				$("#update-local-bank-transfer-input-div").css('width', '100%');
			}
		}
		else if (window.innerWidth >= 640 && window.innerWidth <= 799)
		{
			if (transactionType == "Sell")
			{

				//Update the 3 field css
				//show the button div
				if ($("#cheque-1")[0].checked)
				{
					$("#update-chequeNo1-input-div").css('width', '88%');
					$("#update-chequeNo1-input-div").css('padding-left', '0px');
					$("#update-chequeNo1-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo1-input-div").css('width', '100%');
					$("#update-chequeNo1-input-div").css('padding-left', '0px');
					$("#update-chequeNo1-input-div").css('padding-right', '0px');
					$(".payment-mode-cheque-1").css('width', '100%');
				}

				if ($("#cheque-2")[0].checked)
				{
					$("#update-chequeNo2-input-div").css('width', '88%');
					$("#update-chequeNo2-input-div").css('padding-left', '0px');
					$("#update-chequeNo2-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo2-input-div").css('width', '100%');
					$("#update-chequeNo2-input-div").css('padding-left', '0px');
					$("#update-chequeNo2-input-div").css('padding-right', '0px');
				}

				if ($("#cheque-3")[0].checked)
				{
					$("#update-chequeNo3-input-div").css('width', '88%');
					$("#update-chequeNo3-input-div").css('padding-left', '0px');
					$("#update-chequeNo3-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo3-input-div").css('width', '100%');
					$("#update-chequeNo3-input-div").css('padding-left', '0px');
					$("#update-chequeNo3-input-div").css('padding-right', '0px');
				}

				if ($("#bank-transfer")[0].checked)
				{
					$("#update-local-bank-transfer-input-div").css('width', '88%');
					$("#sales_BankTransferNo").attr('readonly', true);
					$("#sales_BankTransferNo").removeAttr("disabled");
					$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
					$("#update-local-bank-transfer-input-div").css('padding-right', '5px');
					$("#update-local-bank-transfer-div").show();
				}
				else
				{
					$("#update-local-bank-transfer-input-div").css('width', '100%');
					$("#sales_BankTransferNo").attr("disabled", "disabled");
					$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
					$("#update-local-bank-transfer-input-div").css('padding-right', '0px');
					$("#update-local-bank-transfer-div").hide();
				}

			}
			else if(transactionType == "Buy")
			{
				//Update the 3 field css
				//show the button div
				//var checked = $("#" + id);
				$("#update-chequeNo1-input-div").css('padding-left', '0px');
				$("#update-chequeNo1-input-div").css('padding-right', '0px');
				$("#update-chequeNo2-input-div").css('padding-left', '0px');
				$("#update-chequeNo2-input-div").css('padding-right', '0px');
				$("#update-chequeNo3-input-div").css('padding-left', '0px');
				$("#update-chequeNo3-input-div").css('padding-right', '0px');
				$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
				$("#update-local-bank-transfer-input-div").css('padding-right', '0px');
				$("#update-chequeNo1-input-div").css('width', '100%');
				$("#update-chequeNo2-input-div").css('width', '100%');
				$("#update-chequeNo3-input-div").css('width', '100%');
				$("#update-local-bank-transfer-input-div").css('width', '100%');
			}
		}
		else if (window.innerWidth < 639)
		{
			if (transactionType == "Sell")
			{

				//Update the 3 field css
				//show the button div
				if ($("#cheque-1")[0].checked)
				{
					$("#update-chequeNo1-input-div").css('width', '83%');
					$("#update-chequeNo1-input-div").css('padding-left', '0px');
					$("#update-chequeNo1-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo1-input-div").css('width', '100%');
					$("#update-chequeNo1-input-div").css('padding-left', '0px');
					$("#update-chequeNo1-input-div").css('padding-right', '0px');
					$(".payment-mode-cheque-1").css('width', '100%');
				}

				if ($("#cheque-2")[0].checked)
				{
					$("#update-chequeNo2-input-div").css('width', '83%');
					$("#update-chequeNo2-input-div").css('padding-left', '0px');
					$("#update-chequeNo2-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo2-input-div").css('width', '100%');
					$("#update-chequeNo2-input-div").css('padding-left', '0px');
					$("#update-chequeNo2-input-div").css('padding-right', '0px');
				}

				if ($("#cheque-3")[0].checked)
				{
					$("#update-chequeNo3-input-div").css('width', '83%');
					$("#update-chequeNo3-input-div").css('padding-left', '0px');
					$("#update-chequeNo3-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo3-input-div").css('width', '100%');
					$("#update-chequeNo3-input-div").css('padding-left', '0px');
					$("#update-chequeNo3-input-div").css('padding-right', '0px');
				}

				if ($("#bank-transfer")[0].checked)
				{
					$("#update-local-bank-transfer-input-div").css('width', '83%');
					$("#sales_BankTransferNo").attr('readonly', true);
					$("#sales_BankTransferNo").removeAttr("disabled");
					$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
					$("#update-local-bank-transfer-input-div").css('padding-right', '5px');
					$("#update-local-bank-transfer-div").show();
				}
				else
				{
					$("#update-local-bank-transfer-input-div").css('width', '100%');
					$("#sales_BankTransferNo").attr("disabled", "disabled");
					$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
					$("#update-local-bank-transfer-input-div").css('padding-right', '0px');
					$("#update-local-bank-transfer-div").hide();
				}

			}
			else if(transactionType == "Buy")
			{
				//Update the 3 field css
				//show the button div
				//var checked = $("#" + id);
				$("#update-chequeNo1-input-div").css('padding-left', '0px');
				$("#update-chequeNo1-input-div").css('padding-right', '0px');
				$("#update-chequeNo2-input-div").css('padding-left', '0px');
				$("#update-chequeNo2-input-div").css('padding-right', '0px');
				$("#update-chequeNo3-input-div").css('padding-left', '0px');
				$("#update-chequeNo3-input-div").css('padding-right', '0px');
				$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
				$("#update-local-bank-transfer-input-div").css('padding-right', '0px');
				$("#update-chequeNo1-input-div").css('width', '100%');
				$("#update-chequeNo2-input-div").css('width', '100%');
				$("#update-chequeNo3-input-div").css('width', '100%');
				$("#update-local-bank-transfer-input-div").css('width', '100%');
			}
		}
    });

    	function UpdateBeneficiary(id)
	{
		//console.log("Update Bank Transfer with ID " + id);
        @*var url = "@Url.Action("AddBenefiacryAccount")";
        $.ajax({
			type: "GET",
			beforeSend: function() {
				 $(".preload").show();
			},
            url: url,
            data: { id: id },
			success: function (data)
			{
                $("#beneficiary-modal_"+id).html(data);*@
            $("#beneficiary-modal_" + id).modal("show");
            var type = document.getElementById("individual_"+id).checked;
            if (type === true) {
                individualSection(id);
                document.querySelector('#individual_' + id).checked = true;
                        }
                        else {
                businessSection(id);
                document.querySelector('#business_' + id).checked = true;
            }
    //$("#Transaction_BeneficiaryFriendly_" + id).select2();
    //$("#Transaction_BeneficiaryBankCountry_" + id).select2();
    //$("#Transaction_BeneficiaryPurposePayment_" + id).select2();
    //$("#Transaction_BeneficiarySupportDocType_" + id).select2();
    //$("#Transaction_BeneficiaryCategoryBusiness_" + id).select2();
    //$("#Transaction_BeneficiaryNationality_" + id).select2();
    //$("#Transaction_BeneficiarySourceFund_" + id).select2();
				//$(".preload").hide();
			//},
			//error: function (e)
			//{
   //             console.log(e.status + " - " + e.statusText);
   //             $(".preload").hide();
   //         }
   //     });
    }

   function GetAgentDetail() {
        var cid = $("#agentID").val();

        if (cid != null && cid != "") {
            var url = "@Url.Action("GetAgentDetail")"

            $.ajax({
                type: "POST",
                cache: false,
                url: url,
                data: { id: cid },
                success: function (data) {
                    data = JSON.parse(data);

                    if (data.Result) {
                        $("#CustomerContact").val(data.Agent.AgentId);
                        //$("#CustomerAddress").val(data.CustomerAddress);
                        //$("#sales_CustomerRemarks").val(data.CustomerRemarks);

                        //Recalculate Rate
                    }
                    else {
                        alertify.alert(data.ErrorMessage);
                    }
                },
                error: function (e) {
                    console.log(e.status + " - " + e.statusText);
                    alertify.alert("An error occured while retrieving customer details!");
                }
            });
        }
        else {
            $("#CustomerContact").val("");
            $("#CustomerAddress").val("");
            $("#sales_CustomerRemarks").val("");
        }
    }

       function GetBeneficiaryDetail(rowid) {
        var cid = $("#Transaction_BeneficiaryFriendly_"+rowid).val();

        if (cid != null && cid != "") {
            var url = "@Url.Action("GetBeneficiaryDetail")"

            $.ajax({
                type: "POST",
                cache: false,
                url: url,
                data: { id: cid },
				success: function (data) {
					//console.log(data.PaymentDetails);
					//console.log(JSON.stringify(data));
					//console.log(data.BankCode);
					//data = JSON.Parse(data);
                    if (data.Result) {
                        $("#Transaction_BeneficiaryName_"+rowid).val(data.BeneficiaryFullName);
                        $("#Transaction_BeneficiaryBankAccount_"+rowid).val(data.BankAccountNo);
                        $("#Transaction_BeneficiaryBankCode_"+rowid).val(data.BankCode);
                        $("#Transaction_BeneficiaryBankCountry_"+rowid).val(data.BankCountry);
                        $("#Transaction_BeneficiaryBankCountry_"+rowid).select2();
                        $("#Transaction_BeneficiaryBankAddress_"+rowid).val(data.BankAddress);
                        $("#Transaction_BeneficiaryPurposePayment_"+rowid).val(data.PurposeOfPayment);
                        $("#Transaction_BeneficiaryPurposePayment_"+rowid).select2();
                        $("#Transaction_BeneficiarySourceFund_"+rowid).val(data.SourceOfPayment);
                        $("#Transaction_BeneficiarySourceFund_"+rowid).select2();
                        //$("#Transaction_BeneficiarySupportDocType_"+rowid).val(data.AgentId);
                        //$("#Transaction_BeneficiaryUploadSuporting_"+rowid).val(data.AgentId);
                        $("#Transaction_BeneficiaryPaymentDetails_"+rowid).val(data.PaymentDetails);
                        if (data.Type == 0) {
                            individualSection(rowid);
                            document.querySelector('#individual_' + rowid).checked = true;
                            console.log(1);
                        }
                        else {
                            businessSection(rowid);
                            document.querySelector('#business_' + rowid).checked = true;
                            console.log(2);
                        }
                        $("#Transaction_BeneficiaryNationality_"+rowid).val(data.BeneficiaryNationality);
                        $("#Transaction_BeneficiaryNationality_"+rowid).select2();
                        $("#Transaction_BeneficiaryCompanyRegistration_"+rowid).val(data.BeneficiaryCompanyRegistrationNo);
                        $("#Transaction_BeneficiaryCategoryBusiness_"+rowid).val(data.BeneficiaryBusinessCategory);
                        $("#Transaction_BeneficiaryCategoryBusiness_"+rowid).select2();
                        $("#Transaction_BeneficiaryCompanyContact_" + rowid).val(data.BeneficiaryContactNo);
                        $("#Transaction_ContactNoMain_"+rowid).val(data.BeneficiaryContactNoMain);
                        $("#Transaction_AddressMain_"+rowid).val(data.BeneficiaryAddressMain);
                        $("#Transaction_BeneficiaryBankName_"+rowid).val(data.BeneficiaryBankName);
                        $("#Transaction_IBANEuropeBSBAustralia_" + rowid).val(data.IBANEuropeBSBAustralia);

                        var getValue = $("#Transaction_BeneficiaryBankCountry_" + rowid).val();

                        if (getValue == 48) {
                            $("#Transaction_OtherBankCountry_" + rowid).removeAttr("disabled");
                            $("#Transaction_OtherBankCountry_" + rowid).val(data.BeneficiaryBankCountryOthers);
                        }
                        else {
                            $("#Transaction_OtherBankCountry_" + rowid).prop('disabled', true);
                            $("#Transaction_OtherBankCountry_" + rowid).val("");
                        }

                        var getValue2 = $("#Transaction_BeneficiaryNationality_" + rowid).val();

                        if (getValue2 == 201) {
                            $("#Transaction_OtherNationality_" + rowid).removeAttr("disabled");
                            $("#Transaction_OtherNationality_" + rowid).val(data.BeneficiaryNationalityIfOthers);
                        }
                        else {
                            $("#Transaction_OtherNationality_" + rowid).prop('disabled', true);
                            $("#Transaction_OtherNationality_" + rowid).val("");
                        }

                        var getValue3 = $("#Transaction_BeneficiaryCategoryBusiness_" + rowid).val();

                        if (getValue3 == 331) {
                            $("#Transaction_OtherCategoryBusiness_" + rowid).removeAttr("disabled");
                            $("#Transaction_OtherCategoryBusiness_" + rowid).val(data.BeneficiaryBusinessCategoryIfOthers);
                        }
                        else {
                            $("#Transaction_OtherCategoryBusiness_" + rowid).prop('disabled', true);
                            $("#Transaction_OtherCategoryBusiness_" + rowid).val("");
                        }


                        var getValue4 = $("#Transaction_BeneficiaryPurposePayment_" + rowid).val();

                        if (getValue4 == 52) {
                            $("#Transaction_OtherPurposePayment_" + rowid).removeAttr("disabled");
                            $("#Transaction_OtherPurposePayment_" + rowid).val(data.BeneficiaryPurposeOfPaymentIfOthers);
                        }
                        else {
                            $("#Transaction_OtherPurposePayment_" + rowid).prop('disabled', true);
                            $("#Transaction_OtherPurposePayment_" + rowid).val("");
                        }

                        var getValue5 = $("#Transaction_BeneficiarySourceFund_" + rowid).val();

                        if (getValue5 == 20) {
                            $("#Transaction_OtherSourceFund_" + rowid).removeAttr("disabled");
                            $("#Transaction_OtherSourceFund_" + rowid).val(data.BeneficiarySourceOfPaymentIfOthers);
                        }
                        else {
                            $("#Transaction_OtherSourceFund_" + rowid).prop('disabled', true);
                            $("#Transaction_OtherSourceFund_" + rowid).val("");
                        }
                        var getValue6 = $("#Transaction_BeneficiarySupportDocType_" + rowid).val();
                        if (getValue6 == 11) {
                            $("#Transaction_OtherSupportDocType_" + rowid).removeAttr("disabled");
                            $("#Transaction_OtherSupportDocType_" + rowid).val(data.BeneficiaryBankCountryOthers);
                        }
                        else {
                            $("#Transaction_OtherSupportDocType_" + rowid).prop('disabled', true);
                            $("#Transaction_OtherSupportDocType_" + rowid).val("");
                        }

                        //$("#CustomerAddress").val(data.CustomerAddress);
                        //$("#sales_CustomerRemarks").val(data.CustomerRemarks);

                        //Recalculate Rate
                    }
                    else {
                        alertify.alert(data.ErrorMessage);
                    }
                },
                error: function (e) {
                    console.log(e.status + " - " + e.statusText);
                    alertify.alert("An error occured while retrieving customer details!");
                }
            });
        }
        else {
            $("#CustomerContact").val("");
            $("#CustomerAddress").val("");
            $("#sales_CustomerRemarks").val("");
        }
    }

	function individualSection(id)
    {
		$(".individualSection_"+id).show();
        $(".businessSection_" + id).hide();
        getPurposePayment(0, id);
    }

    function businessSection(id)
    {
		$(".individualSection_"+id).hide();
        $(".businessSection_" + id).show();
        getPurposePayment(1, id);
    }

    function getPurposePayment(type, rowid) {
        var get = $('#Transaction_BeneficiaryPurposePayment_' + rowid).val();
        $.ajax({
            url: "@Url.Action("PurposePaymentSelectList")",
            type: "POST",
            data: {
                type: type
            },
            success: function (data) {

                //console.log(data[0].PurposeofPaymentDDL);
                if (data[0].Result === "true") {
                   $("#Transaction_BeneficiaryPurposePayment_" + rowid).empty();
                       $(data[0].PurposeofPaymentDDL).each(function () {
                       $('#Transaction_BeneficiaryPurposePayment_' + rowid).append($("<option></option>").val(this.Value).html(this.Text));
                       });
                    $('#Transaction_BeneficiaryPurposePayment_' + rowid).val(get);
                    $('#Transaction_BeneficiaryPurposePayment_' + rowid).select2();
                }
                else {
                    alertify.alert("An error occured while retrieving amount!");
                }
            },
            error: function (e) {
                alertify.alert("An error occured while retrieving amount!");
            }
        });
    }

    function calculatePayGetAmount(rowId, type, totalCount) {
            var payrate = Number($("#payRate_" + rowId).val());
            var getrate = Number($("#getRate_" + rowId).val());

            var paydec = $("#payDecimalFormat_" + rowId).val();
            var getdec = $("#getDecimalFormat_" + rowId).val();
            var gettransactionfees = $("#gettransactionFees_" + rowId).val();
        var paytransactionfees = $("#paytransactionFees_" + rowId).val();
        if ($("#Transaction_Fee_" + rowId).val() > 0) {
            paytransactionfees = $("#Transaction_Fee_" + rowId).val();
        }
        else {
            paytransactionfees = 0;
        }
        var rate = 0;
        if ($("#Transaction_Rate_" + rowId).val() > 0) {
            rate = $("#Transaction_Rate_" + rowId).val();
        }
        calculateAmount(type, payrate, getrate, paytransactionfees, rowId, paydec, getdec, rate);
        setTimeout(function () {
        amountChange(rowId);
        }, 1000);

    }

    function calculateAmount(type, payrate, getrate, paytransactionfees, rowId, paydec, getdec, rate) {
        var payamount = $("#Transaction_PayAmount_" + rowId).val();
        var getamount = $("#Transaction_GetAmount_" + rowId).val();
        
        $.ajax({
            url: "@Url.Action("calculateAmount")",
            type: "POST",
            data: {
                type: type, payrate: payrate,
                getrate: getrate, paytransactionfees: paytransactionfees,
                payamount: payamount, getamount: getamount,
                paydec: paydec, getdec: getdec, currentRate: rate
            },
            success: function (data) {
                data = JSON.parse(data);
                //console.log(data.Result);
                if (data.Result == true) {
                        var amount;
                    if (type === 1) {
                        //finalrate = Number((payrate / getrate).toFixed(getdec));
                        $("#Transaction_GetAmount_" + rowId).val(data.amount);
                        $("#Transaction_Rate_" + rowId).val(data.rate);
                        $("#Transaction_Fee_" + rowId).val(data.transactionfee);
                    } else if (type === 2) {
                        //finalrate = Number((payrate * getrate).toFixed(paydec));
                        $("#Transaction_PayAmount_" + rowId).val(data.amount);
                        $("#Transaction_Rate_" + rowId).val(data.rate);
                        $("#Transaction_Fee_" + rowId).val(data.transactionfee);
                    }
                    else if (type === 3) {
                        $("#Transaction_PayAmount_" + rowId).val(data.amount);
                        $("#Transaction_Fee_" + rowId).val(data.transactionfee);
                        $("#Transaction_Rate_" + rowId).val(data.rate);
                    }
                    else {
                        $("#Transaction_PayAmount_" + rowId).val(data.amount);
                        $("#Transaction_Fee_" + rowId).val(data.transactionfee);
                        $("#Transaction_Rate_" + rowId).val(data.rate);
                    }
                }
                else {
                    alertify.alert("An error occured while retrieving amount!");
                }
            },
            error: function (e) {
                alertify.alert("An error occured while retrieving amount!");
            }
        });
    }

    function amountChange(rowId) {
        var url = "@Url.Action("AmountForeignChange")?rowId=" + rowId + "&type=Remittance";
        var form = $("#table-transaction input, #table-transaction select").serialize();

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: form,
            beforeSend: function () {
                //$(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);

                if (data.Result) {
                    if (!data.IsValid) {
                        if (data.ModelErrors) {
                            var errors = "";
                            for (var i = 0; i < data.ModelErrors.length; i++) {
                                if (data.ModelErrors[i][1] != "") {
                                    errors += data.ModelErrors[i][1] + "<br/>";
                                }
                            }

                            if (errors != "") {
                                alertify.alert(errors);
                            }
                        }
                    }
                }
                else {
                    alertify.alert(data.ErrorMessage);
                }

                $("#total-amount-foreign").html(data.TotalAmountPay);
                $("#total-amount-local").html(data.TotalAmountGet);
                //$(".preload").hide();
            },
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                alertify.alert("An error occured while calculating amount local!");
                $(".preload").hide();
            }
        });
    }

        //Basis of Authority Uploads
    function uploadSupportingDocFile($this,id) {

        var $file = $this,
            $formData = new FormData();
        if ($file.files.length > 0) {
            for (var i = 0; i < $file.files.length; i++) {
                $formData.append("file-" + i, $file.files[i]);
            }
        }
        $.ajax({
            url: "@Url.Action("FileUploader")",
            type: "POST",
            data: $formData,
            dataType: "json",
            contentType: false,
            processData: false,
            success: function ($data) {
                if ($data.result == "success") {
                    AppendBasisOfAuthorityFiles($data.msg, id);
                }
                else {
                    alertify.alert($data.msg);
                }
            },
            error: function (e) {
                alertify.alert("An error occured while uploading files!");
            }
        });

    }

            //ID Passport
    function uploadIDPassport($this,id) {

        var $file = $this,
            $formData = new FormData();
        if ($file.files.length > 0) {
            for (var i = 0; i < $file.files.length; i++) {
                $formData.append("file-" + i, $file.files[i]);
            }
        }
        $.ajax({
            url: "@Url.Action("IDPassportUploader")",
            type: "POST",
            data: $formData,
            dataType: "json",
            contentType: false,
            processData: false,
            success: function ($data) {
                if ($data.result == "success") {
                    AppendIDPassport($data.msg, id);
                }
                else {
                    alertify.alert($data.msg);
                }
            },
            error: function (e) {
                alertify.alert("An error occured while uploading files!");
            }
        });

    }

    function AppendIDPassport(data, id) {
        var files = data.split(",");
        for (var i = 0; i < files.length; i++) {
            var $div = $("<div class='margin-top-10 small'></div>");
            //var $a = $("<a href='@Url.Content("~/FileUploads/Temp/")" + files[i] + "' target='_blank'>" + files[i] + "</a>");
            var $button = $("<button type='button' class='btn btn-pure btn-xs btn-danger icon wb-close' onclick='RemoveIDPassport(this,"+id+")'></button>");

			var $a = document.createElement('a');
			var linkText = document.createTextNode(files[i]);
			$a.appendChild(linkText);
			$a.title = files[i];
			$a.href = "@Url.Content("~/FileUploads/Temp/")" + files[i];
			$a.target = "_blank";
			document.body.appendChild($a);

            $("#support-document-IDfiles_"+id).append($div.append($a).append($button));
        }
        var uploadedFiles = $("#Transaction_BeneficiaryUploadIDPassport_"+id).val();
        if (uploadedFiles != "") {
            uploadedFiles += ",";
        }
        $("#Transaction_BeneficiaryUploadIDPassport_"+id).val(uploadedFiles + data);
    }

    function RemoveIDPassport($this,id) {
        var files = $("#Transaction_BeneficiaryUploadIDPassport_"+id).val().split(",");
        var newFiles = "";
        for (var i = 0; i < files.length; i++) {
            if (files[i] != $this.previousSibling.innerHTML) {
                newFiles += files[i] + ",";
            }
        }
        newFiles = newFiles.slice(0, newFiles.length - 1);
        $("#Transaction_BeneficiaryUploadIDPassport_"+id).val(newFiles);
        $this.parentNode.remove();
    }

    function AppendBasisOfAuthorityFiles(data, id) {
        var files = data.split(",");
        for (var i = 0; i < files.length; i++) {
            var $div = $("<div class='margin-top-10 small'></div>");
            //var $a = $("<a href='@Url.Content("~/FileUploads/Temp/")" + files[i] + "' target='_blank'>" + files[i] + "</a>");
            var $button = $("<button type='button' class='btn btn-pure btn-xs btn-danger icon wb-close' onclick='RemoveBasisOfAuthorityFile(this,"+id+")'></button>");

			var $a = document.createElement('a');
			var linkText = document.createTextNode(files[i]);
			$a.appendChild(linkText);
			$a.title = files[i];
			$a.href = "@Url.Content("~/FileUploads/Temp/")" + files[i];
			$a.target = "_blank";
			document.body.appendChild($a);

            $("#support-document-files_"+id).append($div.append($a).append($button));
        }
        var uploadedFiles = $("#Transaction_BeneficiaryUploadSuporting_"+id).val();
        if (uploadedFiles != "") {
            uploadedFiles += ",";
        }
        $("#Transaction_BeneficiaryUploadSuporting_"+id).val(uploadedFiles + data);
    }

    function RemoveBasisOfAuthorityFile($this,id) {
        var files = $("#Transaction_BeneficiaryUploadSuporting_"+id).val().split(",");
        var newFiles = "";
        for (var i = 0; i < files.length; i++) {
            if (files[i] != $this.previousSibling.innerHTML) {
                newFiles += files[i] + ",";
            }
        }
        newFiles = newFiles.slice(0, newFiles.length - 1);
        $("#Transaction_BeneficiaryUploadSuporting_"+id).val(newFiles);
        $this.parentNode.remove();
    }

        function AppendBasisOfAuthorityFiles2(data, id) {
        var files = data.split(",");
        for (var i = 0; i < files.length; i++) {
            var $div = $("<div class='margin-top-10 small'></div>");
            //var $a = $("<a href='@Url.Content("~/FileUploads/BeneficiarySupportDocuments/")" + files[i] + "' target='_blank'>" + files[i] + "</a>");
            var $button = $("<button type='button' class='btn btn-pure btn-xs btn-danger icon wb-close' onclick='RemoveBasisOfAuthorityFile(this,"+id+")'></button>");

			var $a = document.createElement('a');
			var linkText = document.createTextNode(files[i]);
			$a.appendChild(linkText);
			$a.title = files[i];
			$a.href = "@Url.Content("~/FileUploads/Temp/")" + files[i];
			$a.target = "_blank";
			document.body.appendChild($a);

            $("#support-document-files_"+id).append($div.append($a).append($button));
        }
        var uploadedFiles = $("#Transaction_BeneficiaryUploadSuporting_"+id).val();
        if (uploadedFiles != "") {
            uploadedFiles += ",";
        }
        $("#Transaction_BeneficiaryUploadSuporting_"+id).val(uploadedFiles + data);
    }

    function otherField(type, rowid) {
        if (type === 1) {
            var getValue = $("#Transaction_BeneficiaryBankCountry_" + rowid).val();

            if (getValue == 48) {
                $("#Transaction_OtherBankCountry_" + rowid).removeAttr("disabled");
            }
            else {
                $("#Transaction_OtherBankCountry_" + rowid).prop('disabled', true);
                $("#Transaction_OtherBankCountry_" + rowid).val("");
            }
        }
        else if (type === 2) {
            var getValue = $("#Transaction_BeneficiaryNationality_" + rowid).val();

            if (getValue == 201) {
                $("#Transaction_OtherNationality_" + rowid).removeAttr("disabled");
            }
            else {
                $("#Transaction_OtherNationality_" + rowid).prop('disabled', true);
                $("#Transaction_OtherNationality_" + rowid).val("");
            }
        }
        else if (type === 3) {
            var getValue = $("#Transaction_BeneficiaryCategoryBusiness_" + rowid).val();

            if (getValue == 331) {
                $("#Transaction_OtherCategoryBusiness_" + rowid).removeAttr("disabled");
            }
            else {
                $("#Transaction_OtherCategoryBusiness_" + rowid).prop('disabled', true);
                $("#Transaction_OtherCategoryBusiness_" + rowid).val("");
            }
        }
        else if (type === 4) {
            var getValue = $("#Transaction_BeneficiaryPurposePayment_" + rowid).val();

            if (getValue == 52) {
                $("#Transaction_OtherPurposePayment_" + rowid).removeAttr("disabled");
            }
            else {
                $("#Transaction_OtherPurposePayment_" + rowid).prop('disabled', true);
                $("#Transaction_OtherPurposePayment_" + rowid).val("");
            }
        }
        else if (type === 5) {
            var getValue = $("#Transaction_BeneficiarySourceFund_" + rowid).val();

            if (getValue == 20) {
                $("#Transaction_OtherSourceFund_" + rowid).removeAttr("disabled");
            }
            else {
                $("#Transaction_OtherSourceFund_" + rowid).prop('disabled', true);
                $("#Transaction_OtherSourceFund_" + rowid).val("");
            }
        }
        else if (type === 6) {
            var getValue = $("#Transaction_BeneficiarySupportDocType_" + rowid).val();

            if (getValue == 11) {
                $("#Transaction_OtherSupportDocType_" + rowid).removeAttr("disabled");
            }
            else {
                $("#Transaction_OtherSupportDocType_" + rowid).prop('disabled', true);
                $("#Transaction_OtherSupportDocType_" + rowid).val("");
            }
        }
    }

    function loadOtherField(rowid) {

            var getValue = $("#Transaction_BeneficiaryBankCountry_" + rowid).val();

            if (getValue == 48) {
                $("#Transaction_OtherBankCountry_" + rowid).removeAttr("disabled");
            }
            else {
                $("#Transaction_OtherBankCountry_" + rowid).prop('disabled', true);
                $("#Transaction_OtherBankCountry_" + rowid).val("");
            }


            var getValue2 = $("#Transaction_BeneficiaryNationality_" + rowid).val();

            if (getValue2 == 201) {
                $("#Transaction_OtherNationality_" + rowid).removeAttr("disabled");
            }
            else {
                $("#Transaction_OtherNationality_" + rowid).prop('disabled', true);
                $("#Transaction_OtherNationality_" + rowid).val("");
            }


            var getValue3 = $("#Transaction_BeneficiaryCategoryBusiness_" + rowid).val();

            if (getValue3 == 331) {
                $("#Transaction_OtherCategoryBusiness_" + rowid).removeAttr("disabled");
            }
            else {
                $("#Transaction_OtherCategoryBusiness_" + rowid).prop('disabled', true);
                $("#Transaction_OtherCategoryBusiness_" + rowid).val("");
            }


            var getValue4 = $("#Transaction_BeneficiaryPurposePayment_" + rowid).val();

            if (getValue4 == 52) {
                $("#Transaction_OtherPurposePayment_" + rowid).removeAttr("disabled");
            }
            else {
                $("#Transaction_OtherPurposePayment_" + rowid).prop('disabled', true);
                $("#Transaction_OtherPurposePayment_" + rowid).val("");
            }

            var getValue5 = $("#Transaction_BeneficiarySourceFund_" + rowid).val();

            if (getValue5 == 20) {
                $("#Transaction_OtherSourceFund_" + rowid).removeAttr("disabled");
            }
            else {
                $("#Transaction_OtherSourceFund_" + rowid).prop('disabled', true);
                $("#Transaction_OtherSourceFund_" + rowid).val("");
            }
            var getValue6 = $("#Transaction_BeneficiarySupportDocType_" + rowid).val();
            if (getValue6 == 11) {
                $("#Transaction_OtherSupportDocType_" + rowid).removeAttr("disabled");
            }
            else {
                $("#Transaction_OtherSupportDocType_" + rowid).prop('disabled', true);
                $("#Transaction_OtherSupportDocType_" + rowid).val("");
            }

    }

    	$("#bulkupload").click(function ()
	{
        $(this).val("");
    });

	$("#bulkupload").change(function ()
	{

		$("#BulkUploadErrorMessage").html("");

		var url = '@Url.Action("BulkUploader", "RemittanceSale")';

		var $file = this,
		$formData = new FormData();
        $formData.append('customerID', $("#sales_CustomerParticularId").val());
		if ($file.files.length > 0) {
			for (var i = 0; i < $file.files.length; i++) {
				$formData.append("file-" + i, $file.files[i]);
			}
		}

		var rowId = 1;
		var transactionCount = $("#table-transaction > tbody > tr").length;

		var allowAdd = 1;

		if (transactionCount > 0)
		{
			//var id = $("#table-transaction > tbody > tr:last")[0].id.split("-");
			//rowId = parseInt(id[2]) + 1;

			//var getFirstItem = $("#table-transaction > tbody > tr:first")[0].id.split("-");
			var CheckFirstItemCurrency = $("#Transaction_PayCurrency_" + 1 + " :selected").val();

            $formData.append('transactionCount', transactionCount);

			$formData.append('CheckFirstItemCurrency', CheckFirstItemCurrency);
		}
		else
		{
			//if no transaction in table, can direct add
			$formData.append('transactionCount', 0);
			$formData.append('CheckFirstItemCurrency', 0);
        }
        var errorMsg = "";
        var cid = $("#sales_CustomerParticularId").val();

        if (cid == "") {
            errorMsg += "Please select a Customer!<br/>";
        }

        if (errorMsg == "") {
            $.ajax({
                url: url,
                type: "POST",
                contentType: false, // Not to set any content header
                processData: false, // Not to process data
                data: $formData,
                beforeSend: function () {
                    // setting a timeout
                    $(".preload").show();
                },
                success: function (result) {
                    console.log(result);
                    data = JSON.parse(result.result);
                    //result.result.success
                    if (data.Result) {
                        if (transactionCount == 0) {
							$("#table-transaction").append(data.View);
							$('select').select2();
                        }
                        else {
                            $("#table-transaction > tbody").append(data.View);
							console.log(1);
							$('select').select2();
                        }

                        //if (transaction[0].value == "Encashment" || transaction[0].value == "Swap" || transaction[0].value == "Cross Currency") {
                        //    HighlightPaired();
                        //    FilterCurrency(rowId);
                        //}
                        RegisterEnterKey();
                        setTimeout(function () {
                            var newTransactionCount = $("#table-transaction > tbody > tr").length;
                            for (var i = 1; i <= newTransactionCount; i++) {
                                var getYouPayValue = $("#Transaction_PayCurrency_" + i + " :selected").val();

                                $('#Transaction_GetCurrency_' + i + ' option').prop('disabled', false);
                                $('#Transaction_GetCurrency_' + i + ' option[value="' + getYouPayValue + '"]').prop('disabled', true);
                                var getYouGetValue = $('#Transaction_GetCurrency_' + i + ' option:not([disabled]):first').val();

                                $('#Transaction_GetCurrency_' + i).select2();

                                var getYouGetValue = $("#Transaction_GetCurrency_" + i + " :selected").val();

                                //$('#Transaction_PayCurrency_'+i +' option').prop('disabled', false);
                                $('#Transaction_PayCurrency_' + i + ' option[value="' + getYouGetValue + '"]').prop('disabled', true);
                                var getYouPayValue = $('#Transaction_PayCurrency_' + i + ' option:not([disabled]):first').val();

                                $('#Transaction_PayCurrency_' + i).select2();
                                var getdata = $('#Transaction_PayCurrency_' + i).select2('data');
                                $("#transationFeesSelectedCurrency_" + i).text(getdata[0].text);
								//$("#transationFeesSelectedCurrency_" + i).text("SGD");
                                $("#Transaction_BeneficiaryBankCountry_" + i).find("option:contains('Others')").appendTo($("#Transaction_BeneficiaryBankCountry_" + i));
                                loadOtherField(i);
                                $("Transaction_PayCurrency_" + i).select2();
                                $("Transaction_GetCurrency_" + i).select2();
                                $("#Transaction_BeneficiaryFriendly_" + i).select2();
                                $("#Transaction_BeneficiaryBankCountry_" + i).select2();
                                $("#Transaction_BeneficiaryPurposePayment_" + i).select2();
                                $("#Transaction_BeneficiarySupportDocType_" + i).select2();
                                $("#Transaction_BeneficiaryCategoryBusiness_" + i).select2();
                                $("#Transaction_BeneficiaryNationality_" + i).select2();
                                $("#Transaction_BeneficiarySourceFund_" + i).select2();
                            }
                            setTimeout(function () {
                                $('#Transaction_PayCurrency_1' + ' option').prop('disabled', false);
                                for (var j = 1; j <= newTransactionCount; j++) {
                                    var getYouGetValue = $("#Transaction_GetCurrency_" + j + " :selected").val();
                                    console.log(getYouGetValue);
                                    $('#Transaction_PayCurrency_1' + ' option[value="' + getYouGetValue + '"]').prop('disabled', true);
                                }
                                $('#Transaction_PayCurrency_1').select2();
                            }, 800)

                        }, 2300)

                    }
                    else {
                        console.log(result.result.error);
                        console.log(result.result.NoOfErrorRow);

                        if (result.result.NoOfErrorRow == 0) {
                            $("#BulkUploadErrorMessage").html('<br/><div class="alert alert-danger" role="alert"><h4>Error Occur:</h4>Error Message: ' + result.result.error + '</div>');
                            //$("#BulkUploadErrorMessage").html("<h4 style='color:red;'>Error Occur:</h4><span style='color:red;'>Error Message: " + result.result.error + "</span>");
                        }
                        else {
                            $("#BulkUploadErrorMessage").html('<br/><div class="alert alert-danger" role="alert"><h4>Error Occur:</h4>Error Message: ' + result.result.error + '<br/>No of Row: ' + result.result.NoOfErrorRow + '</div>');
                            //$("#BulkUploadErrorMessage").html("<h4 style='color:red;'>Error Occur:</h4><span style='color:red;'>Error Message: " + result.result.error + "</span><br/><span style='color:red;'>No of Row: " + result.result.NoOfErrorRow + "</span>");
                        }
                    }
                    $(".preload").hide();
                    //alert(result);
                },
                error: function (err) {
                    $(".preload").hide();
                    console.log(err.statusText);
                }
            });
        }
        else {
            alertify.alert(errorMsg);
        }
		$(this).val("");
	});
</script>