@using DataAccess
@using DataAccess.POCO

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = ViewData["SiteName"].ToString();
    ViewBag.PageTitle = "New Sale";
    ViewBag.NewSales = "active open";
}

<style>
/* This only works with JavaScript,
if it's not present, don't show loader */

.preload {
	position: fixed;
	left: 0px;
	top: 0px;
	width: 100%;
	height: 100%;
	z-index: 9999;
	background: url('@Url.Content("~/Content/images/Preloader_2.gif")') center no-repeat #fff;
    opacity: 0.7;
}

#sales_IssueDate 
{
	z-index: 1;
}
</style>

<div class="preload" style="display:none;"></div>

<div class="panel">
    <div class="panel-body container-fluid">
        <div class="row row-lg">
            <div class="col-xlg-12 col-md-12">
                @if (TempData["Result"] != null)
                {
                    string[] result = TempData["Result"].ToString().Split('|');

                    <div class="alert alert-@result[0]">
                        <button type="button" class="close" data-dismiss="alert">&times;</button>
                        @result[1]
                    </div>
                }

                @using (Html.BeginForm("Create", "Sale", FormMethod.Post, new { @class = "form-horizontal", @id = "form-create" }))
                {

                    <input type="hidden" id="PendingChequeLog" name="PendingChequeLog" value="@ViewData["PendingChequeLog"].ToString()">
                    <input type="hidden" id="PendingBankTransferLog" name="PendingBankTransferLog" value="@ViewData["PendingBankTransferLog"].ToString()">

                    <input type="hidden" id="PendingLocalCheque1Log" name="PendingLocalCheque1Log" value="@ViewData["PendingLocalCheque1Log"].ToString()">
                    <input type="hidden" id="PendingLocalCheque2Log" name="PendingLocalCheque2Log" value="@ViewData["PendingLocalCheque2Log"].ToString()">
                    <input type="hidden" id="PendingLocalCheque3Log" name="PendingLocalCheque3Log" value="@ViewData["PendingLocalCheque3Log"].ToString()">
                    <input type="hidden" id="PendingLocalBankTransferLog" name="PendingLocalBankTransferLog" value="@ViewData["PendingLocalBankTransferLog"].ToString()">

                    Sale sales = new Sale();

                    <div class="form-group">
                        @Html.LabelFor(s => sales.MemoID, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            @Html.TextBoxFor(s => sales.MemoID, new { @class = "form-control", @placeholder = "ID will be Assigned after Creation", @disabled = "disabled" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(s => sales.CustomerParticularId, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            @Html.DropDownListFor(s => sales.CustomerParticularId, (SelectList)ViewData["CustomerDropdown"], new { @class = "form-control", @data_plugin = "select2", @data_placeholder = "Search by Customer Name or Company Name", @data_allow_clear = "true", @onchange = "GetCustomerDetail()" })
                            @Html.ValidationMessageFor(s => sales.CustomerParticularId)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Contact:", new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            @Html.TextBox("CustomerContact", ViewData["CustomerContact"].ToString(), new { @class = "form-control", @disabled = "disabled" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Address:", new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            @Html.TextBox("CustomerAddress", ViewData["CustomerAddress"].ToString(), new { @class = "form-control", @disabled = "disabled" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(s => sales.IssueDate, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="icon wb-calendar"></i></span>
                                @Html.TextBoxFor(s => sales.IssueDate, "{0:dd/MM/yyyy}", new { @class = "form-control", @disabled = "disabled" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(s => sales.CollectionDate, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            <div class="input-group" style="float:left;width:50%;">
                                <span class="input-group-addon" style="border-radius:0;">
                                    <i class="icon wb-calendar" aria-hidden="true"></i>
                                </span>
                                @Html.TextBoxFor(s => sales.CollectionDate, "{0:dd/MM/yyyy dddd}", new { @class = "form-control" })
                            </div>
                            <div class="input-group" style="float:left;width:50%;">
                                <span class="input-group-addon" style="border-radius:0;border-left-width:0px;">
                                    <i class="icon wb-time" aria-hidden="true"></i>
                                </span>

                                @Html.TextBoxFor(s => sales.CollectionTime, new { @class = "form-control", @maxlength = "40" })
                                @*@Html.TextBox("sales_CollectionTime", "02:31 PM", new { @class = "form-control" })*@
                                @*@Html.DropDownListFor(s => sales.CollectionTime, (SelectList)ViewData["CollectionTimeDropdown"], new { @class = "form-control", @data_plugin = "selectpicker" })*@
                            </div>
                        </div>
                        <div class="col-sm-9 col-sm-offset-3">
                            <div class="col-sm-6">
                                @Html.ValidationMessageFor(s => sales.CollectionDate)
                            </div>
                            <div class="col-sm-6">
                                @Html.ValidationMessageFor(s => sales.CollectionTime)
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(s => sales.CreatedBy, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            @Html.TextBoxFor(s => sales.CreatedBy, new { @class = "form-control", @disabled = "disabled", Value = Session["UserName"].ToString() })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(s => sales.Urgent, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            <div class="radio-custom radio-primary radio-inline">
                                <input type="radio" id="non-urgent" name="sales.Urgent" value="Non-Urgent" @ViewData["NonUrgentRadio"].ToString() />
                                <label for="non-urgent">Non-Urgent</label>
                            </div>
                            <div class="radio-custom radio-primary radio-inline">
                                <input type="radio" id="urgent" name="sales.Urgent" value="Urgent" @ViewData["UrgentRadio"].ToString() />
                                <label for="urgent">Urgent</label>
                            </div>
                            @Html.ValidationMessageFor(s => sales.Urgent)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(s => sales.RequireDelivery, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            <div class="checkbox-custom checkbox-primary checkbox-inline">
                                <input type="checkbox" id="require-delivery" name="sales.RequireDelivery" value="Yes" @ViewData["RequireDeliveryCheckbox"].ToString() />
                                <label for="require-delivery"></label>
                            </div>
                        </div>
                        <div class="col-sm-offset-3 col-sm-9">
                            <small class="help-block"><i class="icon wb-info-circle margin-0"></i> By unchecking this option will skip all delivery workflows.</small>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(s => sales.BagNo, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            @Html.TextBoxFor(s => sales.BagNo, new { @class = "form-control", @placeholder = "To be entered by Inventory", @disabled = "disabled" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(s => sales.Sale_ContactPerson, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            @Html.TextBoxFor(s => sales.Sale_ContactPerson, new { @class = "form-control", @maxlength = "255" })
                            @Html.ValidationMessageFor(s => sales.Sale_ContactPerson)
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(s => sales.Remarks, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            @Html.TextAreaFor(s => sales.Remarks, new { @class = "form-control", @rows = "4" })
                            @Html.ValidationMessageFor(s => sales.Remarks)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(s => sales.CustomerRemarks, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            @Html.TextAreaFor(s => sales.CustomerRemarks, new { @class = "form-control", @rows = "4" })
                            @Html.ValidationMessageFor(s => sales.CustomerRemarks)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(s => sales.Sale_DeliveryRemarks, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            @Html.TextAreaFor(s => sales.Sale_DeliveryRemarks, new { @class = "form-control", @rows = "4" })
                            @Html.ValidationMessageFor(s => sales.Sale_DeliveryRemarks)
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-sm-12">
                            <h4>Transaction Details</h4>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(s => sales.TransactionType, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            <div class="radio-custom radio-primary radio-inline">
                                <input type="radio" id="Buy" name="sales.TransactionType" class="radio-transaction-type" value="Buy" onclick="TransactionTypeClick('Buy')" @ViewData["TransactionTypeBuyRadio"].ToString() />
                                <label for="Buy">Buy</label>
                            </div>
                            <div class="radio-custom radio-primary radio-inline">
                                <input type="radio" id="Sell" name="sales.TransactionType" class="radio-transaction-type" value="Sell" onclick="TransactionTypeClick('Sell')" @ViewData["TransactionTypeSellRadio"].ToString() />
                                <label for="Sell">Sell</label>
                            </div>
                            <div class="radio-custom radio-primary radio-inline">
                                <input type="radio" id="Encashment" name="sales.TransactionType" class="radio-transaction-type" value="Encashment" onclick="TransactionTypeClick('Encashment')" @ViewData["TransactionTypeEncashmentRadio"].ToString() />
                                <label for="Encashment">Encashment</label>
                            </div>
                            <div class="radio-custom radio-primary radio-inline">
                                <input type="radio" id="Swap" name="sales.TransactionType" class="radio-transaction-type" value="Swap" onclick="TransactionTypeClick('Swap')" @ViewData["TransactionTypeSwapRadio"].ToString() />
                                <label for="Swap">Swap</label>
                            </div>
                            <div class="radio-custom radio-primary radio-inline">
                                <input type="radio" id="CrossCurrency" name="sales.TransactionType" class="radio-transaction-type" value="Cross Currency" onclick="TransactionTypeClick('CrossCurrency')" @ViewData["TransactionTypeCrossCurrencyRadio"].ToString() />
                                <label for="CrossCurrency">Cross Currency</label>
                            </div>
                        </div>
                        <div class="col-sm-9 col-sm-offset-3">@Html.ValidationMessageFor(s => sales.TransactionType)</div>
                    </div>

                    <div class="form-group">
                        <div class="col-sm-9">
                            <button id="add-new-transaction" type="button" class="btn btn-primary" onclick="AddNewTransaction()">Add New Transaction </button>
                        </div>
                        <div class="col-sm-9">@Html.ValidationMessage("Transaction")</div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-12 table-responsive">
                            <table id="table-transaction" class="table table-hover table-condensed table-bordered" data-striped="true" data-height="250" data-mobile-responsive="true">
                                @if (ViewData["SaleTransactionsData"] != null)
                                {
                                    List<SaleTransactionsData> transactionData = (List<SaleTransactionsData>)ViewData["SaleTransactionsData"];

                                    if (transactionData.Count > 0)
                                    {
                                        if (ViewData["SaleTransactionType"].ToString() == "Buy" || ViewData["SaleTransactionType"].ToString() == "Sell")
                                        {
                                            <!-- #region Buy/Sell Transaction Type -->
                                            <thead>
                                                <tr>
                                                    <th style="min-width: 50px;">ID</th>
                                                    <th style="min-width: 50px;">Type</th>
                                                    <th style="min-width: 150px;">Currency</th>
                                                    <th style="min-width: 200px;">Amount (Foreign)</th>
                                                    <th style="min-width: 150px;">Rate</th>
                                                    <th style="min-width: 150px;">Unit</th>
                                                    <th style="min-width: 200px;">Amount (Local)</th>
                                                    <th style="min-width: 150px;">Payment Mode</th>
                                                    <th style="min-width: 200px;">Cheque No.</th>
                                                    <th style="min-width: 200px;">Bank Transfer No.</th>
                                                    <th style="min-width: 200px;">Vessel Name</th>
                                                    <th style="min-width: 100px;">Outgoing Denomination</th>
                                                    <th style="min-width: 100px;">Action</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (SaleTransactionsData transaction in transactionData)
                                                {
                                                    <tr id="transaction-row-@transaction.RowId">
                                                        <td>
                                                            @transaction.TransactionID
                                                            @Html.Hidden("Transaction_ID_" + transaction.RowId, transaction.TransactionID)
                                                        </td>
                                                        <td>
                                                            @transaction.Type
                                                            @Html.Hidden("Transaction_Type_" + transaction.RowId, transaction.Type)
                                                        </td>
                                                        <td>
                                                            @Html.DropDownList("Transaction_Currency_" + transaction.RowId, transaction.CurrencyDDL, new { @class = "form-control", onchange = "CurrencyChange(" + transaction.RowId + ")" })
                                                            @Html.ValidationMessage("Transaction_Currency_" + transaction.RowId)
                                                        </td>
                                                        <td>
                                                            <div class="input-group">
                                                                <span class="input-group-addon" id="span-amount-foreign-symbol-@transaction.RowId">@transaction.Symbol</span>
                                                                @Html.TextBox("Transaction_AmountForeign_" + transaction.RowId, transaction.AmountForeign, new { @class = "form-control", @onchange = "AmountForeignChange(" + transaction.RowId + ")" })
                                                            </div>
                                                            @Html.ValidationMessage("Transaction_AmountForeign_" + transaction.RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_Rate_" + transaction.RowId, transaction.Rate, new { @class = "form-control", @onchange = "RateChange(" + transaction.RowId + ")" })
                                                            @Html.ValidationMessage("Transaction_Rate_" + transaction.RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_Unit_" + transaction.RowId, transaction.Unit, new { @class = "form-control", @disabled = "disabled" })
                                                            @Html.Hidden("Transaction_Unit_" + transaction.RowId, transaction.Unit)
                                                        </td>
                                                        <td>
                                                            <div class="input-group">
                                                                <span class="input-group-addon">$</span>
                                                                @Html.TextBox("Transaction_Amount_Local_" + transaction.RowId, transaction.AmountLocal, new { @class = "form-control", @disabled = "disabled" })
                                                                @Html.Hidden("Transaction_AmountLocal_" + transaction.RowId, transaction.AmountLocal)
                                                            </div>
                                                            @Html.ValidationMessage("Transaction_AmountLocal_" + transaction.RowId)
                                                        </td>
                                                        <td>
                                                            @Html.DropDownList("Transaction_PaymentMode_" + transaction.RowId, transaction.PaymentModeDDL, new { @class = "form-control", @onchange = "PaymentModeChange(" + transaction.RowId + ")" })
                                                            @Html.ValidationMessage("Transaction_PaymentMode_" + transaction.RowId)
                                                        </td>
                                                        <td>
                                                            @if (transaction.DisabledChequeNo == "disabled")
                                                            {
                                                                <div class="col-sm-10" style="padding-left: 0;padding-right: 5px; width:80%;">@Html.TextBox("Transaction_ChequeNo_" + transaction.RowId, transaction.ChequeNo, new { @class = "form-control", @disabled = "disabled" })</div>
                                                                <div><a id="update-cheque-btn-@transaction.RowId" class="btn btn-sm btn-icon btn-round btn-primary" href="javascript:void(0)" style="text-decoration: none;pointer-events: none;" data-toggle="tooltip" data-original-title="Add Cheque"><i class="icon wb-edit" aria-hidden="true"></i></a></div>
                                                            }
                                                            else
                                                            {

                                                                <div class="col-sm-10" style="padding-left: 0;padding-right: 5px; width:80%;">@Html.TextBox("Transaction_ChequeNo_" + transaction.RowId, transaction.ChequeNo, new { @class = "form-control", @readonly = "readonly" })</div>
                                                                <div><a id="update-cheque-btn-@transaction.RowId" class="btn btn-sm btn-icon btn-round btn-primary" href="javascript:void(0)" onclick="UpdateCheque(@transaction.RowId)" style="text-decoration: none;" data-toggle="tooltip" data-original-title="Add Cheque"><i class="icon wb-edit" aria-hidden="true"></i></a></div>
                                                            }
                                                            @Html.ValidationMessage("Transaction_ChequeNo_" + transaction.RowId)
                                                        </td>
                                                        <td>
                                                            @if (transaction.DisabledBankTransferNo == "disabled")
                                                            {
                                                                <div class="col-sm-10" style="padding-left: 0;padding-right: 5px; width:80%;">@Html.TextBox("Transaction_BankTransferNo_" + transaction.RowId, transaction.BankTransferNo, new { @class = "form-control", @disabled = "disabled" })</div>
                                                                <div><a id="update-bank-transfer-btn-@transaction.RowId" class="btn btn-sm btn-icon btn-round btn-primary" href="javascript:void(0)" style="text-decoration: none;pointer-events: none;" data-toggle="tooltip" data-original-title="Add Bank Transfer"><i class="icon wb-edit" aria-hidden="true"></i></a></div>

                                                            }
                                                            else
                                                            {
                                                                <div class="col-sm-10" style="padding-left: 0;padding-right: 5px; width:80%;">@Html.TextBox("Transaction_BankTransferNo_" + transaction.RowId, transaction.BankTransferNo, new { @class = "form-control", @readonly = "readonly" })</div>
                                                                <div><a id="update-bank-transfer-btn-@transaction.RowId" class="btn btn-sm btn-icon btn-round btn-primary" href="javascript:void(0)" onclick="UpdateBankTransfer(@transaction.RowId)" style="text-decoration: none;" data-toggle="tooltip" data-original-title="Add Bank Transfer"><i class="icon wb-edit" aria-hidden="true"></i></a></div>
                                                            }
                                                            @Html.ValidationMessage("Transaction_BankTransferNo_" + transaction.RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_VesselName_" + transaction.RowId, transaction.VesselName, new { @class = "form-control" })
                                                            @Html.ValidationMessage("Transaction_VesselName_" + transaction.RowId)
                                                        </td>
                                                        <td>
                                                            <button type="button" class="btn btn-xs btn-primary" onclick="OpenDenominationModal(@transaction.RowId)">Update</button>
                                                            @Html.ValidationMessage("Transaction_Denomination_" + transaction.RowId)
                                                            <div class="modal fade" id="modal-transaction-denomination-@transaction.RowId" aria-hidden="false" aria-labelledby="modal-label-@transaction.RowId"
                                                                 role="dialog" tabindex="-1">
                                                                <div class="modal-dialog modal-lg">
                                                                    <div class="modal-content form-horizontal">
                                                                        <div class="modal-header">
                                                                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                                                <span aria-hidden="true">×</span>
                                                                            </button>
                                                                            <h4 class="modal-title" id="modal-label-@transaction.RowId">Denomination - @transaction.DenominationCurrencyCode</h4>
                                                                        </div>
                                                                        <div class="modal-body">
                                                                            <div class="row">
                                                                                <div class="form-group">
                                                                                    <div class="col-sm-10 col-sm-offset-1">
                                                                                        <table id="table-transaction-denomination-@transaction.RowId" class="table table-hover table-condensed table-bordered" data-striped="true" data-height="250" data-mobile-responsive="true">
                                                                                            <thead>
                                                                                                <tr>
                                                                                                    <th>Denomination</th>
                                                                                                    <th>Pieces</th>
                                                                                                    <th id="AmtCurr-@transaction.RowId">Amt (@transaction.Symbol)</th>
                                                                                                </tr>
                                                                                            </thead>
                                                                                            <tbody>
                                                                                                @if (transaction.Denominations.Count > 0)
                                                                                                {
                                                                                                    foreach (DenominationsData denomination in transaction.Denominations)
                                                                                                    {
                                                                                                        if (denomination.DenominationValue == "coins")
                                                                                                        {
                                                                                                            <tr>
                                                                                                                <td>coins @Html.ValidationMessage("Denomination_Value_" + transaction.RowId + "_" + denomination.DenoId) @Html.Hidden("Denomination_Value_" + transaction.RowId + "_" + denomination.DenoId, denomination.DenominationValue)</td>
                                                                                                                <td>-</td>
                                                                                                                <td>@Html.TextBox("Denomination_Value_AmountForeign_" + transaction.RowId + "_" + denomination.DenoId, denomination.AmountForeign, new { @class = "form-control denomination-amount-foreign", @onchange = "CoinsChange(" + transaction.RowId + ", " + denomination.DenoId + ")" }) @Html.ValidationMessage("Denomination_Value_AmountForeign_" + transaction.RowId + "_" + denomination.DenoId)</td>
                                                                                                            </tr>
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            <tr>
                                                                                                                <td>@denomination.DenominationValue @Html.ValidationMessage("Denomination_Value_" + transaction.RowId + "_" + denomination.DenoId) @Html.Hidden("Denomination_Value_" + transaction.RowId + "_" + denomination.DenoId, denomination.DenominationValue)</td>
                                                                                                                <td>@Html.TextBox("Denomination_Value_Pieces_" + transaction.RowId + "_" + denomination.DenoId, denomination.Pieces, new { @class = "form-control", @onchange = "PiecesChange(" + transaction.RowId + ", " + denomination.DenoId + ")" }) @Html.ValidationMessage("Denomination_Value_Pieces_" + transaction.RowId + "_" + denomination.DenoId)</td>
                                                                                                                <td><div id="denomination-amount-foreign-@transaction.RowId-@denomination.DenoId">@denomination.AmountForeign</div>@Html.ValidationMessage("Denomination_Value_AmountForeign_" + transaction.RowId + "_" + denomination.DenoId) @Html.Hidden("Denomination_Value_AmountForeign_" + transaction.RowId + "_" + denomination.DenoId, denomination.AmountForeign, new { @class = "denomination-amount-foreign" })</td>
                                                                                                            </tr>
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            </tbody>
                                                                                            <tfoot>
                                                                                                <tr>
                                                                                                    <td colspan="2" class="text-right">Total Calculated</td>
                                                                                                    <td><div id="denomination-total-calculated-foreign-symbol-@transaction.RowId" style="float:left;">@transaction.Symbol</div><div id="denomination-total-calculated-foreign-@transaction.RowId">@transaction.DenominationTotalCalculatedForeign</div>@Html.ValidationMessage("Denomination_Total_Calculated_Foreign_" + transaction.RowId)@Html.Hidden("Denomination_Total_Calculated_Foreign_" + transaction.RowId, transaction.DenominationTotalCalculatedForeign)</td>
                                                                                                </tr>
                                                                                                <tr>
                                                                                                    <td colspan="2" class="text-right">Remaining</td>
                                                                                                    <td><div id="denomination-remaining-foreign-symbol-@transaction.RowId" style="float:left;">@transaction.Symbol</div><div id="denomination-remaining-foreign-@transaction.RowId">@transaction.DenominationRemainingForeign</div>@Html.Hidden("Denomination_Remaining_Foreign_" + transaction.RowId, transaction.DenominationRemainingForeign)</td>
                                                                                                </tr>
                                                                                                <tr>
                                                                                                    <td colspan="2" class="text-right">Total Order</td>
                                                                                                    <td><div id="denomination-total-order-foreign-symbol-@transaction.RowId" style="float:left;">@transaction.Symbol</div><div id="denomination-total-order-foreign-@transaction.RowId">@transaction.DenominationTotalOrderForeign</div>@Html.Hidden("Denomination_Total_Order_Foreign_" + transaction.RowId, transaction.DenominationTotalOrderForeign)</td>
                                                                                                </tr>
                                                                                            </tfoot>
                                                                                        </table>
                                                                                    </div>
                                                                                </div>
                                                                                <div class="col-sm-10 col-sm-offset-1">
                                                                                    <button class="btn btn-primary btn-outline" data-dismiss="modal" type="button">Update</button>
                                                                                    <button class="btn btn-danger btn-outline" type="button" onclick="RemoveDenomination(@transaction.RowId)">Remove Denomination</button>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td>
                                                            <button class="btn btn-danger btn-xs" type="button" onclick="RemoveTransaction(@transaction.RowId)"><i aria-hidden="true" class="icon wb-close"></i> Remove</button>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                            <tfoot>
                                                <tr>
                                                    <th colspan="3" style="text-align: right;">Total (Foreign)</th>
                                                    <th>
                                                        <div id="total-amount-foreign">$@ViewData["TotalForeign"].ToString()</div>
                                                    </th>
                                                    <th colspan="2" style="text-align: right;">Total (Local)</th>
                                                    <th>
                                                        <div id="total-amount-local">$@ViewData["TotalLocal"].ToString()</div>
                                                    </th>
                                                    <th colspan="6"></th>
                                                </tr>
                                            </tfoot>
                                            <!-- #endregion -->
                                        }
                                        else if (ViewData["SaleTransactionType"].ToString() == "Encashment")
                                        {
                                            <!-- #region Encashment Transaction Type -->
                                            <thead>
                                                <tr>
                                                    <th style="min-width: 50px;">ID</th>
                                                    <th style="min-width: 50px;">Type</th>
                                                    <th style="min-width: 150px;">Currency</th>
                                                    <th style="min-width: 200px;">Amount (Foreign)</th>
                                                    <th style="min-width: 150px;">Rate</th>
                                                    <th style="min-width: 150px;">Encashment Rate</th>
                                                    <th style="min-width: 150px;">Unit</th>
                                                    <th style="min-width: 200px;">Amount (Local)</th>
                                                    <th style="min-width: 150px;">Payment Mode</th>
                                                    <th style="min-width: 200px;">Cheque No.</th>
                                                    <th style="min-width: 200px;">Bank Transfer No.</th>
                                                    <th style="min-width: 200px;">Vessel Name</th>
                                                    <th style="min-width: 100px;">Outgoing Denomination</th>
                                                    <th style="min-width: 100px;">Action</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @for (int i = 0; i < transactionData.Count; i += 2)
                                                {
                                                    <tr id="transaction-row-@transactionData[i].RowId" class="paired-row-@transactionData[i].RowId">
                                                        <td>
                                                            @transactionData[i].TransactionID
                                                            @Html.Hidden("Transaction_ID_" + transactionData[i].RowId, transactionData[i].TransactionID)
                                                        </td>
                                                        <td>
                                                            @transactionData[i].Type
                                                            @Html.Hidden("Transaction_Type_" + transactionData[i].RowId, transactionData[i].Type)
                                                        </td>
                                                        <td>
                                                            @Html.DropDownList("Transaction_Currency_" + transactionData[i].RowId, transactionData[i].CurrencyDDL, new { @class = "form-control currency-dropdown", onchange = "CurrencyChange(" + transactionData[i].RowId + ")" })
                                                            @Html.ValidationMessage("Transaction_Currency_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            <div class="input-group">
                                                                <span class="input-group-addon" id="span-amount-foreign-symbol-@transactionData[i].RowId">@transactionData[i].Symbol</span>
                                                                @Html.TextBox("Transaction_AmountForeign_" + transactionData[i].RowId, transactionData[i].AmountForeign, new { @class = "form-control", @onchange = "AmountForeignChange(" + transactionData[i].RowId + ")" })
                                                            </div>
                                                            @Html.ValidationMessage("Transaction_AmountForeign_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_Rate_" + transactionData[i].RowId, transactionData[i].Rate, new { @class = "form-control", @onchange = "RateChange(" + transactionData[i].RowId + ")" })
                                                            @Html.ValidationMessage("Transaction_Rate_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_EncashmentRate_" + transactionData[i].RowId, transactionData[i].EncashmentRate, new { @class = "form-control", @onchange = "EncashmentRateChange(" + transactionData[i].RowId + ")" })
                                                            @Html.ValidationMessage("Transaction_EncashmentRate_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_Unit_" + transactionData[i].RowId, transactionData[i].Unit, new { @class = "form-control", @disabled = "disabled" })
                                                            @Html.Hidden("Transaction_Unit_" + transactionData[i].RowId, transactionData[i].Unit)
                                                        </td>
                                                        <td>
                                                            <div class="input-group">
                                                                <span class="input-group-addon">$</span>
                                                                @Html.TextBox("Transaction_Amount_Local_" + transactionData[i].RowId, transactionData[i].AmountLocal, new { @class = "form-control", @disabled = "disabled" })
                                                                @Html.Hidden("Transaction_AmountLocal_" + transactionData[i].RowId, transactionData[i].AmountLocal)
                                                            </div>
                                                            @Html.ValidationMessage("Transaction_AmountLocal_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.DropDownList("Transaction_PaymentMode_" + transactionData[i].RowId, transactionData[i].PaymentModeDDL, new { @class = "form-control", @onchange = "PaymentModeChange(" + transactionData[i].RowId + ")" })
                                                            @Html.ValidationMessage("Transaction_PaymentMode_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            @if (transactionData[i].DisabledChequeNo == "disabled")
                                                            {
                                                                @Html.TextBox("Transaction_ChequeNo_" + transactionData[i].RowId, transactionData[i].ChequeNo, new { @class = "form-control", @disabled = "disabled" })
                                                            }
                                                            else
                                                            {
                                                                @Html.TextBox("Transaction_ChequeNo_" + transactionData[i].RowId, transactionData[i].ChequeNo, new { @class = "form-control" })
                                                            }
                                                            @Html.ValidationMessage("Transaction_ChequeNo_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            @if (transactionData[i].DisabledBankTransferNo == "disabled")
                                                            {
                                                                @Html.TextBox("Transaction_BankTransferNo_" + transactionData[i].RowId, transactionData[i].BankTransferNo, new { @class = "form-control", @disabled = "disabled" })
                                                            }
                                                            else
                                                            {
                                                                @Html.TextBox("Transaction_BankTransferNo_" + transactionData[i].RowId, transactionData[i].BankTransferNo, new { @class = "form-control" })
                                                            }
                                                            @Html.ValidationMessage("Transaction_BankTransferNo_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_VesselName_" + transactionData[i].RowId, transactionData[i].VesselName, new { @class = "form-control" })
                                                            @Html.ValidationMessage("Transaction_VesselName_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            <button type="button" class="btn btn-xs btn-primary" onclick="OpenDenominationModal(@transactionData[i].RowId)">Update</button>
                                                            @Html.ValidationMessage("Transaction_Denomination_" + transactionData[i].RowId)
                                                            <div class="modal fade" id="modal-transaction-denomination-@transactionData[i].RowId" aria-hidden="false" aria-labelledby="modal-label-@transactionData[i].RowId"
                                                                 role="dialog" tabindex="-1">
                                                                <div class="modal-dialog modal-lg">
                                                                    <div class="modal-content form-horizontal">
                                                                        <div class="modal-header">
                                                                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                                                <span aria-hidden="true">×</span>
                                                                            </button>
                                                                            <h4 class="modal-title" id="modal-label-@transactionData[i].RowId">Denomination - @transactionData[i].DenominationCurrencyCode</h4>
                                                                        </div>
                                                                        <div class="modal-body">
                                                                            <div class="row">
                                                                                <div class="form-group">
                                                                                    <div class="col-sm-10 col-sm-offset-1">
                                                                                        <table id="table-transaction-denomination-@transactionData[i].RowId" class="table table-hover table-condensed table-bordered" data-striped="true" data-height="250" data-mobile-responsive="true">
                                                                                            <thead>
                                                                                                <tr>
                                                                                                    <th>Denomination</th>
                                                                                                    <th>Pieces</th>
                                                                                                    <th id="AmtCurr-@transactionData[i].RowId">Amt (@transactionData[i].Symbol)</th>
                                                                                                </tr>
                                                                                            </thead>
                                                                                            <tbody>
                                                                                                @if (transactionData[i].Denominations.Count > 0)
                                                                                                {
                                                                                                    foreach (DenominationsData denomination in transactionData[i].Denominations)
                                                                                                    {
                                                                                                        if (denomination.DenominationValue == "coins")
                                                                                                        {
                                                                                                            <tr>
                                                                                                                <td>coins @Html.ValidationMessage("Denomination_Value_" + transactionData[i].RowId + "_" + denomination.DenoId) @Html.Hidden("Denomination_Value_" + transactionData[i].RowId + "_" + denomination.DenoId, denomination.DenominationValue)</td>
                                                                                                                <td>-</td>
                                                                                                                <td>@Html.TextBox("Denomination_Value_AmountForeign_" + transactionData[i].RowId + "_" + denomination.DenoId, denomination.AmountForeign, new { @class = "form-control denomination-amount-foreign", @onchange = "CoinsChange(" + transactionData[i].RowId + ", " + denomination.DenoId + ")" }) @Html.ValidationMessage("Denomination_Value_AmountForeign_" + transactionData[i].RowId + "_" + denomination.DenoId)</td>
                                                                                                            </tr>
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            <tr>
                                                                                                                <td>@denomination.DenominationValue @Html.ValidationMessage("Denomination_Value_" + transactionData[i].RowId + "_" + denomination.DenoId) @Html.Hidden("Denomination_Value_" + transactionData[i].RowId + "_" + denomination.DenoId, denomination.DenominationValue)</td>
                                                                                                                <td>@Html.TextBox("Denomination_Value_Pieces_" + transactionData[i].RowId + "_" + denomination.DenoId, denomination.Pieces, new { @class = "form-control", @onchange = "PiecesChange(" + transactionData[i].RowId + ", " + denomination.DenoId + ")" }) @Html.ValidationMessage("Denomination_Value_Pieces_" + transactionData[i].RowId + "_" + denomination.DenoId)</td>
                                                                                                                <td><div id="denomination-amount-foreign-@transactionData[i].RowId-@denomination.DenoId">@denomination.AmountForeign</div>@Html.ValidationMessage("Denomination_Value_AmountForeign_" + transactionData[i].RowId + "_" + denomination.DenoId) @Html.Hidden("Denomination_Value_AmountForeign_" + transactionData[i].RowId + "_" + denomination.DenoId, denomination.AmountForeign, new { @class = "denomination-amount-foreign" })</td>
                                                                                                            </tr>
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            </tbody>
                                                                                            <tfoot>
                                                                                                <tr>
                                                                                                    <td colspan="2" class="text-right">Total Calculated</td>
                                                                                                    <td><div id="denomination-total-calculated-foreign-symbol-@transactionData[i].RowId" style="float:left;">@transactionData[i].Symbol</div><div id="denomination-total-calculated-foreign-@transactionData[i].RowId">@transactionData[i].DenominationTotalCalculatedForeign</div>@Html.ValidationMessage("Denomination_Total_Calculated_Foreign_" + transactionData[i].RowId)@Html.Hidden("Denomination_Total_Calculated_Foreign_" + transactionData[i].RowId, transactionData[i].DenominationTotalCalculatedForeign)</td>
                                                                                                </tr>
                                                                                                <tr>
                                                                                                    <td colspan="2" class="text-right">Remaining</td>
                                                                                                    <td><div id="denomination-remaining-foreign-symbol-@transactionData[i].RowId" style="float:left;">@transactionData[i].Symbol</div><div id="denomination-remaining-foreign-@transactionData[i].RowId">@transactionData[i].DenominationRemainingForeign</div>@Html.Hidden("Denomination_Remaining_Foreign_" + transactionData[i].RowId, transactionData[i].DenominationRemainingForeign)</td>
                                                                                                </tr>
                                                                                                <tr>
                                                                                                    <td colspan="2" class="text-right">Total Order</td>
                                                                                                    <td><div id="denomination-total-order-foreign-symbol-@transactionData[i].RowId" style="float:left;">@transactionData[i].Symbol</div><div id="denomination-total-order-foreign-@transactionData[i].RowId">@transactionData[i].DenominationTotalOrderForeign</div>@Html.Hidden("Denomination_Total_Order_Foreign_" + transactionData[i].RowId, transactionData[i].DenominationTotalOrderForeign)</td>
                                                                                                </tr>
                                                                                            </tfoot>
                                                                                        </table>
                                                                                    </div>
                                                                                </div>
                                                                                <div class="col-sm-10 col-sm-offset-1">
                                                                                    <button class="btn btn-primary btn-outline" data-dismiss="modal" type="button">Update</button>
                                                                                    <button class="btn btn-danger btn-outline" type="button" onclick="RemoveDenomination(@transactionData[i].RowId)">Remove Denomination</button>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td>
                                                            <button class="btn btn-danger btn-xs" type="button" onclick="RemovePairedTransaction(@transactionData[i].RowId)"><i aria-hidden="true" class="icon wb-close"></i> Remove</button>
                                                        </td>
                                                    </tr>
                                                    <tr id="transaction-row-@transactionData[i + 1].RowId" class="paired-row-@transactionData[i].RowId">
                                                        <td>
                                                            @transactionData[i + 1].TransactionID
                                                            @Html.Hidden("Transaction_ID_" + transactionData[i + 1].RowId, transactionData[i + 1].TransactionID)
                                                        </td>
                                                        <td>
                                                            @transactionData[i + 1].Type
                                                            @Html.Hidden("Transaction_Type_" + transactionData[i + 1].RowId, transactionData[i + 1].Type)
                                                        </td>
                                                        <td>
                                                            @Html.DropDownList("Transaction_Currency_" + transactionData[i + 1].RowId, transactionData[i + 1].CurrencyDDL, new { @class = "form-control currency-dropdown", onchange = "CurrencyChange(" + transactionData[i + 1].RowId + ")" })
                                                            @Html.ValidationMessage("Transaction_Currency_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            <div class="input-group">
                                                                <span class="input-group-addon" id="span-amount-foreign-symbol-@transactionData[i + 1].RowId">@transactionData[i + 1].Symbol</span>
                                                                @Html.TextBox("Transaction_Amount_Foreign_" + transactionData[i + 1].RowId, transactionData[i + 1].AmountForeign, new { @class = "form-control", @disabled = "disabled" })
                                                                @Html.Hidden("Transaction_AmountForeign_" + transactionData[i + 1].RowId, transactionData[i + 1].AmountForeign)
                                                            </div>
                                                            @Html.ValidationMessage("Transaction_AmountForeign_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_rate_" + transactionData[i + 1].RowId, transactionData[i + 1].Rate, new { @class = "form-control", @disabled = "disabled" })
                                                            @Html.Hidden("Transaction_Rate_" + transactionData[i + 1].RowId, transactionData[i + 1].Rate)
                                                            @Html.ValidationMessage("Transaction_Rate_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_Encashment_Rate_" + transactionData[i + 1].RowId, transactionData[i + 1].EncashmentRate, new { @class = "form-control", @disabled = "disabled" })
                                                            @Html.Hidden("Transaction_EncashmentRate_" + transactionData[i + 1].RowId, transactionData[i + 1].EncashmentRate)
                                                            @Html.ValidationMessage("Transaction_EncashmentRate_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_Unit_" + transactionData[i + 1].RowId, transactionData[i + 1].Unit, new { @class = "form-control", @disabled = "disabled" })
                                                            @Html.Hidden("Transaction_Unit_" + transactionData[i + 1].RowId, transactionData[i + 1].Unit)
                                                        </td>
                                                        <td>
                                                            <div class="input-group">
                                                                <span class="input-group-addon">$</span>
                                                                @Html.TextBox("Transaction_Amount_Local_" + transactionData[i + 1].RowId, transactionData[i + 1].AmountLocal, new { @class = "form-control", @disabled = "disabled" })
                                                                @Html.Hidden("Transaction_AmountLocal_" + transactionData[i + 1].RowId, transactionData[i + 1].AmountLocal)
                                                            </div>
                                                            @Html.ValidationMessage("Transaction_AmountLocal_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.DropDownList("Transaction_PaymentMode_" + transactionData[i + 1].RowId, transactionData[i + 1].PaymentModeDDL, new { @class = "form-control", @onchange = "PaymentModeChange(" + transactionData[i + 1].RowId + ")" })
                                                            @Html.ValidationMessage("Transaction_PaymentMode_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            @if (transactionData[i + 1].DisabledChequeNo == "disabled")
                                                            {
                                                                @Html.TextBox("Transaction_ChequeNo_" + transactionData[i + 1].RowId, transactionData[i + 1].ChequeNo, new { @class = "form-control", @disabled = "disabled" })
                                                            }
                                                            else
                                                            {
                                                                @Html.TextBox("Transaction_ChequeNo_" + transactionData[i + 1].RowId, transactionData[i + 1].ChequeNo, new { @class = "form-control" })
                                                            }
                                                            @Html.ValidationMessage("Transaction_ChequeNo_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            @if (transactionData[i + 1].DisabledBankTransferNo == "disabled")
                                                            {
                                                                @Html.TextBox("Transaction_BankTransferNo_" + transactionData[i + 1].RowId, transactionData[i + 1].BankTransferNo, new { @class = "form-control", @disabled = "disabled" })
                                                            }
                                                            else
                                                            {
                                                                @Html.TextBox("Transaction_BankTransferNo_" + transactionData[i + 1].RowId, transactionData[i + 1].BankTransferNo, new { @class = "form-control" })
                                                            }
                                                            @Html.ValidationMessage("Transaction_BankTransferNo_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_VesselName_" + transactionData[i + 1].RowId, transactionData[i + 1].VesselName, new { @class = "form-control", @disabled = "disabled" })
                                                            @Html.ValidationMessage("Transaction_VesselName_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td></td>
                                                        <td>
                                                            <button class="btn btn-danger btn-xs" type="button" onclick="RemovePairedTransaction(@transactionData[i].RowId)"><i aria-hidden="true" class="icon wb-close"></i> Remove</button>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                            <tfoot>
                                                <tr>
                                                    <th colspan="3" style="text-align: right;">Total (Foreign)</th>
                                                    <th>
                                                        <div id="total-amount-foreign">$@ViewData["TotalForeign"].ToString()</div>
                                                    </th>
                                                    <th colspan="3" style="text-align: right;">Total (Local)</th>
                                                    <th>
                                                        <div id="total-amount-local">$@ViewData["TotalLocal"].ToString()</div>
                                                    </th>
                                                    <th colspan="6"></th>
                                                </tr>
                                            </tfoot>
                                            <!-- #endregion -->
                                        }
                                        else if (ViewData["SaleTransactionType"].ToString() == "Swap")
                                        {
                                            <!-- #region Swap Transaction Type -->
                                            <thead>
                                                <tr>
                                                    <th style="min-width: 50px;">ID</th>
                                                    <th style="min-width: 50px;">Type</th>
                                                    <th style="min-width: 150px;">Currency</th>
                                                    <th style="min-width: 200px;">Amount (Foreign)</th>
                                                    <th style="min-width: 150px;">Rate</th>
                                                    <th style="min-width: 150px;">Encashment Rate</th>
                                                    <th style="min-width: 150px;">Unit</th>
                                                    <th style="min-width: 200px;">Amount (Local)</th>
                                                    <th style="min-width: 150px;">Payment Mode</th>
                                                    <th style="min-width: 200px;">Cheque No.</th>
                                                    <th style="min-width: 200px;">Bank Transfer No.</th>
                                                    <th style="min-width: 200px;">Vessel Name</th>
                                                    <th style="min-width: 100px;">Outgoing Denomination</th>
                                                    <th style="min-width: 100px;">Action</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @for (int i = 0; i < transactionData.Count; i += 2)
                                                {
                                                    <tr id="transaction-row-@transactionData[i].RowId" class="paired-row-@transactionData[i].RowId">
                                                        <td>
                                                            @transactionData[i].TransactionID
                                                            @Html.Hidden("Transaction_ID_" + transactionData[i].RowId, transactionData[i].TransactionID)
                                                        </td>
                                                        <td>
                                                            @transactionData[i].Type
                                                            @Html.Hidden("Transaction_Type_" + transactionData[i].RowId, transactionData[i].Type)
                                                        </td>
                                                        <td>
                                                            @Html.DropDownList("Transaction_Currency_" + transactionData[i].RowId, transactionData[i].CurrencyDDL, new { @class = "form-control currency-dropdown", onchange = "CurrencyChange(" + transactionData[i].RowId + ")" })
                                                            @Html.ValidationMessage("Transaction_Currency_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            <div class="input-group">
                                                                <span class="input-group-addon" id="span-amount-foreign-symbol-@transactionData[i].RowId">@transactionData[i].Symbol</span>
                                                                @Html.TextBox("Transaction_AmountForeign_" + transactionData[i].RowId, transactionData[i].AmountForeign, new { @class = "form-control", @onchange = "AmountForeignChange(" + transactionData[i].RowId + ")" })
                                                            </div>
                                                            @Html.ValidationMessage("Transaction_AmountForeign_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_Rate_" + transactionData[i].RowId, transactionData[i].Rate, new { @class = "form-control", @onchange = "RateChange(" + transactionData[i].RowId + ")" })
                                                            @Html.ValidationMessage("Transaction_Rate_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_EncashmentRate_" + transactionData[i].RowId, transactionData[i].EncashmentRate, new { @class = "form-control", @onchange = "EncashmentRateChange(" + transactionData[i].RowId + ")" })
                                                            @Html.ValidationMessage("Transaction_EncashmentRate_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_Unit_" + transactionData[i].RowId, transactionData[i].Unit, new { @class = "form-control", @disabled = "disabled" })
                                                            @Html.Hidden("Transaction_Unit_" + transactionData[i].RowId, transactionData[i].Unit)
                                                        </td>
                                                        <td>
                                                            <div class="input-group">
                                                                <span class="input-group-addon">$</span>
                                                                @Html.TextBox("Transaction_Amount_Local_" + transactionData[i].RowId, transactionData[i].AmountLocal, new { @class = "form-control", @disabled = "disabled" })
                                                                @Html.Hidden("Transaction_AmountLocal_" + transactionData[i].RowId, transactionData[i].AmountLocal)
                                                            </div>
                                                            @Html.ValidationMessage("Transaction_AmountLocal_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.DropDownList("Transaction_PaymentMode_" + transactionData[i].RowId, transactionData[i].PaymentModeDDL, new { @class = "form-control", @onchange = "PaymentModeChange(" + transactionData[i].RowId + ")" })
                                                            @Html.ValidationMessage("Transaction_PaymentMode_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            @if (transactionData[i].DisabledChequeNo == "disabled")
                                                            {
                                                                @Html.TextBox("Transaction_ChequeNo_" + transactionData[i].RowId, transactionData[i].ChequeNo, new { @class = "form-control", @disabled = "disabled" })
                                                            }
                                                            else
                                                            {
                                                                @Html.TextBox("Transaction_ChequeNo_" + transactionData[i].RowId, transactionData[i].ChequeNo, new { @class = "form-control" })
                                                            }
                                                            @Html.ValidationMessage("Transaction_ChequeNo_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            @if (transactionData[i].DisabledBankTransferNo == "disabled")
                                                            {
                                                                @Html.TextBox("Transaction_BankTransferNo_" + transactionData[i].RowId, transactionData[i].BankTransferNo, new { @class = "form-control", @disabled = "disabled" })
                                                            }
                                                            else
                                                            {
                                                                @Html.TextBox("Transaction_BankTransferNo_" + transactionData[i].RowId, transactionData[i].BankTransferNo, new { @class = "form-control" })
                                                            }
                                                            @Html.ValidationMessage("Transaction_BankTransferNo_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_VesselName_" + transactionData[i].RowId, transactionData[i].VesselName, new { @class = "form-control" })
                                                            @Html.ValidationMessage("Transaction_VesselName_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            <button type="button" class="btn btn-xs btn-primary" onclick="OpenDenominationModal(@transactionData[i].RowId)">Update</button>
                                                            @Html.ValidationMessage("Transaction_Denomination_" + transactionData[i].RowId)
                                                            <div class="modal fade" id="modal-transaction-denomination-@transactionData[i].RowId" aria-hidden="false" aria-labelledby="modal-label-@transactionData[i].RowId"
                                                                 role="dialog" tabindex="-1">
                                                                <div class="modal-dialog modal-lg">
                                                                    <div class="modal-content form-horizontal">
                                                                        <div class="modal-header">
                                                                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                                                <span aria-hidden="true">×</span>
                                                                            </button>
                                                                            <h4 class="modal-title" id="modal-label-@transactionData[i].RowId">Denomination - @transactionData[i].DenominationCurrencyCode</h4>
                                                                        </div>
                                                                        <div class="modal-body">
                                                                            <div class="row">
                                                                                <div class="form-group">
                                                                                    <div class="col-sm-10 col-sm-offset-1">
                                                                                        <table id="table-transaction-denomination-@transactionData[i].RowId" class="table table-hover table-condensed table-bordered" data-striped="true" data-height="250" data-mobile-responsive="true">
                                                                                            <thead>
                                                                                                <tr>
                                                                                                    <th>Denomination</th>
                                                                                                    <th>Pieces</th>
                                                                                                    <th id="AmtCurr-@transactionData[i].RowId">Amt (@transactionData[i].Symbol)</th>
                                                                                                </tr>
                                                                                            </thead>
                                                                                            <tbody>
                                                                                                @if (transactionData[i].Denominations.Count > 0)
                                                                                                {
                                                                                                    foreach (DenominationsData denomination in transactionData[i].Denominations)
                                                                                                    {
                                                                                                        if (denomination.DenominationValue == "coins")
                                                                                                        {
                                                                                                            <tr>
                                                                                                                <td>coins @Html.ValidationMessage("Denomination_Value_" + transactionData[i].RowId + "_" + denomination.DenoId) @Html.Hidden("Denomination_Value_" + transactionData[i].RowId + "_" + denomination.DenoId, denomination.DenominationValue)</td>
                                                                                                                <td>-</td>
                                                                                                                <td>@Html.TextBox("Denomination_Value_AmountForeign_" + transactionData[i].RowId + "_" + denomination.DenoId, denomination.AmountForeign, new { @class = "form-control denomination-amount-foreign", @onchange = "CoinsChange(" + transactionData[i].RowId + ", " + denomination.DenoId + ")" }) @Html.ValidationMessage("Denomination_Value_AmountForeign_" + transactionData[i].RowId + "_" + denomination.DenoId)</td>
                                                                                                            </tr>
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            <tr>
                                                                                                                <td>@denomination.DenominationValue @Html.ValidationMessage("Denomination_Value_" + transactionData[i].RowId + "_" + denomination.DenoId) @Html.Hidden("Denomination_Value_" + transactionData[i].RowId + "_" + denomination.DenoId, denomination.DenominationValue)</td>
                                                                                                                <td>@Html.TextBox("Denomination_Value_Pieces_" + transactionData[i].RowId + "_" + denomination.DenoId, denomination.Pieces, new { @class = "form-control", @onchange = "PiecesChange(" + transactionData[i].RowId + ", " + denomination.DenoId + ")" }) @Html.ValidationMessage("Denomination_Value_Pieces_" + transactionData[i].RowId + "_" + denomination.DenoId)</td>
                                                                                                                <td><div id="denomination-amount-foreign-@transactionData[i].RowId-@denomination.DenoId">@denomination.AmountForeign</div>@Html.ValidationMessage("Denomination_Value_AmountForeign_" + transactionData[i].RowId + "_" + denomination.DenoId) @Html.Hidden("Denomination_Value_AmountForeign_" + transactionData[i].RowId + "_" + denomination.DenoId, denomination.AmountForeign, new { @class = "denomination-amount-foreign" })</td>
                                                                                                            </tr>
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            </tbody>
                                                                                            <tfoot>
                                                                                                <tr>
                                                                                                    <td colspan="2" class="text-right">Total Calculated</td>
                                                                                                    <td><div id="denomination-total-calculated-foreign-symbol-@transactionData[i].RowId" style="float:left;">@transactionData[i].Symbol</div><div id="denomination-total-calculated-foreign-@transactionData[i].RowId">@transactionData[i].DenominationTotalCalculatedForeign</div>@Html.ValidationMessage("Denomination_Total_Calculated_Foreign_" + transactionData[i].RowId)@Html.Hidden("Denomination_Total_Calculated_Foreign_" + transactionData[i].RowId, transactionData[i].DenominationTotalCalculatedForeign)</td>
                                                                                                </tr>
                                                                                                <tr>
                                                                                                    <td colspan="2" class="text-right">Remaining</td>
                                                                                                    <td><div id="denomination-remaining-foreign-symbol-@transactionData[i].RowId" style="float:left;">@transactionData[i].Symbol</div><div id="denomination-remaining-foreign-@transactionData[i].RowId">@transactionData[i].DenominationRemainingForeign</div>@Html.Hidden("Denomination_Remaining_Foreign_" + transactionData[i].RowId, transactionData[i].DenominationRemainingForeign)</td>
                                                                                                </tr>
                                                                                                <tr>
                                                                                                    <td colspan="2" class="text-right">Total Order</td>
                                                                                                    <td><div id="denomination-total-order-foreign-symbol-@transactionData[i].RowId" style="float:left;">@transactionData[i].Symbol</div><div id="denomination-total-order-foreign-@transactionData[i].RowId">@transactionData[i].DenominationTotalOrderForeign</div>@Html.Hidden("Denomination_Total_Order_Foreign_" + transactionData[i].RowId, transactionData[i].DenominationTotalOrderForeign)</td>
                                                                                                </tr>
                                                                                            </tfoot>
                                                                                        </table>
                                                                                    </div>
                                                                                </div>
                                                                                <div class="col-sm-10 col-sm-offset-1">
                                                                                    <button class="btn btn-primary btn-outline" data-dismiss="modal" type="button">Update</button>
                                                                                    <button class="btn btn-danger btn-outline" type="button" onclick="RemoveDenomination(@transactionData[i].RowId)">Remove Denomination</button>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td>
                                                            <button class="btn btn-danger btn-xs" type="button" onclick="RemovePairedTransaction(@transactionData[i].RowId)"><i aria-hidden="true" class="icon wb-close"></i> Remove</button>
                                                        </td>
                                                    </tr>
                                                    <tr id="transaction-row-@transactionData[i + 1].RowId" class="paired-row-@transactionData[i].RowId">
                                                        <td>
                                                            @transactionData[i + 1].TransactionID
                                                            @Html.Hidden("Transaction_ID_" + transactionData[i + 1].RowId, transactionData[i + 1].TransactionID)
                                                        </td>
                                                        <td>
                                                            @transactionData[i + 1].Type
                                                            @Html.Hidden("Transaction_Type_" + transactionData[i + 1].RowId, transactionData[i + 1].Type)
                                                        </td>
                                                        <td>
                                                            @Html.DropDownList("Transaction_Currency_" + transactionData[i + 1].RowId, transactionData[i + 1].CurrencyDDL, new { @class = "form-control currency-dropdown", onchange = "CurrencyChange(" + transactionData[i + 1].RowId + ")" })
                                                            @Html.ValidationMessage("Transaction_Currency_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            <div class="input-group">
                                                                <span class="input-group-addon" id="span-amount-foreign-symbol-@transactionData[i + 1].RowId">@transactionData[i + 1].Symbol</span>
                                                                @Html.TextBox("Transaction_Amount_Foreign_" + transactionData[i + 1].RowId, transactionData[i + 1].AmountForeign, new { @class = "form-control", @disabled = "disabled" })
                                                                @Html.Hidden("Transaction_AmountForeign_" + transactionData[i + 1].RowId, transactionData[i + 1].AmountForeign)
                                                            </div>
                                                            @Html.ValidationMessage("Transaction_AmountForeign_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_rate_" + transactionData[i + 1].RowId, transactionData[i + 1].Rate, new { @class = "form-control", @disabled = "disabled" })
                                                            @Html.Hidden("Transaction_Rate_" + transactionData[i + 1].RowId, transactionData[i + 1].Rate)
                                                            @Html.ValidationMessage("Transaction_Rate_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_Encashment_Rate_" + transactionData[i + 1].RowId, transactionData[i + 1].EncashmentRate, new { @class = "form-control", @disabled = "disabled" })
                                                            @Html.Hidden("Transaction_EncashmentRate_" + transactionData[i + 1].RowId, transactionData[i + 1].EncashmentRate)
                                                            @Html.ValidationMessage("Transaction_EncashmentRate_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_Unit_" + transactionData[i + 1].RowId, transactionData[i + 1].Unit, new { @class = "form-control", @disabled = "disabled" })
                                                            @Html.Hidden("Transaction_Unit_" + transactionData[i + 1].RowId, transactionData[i + 1].Unit)
                                                        </td>
                                                        <td>
                                                            <div class="input-group">
                                                                <span class="input-group-addon">$</span>
                                                                @Html.TextBox("Transaction_Amount_Local_" + transactionData[i + 1].RowId, transactionData[i + 1].AmountLocal, new { @class = "form-control", @disabled = "disabled" })
                                                                @Html.Hidden("Transaction_AmountLocal_" + transactionData[i + 1].RowId, transactionData[i + 1].AmountLocal)
                                                            </div>
                                                            @Html.ValidationMessage("Transaction_AmountLocal_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.DropDownList("Transaction_PaymentMode_" + transactionData[i + 1].RowId, transactionData[i + 1].PaymentModeDDL, new { @class = "form-control", @onchange = "PaymentModeChange(" + transactionData[i + 1].RowId + ")" })
                                                            @Html.ValidationMessage("Transaction_PaymentMode_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            @if (transactionData[i + 1].DisabledChequeNo == "disabled")
                                                            {
                                                                @Html.TextBox("Transaction_ChequeNo_" + transactionData[i + 1].RowId, transactionData[i + 1].ChequeNo, new { @class = "form-control", @disabled = "disabled" })
                                                            }
                                                            else
                                                            {
                                                                @Html.TextBox("Transaction_ChequeNo_" + transactionData[i + 1].RowId, transactionData[i + 1].ChequeNo, new { @class = "form-control" })
                                                            }
                                                            @Html.ValidationMessage("Transaction_ChequeNo_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            @if (transactionData[i + 1].DisabledBankTransferNo == "disabled")
                                                            {
                                                                @Html.TextBox("Transaction_BankTransferNo_" + transactionData[i + 1].RowId, transactionData[i + 1].BankTransferNo, new { @class = "form-control", @disabled = "disabled" })
                                                            }
                                                            else
                                                            {
                                                                @Html.TextBox("Transaction_BankTransferNo_" + transactionData[i + 1].RowId, transactionData[i + 1].BankTransferNo, new { @class = "form-control" })
                                                            }
                                                            @Html.ValidationMessage("Transaction_BankTransferNo_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_VesselName_" + transactionData[i + 1].RowId, transactionData[i + 1].VesselName, new { @class = "form-control", @disabled = "disabled" })
                                                            @Html.ValidationMessage("Transaction_VesselName_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td></td>
                                                        <td>
                                                            <button class="btn btn-danger btn-xs" type="button" onclick="RemovePairedTransaction(@transactionData[i].RowId)"><i aria-hidden="true" class="icon wb-close"></i> Remove</button>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                            <tfoot>
                                                <tr>
                                                    <th colspan="3" style="text-align: right;">Total (Foreign)</th>
                                                    <th>
                                                        <div id="total-amount-foreign">$@ViewData["TotalForeign"].ToString()</div>
                                                    </th>
                                                    <th colspan="3" style="text-align: right;">Total (Local)</th>
                                                    <th>
                                                        <div id="total-amount-local">$@ViewData["TotalLocal"].ToString()</div>
                                                    </th>
                                                    <th colspan="6"></th>
                                                </tr>
                                            </tfoot>
                                            <!-- #endregion -->
                                        }
                                        else if (ViewData["SaleTransactionType"].ToString() == "Cross Currency")
                                        {
                                            <!-- #region Cross Currency Transaction Type -->
                                            <thead>
                                                <tr>
                                                    <th style="min-width: 50px;">ID</th>
                                                    <th style="min-width: 50px;">Type</th>
                                                    <th style="min-width: 150px;">Currency</th>
                                                    <th style="min-width: 200px;">Amount (Foreign)</th>
                                                    <th style="min-width: 150px;">Rate</th>
                                                    <th style="min-width: 150px;">Cross Rate</th>
                                                    <th style="min-width: 150px;">Unit</th>
                                                    <th style="min-width: 200px;">Amount (Local)</th>
                                                    <th style="min-width: 150px;">Payment Mode</th>
                                                    <th style="min-width: 200px;">Cheque No.</th>
                                                    <th style="min-width: 200px;">Bank Transfer No.</th>
                                                    <th style="min-width: 200px;">Vessel Name</th>
                                                    <th style="min-width: 100px;">Outgoing Denomination</th>
                                                    <th style="min-width: 100px;">Action</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @for (int i = 0; i < transactionData.Count; i += 2)
                                                {
                                                    <tr id="transaction-row-@transactionData[i].RowId" class="paired-row-@transactionData[i].RowId">
                                                        <td>
                                                            @transactionData[i].TransactionID
                                                            @Html.Hidden("Transaction_ID_" + transactionData[i].RowId, transactionData[i].TransactionID)
                                                        </td>
                                                        <td>
                                                            @transactionData[i].Type
                                                            @Html.Hidden("Transaction_Type_" + transactionData[i].RowId, transactionData[i].Type)
                                                        </td>
                                                        <td>
                                                            @Html.DropDownList("Transaction_Currency_" + transactionData[i].RowId, transactionData[i].CurrencyDDL, new { @class = "form-control currency-dropdown", onchange = "CurrencyChange(" + transactionData[i].RowId + ")" })
                                                            @Html.ValidationMessage("Transaction_Currency_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            <div class="input-group">
                                                                <span class="input-group-addon" id="span-amount-foreign-symbol-@transactionData[i].RowId">@transactionData[i].Symbol</span>
                                                                @Html.TextBox("Transaction_AmountForeign_" + transactionData[i].RowId, transactionData[i].AmountForeign, new { @class = "form-control", @onchange = "AmountForeignChange(" + transactionData[i].RowId + ")" })
                                                            </div>
                                                            @Html.ValidationMessage("Transaction_AmountForeign_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_Rate_" + transactionData[i].RowId, transactionData[i].Rate, new { @class = "form-control", @onchange = "RateChange(" + transactionData[i].RowId + ")" })
                                                            @Html.ValidationMessage("Transaction_Rate_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_CrossRate_" + transactionData[i].RowId, transactionData[i].CrossRate, new { @class = "form-control", @onchange = "CrossRateChange(" + transactionData[i].RowId + ")" })
                                                            @Html.ValidationMessage("Transaction_CrossRate_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_Unit_" + transactionData[i].RowId, transactionData[i].Unit, new { @class = "form-control", @disabled = "disabled" })
                                                            @Html.Hidden("Transaction_Unit_" + transactionData[i].RowId, transactionData[i].Unit)
                                                        </td>
                                                        <td>
                                                            <div class="input-group">
                                                                <span class="input-group-addon">$</span>
                                                                @Html.TextBox("Transaction_Amount_Local_" + transactionData[i].RowId, transactionData[i].AmountLocal, new { @class = "form-control", @disabled = "disabled" })
                                                                @Html.Hidden("Transaction_AmountLocal_" + transactionData[i].RowId, transactionData[i].AmountLocal)
                                                            </div>
                                                            @Html.ValidationMessage("Transaction_AmountLocal_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.DropDownList("Transaction_PaymentMode_" + transactionData[i].RowId, transactionData[i].PaymentModeDDL, new { @class = "form-control", @onchange = "PaymentModeChange(" + transactionData[i].RowId + ")" })
                                                            @Html.ValidationMessage("Transaction_PaymentMode_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            @if (transactionData[i].DisabledChequeNo == "disabled")
                                                            {
                                                                @Html.TextBox("Transaction_ChequeNo_" + transactionData[i].RowId, transactionData[i].ChequeNo, new { @class = "form-control", @disabled = "disabled" })
                                                            }
                                                            else
                                                            {
                                                                @Html.TextBox("Transaction_ChequeNo_" + transactionData[i].RowId, transactionData[i].ChequeNo, new { @class = "form-control" })
                                                            }
                                                            @Html.ValidationMessage("Transaction_ChequeNo_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            @if (transactionData[i].DisabledBankTransferNo == "disabled")
                                                            {
                                                                @Html.TextBox("Transaction_BankTransferNo_" + transactionData[i].RowId, transactionData[i].BankTransferNo, new { @class = "form-control", @disabled = "disabled" })
                                                            }
                                                            else
                                                            {
                                                                @Html.TextBox("Transaction_BankTransferNo_" + transactionData[i].RowId, transactionData[i].BankTransferNo, new { @class = "form-control" })
                                                            }
                                                            @Html.ValidationMessage("Transaction_BankTransferNo_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_VesselName_" + transactionData[i].RowId, transactionData[i].VesselName, new { @class = "form-control" })
                                                            @Html.ValidationMessage("Transaction_VesselName_" + transactionData[i].RowId)
                                                        </td>
                                                        <td>
                                                            <button type="button" class="btn btn-xs btn-primary" onclick="OpenDenominationModal(@transactionData[i].RowId)">Update</button>
                                                            @Html.ValidationMessage("Transaction_Denomination_" + transactionData[i].RowId)
                                                            <div class="modal fade" id="modal-transaction-denomination-@transactionData[i].RowId" aria-hidden="false" aria-labelledby="modal-label-@transactionData[i].RowId"
                                                                 role="dialog" tabindex="-1">
                                                                <div class="modal-dialog modal-lg">
                                                                    <div class="modal-content form-horizontal">
                                                                        <div class="modal-header">
                                                                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                                                <span aria-hidden="true">×</span>
                                                                            </button>
                                                                            <h4 class="modal-title" id="modal-label-@transactionData[i].RowId">Denomintaion - @transactionData[i].DenominationCurrencyCode</h4>
                                                                        </div>
                                                                        <div class="modal-body">
                                                                            <div class="row">
                                                                                <div class="form-group">
                                                                                    <div class="col-sm-10 col-sm-offset-1">
                                                                                        <table id="table-transaction-denomination-@transactionData[i].RowId" class="table table-hover table-condensed table-bordered" data-striped="true" data-height="250" data-mobile-responsive="true">
                                                                                            <thead>
                                                                                                <tr>
                                                                                                    <th>Denomination</th>
                                                                                                    <th>Pieces</th>
                                                                                                    <th id="AmtCurr-@transactionData[i].RowId">Amt (@transactionData[i].Symbol)</th>
                                                                                                </tr>
                                                                                            </thead>
                                                                                            <tbody>
                                                                                                @if (transactionData[i].Denominations.Count > 0)
                                                                                                {
                                                                                                    foreach (DenominationsData denomination in transactionData[i].Denominations)
                                                                                                    {
                                                                                                        if (denomination.DenominationValue == "coins")
                                                                                                        {
                                                                                                            <tr>
                                                                                                                <td>coins @Html.ValidationMessage("Denomination_Value_" + transactionData[i].RowId + "_" + denomination.DenoId) @Html.Hidden("Denomination_Value_" + transactionData[i].RowId + "_" + denomination.DenoId, denomination.DenominationValue)</td>
                                                                                                                <td>-</td>
                                                                                                                <td>@Html.TextBox("Denomination_Value_AmountForeign_" + transactionData[i].RowId + "_" + denomination.DenoId, denomination.AmountForeign, new { @class = "form-control denomination-amount-foreign", @onchange = "CoinsChange(" + transactionData[i].RowId + ", " + denomination.DenoId + ")" }) @Html.ValidationMessage("Denomination_Value_AmountForeign_" + transactionData[i].RowId + "_" + denomination.DenoId)</td>
                                                                                                            </tr>
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            <tr>
                                                                                                                <td>@denomination.DenominationValue @Html.ValidationMessage("Denomination_Value_" + transactionData[i].RowId + "_" + denomination.DenoId) @Html.Hidden("Denomination_Value_" + transactionData[i].RowId + "_" + denomination.DenoId, denomination.DenominationValue)</td>
                                                                                                                <td>@Html.TextBox("Denomination_Value_Pieces_" + transactionData[i].RowId + "_" + denomination.DenoId, denomination.Pieces, new { @class = "form-control", @onchange = "PiecesChange(" + transactionData[i].RowId + ", " + denomination.DenoId + ")" }) @Html.ValidationMessage("Denomination_Value_Pieces_" + transactionData[i].RowId + "_" + denomination.DenoId)</td>
                                                                                                                <td><div id="denomination-amount-foreign-@transactionData[i].RowId-@denomination.DenoId">@denomination.AmountForeign</div>@Html.ValidationMessage("Denomination_Value_AmountForeign_" + transactionData[i].RowId + "_" + denomination.DenoId) @Html.Hidden("Denomination_Value_AmountForeign_" + transactionData[i].RowId + "_" + denomination.DenoId, denomination.AmountForeign, new { @class = "denomination-amount-foreign" })</td>
                                                                                                            </tr>
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            </tbody>
                                                                                            <tfoot>
                                                                                                <tr>
                                                                                                    <td colspan="2" class="text-right">Total Calculated</td>
                                                                                                    <td><div id="denomination-total-calculated-foreign-symbol-@transactionData[i].RowId" style="float:left;">@transactionData[i].Symbol</div><div id="denomination-total-calculated-foreign-@transactionData[i].RowId">@transactionData[i].DenominationTotalCalculatedForeign</div>@Html.ValidationMessage("Denomination_Total_Calculated_Foreign_" + transactionData[i].RowId)@Html.Hidden("Denomination_Total_Calculated_Foreign_" + transactionData[i].RowId, transactionData[i].DenominationTotalCalculatedForeign)</td>
                                                                                                </tr>
                                                                                                <tr>
                                                                                                    <td colspan="2" class="text-right">Remaining</td>
                                                                                                    <td><div id="denomination-remaining-foreign-symbol-@transactionData[i].RowId" style="float:left;">@transactionData[i].Symbol</div><div id="denomination-remaining-foreign-@transactionData[i].RowId">@transactionData[i].DenominationRemainingForeign</div>@Html.Hidden("Denomination_Remaining_Foreign_" + transactionData[i].RowId, transactionData[i].DenominationRemainingForeign)</td>
                                                                                                </tr>
                                                                                                <tr>
                                                                                                    <td colspan="2" class="text-right">Total Order</td>
                                                                                                    <td><div id="denomination-total-order-foreign-symbol-@transactionData[i].RowId" style="float:left;">@transactionData[i].Symbol</div><div id="denomination-total-order-foreign-@transactionData[i].RowId">@transactionData[i].DenominationTotalOrderForeign</div>@Html.Hidden("Denomination_Total_Order_Foreign_" + transactionData[i].RowId, transactionData[i].DenominationTotalOrderForeign)</td>
                                                                                                </tr>
                                                                                            </tfoot>
                                                                                        </table>
                                                                                    </div>
                                                                                </div>
                                                                                <div class="col-sm-10 col-sm-offset-1">
                                                                                    <button class="btn btn-primary btn-outline" data-dismiss="modal" type="button">Update</button>
                                                                                    <button class="btn btn-danger btn-outline" type="button" onclick="RemoveDenomination(@transactionData[i].RowId)">Remove Denomination</button>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td>
                                                            <button class="btn btn-danger btn-xs" type="button" onclick="RemovePairedTransaction(@transactionData[i].RowId)"><i aria-hidden="true" class="icon wb-close"></i> Remove</button>
                                                        </td>
                                                    </tr>
                                                    <tr id="transaction-row-@transactionData[i + 1].RowId" class="paired-row-@transactionData[i].RowId">
                                                        <td>
                                                            @transactionData[i + 1].TransactionID
                                                            @Html.Hidden("Transaction_ID_" + transactionData[i + 1].RowId, transactionData[i + 1].TransactionID)
                                                        </td>
                                                        <td>
                                                            @transactionData[i + 1].Type
                                                            @Html.Hidden("Transaction_Type_" + transactionData[i + 1].RowId, transactionData[i + 1].Type)
                                                        </td>
                                                        <td>
                                                            @Html.DropDownList("Transaction_Currency_" + transactionData[i + 1].RowId, transactionData[i + 1].CurrencyDDL, new { @class = "form-control currency-dropdown", onchange = "CurrencyChange(" + transactionData[i + 1].RowId + ")" })
                                                            @Html.ValidationMessage("Transaction_Currency_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            <div class="input-group">
                                                                <span class="input-group-addon" id="span-amount-foreign-symbol-@transactionData[i + 1].RowId">@transactionData[i + 1].Symbol</span>
                                                                @Html.TextBox("Transaction_AmountForeign_" + transactionData[i + 1].RowId, transactionData[i + 1].AmountForeign, new { @class = "form-control", @onchange = "AmountForeignChange(" + transactionData[i + 1].RowId + ")" })
                                                            </div>
                                                            @Html.ValidationMessage("Transaction_AmountForeign_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_rate_" + transactionData[i + 1].RowId, transactionData[i + 1].Rate, new { @class = "form-control", @disabled = "disabled" })
                                                            @Html.Hidden("Transaction_Rate_" + transactionData[i + 1].RowId, transactionData[i + 1].Rate)
                                                            @Html.ValidationMessage("Transaction_Rate_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_Cross_Rate_" + transactionData[i + 1].RowId, transactionData[i + 1].CrossRate, new { @class = "form-control", @disabled = "disabled" })
                                                            @Html.Hidden("Transaction_CrossRate_" + transactionData[i + 1].RowId, transactionData[i + 1].CrossRate)
                                                            @Html.ValidationMessage("Transaction_EncashmentRate_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_Unit_" + transactionData[i + 1].RowId, transactionData[i + 1].Unit, new { @class = "form-control", @disabled = "disabled" })
                                                            @Html.Hidden("Transaction_Unit_" + transactionData[i + 1].RowId, transactionData[i + 1].Unit)
                                                        </td>
                                                        <td>
                                                            <div class="input-group">
                                                                <span class="input-group-addon">$</span>
                                                                @Html.TextBox("Transaction_Amount_Local_" + transactionData[i + 1].RowId, transactionData[i + 1].AmountLocal, new { @class = "form-control", @disabled = "disabled" })
                                                                @Html.Hidden("Transaction_AmountLocal_" + transactionData[i + 1].RowId, transactionData[i + 1].AmountLocal)
                                                            </div>
                                                            @Html.ValidationMessage("Transaction_AmountLocal_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.DropDownList("Transaction_PaymentMode_" + transactionData[i + 1].RowId, transactionData[i + 1].PaymentModeDDL, new { @class = "form-control", @onchange = "PaymentModeChange(" + transactionData[i + 1].RowId + ")" })
                                                            @Html.ValidationMessage("Transaction_PaymentMode_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            @if (transactionData[i + 1].DisabledChequeNo == "disabled")
                                                            {
                                                                @Html.TextBox("Transaction_ChequeNo_" + transactionData[i + 1].RowId, transactionData[i + 1].ChequeNo, new { @class = "form-control", @disabled = "disabled" })
                                                            }
                                                            else
                                                            {
                                                                @Html.TextBox("Transaction_ChequeNo_" + transactionData[i + 1].RowId, transactionData[i + 1].ChequeNo, new { @class = "form-control" })
                                                            }
                                                            @Html.ValidationMessage("Transaction_ChequeNo_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            @if (transactionData[i + 1].DisabledBankTransferNo == "disabled")
                                                            {
                                                                @Html.TextBox("Transaction_BankTransferNo_" + transactionData[i + 1].RowId, transactionData[i + 1].BankTransferNo, new { @class = "form-control", @disabled = "disabled" })
                                                            }
                                                            else
                                                            {
                                                                @Html.TextBox("Transaction_BankTransferNo_" + transactionData[i + 1].RowId, transactionData[i + 1].BankTransferNo, new { @class = "form-control" })
                                                            }
                                                            @Html.ValidationMessage("Transaction_BankTransferNo_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            @Html.TextBox("Transaction_VesselName_" + transactionData[i + 1].RowId, transactionData[i + 1].VesselName, new { @class = "form-control", @disabled = "disabled" })
                                                            @Html.ValidationMessage("Transaction_VesselName_" + transactionData[i + 1].RowId)
                                                        </td>
                                                        <td>
                                                            <button type="button" class="btn btn-xs btn-primary" onclick="OpenDenominationModal(@transactionData[i + 1].RowId)">Update</button>
                                                            @Html.ValidationMessage("Transaction_Denomination_" + transactionData[i + 1].RowId)
                                                            <div class="modal fade" id="modal-transaction-denomination-@transactionData[i + 1].RowId" aria-hidden="false" aria-labelledby="modal-label-@transactionData[i + 1].RowId"
                                                                 role="dialog" tabindex="-1">
                                                                <div class="modal-dialog modal-lg">
                                                                    <div class="modal-content form-horizontal">
                                                                        <div class="modal-header">
                                                                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                                                <span aria-hidden="true">×</span>
                                                                            </button>
                                                                            <h4 class="modal-title" id="modal-label-@transactionData[i + 1].RowId">Denomination - @transactionData[i + 1].DenominationCurrencyCode</h4>
                                                                        </div>
                                                                        <div class="modal-body">
                                                                            <div class="row">
                                                                                <div class="form-group">
                                                                                    <div class="col-sm-10 col-sm-offset-1">
                                                                                        <table id="table-transaction-denomination-@transactionData[i + 1].RowId" class="table table-hover table-condensed table-bordered" data-striped="true" data-height="250" data-mobile-responsive="true">
                                                                                            <thead>
                                                                                                <tr>
                                                                                                    <th>Denomination</th>
                                                                                                    <th>Pieces</th>
                                                                                                    <th id="AmtCurr-@transactionData[i + 1].RowId">Amt (@transactionData[i + 1].Symbol)</th>
                                                                                                </tr>
                                                                                            </thead>
                                                                                            <tbody></tbody>
                                                                                            <tfoot>
                                                                                                <tr>
                                                                                                    <td colspan="2" class="text-right">Total Calculated</td>
                                                                                                    <td><div id="denomination-total-calculated-foreign-symbol-@transactionData[i + 1].RowId" style="float:left;">@transactionData[i + 1].Symbol</div><div id="denomination-total-calculated-foreign-@transactionData[i + 1].RowId">@transactionData[i + 1].DenominationTotalCalculatedForeign</div>@Html.ValidationMessage("Denomination_Total_Calculated_Foreign_" + transactionData[i + 1].RowId)@Html.Hidden("Denomination_Total_Calculated_Foreign_" + transactionData[i + 1].RowId, transactionData[i + 1].DenominationTotalCalculatedForeign)</td>
                                                                                                </tr>
                                                                                                <tr>
                                                                                                    <td colspan="2" class="text-right">Remaining</td>
                                                                                                    <td><div id="denomination-remaining-foreign-symbol-@transactionData[i + 1].RowId" style="float:left;">@transactionData[i + 1].Symbol</div><div id="denomination-remaining-foreign-@transactionData[i + 1].RowId">@transactionData[i + 1].DenominationRemainingForeign</div>@Html.Hidden("Denomination_Remaining_Foreign_" + transactionData[i + 1].RowId, transactionData[i + 1].DenominationRemainingForeign)</td>
                                                                                                </tr>
                                                                                                <tr>
                                                                                                    <td colspan="2" class="text-right">Total Order</td>
                                                                                                    <td><div id="denomination-total-order-foreign-symbol-@transactionData[i + 1].RowId" style="float:left;">@transactionData[i + 1].Symbol</div><div id="denomination-total-order-foreign-@transactionData[i + 1].RowId">@transactionData[i + 1].DenominationTotalOrderForeign</div>@Html.Hidden("Denomination_Total_Order_Foreign_" + transactionData[i + 1].RowId, transactionData[i + 1].DenominationTotalOrderForeign)</td>
                                                                                                </tr>
                                                                                            </tfoot>
                                                                                        </table>
                                                                                    </div>
                                                                                </div>
                                                                                <div class="col-sm-10 col-sm-offset-1">
                                                                                    <button class="btn btn-primary btn-outline" data-dismiss="modal" type="button">Update</button>
                                                                                    <button class="btn btn-danger btn-outline" type="button" onclick="RemoveDenomination(@transactionData[i + 1].RowId)">Remove Denomination</button>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td>
                                                            <button class="btn btn-danger btn-xs" type="button" onclick="RemovePairedTransaction(@transactionData[i].RowId)"><i aria-hidden="true" class="icon wb-close"></i> Remove</button>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                            <tfoot>
                                                <tr>
                                                    <th colspan="3" style="text-align: right;">Total (Foreign)</th>
                                                    <th>
                                                        <div id="total-amount-foreign">$@ViewData["TotalForeign"].ToString()</div>
                                                    </th>
                                                    <th colspan="3" style="text-align: right;">Total (Local)</th>
                                                    <th>
                                                        <div id="total-amount-local">$@ViewData["TotalLocal"].ToString()</div>
                                                    </th>
                                                    <th colspan="6"></th>
                                                </tr>
                                            </tfoot>
                                            <!-- #endregion -->
                                        }
                                    }
                                }
                            </table>
                        </div>
                    </div>

                    <div id="local-payment-mode" class="form-group">
                        @Html.LabelFor(s => sales.LocalPaymentMode, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-3 margin-bottom-20">
                            <span class="checkbox-custom checkbox-primary">
                                <input class="form-control" type="checkbox" id="cash" name="sales.LocalPaymentMode" value="Cash" onchange="LocalPaymentModeClick('cash', 'payment-mode-cash')" @ViewData["LocalPaymentModeCashCheckbox"].ToString() />
                                <label for="cash">Cash</label>
                            </span>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                <div class="input-group">
                                    <span class="input-group-addon">SGD $</span>
                                    @Html.TextBoxFor(s => sales.CashAmount, "{0:#,##0.00}", new { @class = "form-control payment-mode-cash", @placeholder = "Cash Amount", @onchange = "LocalPaymentAmountChange('sales_CashAmount')" })
                                </div>
                                @Html.ValidationMessageFor(s => sales.CashAmount)
                            </div>
                        </div>
                        <div class="col-sm-6 col-sm-offset-6">
                            <div class="form-group">
                                @Html.DropDownListFor(s => sales.CashBank, (SelectList)ViewData["CashBankDropdown"], new { @class = "form-control payment-mode-cash", @data_plugin = "select2", @data_placeholder = "Cash Bank", @data_allow_clear = "true", @disabled = "disabled" })
                                @Html.ValidationMessageFor(s => sales.CashBank)
                            </div>
                        </div>

                        <div class="col-sm-3 col-sm-offset-3">
                            <span class="checkbox-custom checkbox-primary">
                                <input class="form-control" type="checkbox" id="cheque-1" name="sales.LocalPaymentMode" value="Cheque 1" onchange="LocalPaymentModeClick('cheque-1', 'payment-mode-cheque-1')" @ViewData["LocalPaymentModeCheque1Checkbox"].ToString() />
                                <label for="cheque-1">Cheque 1</label>
                            </span>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                <div class="col-sm-10" style="padding-left: 0;padding-right: 5px; width:90%;" id="update-chequeNo1-input-div">@Html.TextBoxFor(s => sales.Cheque1No, new { @class = "form-control payment-mode-cheque-1", @placeholder = "Cheque 1 No." })</div>
                                <div style="display:none;" id="update-chequeNo1-div"><a id="update-chequeNo1-btn" class="btn btn-sm btn-icon btn-round btn-primary" href="javascript:void(0)" onclick="UpdateCheque1No()" style="text-decoration: none;" data-toggle="tooltip" data-original-title="Update Cheque 1 No."><i class="icon wb-edit" aria-hidden="true"></i></a></div>
                                @Html.ValidationMessageFor(s => sales.Cheque1No)
                            </div>
                        </div>
                        <div class="col-sm-6 col-sm-offset-6">
                            <div class="form-group">
                                <div class="input-group">
                                    <span class="input-group-addon">SGD $</span>
                                    @Html.TextBoxFor(s => sales.Cheque1Amount, "{0:#,##0.00}", new { @class = "form-control payment-mode-cheque-1", @placeholder = "Cheque 1 Amount", @onchange = "LocalPaymentAmountChange('sales_Cheque1Amount')" })
                                </div>
                                @Html.ValidationMessageFor(s => sales.Cheque1Amount)
                            </div>
                        </div>
                        <div class="col-sm-6 col-sm-offset-6">
                            <div class="form-group">
                                @Html.DropDownListFor(s => sales.Cheque1Bank, (SelectList)ViewData["Cheque1BankDropdown"], new { @class = "form-control payment-mode-cheque-1", @data_plugin = "select2", @data_placeholder = "Cheque 1 Bank", @data_allow_clear = "true" })
                                @Html.ValidationMessageFor(s => sales.Cheque1Bank)
                            </div>
                        </div>

                        <div class="col-sm-3 col-sm-offset-3">
                            <span class="checkbox-custom checkbox-primary">
                                <input class="form-control" type="checkbox" id="cheque-2" name="sales.LocalPaymentMode" value="Cheque 2" onchange="LocalPaymentModeClick('cheque-2', 'payment-mode-cheque-2')" @ViewData["LocalPaymentModeCheque2Checkbox"].ToString() />
                                <label for="cheque-2">Cheque 2</label>
                            </span>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                <div class="col-sm-10" style="padding-left: 0;padding-right: 5px; width:90%;" id="update-chequeNo2-input-div">@Html.TextBoxFor(s => sales.Cheque2No, new { @class = "form-control payment-mode-cheque-2", @placeholder = "Cheque 2 No." })</div>
                                <div style="display:none;" id="update-chequeNo2-div"><a id="update-chequeNo2-btn" class="btn btn-sm btn-icon btn-round btn-primary" href="javascript:void(0)" onclick="UpdateCheque2No()" style="text-decoration: none;" data-toggle="tooltip" data-original-title="Update Cheque 2 No."><i class="icon wb-edit" aria-hidden="true"></i></a></div>
                                @Html.ValidationMessageFor(s => sales.Cheque2No)
                            </div>
                        </div>
                        <div class="col-sm-6 col-sm-offset-6">
                            <div class="form-group">
                                <div class="input-group">
                                    <span class="input-group-addon">SGD $</span>
                                    @Html.TextBoxFor(s => sales.Cheque2Amount, "{0:#,##0.00}", new { @class = "form-control payment-mode-cheque-2", @placeholder = "Cheque 2 Amount", @onchange = "LocalPaymentAmountChange('sales_Cheque2Amount')" })
                                </div>
                                @Html.ValidationMessageFor(s => sales.Cheque2Amount)
                            </div>
                        </div>
                        <div class="col-sm-6 col-sm-offset-6">
                            <div class="form-group">
                                @Html.DropDownListFor(s => sales.Cheque2Bank, (SelectList)ViewData["Cheque2BankDropdown"], new { @class = "form-control payment-mode-cheque-2", @data_plugin = "select2", @data_placeholder = "Cheque 2 Bank", @data_allow_clear = "true" })
                                @Html.ValidationMessageFor(s => sales.Cheque2Bank)
                            </div>
                        </div>

                        <div class="col-sm-3 col-sm-offset-3">
                            <span class="checkbox-custom checkbox-primary">
                                <input class="form-control" type="checkbox" id="cheque-3" name="sales.LocalPaymentMode" value="Cheque 3" onchange="LocalPaymentModeClick('cheque-3', 'payment-mode-cheque-3')" @ViewData["LocalPaymentModeCheque3Checkbox"].ToString() />
                                <label for="cheque-3">Cheque 3</label>
                            </span>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                <div class="col-sm-10" style="padding-left: 0;padding-right: 5px; width:90%;" id="update-chequeNo3-input-div">@Html.TextBoxFor(s => sales.Cheque3No, new { @class = "form-control payment-mode-cheque-3", @placeholder = "Cheque 3 No." })</div>
                                <div style="display:none;" id="update-chequeNo3-div"><a id="update-chequeNo3-btn" class="btn btn-sm btn-icon btn-round btn-primary" href="javascript:void(0)" onclick="UpdateCheque3No()" style="text-decoration: none;" data-toggle="tooltip" data-original-title="Update Cheque 3 No."><i class="icon wb-edit" aria-hidden="true"></i></a></div>
                                @Html.ValidationMessageFor(s => sales.Cheque3No)
                            </div>
                        </div>
                        <div class="col-sm-6 col-sm-offset-6">
                            <div class="form-group">
                                <div class="input-group">
                                    <span class="input-group-addon">SGD $</span>
                                    @Html.TextBoxFor(s => sales.Cheque3Amount, "{0:#,##0.00}", new { @class = "form-control payment-mode-cheque-3", @placeholder = "Cheque 3 Amount", @onchange = "LocalPaymentAmountChange('sales_Cheque3Amount')" })
                                </div>
                                @Html.ValidationMessageFor(s => sales.Cheque3Amount)
                            </div>
                        </div>
                        <div class="col-sm-6 col-sm-offset-6">
                            <div class="form-group">
                                @Html.DropDownListFor(s => sales.Cheque3Bank, (SelectList)ViewData["Cheque3BankDropdown"], new { @class = "form-control payment-mode-cheque-3", @data_plugin = "select2", @data_placeholder = "Cheque 3 Bank", @data_allow_clear = "true" })
                                @Html.ValidationMessageFor(s => sales.Cheque3Bank)
                            </div>
                        </div>

                        <div class="col-sm-3 col-sm-offset-3">
                            <span class="checkbox-custom checkbox-primary">
                                <input class="form-control" type="checkbox" id="bank-transfer" name="sales.LocalPaymentMode" value="Bank Transfer" onchange="LocalPaymentModeClick('bank-transfer', 'payment-mode-transfer')" @ViewData["LocalPaymentModeBankTransferCheckbox"].ToString() />
                                <label for="bank-transfer">Bank Transfer</label>
                            </span>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                <div class="col-sm-10" style="padding-left: 0;padding-right: 5px; width:100%;" id="update-local-bank-transfer-input-div">@Html.TextBoxFor(s => sales.BankTransferNo, new { @class = "form-control payment-mode-transfer", @placeholder = "Bank Transfer No." })</div>
                                <div style="display:none;" id="update-local-bank-transfer-div"><a id="update-local-bank-transfer-btn" class="btn btn-sm btn-icon btn-round btn-primary" href="javascript:void(0)" onclick="UpdateLocalBankTransfer()" style="text-decoration: none;" data-toggle="tooltip" data-original-title="Update Bank Transfer No."><i class="icon wb-edit" aria-hidden="true"></i></a></div>
                                @Html.ValidationMessageFor(s => sales.BankTransferNo)
                            </div>
                        </div>
                        <div class="col-sm-6 col-sm-offset-6">
                            <div class="form-group">
                                <div class="input-group">
                                    <span class="input-group-addon">SGD $</span>
                                    @Html.TextBoxFor(s => sales.BankTransferAmount, "{0:#,##0.00}", new { @class = "form-control payment-mode-transfer", @placeholder = "Bank Tranfer Amount", @onchange = "LocalPaymentAmountChange('sales_BankTransferAmount')" })
                                </div>
                                @Html.ValidationMessageFor(s => sales.BankTransferAmount)
                            </div>
                        </div>
                        <div class="col-sm-6 col-sm-offset-6">
                            <div class="form-group">
                                @Html.DropDownListFor(s => sales.BankTransferBank, (SelectList)ViewData["BankTransferBankDropdown"], new { @class = "form-control payment-mode-transfer", @data_plugin = "select2", @data_placeholder = "Bank Transfer Bank", @data_allow_clear = "true" })
                                @Html.ValidationMessageFor(s => sales.BankTransferBank)
                            </div>
                        </div>

                        @Html.LabelFor(s => sales.MemoBalance, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-9">
                            <div class="input-group">
                                <span class="input-group-addon">SGD $</span>
                                @Html.TextBoxFor(s => sales.MemoBalance, "{0:#,##0.00}", new { @class = "form-control payment-mode-memo-balance", @placeholder = "Memo Balance", @onchange = "AmountChange('sales_MemoBalance', true)" })
                            </div>
                            @Html.ValidationMessageFor(s => sales.MemoBalance)
                        </div>
                        <div class="col-sm-9 col-sm-offset-3">@Html.ValidationMessageFor(s => sales.LocalPaymentMode)</div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-12">
                            <button type="button" class="btn btn-primary margin-top-10" id="disable_button" onclick="disableButton()">Save</button>
                            <a href="@Url.Action("Create")" class="btn btn-default btn-outline margin-top-10">Reset</a>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="cheque-modal" aria-hidden="false" aria-labelledby="modal-label"
	 role="dialog" tabindex="-1">
	<div class="modal-dialog modal-lg">
		<div class="modal-content form-horizontal">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">×</span>
				</button>
				<h4 class="modal-title" id="modal-label">New Cheque</h4>
			</div>
			<div class="modal-body"></div>
		</div>
	</div>
</div>

<div class="modal fade" id="bank-transfer-modal" aria-hidden="false" aria-labelledby="modal-label"
	 role="dialog" tabindex="-1">
	<div class="modal-dialog modal-lg">
		<div class="modal-content form-horizontal">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">×</span>
				</button>
				<h4 class="modal-title" id="modal-label">New Bank Transfer</h4>
			</div>
			<div class="modal-body"></div>
		</div>
	</div>
</div>

<div class="modal fade" id="cheque1No-modal" aria-hidden="false" aria-labelledby="modal-label"
	 role="dialog" tabindex="-1">
	<div class="modal-dialog modal-lg">
		<div class="modal-content form-horizontal">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">×</span>
				</button>
				<h4 class="modal-title" id="modal-label">New Cheque 1</h4>
			</div>
			<div class="modal-body">
				<div class="form-group row">
					<label for="staticCheque" class="col-sm-2 col-form-label">Cheque 1 No.:</label>
					<div class="col-sm-10">
						@Html.TextBox("LocalCheque1NoModel", null, new { @class = "form-control" })
						<span class="field-validation-error" id="LocalCheque1NoErrorMessage"></span>
					</div>
					<div style="float:right; padding-top: 20px; padding-right:15px;">
						<button class="btn btn-primary" onclick="btnLocalCheque1NoConfirm()">Confirm</button>
						<button class="btn btn-danger" onclick="btnLocalCheque1NoCancel()">Cancel</button>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="cheque2No-modal" aria-hidden="false" aria-labelledby="modal-label"
	 role="dialog" tabindex="-1">
	<div class="modal-dialog modal-lg">
		<div class="modal-content form-horizontal">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">×</span>
				</button>
				<h4 class="modal-title" id="modal-label">New Cheque 2</h4>
			</div>
			<div class="modal-body">
				<div class="form-group row">
					<label for="staticCheque" class="col-sm-2 col-form-label">Cheque 2 No.:</label>
					<div class="col-sm-10">
						@Html.TextBox("LocalCheque2NoModel", null, new { @class = "form-control" })
						<span class="field-validation-error" id="LocalCheque2NoErrorMessage"></span>
					</div>
					<div style="float:right; padding-top: 20px; padding-right:15px;">
						<button class="btn btn-primary" onclick="btnLocalCheque2NoConfirm()">Confirm</button>
						<button class="btn btn-danger" onclick="btnLocalCheque2NoCancel()">Cancel</button>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="cheque3No-modal" aria-hidden="false" aria-labelledby="modal-label"
	 role="dialog" tabindex="-1">
	<div class="modal-dialog modal-lg">
		<div class="modal-content form-horizontal">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">×</span>
				</button>
				<h4 class="modal-title" id="modal-label">New Cheque 3</h4>
			</div>
			<div class="modal-body">
				<div class="form-group row">
					<label for="staticCheque" class="col-sm-2 col-form-label">Cheque 3 No.:</label>
					<div class="col-sm-10">
						@Html.TextBox("LocalCheque3NoModel", null, new { @class = "form-control" })
						<span class="field-validation-error" id="LocalCheque3NoErrorMessage"></span>
					</div>
					<div style="float:right; padding-top: 20px; padding-right:15px;">
						<button class="btn btn-primary" onclick="btnLocalCheque3NoConfirm()">Confirm</button>
						<button class="btn btn-danger" onclick="btnLocalCheque3NoCancel()">Cancel</button>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="local-bank-transfer-modal" aria-hidden="false" aria-labelledby="modal-label"
	 role="dialog" tabindex="-1">
	<div class="modal-dialog modal-lg">
		<div class="modal-content form-horizontal">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">×</span>
				</button>
				<h4 class="modal-title" id="modal-label">New Local Bank Transfer No.</h4>
			</div>
			<div class="modal-body">
				<div class="form-group row">
					<label for="staticCheque" class="col-sm-2 col-form-label">Local Bank Transfer No.:</label>
					<div class="col-sm-10">
						@Html.TextBox("LocalBankTransferNoModel", null, new { @class = "form-control" })
						<span class="field-validation-error" id="LocalBankTransferNoErrorMessage"></span>
					</div>
					<div style="float:right; padding-top: 20px; padding-right:15px;">
						<button class="btn btn-primary" onclick="btnLocalBankTransferNoConfirm()">Confirm</button>
						<button class="btn btn-danger" onclick="btnLocalBankTransferNoCancel()">Cancel</button>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<link rel="stylesheet" href="@Url.Content("~/Content/vendor/bootstrap-datepicker/css/bootstrap-datepicker.css")">
<script src="@Url.Content("~/Content/vendor/bootstrap-datepicker/js/bootstrap-datepicker.js")"></script>

<script>
    var transactionType = "";

    $(document).ready(function () {
        RegisterEnterKey();

        $("#sales_CollectionDate").datepicker({
            autoclose: true,
            format: "dd/mm/yyyy DD"
		});

		//$("#sales_CollectionTime").datetimepicker({
		//	autoclose: true,
		//	pickDate: false,
		//	format: 'hh:mm A'
  //      });

        var transaction = $("input[name='sales.TransactionType']:checked");
        if (transaction.length > 0) {
            transactionType = transaction[0].id;
        }

        TransactionTypeChange(transactionType);

        var transactionCount = $("#table-transaction > tbody > tr").length;

        if (transactionCount > 0) {
            if (transactionType == "Encashment" || transactionType == "Swap" || transactionType == "CrossCurrency") {
                $(".currency-dropdown").each(function () {
                    var id = this.id.split("_")[2];
                    FilterCurrency(id);
                });
            }

            HighlightPaired();
        }

        LocalPaymentModeClick("cash", "payment-mode-cash");
        LocalPaymentModeClick("cheque-1", "payment-mode-cheque-1");
        LocalPaymentModeClick("cheque-2", "payment-mode-cheque-2");
        LocalPaymentModeClick("cheque-3", "payment-mode-cheque-3");
        LocalPaymentModeClick("bank-transfer", "payment-mode-transfer");
    })

    function RegisterEnterKey() {
        $('#table-transaction tbody input').on('keyup keypress', function (e) {
            var keyCode = e.keyCode || e.which;
            if (keyCode === 13) {
                e.preventDefault();

                $(this).blur();

                setTimeout(function () {
                    $("form").submit();
                }, 500);
            }
        });
    }

    function GetCustomerDetail() {
        var cid = $("#sales_CustomerParticularId").val();

        if (cid != null && cid != "") {
            var url = "@Url.Action("GetCustomerDetail")"

            $.ajax({
                type: "POST",
                cache: false,
                url: url,
                data: { cid: cid },
                success: function (data) {
                    data = JSON.parse(data);

                    if (data.Result) {
                        $("#CustomerContact").val(data.CustomerContact);
                        $("#CustomerAddress").val(data.CustomerAddress);
                        $("#sales_CustomerRemarks").val(data.CustomerRemarks);

                        //Recalculate Rate
                    }
                    else {
                        alertify.alert(data.ErrorMessage);
                    }
                },
                error: function (e) {
                    console.log(e.status + " - " + e.statusText);
                    alertify.alert("An error occured while retrieving customer details!");
                }
            });
        }
        else {
            $("#CustomerContact").val("");
            $("#CustomerAddress").val("");
            $("#sales_CustomerRemarks").val("");
        }
    }

	function TransactionTypeClick(type)
	{
        var transactionCount = $("#table-transaction > tbody > tr").length;
        if (transactionType != "" && transactionCount > 0) {
            if (type != transactionType) {
                alertify.confirm("<div style='margin-top: -15px;text-align: center;'>Are you sure you want to make changes to Transaction Type?<br/>This will remove all the transactions added.</div>", function (e) {
                    if (e) {
                        transactionType = type;
                        $("#table-transaction").html("");
                        TransactionTypeChange(type);
                    }
                    else {
                        $("#" + type).iCheck("uncheck");
                        $("#" + transactionType).iCheck("check");
                    }
                });
            }
        }
        else {
            transactionType = type;
            TransactionTypeChange(type);
        }
    }

	function TransactionTypeChange(type)
	{
		if (type == "Buy" || type == "Sell")
		{

			//check if is in sell mode
			//var transactionType = $(".radio-transaction-type:checked").val();
			//console.log("transactionType: " + transactionType);

			if (type == "Sell") {
				//Update the 3 field css
				//show the button div
				if ($("#cheque-1")[0].checked)
				{
					$("#update-chequeNo1-input-div").css('width', '90%');
					$("#sales_Cheque1No").attr('readonly', true);
					$("#sales_Cheque1No").removeAttr("disabled");
					$("#update-chequeNo1-input-div").css('padding-left', '0px');
					$("#update-chequeNo1-input-div").css('padding-right', '5px');
					$("#update-chequeNo1-div").show();
				}
				else
				{
					$("#update-chequeNo1-input-div").css('width', '100%');
					$("#sales_Cheque1No").attr("disabled", "disabled");
					$("#update-chequeNo1-div").hide();
					$("#update-chequeNo1-input-div").css('padding-left', '0px');
					$("#update-chequeNo1-input-div").css('padding-right', '0px');
				}

				if ($("#cheque-2")[0].checked)
				{
					$("#update-chequeNo2-input-div").css('width', '90%');
					$("#sales_Cheque2No").attr('readonly', true);
					$("#sales_Cheque2No").removeAttr("disabled");
					$("#update-chequeNo2-input-div").css('padding-left', '0px');
					$("#update-chequeNo2-input-div").css('padding-right', '5px');
					$("#update-chequeNo2-div").show();
				}
				else
				{
					$("#update-chequeNo2-input-div").css('width', '100%');
					$("#sales_Cheque2No").attr("disabled", "disabled");
					$("#update-chequeNo2-input-div").css('padding-left', '0px');
					$("#update-chequeNo2-input-div").css('padding-right', '0px');
					$("#update-chequeNo2-div").hide();
				}

				if ($("#cheque-3")[0].checked)
				{
					$("#update-chequeNo3-input-div").css('width', '90%');
					$("#sales_Cheque3No").attr('readonly', true);
					$("#sales_Cheque3No").removeAttr("disabled");
					$("#update-chequeNo3-input-div").css('padding-left', '0px');
					$("#update-chequeNo3-input-div").css('padding-right', '5px');
					$("#update-chequeNo3-div").show();
				}
				else
				{
					$("#update-chequeNo3-input-div").css('width', '100%');
					$("#sales_Cheque3No").attr("disabled", "disabled");
					$("#update-chequeNo3-input-div").css('padding-left', '0px');
					$("#update-chequeNo3-input-div").css('padding-right', '0px');
					$("#update-chequeNo3-div").hide();
				}

				if ($("#bank-transfer")[0].checked)
				{
					$("#update-local-bank-transfer-input-div").css('width', '90%');
					$("#sales_BankTransferNo").attr('readonly', true);
					$("#sales_BankTransferNo").removeAttr("disabled");
					$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
					$("#update-local-bank-transfer-input-div").css('padding-right', '5px');
					$("#update-local-bank-transfer-div").show();
				}
				else
				{
					$("#update-local-bank-transfer-input-div").css('width', '100%');
					$("#sales_BankTransferNo").attr("disabled", "disabled");
					$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
					$("#update-local-bank-transfer-input-div").css('padding-right', '0px');
					$("#update-local-bank-transfer-div").hide();
				}

			}
			else if(transactionType == "Buy")
			{
				//Update the 3 field css
				//show the button div
				//var checked = $("#" + id);
				$("#update-chequeNo1-input-div").css('padding-left', '0px');
				$("#update-chequeNo1-input-div").css('padding-right', '0px');
				$("#update-chequeNo2-input-div").css('padding-left', '0px');
				$("#update-chequeNo2-input-div").css('padding-right', '0px');
				$("#update-chequeNo3-input-div").css('padding-left', '0px');
				$("#update-chequeNo3-input-div").css('padding-right', '0px');
				$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
				$("#update-local-bank-transfer-input-div").css('padding-right', '0px');

				if ($("#cheque-1")[0].checked)
				{
					$("#update-chequeNo1-input-div").css('width', '100%');
					$("#sales_Cheque1No").attr('readonly', false);
					$("#sales_Cheque1No").removeAttr("disabled");
					$("#update-chequeNo1-div").hide();
				}
				else
				{
					$("#update-chequeNo1-input-div").css('width', '100%');
					$("#sales_Cheque1No").attr("disabled", "disabled");
					$("#update-chequeNo1-div").hide();
				}

				if ($("#cheque-2")[0].checked)
				{
					$("#update-chequeNo2-input-div").css('width', '100%');
					$("#sales_Cheque2No").attr('readonly', false);
					$("#sales_Cheque2No").removeAttr("disabled");
					$("#update-chequeNo2-div").hide();
				}
				else
				{
					$("#update-chequeNo2-input-div").css('width', '100%');
					$("#sales_Cheque2No").attr("disabled", "disabled");
					$("#update-chequeNo2-div").hide();
				}

				if ($("#cheque-3")[0].checked)
				{
					$("#update-chequeNo3-input-div").css('width', '100%');
					$("#sales_Cheque3No").attr('readonly', false);
					$("#sales_Cheque3No").removeAttr("disabled");
					$("#update-chequeNo3-div").hide();
				}
				else
				{
					$("#update-chequeNo3-input-div").css('width', '100%');
					$("#sales_Cheque3No").attr("disabled", "disabled");
					$("#update-chequeNo3-div").hide();
				}

				if ($("#bank-transfer")[0].checked)
				{
					$("#update-local-bank-transfer-input-div").css('width', '100%');
					$("#sales_BankTransferNo").attr('readonly', false);
					$("#sales_BankTransferNo").removeAttr("disabled");
					$("#update-local-bank-transfer-div").hide();
				}
				else
				{
					$("#update-local-bank-transfer-input-div").css('width', '100%');
					$("#sales_BankTransferNo").attr("disabled", "disabled");
					$("#update-local-bank-transfer-div").hide();
				}
			}

            $("#local-payment-mode").fadeIn();
        }
		else
		{
            $("#local-payment-mode").fadeOut();
        }

        //SetLocalPaymentModeAmount("");
    }

    function AddNewTransaction() {
        var errorMsg = "";
        var cid = $("#sales_CustomerParticularId").val();
        var transaction = $("input[name='sales.TransactionType']:checked");
        var type = "";

        if (cid == "") {
            errorMsg += "Please select a Customer!<br/>";
        }

        if (transaction.length == 0) {
            errorMsg += "Please selec a Transaction Type!<br/>";
        }
        else {
            type = transaction[0].id;
        }

        if (errorMsg == "") {
            var rowId = 1;
            var transactionCount = $("#table-transaction > tbody > tr").length;
            if (transactionCount > 0) {
                var id = $("#table-transaction > tbody > tr:last")[0].id.split("-");
                rowId = parseInt(id[2]) + 1;
            }

            $("#add-new-transaction").attr("disabled", "disabled");

            var url = "@Url.Action("AddNewTransaction")";
            $.ajax({
                type: "POST",
                cache: false,
                url: url,
                data: { cid: cid, type: type, rowId: rowId },
                success: function (data) {
                    data = JSON.parse(data);

                    if (data.Result) {
                        if (rowId == 1) {
                            $("#table-transaction").append(data.View);
                        }
                        else {
                            $("#table-transaction > tbody").append(data.View);
                        }

                        if (transaction[0].value == "Encashment" || transaction[0].value == "Swap" || transaction[0].value == "Cross Currency") {
                            HighlightPaired();
                            FilterCurrency(rowId);
                        }

                        RegisterEnterKey();
                    }
                    else {
                        alertify.alert(data.ErrorMessage);
                    }

                    $("#add-new-transaction").removeAttr("disabled");
                },
                error: function (e) {
                    console.log(e.status + " - " + e.statusText);
                    alertify.alert("An error occured while adding transaction!");
                    $("#add-new-transaction").removeAttr("disabled");
                }
            });
        }
        else {
            alertify.alert(errorMsg);
        }
    }

    function HighlightPaired() {
        var pairedCls = [];
        var row = $("#table-transaction > tbody > tr[class^=paired-row]");
        row.each(function () {
            if ($.inArray(this.classList[0], pairedCls) == -1) {
                pairedCls.push(this.classList[0]);
            }
        });

        var highlightCls = "bg-grey-200";
        for (var i = 0; i < pairedCls.length; i++) {
            if (i % 2 == 0) {
                if (!$("tr." + pairedCls[i]).hasClass(highlightCls)) {
                    $("tr." + pairedCls[i]).addClass(highlightCls);
                }
            }
            else {
                if ($("tr." + pairedCls[i]).hasClass(highlightCls)) {
                    $("tr." + pairedCls[i]).removeClass(highlightCls);
                }
            }
        }
    }

    function FilterCurrency(currentId) {
        var transaction = $("input[name='sales.TransactionType']:checked");
        if (transaction[0].value != "Swap") {
            var pairedId = 0;
            if (parseInt(currentId) % 2 == 0) {
                pairedId = parseInt(currentId) - 1;
            }
            else {
                pairedId = parseInt(currentId) + 1;
            }
            var selectedVal = $("#Transaction_Currency_" + currentId).val();
            var pairedVal = $("#Transaction_Currency_" + pairedId).val();

            $("#Transaction_Currency_" + currentId + " option").each(function () {
                if (this.value == pairedVal) {
                    this.disabled = true;
                    this.hidden = true;
                    this.selected = false;
                }
                else {
                    if (this.value == selectedVal) {
                        this.disabled = false;
                        this.hidden = false;
                        this.selected = true;
                    }
                    else {
                        this.disabled = false;
                        this.hidden = false;
                        this.selected = false;
                    }
                }
            });

            $("#Transaction_Currency_" + pairedId + " option").each(function () {
                if (this.value == selectedVal) {
                    this.disabled = true;
                    this.hidden = true;
                    this.selected = false;
                }
                else {
                    if (this.value == pairedVal) {
                        this.disabled = false;
                        this.hidden = false;
                        this.selected = true;
                    }
                    else {
                        this.disabled = false;
                        this.hidden = false;
                        this.selected = false;
                    }
                }
            });
        }
    }

    function CurrencyChange(rowId) {
        var type = $("input[name='sales.TransactionType']:checked")[0].id;

        if (type == "Buy" || type == "Sell") {
            var form = $("#table-transaction input, #table-transaction select").serialize();
            var url = "@Url.Action("CurrencyChange")?rowId=" + rowId + "&type=" + type;
			var cid = $("#sales_CustomerParticularId").val();
            //console.log('check');
            //To disable back the table all input field when updating the currency type.
            //$("#table-transaction :input").prop("disabled", true);

            $.ajax({
                type: "POST",
                cache: false,
                url: url,
                data: form + "&cid=" + cid,
                beforeSend: function () {
                    $(".preload").show();
                },
                success: function (data) {
                    data = JSON.parse(data);

                    if (data.Result) {
                        if (!data.IsValid) {
                            if (data.ModelErrors) {
                                var errors = "";
                                for (var i = 0; i < data.ModelErrors.length; i++) {
                                    if (data.ModelErrors[i][1] != "") {
                                        errors += data.ModelErrors[i][1] + "<br/>";
                                    }
                                }

                                if (errors != "") {
                                    alertify.alert(errors);
                                }
                            }
                        }

                        $("#span-amount-foreign-symbol-" + rowId).html(data.Symbol);
                        $("#Transaction_AmountForeign_" + rowId).val(data.AmountForeign);
                        $("#Transaction_Rate_" + rowId).val(data.Rate);
                        $("#Transaction_Unit_" + rowId + "[type=hidden]").val(data.Unit);
                        $("#Transaction_Unit_" + rowId + "[type=text]").val(data.Unit);
                        $("#Transaction_Amount_Local_" + rowId).val(data.AmountLocal);
                        $("#Transaction_AmountLocal_" + rowId).val(data.AmountLocal);
						$("#Transaction_PaymentMode_" + rowId).html(data.PaymentModesDDL);

                        if (data.DisableChequeNo) {
                            $("#Transaction_ChequeNo_" + rowId).attr("disabled", "disabled");
                        }
						else {
							$('#update-cheque-btn-' + rowId).attr('onClick', 'UpdateCheque(' + rowId + ');');
							$('#update-cheque-btn-' + rowId).css({'pointer-events':""});
                            //$("#Transaction_ChequeNo_" + rowId).removeAttr("disabled");
                        }

                        if (data.DisableBankTransferNo) {
							$("#Transaction_BankTransferNo_" + rowId).attr("disabled", "disabled");

                        }
						else {
							$('#update-bank-transfer-btn-' + rowId).attr('onClick', 'UpdateBankTransfer(' + rowId + ');');
							$('#update-bank-transfer-btn-' + rowId).css({'pointer-events':""});
                        }
                        $("#denomination-total-calculated-foreign-symbol-" + rowId).html(data.Symbol);
                        $("#denomination-remaining-foreign-symbol-" + rowId).html(data.Symbol);
                        $("#denomination-total-order-foreign-symbol-" + rowId).html(data.Symbol);

                        $("#denomination-remaining-foreign-" + rowId)[0].innerHTML = data.AmountForeign;
                        $("#Denomination_Remaining_Foreign_" + rowId).val(data.AmountForeign);

                        $("#denomination-total-order-foreign-" + rowId)[0].innerHTML = data.AmountForeign;
                        $("#Denomination_Total_Order_Foreign_" + rowId).val(data.AmountForeign);

                        RemoveDenomination(rowId);

                        $("#total-amount-foreign").html("$" + data.TotalAmountForeign);
                        $("#total-amount-local").html("$" + data.TotalAmountLocal);

                        SetLocalPaymentModeAmount(data.TotalAmountLocal);
                    }
                    else {
                        alertify.alert(data.ErrorMessage);
                    }
                    //To enable back the table all input field after finished update currency type.
                    //$("#table-transaction :input").prop("disabled", false);

                    $(".preload").hide();
                },
                error: function (e) {
                    console.log(e.status + " - " + e.statusText);
                    alertify.alert("An error occured while updating transaction details!");
                    $(".preload").hide();
                }
            });
        }
        else if (type == "Encashment") {
            EncashmentCurrencyChange(rowId);
        }
        else if (type == "Swap") {
            SwapCurrencyChange(rowId);
        }
        else if (type == "CrossCurrency") {
            CrossCurrencyChange(rowId);
        }
    }

    function EncashmentCurrencyChange(rowId) {

        FilterCurrency(rowId);

        var cid = $("#sales_CustomerParticularId").val();
        var type = $("input[name='sales.TransactionType']:checked")[0].id;
        var form = $("#table-transaction input, #table-transaction select").serialize();

        var current = $("#transaction-row-" + rowId)[0];
        var pairedCls = current.classList[0];
        var pairedCurrency = $("tr." + pairedCls + "[id!='transaction-row-" + rowId + "'] select.currency-dropdown")[0];
        var pairedCurrencyOptions = pairedCurrency.options;
        var optionsVal = "";
        for (var i = 0; i < pairedCurrencyOptions.length; i++) {
            if (!pairedCurrencyOptions[i].disabled) {
                optionsVal += pairedCurrencyOptions[i].text + ",";
            }
        }
        if (optionsVal.length > 0) {
            optionsVal = optionsVal.slice(0, optionsVal.length - 1);
        }

        var url = "@Url.Action("CurrencyChange")?cid=" + cid + "&rowId=" + rowId + "&type=" + type + "&pairedCurrency=" + optionsVal;

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: form,
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);

                if (data.Result) {
                    if (!data.IsValid) {
                        if (data.ModelErrors) {
                            var errors = "";
                            for (var i = 0; i < data.ModelErrors.length; i++) {
                                if (data.ModelErrors[i][1] != "") {
                                    errors += data.ModelErrors[i][1] + "<br/>";
                                }
                            }

                            if (errors != "") {
                                alertify.alert(errors);
                            }
                        }
                    }

                    if (data.RowChanged == "Sell") {
                        //Sell Type
                        $("#span-amount-foreign-symbol-" + data.RowIdSell).html(data.SymbolSell);
                        $("#Transaction_AmountForeign_" + data.RowIdSell).val(data.AmountForeignSell); //enable
                        $("#Transaction_Rate_" + data.RowIdSell).val(data.RateSell);//enable
                        $("#Transaction_EncashmentRate_" + data.RowIdSell).val(data.EncashmentRateSell); //enable
                        $("#Transaction_Unit_" + data.RowIdSell + "[type=hidden]").val(data.UnitSell); //disable
                        $("#Transaction_Unit_" + data.RowIdSell + "[type=text]").val(data.UnitSell); //disable
                        $("#Transaction_Amount_Local_" + data.RowIdSell).val(data.AmountLocalSell); //disable
                        $("#Transaction_AmountLocal_" + data.RowIdSell).val(data.AmountLocalSell); //disable
						$("#Transaction_PaymentMode_" + data.RowIdSell).html(data.PaymentModesDDLSell);
						
                        if (data.DisableChequeNoSell) {
                            $("#Transaction_ChequeNo_" + data.RowIdSell).attr("disabled", "disabled");
                        }
                        else {
							$('#update-cheque-btn-' + data.RowIdSell).attr('onClick', 'UpdateCheque(' + data.RowIdSell + ');');
							$('#update-cheque-btn-' + data.RowIdSell).css({'pointer-events':""});
                        }
						
                        if (data.DisableBankTransferNoSell) {
                            $("#Transaction_BankTransferNo_" + data.RowIdSell).attr("disabled", "disabled");
                        }
                        else {
							$('#update-bank-transfer-btn-' + data.RowIdSell).attr('onClick', 'UpdateBankTransfer(' + data.RowIdSell + ');');
							$('#update-bank-transfer-btn-' + data.RowIdSell).css({'pointer-events':""});
                        }
                        $("#denomination-total-calculated-foreign-symbol-" + data.RowIdSell).html(data.SymbolSell);
                        $("#denomination-remaining-foreign-symbol-" + data.RowIdSell).html(data.SymbolSell);
                        $("#denomination-total-order-foreign-symbol-" + data.RowIdSell).html(data.SymbolSell);

                        $("#denomination-remaining-foreign-" + data.RowIdSell)[0].innerHTML = data.AmountForeignSell;
                        $("#Denomination_Remaining_Foreign_" + data.RowIdSell).val(data.AmountForeignSell);

                        $("#denomination-total-order-foreign-" + data.RowIdSell)[0].innerHTML = data.AmountForeignSell;
                        $("#Denomination_Total_Order_Foreign_" + data.RowIdSell).val(data.AmountForeignSell);

                        RemoveDenomination(data.RowIdSell);

                        //Buy Type
                        $("#Transaction_Currency_" + data.RowIdBuy).val(data.CurrencyIdBuy);
                        FilterCurrency(data.RowIdBuy);

                        $("#span-amount-foreign-symbol-" + data.RowIdBuy).html(data.SymbolBuy);
                        $("#Transaction_Amount_Foreign_" + data.RowIdBuy).val(data.AmountForeignBuy);
                        $("#Transaction_AmountForeign_" + data.RowIdBuy).val(data.AmountForeignBuy);
                        $("#Transaction_rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Unit_" + data.RowIdBuy + "[type=hidden]").val(data.UnitBuy);
                        $("#Transaction_Unit_" + data.RowIdBuy + "[type=text]").val(data.UnitBuy);
                        $("#Transaction_Amount_Local_" + data.RowIdBuy).val(data.AmountLocalBuy);
                        $("#Transaction_AmountLocal_" + data.RowIdBuy).val(data.AmountLocalBuy);
						$("#Transaction_PaymentMode_" + data.RowIdBuy).html(data.PaymentModesDDLBuy);

                        if (data.DisableChequeNoBuy) {
                            $("#Transaction_ChequeNo_" + data.RowIdBuy).attr("disabled", "disabled");
                        }
                        else {
							$('#update-cheque-btn-' + data.RowIdBuy).attr('onClick', 'UpdateCheque(' + data.RowIdBuy + ');');
							$('#update-cheque-btn-' + data.RowIdBuy).css({'pointer-events':""});
                        }

                        if (data.DisableBankTransferNoBuy) {
                            $("#Transaction_BankTransferNo_" + data.RowIdBuy).attr("disabled", "disabled");
                        }
						else {
							$('#update-bank-transfer-btn-' + data.RowIdBuy).attr('onClick', 'UpdateBankTransfer(' + data.RowIdBuy + ');');
							$('#update-bank-transfer-btn-' + data.RowIdBuy).css({'pointer-events':""});
                        }

                        $("#total-amount-foreign").html("$" + data.TotalAmountForeign);
                        $("#total-amount-local").html("$" + data.TotalAmountLocal);

                    }
                    else if (data.RowChanged == "Buy") {
                        console.log(data);
                        //$("#table-transaction :input").removeAttr("disabled");

                        //Sell Type
                        $("#Transaction_AmountForeign_" + data.RowIdSell).val(data.AmountForeignSell); //enable
                        $("#Transaction_Rate_" + data.RowIdSell).val(data.RateSell);//enable
                        $("#Transaction_EncashmentRate_" + data.RowIdSell).val(data.EncashmentRateSell);//enable
                        $("#Transaction_Amount_Local_" + data.RowIdSell).val(data.AmountLocalSell);
                        $("#Transaction_AmountLocal_" + data.RowIdSell).val(data.AmountLocalSell);

                        //Buy Type
                        FilterCurrency(data.RowIdBuy);

                        $("#span-amount-foreign-symbol-" + data.RowIdBuy).html(data.SymbolBuy);//disable
                        $("#Transaction_Amount_Foreign_" + data.RowIdBuy).val(data.AmountForeignBuy); //disable
                        $("#Transaction_AmountForeign_" + data.RowIdBuy).val(data.AmountForeignBuy); //disable
                        $("#Transaction_rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Unit_" + data.RowIdBuy + "[type=hidden]").val(data.UnitBuy);
                        $("#Transaction_Unit_" + data.RowIdBuy + "[type=text]").val(data.UnitBuy);
                        $("#Transaction_Amount_Local_" + data.RowIdBuy).val(data.AmountLocalBuy);
                        $("#Transaction_AmountLocal_" + data.RowIdBuy).val(data.AmountLocalBuy);
						$("#Transaction_PaymentMode_" + data.RowIdBuy).html(data.PaymentModesDDLBuy);

                        if (data.DisableChequeNoBuy) {
                            $("#Transaction_ChequeNo_" + data.RowIdBuy).attr("disabled", "disabled");
                        }
						else {
							$('#update-cheque-btn-' + data.RowIdBuy).attr('onClick', 'UpdateCheque(' + data.RowIdBuy + ');');
							$('#update-cheque-btn-' + data.RowIdBuy).css({'pointer-events':""});
                        }

                        if (data.DisableBankTransferNoBuy) {
                            $("#Transaction_BankTransferNo_" + data.RowIdBuy).attr("disabled", "disabled");
                        }
                        else {
							$('#update-bank-transfer-btn-' + data.RowIdBuy).attr('onClick', 'UpdateBankTransfer(' + data.RowIdBuy + ');');
							$('#update-bank-transfer-btn-' + data.RowIdBuy).css({'pointer-events':""});
                        }
                    }
                }
                else {
                    alertify.alert(data.ErrorMessage);
                }

                $(".preload").hide();
            },
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                alertify.alert("An error occured while updating transaction details!");
                $(".preload").hide();
            }
        });
    }

    function SwapCurrencyChange(rowId) {
        var cid = $("#sales_CustomerParticularId").val();
        var type = $("input[name='sales.TransactionType']:checked")[0].id;
        var form = $("#table-transaction input, #table-transaction select").serialize();

        var current = $("#transaction-row-" + rowId)[0];
        var pairedCls = current.classList[0];
        var pairedCurrency = $("tr." + pairedCls + "[id!='transaction-row-" + rowId + "'] select.currency-dropdown")[0];
        var pairedCurrencyOptions = pairedCurrency.options;
        var optionsVal = "";
        for (var i = 0; i < pairedCurrencyOptions.length; i++) {
            if (!pairedCurrencyOptions[i].disabled) {
                optionsVal += pairedCurrencyOptions[i].text + ",";
            }
        }
        if (optionsVal.length > 0) {
            optionsVal = optionsVal.slice(0, optionsVal.length - 1);
        }

        var url = "@Url.Action("CurrencyChange")?cid=" + cid + "&rowId=" + rowId + "&type=" + type + "&pairedCurrency=" + optionsVal;

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: form,
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);

                if (data.Result) {
                    if (!data.IsValid) {
                        if (data.ModelErrors) {
                            var errors = "";
                            for (var i = 0; i < data.ModelErrors.length; i++) {
                                if (data.ModelErrors[i][1] != "") {
                                    errors += data.ModelErrors[i][1] + "<br/>";
                                }
                            }

                            if (errors != "") {
                                alertify.alert(errors);
                            }
                        }
                    }

                    if (data.RowChanged == "Buy") {
                        //Buy Type
                        $("#span-amount-foreign-symbol-" + data.RowIdBuy).html(data.SymbolBuy);
                        $("#Transaction_AmountForeign_" + data.RowIdBuy).val(data.AmountForeignBuy);
                        $("#Transaction_Rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_EncashmentRate_" + data.RowIdBuy).val(data.EncashmentRateBuy);
                        $("#Transaction_Unit_" + data.RowIdBuy + "[type=hidden]").val(data.UnitBuy);
                        $("#Transaction_Unit_" + data.RowIdBuy + "[type=text]").val(data.UnitBuy);
                        $("#Transaction_Amount_Local_" + data.RowIdBuy).val(data.AmountLocalBuy);
                        $("#Transaction_AmountLocal_" + data.RowIdBuy).val(data.AmountLocalBuy);
						$("#Transaction_PaymentMode_" + data.RowIdBuy).html(data.PaymentModesDDLBuy);

                        if (data.DisableChequeNoBuy) {
                            $("#Transaction_ChequeNo_" + data.RowIdBuy).attr("disabled", "disabled");
                        }
                        else {
							$('#update-cheque-btn-' + data.RowIdBuy).attr('onClick', 'UpdateCheque(' + data.RowIdBuy + ');');
							$('#update-cheque-btn-' + data.RowIdBuy).css({'pointer-events':""});
                        }

                        if (data.DisableBankTransferNoBuy) {
                            $("#Transaction_BankTransferNo_" + data.RowIdBuy).attr("disabled", "disabled");
                        }
                        else {
							$('#update-bank-transfer-btn-' + data.RowIdBuy).attr('onClick', 'UpdateBankTransfer(' + data.RowIdBuy + ');');
							$('#update-bank-transfer-btn-' + data.RowIdBuy).css({'pointer-events':""});
                        }
                        $("#denomination-total-calculated-foreign-symbol-" + data.RowIdBuy).html(data.SymbolBuy);
                        $("#denomination-remaining-foreign-symbol-" + data.RowIdBuy).html(data.SymbolBuy);
                        $("#denomination-total-order-foreign-symbol-" + data.RowIdBuy).html(data.SymbolBuy);

                        $("#denomination-remaining-foreign-" + data.RowIdBuy)[0].innerHTML = data.AmountForeignBuy;
                        $("#Denomination_Remaining_Foreign_" + data.RowIdBuy).val(data.AmountForeignBuy);

                        $("#denomination-total-order-foreign-" + data.RowIdBuy)[0].innerHTML = data.AmountForeignBuy;
                        $("#Denomination_Total_Order_Foreign_" + data.RowIdBuy).val(data.AmountForeignBuy);

                        RemoveDenomination(data.RowIdBuy);

                        //Sell Type
                        $("#Transaction_Currency_" + data.RowIdSell).val(data.CurrencyIdSell);
                        $("#span-amount-foreign-symbol-" + data.RowIdSell).html(data.SymbolSell);
                        $("#Transaction_Amount_Foreign_" + data.RowIdSell).val(data.AmountForeignSell);
                        $("#Transaction_AmountForeign_" + data.RowIdSell).val(data.AmountForeignSell);
                        $("#Transaction_rate_" + data.RowIdSell).val(data.RateSell);
                        $("#Transaction_Rate_" + data.RowIdSell).val(data.RateSell);
                        $("#Transaction_Unit_" + data.RowIdSell + "[type=hidden]").val(data.UnitSell);
                        $("#Transaction_Unit_" + data.RowIdSell + "[type=text]").val(data.UnitSell);
                        $("#Transaction_Amount_Local_" + data.RowIdSell).val(data.AmountLocalSell);
                        $("#Transaction_AmountLocal_" + data.RowIdSell).val(data.AmountLocalSell);
						$("#Transaction_PaymentMode_" + data.RowIdSell).html(data.PaymentModesDDLSell);

                        if (data.DisableChequeNoSell) {
                            $("#Transaction_ChequeNo_" + data.RowIdSell).attr("disabled", "disabled");
                        }
                        else {
							$('#update-cheque-btn-' + data.RowIdSell).attr('onClick', 'UpdateCheque(' + data.RowIdSell + ');');
							$('#update-cheque-btn-' + data.RowIdSell).css({'pointer-events':""});
                        }

                        if (data.DisableBankTransferNoSell) {
                            $("#Transaction_BankTransferNo_" + data.RowIdSell).attr("disabled", "disabled");
                        }
                        else {
							$('#update-bank-transfer-btn-' + data.RowIdSell).attr('onClick', 'UpdateBankTransfer(' + data.RowIdSell + ');');
							$('#update-bank-transfer-btn-' + data.RowIdSell).css({'pointer-events':""});
                        }
                    }
                    else if (data.RowChanged == "Sell") {
                        //Sell Type
                        $("#span-amount-foreign-symbol-" + data.RowIdSell).html(data.SymbolSell);
                        $("#Transaction_Amount_Foreign_" + data.RowIdSell).val(data.AmountForeignSell);
                        $("#Transaction_AmountForeign_" + data.RowIdSell).val(data.AmountForeignSell);
                        $("#Transaction_Unit_" + data.RowIdSell + "[type=hidden]").val(data.UnitSell);
                        $("#Transaction_Unit_" + data.RowIdSell + "[type=text]").val(data.UnitSell);
						$("#Transaction_PaymentMode_" + data.RowIdSell).html(data.PaymentModesDDLSell);
						
                        if (data.DisableChequeNoSell) {
                            $("#Transaction_ChequeNo_" + data.RowIdSell).attr("disabled", "disabled");
                        }
                        else {
							$('#update-cheque-btn-' + data.RowIdSell).attr('onClick', 'UpdateCheque(' + data.RowIdSell + ');');
							$('#update-cheque-btn-' + data.RowIdSell).css({'pointer-events':""});
                        }
						
                        if (data.DisableBankTransferNoSell) {
                            $("#Transaction_BankTransferNo_" + data.RowIdSell).attr("disabled", "disabled");
                        }
                        else {
							$('#update-bank-transfer-btn-' + data.RowIdSell).attr('onClick', 'UpdateBankTransfer(' + data.RowIdSell + ');');
							$('#update-bank-transfer-btn-' + data.RowIdSell).css({'pointer-events':""});
                        }
                    }

                    $("#total-amount-foreign").html("$" + data.TotalAmountForeign);
                    $("#total-amount-local").html("$" + data.TotalAmountLocal);
                }
                else {
                    alertify.alert(data.ErrorMessage);
                }
                $(".preload").hide();
            },
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                alertify.alert("An error occured while updating transaction details!");
                $(".preload").hide();
            }
        });
    }

    function CrossCurrencyChange(rowId) {
        FilterCurrency(rowId);

        var cid = $("#sales_CustomerParticularId").val();
        var type = $("input[name='sales.TransactionType']:checked")[0].id;
        var form = $("#table-transaction input, #table-transaction select").serialize();

        var url = "@Url.Action("CurrencyChange")?cid=" + cid + "&rowId=" + rowId + "&type=" + type;

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: form,
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);

                if (data.Result) {
                    if (!data.IsValid) {
                        if (data.ModelErrors) {
                            var errors = "";
                            for (var i = 0; i < data.ModelErrors.length; i++) {
                                if (data.ModelErrors[i][1] != "") {
                                    errors += data.ModelErrors[i][1] + "<br/>";
                                }
                            }

                            if (errors != "") {
                                alertify.alert(errors);
                            }
                        }
                    }

                    if (data.RowChanged == "Sell") {
                        //Sell Type
                        $("#span-amount-foreign-symbol-" + data.RowIdSell).html(data.SymbolSell);
                        $("#Transaction_AmountForeign_" + data.RowIdSell).val(data.AmountForeignSell);
                        $("#Transaction_Rate_" + data.RowIdSell).val(data.RateSell);
                        $("#Transaction_CrossRate_" + data.RowIdSell).val(data.CrossRateSell);
                        $("#Transaction_Unit_" + data.RowIdSell + "[type=hidden]").val(data.UnitSell);
                        $("#Transaction_Unit_" + data.RowIdSell + "[type=text]").val(data.UnitSell);
                        $("#Transaction_Amount_Local_" + data.RowIdSell).val(data.AmountLocalSell);
                        $("#Transaction_AmountLocal_" + data.RowIdSell).val(data.AmountLocalSell);
						$("#Transaction_PaymentMode_" + data.RowIdSell).html(data.PaymentModesDDLSell);

                        if (data.DisableChequeNoSell) {
                            $("#Transaction_ChequeNo_" + data.RowIdSell).attr("disabled", "disabled");
                        }
                        else {
							$('#update-cheque-btn-' + data.RowIdSell).attr('onClick', 'UpdateCheque(' + data.RowIdSell + ');');
							$('#update-cheque-btn-' + data.RowIdSell).css({'pointer-events':""});
                        }

                        if (data.DisableBankTransferNoSell) {
                            $("#Transaction_BankTransferNo_" + data.RowIdSell).attr("disabled", "disabled");
                        }
                        else {
							$('#update-bank-transfer-btn-' + data.RowIdSell).attr('onClick', 'UpdateBankTransfer(' + data.RowIdSell + ');');
							$('#update-bank-transfer-btn-' + data.RowIdSell).css({'pointer-events':""});
                        }
                        $("#denomination-total-calculated-foreign-symbol-" + data.RowIdSell).html(data.SymbolSell);
                        $("#denomination-remaining-foreign-symbol-" + data.RowIdSell).html(data.SymbolSell);
                        $("#denomination-total-order-foreign-symbol-" + data.RowIdSell).html(data.SymbolSell);

                        $("#denomination-remaining-foreign-" + data.RowIdSell)[0].innerHTML = data.AmountForeignSell;
                        $("#Denomination_Remaining_Foreign_" + data.RowIdSell).val(data.AmountForeignSell);

                        $("#denomination-total-order-foreign-" + data.RowIdSell)[0].innerHTML = data.AmountForeignSell;
                        $("#Denomination_Total_Order_Foreign_" + data.RowIdSell).val(data.AmountForeignSell);

                        RemoveDenomination(data.RowIdSell);

                        //Buy Type
                        $("#Transaction_rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Amount_Local_" + data.RowIdBuy).val(data.AmountLocalBuy);
                        $("#Transaction_AmountLocal_" + data.RowIdBuy).val(data.AmountLocalBuy);

                        $("#total-amount-foreign").html("$" + data.TotalAmountForeign);
                        $("#total-amount-local").html("$" + data.TotalAmountLocal);
                    }
                    else if (data.RowChanged == "Buy") {
                        //Buy Type
                        FilterCurrency(data.RowIdBuy);

                        $("#span-amount-foreign-symbol-" + data.RowIdBuy).html(data.SymbolBuy);
                        $("#Transaction_AmountForeign_" + data.RowIdBuy).val(data.AmountForeignBuy);
                        $("#Transaction_rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Unit_" + data.RowIdBuy + "[type=hidden]").val(data.UnitBuy);
                        $("#Transaction_Unit_" + data.RowIdBuy + "[type=text]").val(data.UnitBuy);
                        $("#Transaction_Amount_Local_" + data.RowIdBuy).val(data.AmountLocalBuy);
                        $("#Transaction_AmountLocal_" + data.RowIdBuy).val(data.AmountLocalBuy);
						$("#Transaction_PaymentMode_" + data.RowIdBuy).html(data.PaymentModesDDLBuy);

                        if (data.DisableChequeNoBuy) {
                            $("#Transaction_ChequeNo_" + data.RowIdBuy).attr("disabled", "disabled");
                        }
                        else {
							$('#update-cheque-btn-' + data.RowIdBuy).attr('onClick', 'UpdateCheque(' + data.RowIdBuy + ');');
							$('#update-cheque-btn-' + data.RowIdBuy).css({'pointer-events':""});
                        }

                        if (data.DisableBankTransferNoBuy) {
                            $("#Transaction_BankTransferNo_" + data.RowIdBuy).attr("disabled", "disabled");
                        }
                        else {
							$('#update-bank-transfer-btn-' + data.RowIdBuy).attr('onClick', 'UpdateBankTransfer(' + data.RowIdBuy + ');');
							$('#update-bank-transfer-btn-' + data.RowIdBuy).css({'pointer-events':""});
                        }
                        $("#denomination-total-calculated-foreign-symbol-" + data.RowIdBuy).html(data.SymbolBuy);
                        $("#denomination-remaining-foreign-symbol-" + data.RowIdBuy).html(data.SymbolBuy);
                        $("#denomination-total-order-foreign-symbol-" + data.RowIdBuy).html(data.SymbolBuy);

                        $("#denomination-remaining-foreign-" + data.RowIdBuy)[0].innerHTML = data.AmountForeignBuy;
                        $("#Denomination_Remaining_Foreign_" + data.RowIdBuy).val(data.AmountForeignBuy);

                        $("#denomination-total-order-foreign-" + data.RowIdBuy)[0].innerHTML = data.AmountForeignBuy;
                        $("#Denomination_Total_Order_Foreign_" + data.RowIdBuy).val(data.AmountForeignBuy);

                        RemoveDenomination(data.RowIdBuy);

                        //Sell Type
                        $("#Transaction_CrossRate_" + data.RowIdSell).val(data.CrossRateSell);
                        $("#Transaction_Amount_Local_" + data.RowIdSell).val(data.AmountLocalSell);
                        $("#Transaction_AmountLocal_" + data.RowIdSell).val(data.AmountLocalSell);

                        $("#total-amount-foreign").html("$" + data.TotalAmountForeign);
                        $("#total-amount-local").html("$" + data.TotalAmountLocal);
                    }
                }
                else {
                    alertify.alert(data.ErrorMessage);
                }

                $(".preload").hide();
            },
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                alertify.alert("An error occured while updating transaction details!");
                $(".preload").hide();
            }
        });
    }

    function AmountForeignChange(rowId) {
        var type = $("input[name='sales.TransactionType']:checked")[0].id;
        var form = $("#table-transaction input, #table-transaction select").serialize();
        var url = "@Url.Action("AmountForeignChange")?rowId=" + rowId + "&type=" + type;
		var cid = $("#sales_CustomerParticularId").val();

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: form + "&cid=" + cid,
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);

                if (data.Result) {
                    if (!data.IsValid) {
                        if (data.ModelErrors) {
                            var errors = "";
                            for (var i = 0; i < data.ModelErrors.length; i++) {
                                if (data.ModelErrors[i][1] != "") {
                                    errors += data.ModelErrors[i][1] + "<br/>";
                                }
                            }

                            if (errors != "") {
                                alertify.alert(errors);
                            }
                        }
                    }

                    $("#Transaction_AmountForeign_" + rowId).val(data.AmountForeign);
                    $("#Transaction_Amount_Local_" + rowId).val(data.AmountLocal);
                    $("#Transaction_AmountLocal_" + rowId).val(data.AmountLocal);

                    if (type == "Encashment") {
                        $("#Transaction_Amount_Foreign_" + data.RowIdBuy).val(data.AmountForeignBuy);
                        $("#Transaction_AmountForeign_" + data.RowIdBuy).val(data.AmountForeignBuy);
                        $("#Transaction_rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Amount_Local_" + data.RowIdBuy).val(data.AmountLocalBuy);
                        $("#Transaction_AmountLocal_" + data.RowIdBuy).val(data.AmountLocalBuy);
                    }
                    else if (type == "Swap") {
                        $("#Transaction_Amount_Foreign_" + data.RowIdSell).val(data.AmountForeignSell);
                        $("#Transaction_AmountForeign_" + data.RowIdSell).val(data.AmountForeignSell);
                        $("#Transaction_rate_" + data.RowIdSell).val(data.RateSell);
                        $("#Transaction_Rate_" + data.RowIdSell).val(data.RateSell);
                        $("#Transaction_Amount_Local_" + data.RowIdSell).val(data.AmountLocalSell);
                        $("#Transaction_AmountLocal_" + data.RowIdSell).val(data.AmountLocalSell);
                    }
                    else if (type == "CrossCurrency") {
                        $("#Transaction_CrossRate_" + data.RowIdSell).val(data.CrossRateSell);
                        $("#Transaction_rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Rate_" + data.RowIdBuy).val(data.RateBuy);

                        if (data.RowChanged == "Sell") {
                            $("#Transaction_Amount_Local_" + data.RowIdBuy).val(data.AmountLocalBuy);
                            $("#Transaction_AmountLocal_" + data.RowIdBuy).val(data.AmountLocalBuy);
                        }
                        else {
                            $("#Transaction_Amount_Local_" + data.RowIdSell).val(data.AmountLocalSell);
                            $("#Transaction_AmountLocal_" + data.RowIdSell).val(data.AmountLocalSell);
                        }
                    }
                }
                else {
                    alertify.alert(data.ErrorMessage);
                }

                $("#denomination-total-calculated-foreign-" + rowId)[0].innerHTML = data.DenoTotalCalculated;
                $("#Denomination_Total_Calculated_Foreign_" + rowId).val(data.DenoTotalCalculated);

                $("#denomination-remaining-foreign-" + rowId)[0].innerHTML = data.DenoTotalRemaining;
                $("#Denomination_Remaining_Foreign_" + rowId).val(data.DenoTotalRemaining);

                $("#denomination-total-order-foreign-" + rowId)[0].innerHTML = data.DenoTotalOrder;
                $("#Denomination_Total_Order_Foreign_" + rowId).val(data.DenoTotalOrder);

                $("#total-amount-foreign").html("$" + data.TotalAmountForeign);
                $("#total-amount-local").html("$" + data.TotalAmountLocal);

                if (type == "Buy" || type == "Sell") {
                    SetLocalPaymentModeAmount(data.TotalAmountLocal);
                }
                $(".preload").hide();
            },
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                alertify.alert("An error occured while calculating amount local!");
                $(".preload").hide();
            }
        });
    }

    function RateChange(rowId) {
        var type = $("input[name='sales.TransactionType']:checked")[0].id;
        var form = $("#table-transaction input, #table-transaction select").serialize();
        var url = "@Url.Action("RateChange")?rowId=" + rowId + "&type=" + type;
		var cid = $("#sales_CustomerParticularId").val();

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: form + "&cid=" + cid,
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);

                if (data.Result) {
                    if (!data.IsValid) {
                        if (data.ModelErrors) {
                            var errors = "";
                            for (var i = 0; i < data.ModelErrors.length; i++) {
                                if (data.ModelErrors[i][1] != "") {
                                    errors += data.ModelErrors[i][1] + "<br/>";
                                }
                            }

                            if (errors != "") {
                                alertify.alert(errors);
                            }
                        }
                    }
                    $("#Transaction_Rate_" + rowId).val(data.Rate);
                    $("#Transaction_Amount_Local_" + rowId).val(data.AmountLocal);
                    $("#Transaction_AmountLocal_" + rowId).val(data.AmountLocal);

                    if (type == "Encashment") {
                        $("#Transaction_Amount_Foreign_" + data.RowIdBuy).val(data.AmountForeignBuy);
                        $("#Transaction_AmountForeign_" + data.RowIdBuy).val(data.AmountForeignBuy);
                        $("#Transaction_rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Amount_Local_" + data.RowIdBuy).val(data.AmountLocalBuy);
                        $("#Transaction_AmountLocal_" + data.RowIdBuy).val(data.AmountLocalBuy);
                    }
                    else if (type == "Swap") {
                        $("#Transaction_Amount_Foreign_" + data.RowIdSell).val(data.AmountForeignSell);
                        $("#Transaction_AmountForeign_" + data.RowIdSell).val(data.AmountForeignSell);
                        $("#Transaction_rate_" + data.RowIdSell).val(data.RateSell);
                        $("#Transaction_Rate_" + data.RowIdSell).val(data.RateSell);
                        $("#Transaction_Amount_Local_" + data.RowIdSell).val(data.AmountLocalSell);
                        $("#Transaction_AmountLocal_" + data.RowIdSell).val(data.AmountLocalSell);
                    }
                    else if (type == "CrossCurrency") {
                        $("#Transaction_CrossRate_" + data.RowIdSell).val(data.CrossRateSell);
                        $("#Transaction_rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Amount_Local_" + data.RowIdBuy).val(data.AmountLocalBuy);
                        $("#Transaction_AmountLocal_" + data.RowIdBuy).val(data.AmountLocalBuy);
                    }

                    $("#total-amount-foreign").html("$" + data.TotalAmountForeign);
                    $("#total-amount-local").html("$" + data.TotalAmountLocal);

                    if (type == "Buy" || type == "Sell") {
                        SetLocalPaymentModeAmount(data.TotalAmountLocal);
                    }
                    $(".preload").hide();
                }
                else {
                    alertify.alert(data.ErrorMessage);
                    $(".preload").hide();
                }
            },
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                alertify.alert("An error occured while calculating amount local!");
                $(".preload").hide();
            }
        });
    }

    function EncashmentRateChange(rowId) {
        var type = $("input[name='sales.TransactionType']:checked")[0].id;
        var form = $("#table-transaction input, #table-transaction select").serialize();
        var url = "@Url.Action("EncashmentRateChange")?rowId=" + rowId + "&type=" + type;
		var cid = $("#sales_CustomerParticularId").val();

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: form + "&cid=" + cid,
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);

                if (data.Result) {
                    if (!data.IsValid) {
                        if (data.ModelErrors) {
                            var errors = "";
                            for (var i = 0; i < data.ModelErrors.length; i++) {
                                if (data.ModelErrors[i][1] != "") {
                                    errors += data.ModelErrors[i][1] + "<br/>";
                                }
                            }

                            if (errors != "") {
                                alertify.alert(errors);
                            }
                        }
                    }
                    $("#Transaction_EncashmentRate_" + rowId).val(data.EncashmentRate);

                    if (type == "Encashment") {
                        $("#Transaction_Amount_Foreign_" + data.RowIdBuy).val(data.AmountForeignBuy);
                        $("#Transaction_AmountForeign_" + data.RowIdBuy).val(data.AmountForeignBuy);
                        $("#Transaction_rate_" + data.RowIdBuy).val(data.RateBuy);
                        $("#Transaction_Rate_" + data.RowIdBuy).val(data.RateBuy);
                    }
                    else if (type == "Swap") {
                        $("#Transaction_Amount_Foreign_" + data.RowIdSell).val(data.AmountForeignSell);
                        $("#Transaction_AmountForeign_" + data.RowIdSell).val(data.AmountForeignSell);
                        $("#Transaction_rate_" + data.RowIdSell).val(data.RateSell);
                        $("#Transaction_Rate_" + data.RowIdSell).val(data.RateSell);

                        $("#total-amount-foreign").html("$" + data.TotalAmountForeign);
                        $("#total-amount-local").html("$" + data.TotalAmountLocal);
                    }
                    $(".preload").hide();
                }
                else {
                    alertify.alert(data.ErrorMessage);
                    $(".preload").hide();
                }
            },
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                alertify.alert("An error occured while calculating amount local!");
                $(".preload").hide();
            }
        });
    }

    function CrossRateChange(rowId) {
        var form = $("#table-transaction input, #table-transaction select").serialize();
        var url = "@Url.Action("CrossRateChange")?rowId=" + rowId;
        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: form,
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);

                if (data.Result) {
                    if (data.ModelErrors) {
                        var errors = "";
                        for (var i = 0; i < data.ModelErrors.length; i++) {
                            if (data.ModelErrors[i][1] != "") {
                                errors += data.ModelErrors[i][1] + "<br/>";
                            }
                        }

                        if (errors != "") {
                            alertify.alert(errors);
                        }
                    }

                    $("#Transaction_CrossRate_" + rowId).val(data.CrossRate);
                    $(".preload").hide();
                }
                else {
                    alertify.alert(data.ErrorMessage);
                    $(".preload").hide();
                }
            }
            ,
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                $(".preload").hide();
            }
        });
    }

	function PaymentModeChange(rowId)
	{
		var mode = $("#Transaction_PaymentMode_" + rowId).val();
		console.log(mode);

		if (mode == "Cheque")
		{
			//Enable Cheque Button.
			$("#update-cheque-btn-" + rowId).attr('onclick', 'UpdateCheque(' + rowId + ')');
			$("#update-cheque-btn-" + rowId).css('pointer-events', '');
			$("#Transaction_ChequeNo_" + rowId).attr('readonly', true);
			$("#Transaction_ChequeNo_" + rowId).removeAttr("disabled");

			//Disable Bank Transfer Button
			$("#update-bank-transfer-btn-" + rowId).prop("onclick", null);
			$("#update-bank-transfer-btn-" + rowId).css('pointer-events', 'none');
            $("#Transaction_BankTransferNo_" + rowId).attr("disabled", "disabled");
        }
		else if (mode == "Bank Transfer")
		{
			//Disable Cheque Button.
			$("#update-cheque-btn-" + rowId).prop("onclick", null);
			$("#update-cheque-btn-" + rowId).css('pointer-events', 'none');
			$("#Transaction_ChequeNo_" + rowId).attr("disabled", "disabled");

			//Enable Cheque Button.
			$("#update-bank-transfer-btn-" + rowId).attr('onclick', 'UpdateBankTransfer(' + rowId + ')');
			$("#update-bank-transfer-btn-" + rowId).css('pointer-events', '');
			$("#Transaction_BankTransferNo_" + rowId).attr('readonly', true);
            $("#Transaction_BankTransferNo_" + rowId).removeAttr("disabled");
        }
		else
		{
			//Disable Cheque Button.
			$("#update-cheque-btn-" + rowId).prop("onclick", null);
			$("#update-cheque-btn-" + rowId).css('pointer-events', 'none');
			$("#Transaction_ChequeNo_" + rowId).attr("disabled", "disabled");

			//Disable Bank Transfer Button
			$("#update-bank-transfer-btn-" + rowId).prop("onclick", null);
			$("#update-bank-transfer-btn-" + rowId).css('pointer-events', 'none');
            $("#Transaction_BankTransferNo_" + rowId).attr("disabled", "disabled");
        }
    }

    function OpenDenominationModal(rowId) {
        var denominationCount = $("#table-transaction-denomination-" + rowId + " tbody tr").length;

        if (denominationCount == 0) {
            var pid = $("#Transaction_Currency_" + rowId).val();
            var amountForeign = $("#Transaction_AmountForeign_" + rowId).val();
            var url = "@Url.Action("OpenDenomination")";

            $.ajax({
                type: "POST",
                cache: false,
                url: url,
                data: { pid: pid, rowId: rowId, amountForeign: amountForeign },
                beforeSend: function () {
                    $(".preload").show();
                },
                success: function (data) {
                    data = JSON.parse(data);

                    if (data.Result) {
                        $("#modal-label-" + rowId).html(data.ModalTitle);
                        $("#AmtCurr-" + rowId)[0].innerHTML = data.ColumnName;
                        $("#table-transaction-denomination-" + rowId + " tbody").html(data.View);

                        $("#denomination-remaining-foreign-" + rowId).html(amountForeign);
                        $("#Denomination_Remaining_Foreign_" + rowId).val(amountForeign);

                        $("#denomination-total-order-foreign-" + rowId).html(amountForeign);
                        $("#Denomination_Total_Order_Foreign_" + rowId).val(amountForeign);
                        $("#modal-transaction-denomination-" + rowId).modal("show");
                        $(".preload").hide();
                    }
                    else {
                        alertify.alert(data.ErrorMessage);
                        $(".preload").hide();
                    }
                },
                error: function (e) {
                    console.log(e.status + " - " + e.statusText);
                    alertify.alert("An error occured while opening denomination modal!");
                    $(".preload").hide();
                }
            });
        }
        else {
            $("#modal-transaction-denomination-" + rowId).modal("show");
            $(".preload").hide();
        }
    }

    function PiecesChange(rowId, rowId2) {
        var form = $("#table-transaction-denomination-" + rowId + " input, #table-transaction select#Transaction_Currency_" + rowId + ", #table-transaction input#Transaction_AmountForeign_" + rowId).serialize();
        var url = "@Url.Action("PiecesChange")?rowId=" + rowId + "&rowId2=" + rowId2;

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: form,
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);

                if (data.Result) {
                    if (!data.IsValid) {
                        if (data.ModelErrors) {
                            var errors = "";
                            for (var i = 0; i < data.ModelErrors.length; i++) {
                                if (data.ModelErrors[i][1] != "") {
                                    errors += data.ModelErrors[i][1] + "<br/>";
                                }
                            }

                            if (errors != "") {
                                alertify.alert(errors);
                            }
                        }
                    }

                    $("#Denomination_Value_Pieces_" + rowId + "_" + rowId2).val(data.Pieces);
                    $("#denomination-amount-foreign-" + rowId + "-" + rowId2).html(data.DenoAmountForeign);
                    $("#Denomination_Value_AmountForeign_" + rowId + "_" + rowId2).val(data.DenoAmountForeign);

                    $("#denomination-total-calculated-foreign-" + rowId)[0].innerHTML = data.DenoTotalCalculated;
                    $("#Denomination_Total_Calculated_Foreign_" + rowId).val(data.DenoTotalCalculated);

                    $("#denomination-remaining-foreign-" + rowId)[0].innerHTML = data.DenoTotalRemaining;
                    $("#Denomination_Remaining_Foreign_" + rowId).val(data.DenoTotalRemaining);

                    $("#denomination-total-order-foreign-" + rowId)[0].innerHTML = data.DenoTotalOrder;
                    $("#Denomination_Total_Order_Foreign_" + rowId).val(data.DenoTotalOrder);
                    $(".preload").hide();
                }
                else {
                    alertify.alert(data.ErrorMessage);
                    $(".preload").hide();
                }
            },
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                alertify.alert("An error occured while validating pieces!");
                $(".preload").hide();
            }
        });
    }

    function CoinsChange(rowId, rowId2) {
        var form = $("#table-transaction-denomination-" + rowId + " input, #table-transaction select#Transaction_Currency_" + rowId + ", #table-transaction input#Transaction_AmountForeign_" + rowId).serialize();
        var url = "@Url.Action("CoinsChange")?rowId=" + rowId + "&rowId2=" + rowId2;

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: form,
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);

                if (data.Result) {
                    if (!data.IsValid) {
                        if (data.ModelErrors) {
                            var errors = "";
                            for (var i = 0; i < data.ModelErrors.length; i++) {
                                if (data.ModelErrors[i][1] != "") {
                                    errors += data.ModelErrors[i][1] + "<br/>";
                                }
                            }

                            if (errors != "") {
                                alertify.alert(errors);
                            }
                        }
                    }

                    $("#Denomination_Value_AmountForeign_" + rowId + "_" + rowId2).val(data.DenoAmountForeign);

                    $("#denomination-total-calculated-foreign-" + rowId)[0].innerHTML = data.DenoTotalCalculated;
                    $("#Denomination_Total_Calculated_Foreign_" + rowId).val(data.DenoTotalCalculated);

                    $("#denomination-remaining-foreign-" + rowId)[0].innerHTML = data.DenoTotalRemaining;
                    $("#Denomination_Remaining_Foreign_" + rowId).val(data.DenoTotalRemaining);

                    $("#denomination-total-order-foreign-" + rowId)[0].innerHTML = data.DenoTotalOrder;
                    $("#Denomination_Total_Order_Foreign_" + rowId).val(data.DenoTotalOrder);
                    $(".preload").hide();
                }
                else {
                    alertify.alert(data.ErrorMessage);
                    $(".preload").hide();
                }
            },
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                alertify.alert("An error occured while validating coins!");
                $(".preload").hide();
            }
        });
    }

    function RemoveDenomination(rowId) {
        $("#table-transaction-denomination-" + rowId + " tbody").html("");

        $("#denomination-total-calculated-foreign-" + rowId)[0].innerHTML = "0.00";
        $("#Denomination_Total_Calculated_Foreign_" + rowId).val("0.00");

        $("#modal-transaction-denomination-" + rowId).modal("hide");
    }

    function RemoveTransaction(rowId) {
        $("#transaction-row-" + rowId).remove();

        var transactionCount = $("#table-transaction > tbody > tr").length;

        if (transactionCount == 0) {
            $("#table-transaction").html("");
        }
        else {
            var type = $("input[name='sales.TransactionType']:checked")[0].id;
            var form = $("#table-transaction input, #table-transaction select").serialize();
            var url = "@Url.Action("RemoveTransaction")?type=" + type;

            $.ajax({
                type: "POST",
                cache: false,
                url: url,
                data: form,
                beforeSend: function () {
                    $(".preload").show();
                },
                success: function (data) {
                    data = JSON.parse(data);

                    if (data.Result) {
                        $("#total-amount-foreign").html("$" + data.TotalAmountForeign);
                        $("#total-amount-local").html("$" + data.TotalAmountLocal);

                        SetLocalPaymentModeAmount(data.TotalAmountLocal);
                        $(".preload").hide();
                    }
                    else {
                        alertify.alert(data.ErrorMessage);
                        $(".preload").hide();
                    }
                },
                error: function (e) {
                    console.log(e.status + " - " + e.statusText);
                    alertify.alert("An error occured while removing transaction!");
                    $(".preload").hide();
                }
            });
        }
    }

    function RemovePairedTransaction(pairedId) {
        $("#table-transaction > tbody > tr.paired-row-" + pairedId).remove();

        var transactionCount = $("#table-transaction > tbody > tr").length;

        if (transactionCount == 0) {
            $("#table-transaction").html("");
        }
        else {
            var type = $("input[name='sales.TransactionType']:checked")[0].id;
            var form = $("#table-transaction input, #table-transaction select").serialize();
            var url = "@Url.Action("RemoveTransaction")?type=" + type;

            $.ajax({
                type: "POST",
                cache: false,
                url: url,
                data: form,
                beforeSend: function () {
                    $(".preload").show();
                },
                success: function (data) {
                    data = JSON.parse(data);

                    if (data.Result) {
                        $("#total-amount-foreign").html("$" + data.TotalAmountForeign);
                        $("#total-amount-local").html("$" + data.TotalAmountLocal);
                        $(".preload").hide();
                    }
                    else {
                        alertify.alert(data.ErrorMessage);
                        $(".preload").hide();
                    }
                },
                error: function (e) {
                    console.log(e.status + " - " + e.statusText);
                    alertify.alert("An error occured while removing transaction!");
                    $(".preload").hide();
                }
            });
        }

        HighlightPaired();
    }

    function SetLocalPaymentModeAmount(amountLocal) {
        if ($("input#cash")[0].checked) {
            $("#sales_CashAmount").val(amountLocal);
        }
    }

    function LocalPaymentAmountChange(id) {
        var amount = $("#" + id).val();
        var url = "@Url.Action("ValidateAmount")";

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: { amount: amount },
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);
                if (data.Result) {
                    $("#" + id).val(data.Amount);
                    $(".preload").hide();
                }
                else {
                    alertify.alert(data.ErrorMessage);
                    $(".preload").hide();
                }
            },
            error: function (e) {
                console.log(e.status + " - " + e.statusText);
                alertify.alert("An error occured while validating amount!");
                $(".preload").hide();
            }
        });
    }

	function LocalPaymentModeClick(id, cls)
	{
		var checked = $("#" + id);

		if (checked[0].checked)
		{

			//check if is in sell mode
			var transactionType = $(".radio-transaction-type:checked").val();

			if (transactionType == "Sell") {
				//Update the 3 field css
				//show the button div

				if (cls == "payment-mode-cheque-1") {
					$("#update-chequeNo1-input-div").css('width', '90%');
					$("#sales_Cheque1No").attr('readonly', true);
					$("#sales_Cheque1No").removeAttr("disabled");
					$("#update-chequeNo1-input-div").css('padding-left', '0px');
					$("#update-chequeNo1-input-div").css('padding-right', '5px');
					$("#update-chequeNo1-div").show();
				}
				else if (cls == "payment-mode-cheque-2") {
					$("#update-chequeNo2-input-div").css('width', '90%');
					$("#sales_Cheque2No").attr('readonly', true);
					$("#sales_Cheque2No").removeAttr("disabled");
					$("#update-chequeNo2-input-div").css('padding-left', '0px');
					$("#update-chequeNo2-input-div").css('padding-right', '5px');
					$("#update-chequeNo2-div").show();
				}
				else if (cls == "payment-mode-cheque-3") {
					$("#update-chequeNo3-input-div").css('width', '90%');
					$("#sales_Cheque3No").attr('readonly', true);
					$("#sales_Cheque3No").removeAttr("disabled");
					$("#update-chequeNo3-input-div").css('padding-left', '0px');
					$("#update-chequeNo3-input-div").css('padding-right', '5px');
					$("#update-chequeNo3-div").show();
				}
				else if (cls == "payment-mode-transfer") {
					$("#update-local-bank-transfer-input-div").css('width', '90%');
					$("#sales_BankTransferNo").attr('readonly', true);
					$("#sales_BankTransferNo").removeAttr("disabled");
					$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
					$("#update-local-bank-transfer-input-div").css('padding-right', '5px');
					$("#update-local-bank-transfer-div").show();
				}
			}
			else if(transactionType == "Buy")
			{
				//Update the 3 field css
				//show the button div

				$("#update-chequeNo1-input-div").css('padding-left', '0px');
				$("#update-chequeNo1-input-div").css('padding-right', '0px');
				$("#update-chequeNo2-input-div").css('padding-left', '0px');
				$("#update-chequeNo2-input-div").css('padding-right', '0px');
				$("#update-chequeNo3-input-div").css('padding-left', '0px');
				$("#update-chequeNo3-input-div").css('padding-right', '0px');
				$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
				$("#update-local-bank-transfer-input-div").css('padding-right', '0px');

				if (cls == "payment-mode-cheque-1")
				{
					$("#update-chequeNo1-input-div").css('width', '100%');
					$("#sales_Cheque1No").attr('readonly', false);
					$("#sales_Cheque1No").removeAttr("disabled");
					$("#update-chequeNo1-div").hide();
				}
				else if (cls == "payment-mode-cheque-2") {
					$("#update-chequeNo2-input-div").css('width', '100%');
					$("#sales_Cheque2No").attr('readonly', false);
					$("#sales_Cheque2No").removeAttr("disabled");
					$("#update-chequeNo2-div").hide();
				}
				else if (cls == "payment-mode-cheque-3") {
					$("#update-chequeNo3-input-div").css('width', '100%');
					$("#sales_Cheque3No").attr('readonly', false);
					$("#sales_Cheque3No").removeAttr("disabled");
					$("#update-chequeNo3-div").hide();
				}
				else if (cls == "payment-mode-transfer") {
					$("#update-local-bank-transfer-input-div").css('width', '100%');
					$("#sales_BankTransferNo").attr('readonly', false);
					$("#sales_BankTransferNo").removeAttr("disabled");
					$("#update-local-bank-transfer-div").hide();
				}
			}

			$("input." + cls).removeAttr("disabled");

			if (cls != "payment-mode-cash")
			{
                $("select." + cls).removeAttr("disabled");
                $("select." + cls).select2();
            }
        }
		else
		{
				if (cls == "payment-mode-cheque-1")
				{
					$("#update-chequeNo1-input-div").css('width', '100%');
					$("#sales_Cheque1No").attr("disabled", "disabled");
					$("#update-chequeNo1-input-div").css('padding-left', '0px');
					$("#update-chequeNo1-input-div").css('padding-right', '0px');
					$("#update-chequeNo1-div").hide();
				}
				else if (cls == "payment-mode-cheque-2")
				{
					$("#update-chequeNo2-input-div").css('width', '100%');
					$("#sales_Cheque2No").attr("disabled", "disabled");
					$("#update-chequeNo2-input-div").css('padding-left', '0px');
					$("#update-chequeNo2-input-div").css('padding-right', '0px');
					$("#update-chequeNo2-div").hide();
				}
				else if (cls == "payment-mode-cheque-3")
				{
					$("#update-chequeNo3-input-div").css('width', '100%');
					$("#sales_Cheque3No").attr("disabled", "disabled");
					$("#update-chequeNo3-input-div").css('padding-left', '0px');
					$("#update-chequeNo3-input-div").css('padding-right', '0px');
					$("#update-chequeNo3-div").hide();
				}
				else if (cls == "payment-mode-transfer")
				{
					$("#update-local-bank-transfer-input-div").css('width', '100%');
					$("#sales_BankTransferNo").attr("disabled", "disabled");
					$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
					$("#update-local-bank-transfer-input-div").css('padding-right', '0px');
					$("#update-local-bank-transfer-div").hide();
				}

            $("input." + cls).attr("disabled", "disabled");
            if (cls != "payment-mode-cash") {
                $("select." + cls).attr("disabled", "disabled");
                $("select." + cls).select2();
            }
        }

        CheckLocalPaymentMode();
    }

    function CheckLocalPaymentMode() {
        var checked = $("input[type=checkbox]:checked").length;

        if (checked >= 4) {
            $("input[type=checkbox]:not(:checked)").attr("disabled", "disabled");
        }
        else {
            $("input[type=checkbox]:disabled").removeAttr("disabled");
        }
    }

    function AmountChange(id, n) {
        var url = "@Url.Action("ValidateAmount2")";
        var amount = $("#" + id).val();

        $.ajax({
            type: "POST",
            cache: false,
            url: url,
            data: { amount: amount, allowedNegative: n },
            beforeSend: function () {
                $(".preload").show();
            },
            success: function (data) {
                data = JSON.parse(data);

                if (data.Result) {
                    $("#" + id).val(data.Amount);
                    $(".preload").hide();
                }
                else {
                    alertify.alert(data.ErrorMessage);
                    $(".preload").hide();
                }
            },
            error: function (e) {
                console.log(e);
                alertify.alert("An error occured while validating amount!");
                $(".preload").hide();
            }
        });
    }

    function disableButton()
    {
		$("#disable_button").attr("disabled", true);
        $("#form-create").submit();
	}

	//Update Cheque Model
	function UpdateCheque(id)
	{
		//console.log("Update Cheque with ID " + id);
        var url = "@Url.Action("AddChequeModel")";
        $.ajax({
			type: "GET",
			beforeSend: function() {
				 $(".preload").show();
			},
            url: url,
            data: { id: id },
			success: function (data)
			{
                $("#cheque-modal .modal-body").html(data);
				$("#cheque-modal").modal("show");
				$(".preload").hide();
			},
			error: function (e)
			{
                console.log(e.status + " - " + e.statusText);
                $(".preload").hide();
            }
        });
	}

	//Update Bank Transfer Model
	function UpdateBankTransfer(id)
	{
		//console.log("Update Bank Transfer with ID " + id);
        var url = "@Url.Action("AddBankTransferModel")";
        $.ajax({
			type: "GET",
			beforeSend: function() {
				 $(".preload").show();
			},
            url: url,
            data: { id: id },
			success: function (data)
			{
                $("#bank-transfer-modal .modal-body").html(data);
				$("#bank-transfer-modal").modal("show");
				$(".preload").hide();
			},
			error: function (e)
			{
                console.log(e.status + " - " + e.statusText);
                $(".preload").hide();
            }
        });
	}

	//Update Cheque 1 No Model
	function UpdateCheque1No()
	{
        $("#cheque1No-modal").modal("show");
	}

	//Update Cheque 2 No Model
	function UpdateCheque2No()
	{
        $("#cheque2No-modal").modal("show");
	}

	//Update Cheque 3 No Model
	function UpdateCheque3No()
	{
        $("#cheque3No-modal").modal("show");
	}

	//Update Local Bank Transfer Model
	function UpdateLocalBankTransfer()
	{
        $("#local-bank-transfer-modal").modal("show");
	}

	function btnLocalCheque1NoConfirm()
	{
		//hide modal
		var getCheque1NoModalValue = document.getElementById("LocalCheque1NoModel").value;//by id

		if (getCheque1NoModalValue === "")
		{
			//prompt error
			document.getElementById("LocalCheque1NoErrorMessage").textContent = "Cheque 1 No. is required!";
		}
		else
		{
			//update value and append into the div
			//Transaction_ChequeNo_
			$("#sales_Cheque1No").val(getCheque1NoModalValue);
			$("#cheque1No-modal").modal("hide");
			$("#PendingLocalCheque1Log").val(1);
		}
		
	}

	function btnLocalCheque1NoCancel()
	{
		//hide modal
		$("#cheque1No-modal").modal("hide");
	}

	function btnLocalCheque2NoConfirm()
	{
		//hide modal
		var getCheque2NoModalValue = document.getElementById("LocalCheque2NoModel").value;//by id

		if (getCheque2NoModalValue === "")
		{
			//prompt error
			document.getElementById("LocalCheque2NoErrorMessage").textContent = "Cheque 2 No. is required!";
		}
		else
		{
			//update value and append into the div
			//Transaction_ChequeNo_
			$("#sales_Cheque2No").val(getCheque2NoModalValue);
			$("#cheque2No-modal").modal("hide");
			$("#PendingLocalCheque2Log").val(1);
		}
		
	}

	function btnLocalCheque2NoCancel()
	{
		//hide modal
		$("#cheque2No-modal").modal("hide");
	}

	function btnLocalCheque3NoConfirm()
	{
		//hide modal
		var getCheque3NoModalValue = document.getElementById("LocalCheque3NoModel").value;//by id

		if (getCheque3NoModalValue === "")
		{
			//prompt error
			document.getElementById("LocalCheque3NoErrorMessage").textContent = "Cheque 3 No. is required!";
		}
		else
		{
			//update value and append into the div
			//Transaction_ChequeNo_
			$("#sales_Cheque3No").val(getCheque3NoModalValue);
			$("#cheque3No-modal").modal("hide");
			$("#PendingLocalCheque3Log").val(1);
		}
		
	}

	function btnLocalCheque3NoCancel()
	{
		//hide modal
		$("#cheque3No-modal").modal("hide");
	}

	function btnLocalBankTransferNoConfirm()
	{
		//hide modal
		var getLocalBankTransferModalValue = document.getElementById("LocalBankTransferNoModel").value;//by id

		if (getLocalBankTransferModalValue === "")
		{
			//prompt error
			document.getElementById("LocalBankTransferNoErrorMessage").textContent = "Bank Transfer No. is required!";
		}
		else
		{
			//update value and append into the div
			//Transaction_ChequeNo_
			$("#sales_BankTransferNo").val(getLocalBankTransferModalValue);
			$("#local-bank-transfer-modal").modal("hide");
			$("#PendingLocalBankTransferLog").val(1);
		}
	}

	function btnLocalBankTransferNoCancel()
	{
		//hide modal
		$("#local-bank-transfer-modal").modal("hide");
	}

	function btnChequeConfirm(id)
	{
		//hide modal
		var getChequeModalValue = document.getElementById("Transaction_ChequeNoModel_" + id).value;//by id

		if (getChequeModalValue === "")
		{
			//prompt error
			document.getElementById("ChequeErrorMessage_"+ id).textContent = "Cheque No. is required!";
		}
		else
		{
			//update value and append into the div
			//Transaction_ChequeNo_
			$("#Transaction_ChequeNo_" + id).val(getChequeModalValue);
			$("#cheque-modal").modal("hide");
			//update hidden value to 1
			$("#PendingChequeLog").val(1);
		}
		
	}

	function btnChequeCancel()
	{
		//hide modal
		$("#cheque-modal").modal("hide");
	}

	function btnBankTransferConfirm(id)
	{
		//hide modal
		var getBankTransferModalValue = document.getElementById("Transaction_BankTransferNoModel_" + id).value;//by id

		if (getBankTransferModalValue === "")
		{
			//prompt error
			document.getElementById("BankTransferErrorMessage_"+ id).textContent = "Bank Transfer No. is required!";
		}
		else
		{
			//update value and append into the div
			//Transaction_BankTransferNo_
			$("#Transaction_BankTransferNo_" + id).val(getBankTransferModalValue);
			$("#bank-transfer-modal").modal("hide");
			$("#PendingBankTransferLog").val(1);
		}
		
	}

	function btnBankTransferCancel()
	{
		//hide modal
		$("#bank-transfer-modal").modal("hide");
	}

	$(window).resize(function ()
	{
		if (window.innerWidth > 920)
		{
			if (transactionType == "Sell")
			{

				//Update the 3 field css
				//show the button div
				if ($("#cheque-1")[0].checked)
				{
					$("#update-chequeNo1-input-div").css('width', '90%');
					$("#update-chequeNo1-input-div").css('padding-left', '0px');
					$("#update-chequeNo1-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo1-input-div").css('width', '100%');
					$("#update-chequeNo1-input-div").css('padding-left', '0px');
					$("#update-chequeNo1-input-div").css('padding-right', '0px');
					$(".payment-mode-cheque-1").css('width', '100%');
				}

				if ($("#cheque-2")[0].checked)
				{
					$("#update-chequeNo2-input-div").css('width', '90%');
					$("#update-chequeNo2-input-div").css('padding-left', '0px');
					$("#update-chequeNo2-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo2-input-div").css('width', '100%');
					$("#update-chequeNo2-input-div").css('padding-left', '0px');
					$("#update-chequeNo2-input-div").css('padding-right', '0px');
				}

				if ($("#cheque-3")[0].checked)
				{
					$("#update-chequeNo3-input-div").css('width', '90%');
					$("#update-chequeNo3-input-div").css('padding-left', '0px');
					$("#update-chequeNo3-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo3-input-div").css('width', '100%');
					$("#update-chequeNo3-input-div").css('padding-left', '0px');
					$("#update-chequeNo3-input-div").css('padding-right', '0px');
				}

				if ($("#bank-transfer")[0].checked)
				{
					$("#update-local-bank-transfer-input-div").css('width', '90%');
					$("#sales_BankTransferNo").attr('readonly', true);
					$("#sales_BankTransferNo").removeAttr("disabled");
					$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
					$("#update-local-bank-transfer-input-div").css('padding-right', '5px');
					$("#update-local-bank-transfer-div").show();
				}
				else
				{
					$("#update-local-bank-transfer-input-div").css('width', '100%');
					$("#sales_BankTransferNo").attr("disabled", "disabled");
					$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
					$("#update-local-bank-transfer-input-div").css('padding-right', '0px');
					$("#update-local-bank-transfer-div").hide();
				}

			}
			else if(transactionType == "Buy")
			{
				//Update the 3 field css
				//show the button div
				//var checked = $("#" + id);
				$("#update-chequeNo1-input-div").css('padding-left', '0px');
				$("#update-chequeNo1-input-div").css('padding-right', '0px');
				$("#update-chequeNo2-input-div").css('padding-left', '0px');
				$("#update-chequeNo2-input-div").css('padding-right', '0px');
				$("#update-chequeNo3-input-div").css('padding-left', '0px');
				$("#update-chequeNo3-input-div").css('padding-right', '0px');
				$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
				$("#update-local-bank-transfer-input-div").css('padding-right', '0px');
				$("#update-chequeNo1-input-div").css('width', '100%');
				$("#update-chequeNo2-input-div").css('width', '100%');
				$("#update-chequeNo3-input-div").css('width', '100%');
				$("#update-local-bank-transfer-input-div").css('width', '100%');
			}
		}
		else if (window.innerWidth > 800 && window.innerWidth <= 920)
		{
			if (transactionType == "Sell")
			{

				//Update the 3 field css
				//show the button div
				if ($("#cheque-1")[0].checked)
				{
					$("#update-chequeNo1-input-div").css('width', '89%');
					$("#update-chequeNo1-input-div").css('padding-left', '0px');
					$("#update-chequeNo1-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo1-input-div").css('width', '100%');
					$("#update-chequeNo1-input-div").css('padding-left', '0px');
					$("#update-chequeNo1-input-div").css('padding-right', '0px');
					$(".payment-mode-cheque-1").css('width', '100%');
				}

				if ($("#cheque-2")[0].checked)
				{
					$("#update-chequeNo2-input-div").css('width', '89%');
					$("#update-chequeNo2-input-div").css('padding-left', '0px');
					$("#update-chequeNo2-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo2-input-div").css('width', '100%');
					$("#update-chequeNo2-input-div").css('padding-left', '0px');
					$("#update-chequeNo2-input-div").css('padding-right', '0px');
				}

				if ($("#cheque-3")[0].checked)
				{
					$("#update-chequeNo3-input-div").css('width', '89%');
					$("#update-chequeNo3-input-div").css('padding-left', '0px');
					$("#update-chequeNo3-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo3-input-div").css('width', '100%');
					$("#update-chequeNo3-input-div").css('padding-left', '0px');
					$("#update-chequeNo3-input-div").css('padding-right', '0px');
				}

				if ($("#bank-transfer")[0].checked)
				{
					$("#update-local-bank-transfer-input-div").css('width', '89%');
					$("#sales_BankTransferNo").attr('readonly', true);
					$("#sales_BankTransferNo").removeAttr("disabled");
					$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
					$("#update-local-bank-transfer-input-div").css('padding-right', '5px');
					$("#update-local-bank-transfer-div").show();
				}
				else
				{
					$("#update-local-bank-transfer-input-div").css('width', '100%');
					$("#sales_BankTransferNo").attr("disabled", "disabled");
					$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
					$("#update-local-bank-transfer-input-div").css('padding-right', '0px');
					$("#update-local-bank-transfer-div").hide();
				}

			}
			else if(transactionType == "Buy")
			{
				//Update the 3 field css
				//show the button div
				//var checked = $("#" + id);
				$("#update-chequeNo1-input-div").css('padding-left', '0px');
				$("#update-chequeNo1-input-div").css('padding-right', '0px');
				$("#update-chequeNo2-input-div").css('padding-left', '0px');
				$("#update-chequeNo2-input-div").css('padding-right', '0px');
				$("#update-chequeNo3-input-div").css('padding-left', '0px');
				$("#update-chequeNo3-input-div").css('padding-right', '0px');
				$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
				$("#update-local-bank-transfer-input-div").css('padding-right', '0px');
				$("#update-chequeNo1-input-div").css('width', '100%');
				$("#update-chequeNo2-input-div").css('width', '100%');
				$("#update-chequeNo3-input-div").css('width', '100%');
				$("#update-local-bank-transfer-input-div").css('width', '100%');
			}
		}
		else if (window.innerWidth >= 640 && window.innerWidth <= 799)
		{
			if (transactionType == "Sell")
			{

				//Update the 3 field css
				//show the button div
				if ($("#cheque-1")[0].checked)
				{
					$("#update-chequeNo1-input-div").css('width', '88%');
					$("#update-chequeNo1-input-div").css('padding-left', '0px');
					$("#update-chequeNo1-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo1-input-div").css('width', '100%');
					$("#update-chequeNo1-input-div").css('padding-left', '0px');
					$("#update-chequeNo1-input-div").css('padding-right', '0px');
					$(".payment-mode-cheque-1").css('width', '100%');
				}

				if ($("#cheque-2")[0].checked)
				{
					$("#update-chequeNo2-input-div").css('width', '88%');
					$("#update-chequeNo2-input-div").css('padding-left', '0px');
					$("#update-chequeNo2-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo2-input-div").css('width', '100%');
					$("#update-chequeNo2-input-div").css('padding-left', '0px');
					$("#update-chequeNo2-input-div").css('padding-right', '0px');
				}

				if ($("#cheque-3")[0].checked)
				{
					$("#update-chequeNo3-input-div").css('width', '88%');
					$("#update-chequeNo3-input-div").css('padding-left', '0px');
					$("#update-chequeNo3-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo3-input-div").css('width', '100%');
					$("#update-chequeNo3-input-div").css('padding-left', '0px');
					$("#update-chequeNo3-input-div").css('padding-right', '0px');
				}

				if ($("#bank-transfer")[0].checked)
				{
					$("#update-local-bank-transfer-input-div").css('width', '88%');
					$("#sales_BankTransferNo").attr('readonly', true);
					$("#sales_BankTransferNo").removeAttr("disabled");
					$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
					$("#update-local-bank-transfer-input-div").css('padding-right', '5px');
					$("#update-local-bank-transfer-div").show();
				}
				else
				{
					$("#update-local-bank-transfer-input-div").css('width', '100%');
					$("#sales_BankTransferNo").attr("disabled", "disabled");
					$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
					$("#update-local-bank-transfer-input-div").css('padding-right', '0px');
					$("#update-local-bank-transfer-div").hide();
				}

			}
			else if(transactionType == "Buy")
			{
				//Update the 3 field css
				//show the button div
				//var checked = $("#" + id);
				$("#update-chequeNo1-input-div").css('padding-left', '0px');
				$("#update-chequeNo1-input-div").css('padding-right', '0px');
				$("#update-chequeNo2-input-div").css('padding-left', '0px');
				$("#update-chequeNo2-input-div").css('padding-right', '0px');
				$("#update-chequeNo3-input-div").css('padding-left', '0px');
				$("#update-chequeNo3-input-div").css('padding-right', '0px');
				$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
				$("#update-local-bank-transfer-input-div").css('padding-right', '0px');
				$("#update-chequeNo1-input-div").css('width', '100%');
				$("#update-chequeNo2-input-div").css('width', '100%');
				$("#update-chequeNo3-input-div").css('width', '100%');
				$("#update-local-bank-transfer-input-div").css('width', '100%');
			}
		}
		else if (window.innerWidth < 639)
		{
			if (transactionType == "Sell")
			{

				//Update the 3 field css
				//show the button div
				if ($("#cheque-1")[0].checked)
				{
					$("#update-chequeNo1-input-div").css('width', '83%');
					$("#update-chequeNo1-input-div").css('padding-left', '0px');
					$("#update-chequeNo1-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo1-input-div").css('width', '100%');
					$("#update-chequeNo1-input-div").css('padding-left', '0px');
					$("#update-chequeNo1-input-div").css('padding-right', '0px');
					$(".payment-mode-cheque-1").css('width', '100%');
				}

				if ($("#cheque-2")[0].checked)
				{
					$("#update-chequeNo2-input-div").css('width', '83%');
					$("#update-chequeNo2-input-div").css('padding-left', '0px');
					$("#update-chequeNo2-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo2-input-div").css('width', '100%');
					$("#update-chequeNo2-input-div").css('padding-left', '0px');
					$("#update-chequeNo2-input-div").css('padding-right', '0px');
				}

				if ($("#cheque-3")[0].checked)
				{
					$("#update-chequeNo3-input-div").css('width', '83%');
					$("#update-chequeNo3-input-div").css('padding-left', '0px');
					$("#update-chequeNo3-input-div").css('padding-right', '5px');
				}
				else
				{
					$("#update-chequeNo3-input-div").css('width', '100%');
					$("#update-chequeNo3-input-div").css('padding-left', '0px');
					$("#update-chequeNo3-input-div").css('padding-right', '0px');
				}

				if ($("#bank-transfer")[0].checked)
				{
					$("#update-local-bank-transfer-input-div").css('width', '83%');
					$("#sales_BankTransferNo").attr('readonly', true);
					$("#sales_BankTransferNo").removeAttr("disabled");
					$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
					$("#update-local-bank-transfer-input-div").css('padding-right', '5px');
					$("#update-local-bank-transfer-div").show();
				}
				else
				{
					$("#update-local-bank-transfer-input-div").css('width', '100%');
					$("#sales_BankTransferNo").attr("disabled", "disabled");
					$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
					$("#update-local-bank-transfer-input-div").css('padding-right', '0px');
					$("#update-local-bank-transfer-div").hide();
				}

			}
			else if(transactionType == "Buy")
			{
				//Update the 3 field css
				//show the button div
				//var checked = $("#" + id);
				$("#update-chequeNo1-input-div").css('padding-left', '0px');
				$("#update-chequeNo1-input-div").css('padding-right', '0px');
				$("#update-chequeNo2-input-div").css('padding-left', '0px');
				$("#update-chequeNo2-input-div").css('padding-right', '0px');
				$("#update-chequeNo3-input-div").css('padding-left', '0px');
				$("#update-chequeNo3-input-div").css('padding-right', '0px');
				$("#update-local-bank-transfer-input-div").css('padding-left', '0px');
				$("#update-local-bank-transfer-input-div").css('padding-right', '0px');
				$("#update-chequeNo1-input-div").css('width', '100%');
				$("#update-chequeNo2-input-div").css('width', '100%');
				$("#update-chequeNo3-input-div").css('width', '100%');
				$("#update-local-bank-transfer-input-div").css('width', '100%');
			}
		}
	});
</script>