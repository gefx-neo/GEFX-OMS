@using DataAccess.POCO

@{
	Layout = "~/Views/Shared/_Layout.cshtml";
	ViewBag.Title = ViewData["SiteName"].ToString();
	ViewBag.PageTitle = "New Customer";
	ViewBag.ManageCustomers = "active open";
	decimal num;
}

<style>
/* This only works with JavaScript,
if it's not present, don't show loader */

.preload {
	position: fixed;
	left: 0px;
	top: 0px;
	width: 100%;
	height: 100%;
	z-index: 9998;
	background: url('@Url.Content("~/Content/images/Preloader_2.gif")') center no-repeat #fff;
    opacity: 0.7;
}

</style>

<div class="preload" style="display:none;"></div>

@using (Html.BeginForm("Create", "Customer", FormMethod.Post, new { @class = "form-horizontal", @id = "form-create" }))
{
	CustomerParticular customerParticulars = new CustomerParticular();
	CustomerSourceOfFund customerSourceOfFunds = new CustomerSourceOfFund();
	CustomerActingAgent customerActingAgents = new CustomerActingAgent();
	CustomerDocumentCheckList customerDocumentChecklists = new CustomerDocumentCheckList();
	CustomerOther customerOthers = new CustomerOther();
	List<SearchTags> getSearchTag = (List<SearchTags>)ViewData["SearchTagList"];

	<!--Customer Particular-->
	<div class="panel">
		<div class="panel-body container-fluid">
			<div class="row row-lg">
				<div class="col-xlg-10 col-md-10">
					@if (TempData["Result"] != null)
					{
						string[] result = TempData["Result"].ToString().Split('|');

						<div class="alert alert-@result[0]">
							<button type="button" class="close" data-dismiss="alert">&times;</button>
							@result[1]
						</div>
					}
					<h4 class="company" style="@ViewData["CompanyForm"].ToString()">Company's Particulars</h4>
					<h4 class="natural" style="margin-top:0px;@ViewData["NaturalForm"].ToString()">Customer's Particulars</h4>
					<div class="form-group">
						@Html.LabelFor(cp => customerParticulars.CustomerCode, new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							@Html.TextBoxFor(cp => customerParticulars.CustomerCode, new { @class = "form-control", @placeholder = "Unique Customer Code" })
							@Html.ValidationMessageFor(cp => customerParticulars.CustomerCode)
						</div>
					</div>
					<div class="form-group">
						@Html.LabelFor(cp => customerParticulars.CustomerType, new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							@Html.DropDownListFor(cp => customerParticulars.CustomerType, (SelectList)ViewData["CustomerTypeDropdown"], new { @class = "form-control", @onchange = "CustomerTypeForm()" })
						</div>
					</div>

					<div class="form-group" id="is-corporate-type-div">
						@Html.Label("Main Account? ", new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							@Html.DropDownListFor(cp => customerParticulars.IsSubAccount, (SelectList)ViewData["IsMainAccountDropdown"], new { @class = "form-control selectpicker", @onchange = "IsMainAccountChange(this.options[this.selectedIndex].value)" })
							@Html.ValidationMessageFor(cp => customerParticulars.IsSubAccount)
						</div>
					</div>

					<div id="is-sub-account-div">
						<div class="form-group">
							@Html.Label("Main Account Customer", new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.DropDownList("MainAccountCustomer", (SelectList)ViewData["MainAccountCustomerDropdown"], new { @class = "form-control", @onchange = "LoadThisCustomerOnChange()" })
								@Html.ValidationMessage("MainAccountCustomer")
							</div>
							<div class="col-sm-3"></div>
							<div class="col-sm-9" style="padding-top: 10px;">
								@*<a href="#" class="btn btn-xs btn-primary" id="LoadThisCustomer">Fill Company Data</a>*@
								<span class="btn btn-xs btn-primary" id="LoadThisCustomerText" style="display:none; pointer-events: none; opacity: .65;">Loading Company Data...</span>
								<a href="#" class="btn btn-xs btn-success" id="ViewMainAccount">View Main Account</a>
							</div>
						</div>
					</div>

					<!--Company Particular-->
					<div class="company" style="@ViewData["CompanyForm"].ToString()">
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Company_RegisteredName, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Company_RegisteredName, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Company_RegisteredName)
							</div>
						</div>
						@*<div class="form-group">
			@Html.LabelFor(cp => customerParticulars.Company_RegisteredAddress, new { @class = "col-sm-3 control-label" })
			<div class="col-sm-9">
				@Html.TextBoxFor(cp => customerParticulars.Company_RegisteredAddress, new { @class = "form-control" })
				@Html.ValidationMessageFor(cp => customerParticulars.Company_RegisteredAddress)
			</div>
		</div>*@
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Company_BusinessAddress1, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Company_BusinessAddress1, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Company_BusinessAddress1)
							</div>
						</div>
						<div class="form-group">
							<div class="col-sm-offset-3 col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Company_BusinessAddress2, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Company_BusinessAddress2)
							</div>
						</div>
						<div class="form-group">
							<div class="col-sm-offset-3 col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Company_BusinessAddress3, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Company_BusinessAddress3)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Company_PostalCode, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Company_PostalCode, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Company_PostalCode)
							</div>
						</div>

						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Shipping_Address1, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Shipping_Address1, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Shipping_Address1)
							</div>
						</div>
						<div class="form-group">
							<div class="col-sm-3"></div>
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Shipping_Address2, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Shipping_Address2)
							</div>
						</div>
						<div class="form-group">
							<div class="col-sm-3"></div>
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Shipping_Address3, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Shipping_Address3)
							</div>
						</div>

						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Shipping_PostalCode, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Shipping_PostalCode, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Shipping_PostalCode)
							</div>
						</div>

						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Company_ContactName, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Company_ContactName, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Company_ContactName)
							</div>
						</div>

						<div class="form-group">
							<label class="col-md-3 control-label">Country of Operations: </label>
							<div class="col-md-9">
								<select data-plugin="select2" class="form-control" id="Country" name="Country">
									@{
										foreach (var item in (List<Countries>)ViewBag.CountryList)
										{
											<option value="@item.ID">@item.Name</option>
										}
									}
								</select>
								@Html.ValidationMessage("Country")
							</div>
						</div>

						<div class="form-group">
							<label class="col-md-3 control-label">Telephone No.: (Country Code)</label>
							<div class="col-md-9">
								<select data-plugin="select2" class="form-control" id="CountryCode" name="CountryCode">
									@{
										foreach (var item in (List<CountryCodeLists>)ViewBag.CountryCodeList)
										{
											<option value="@item.ID">@item.Name @item.Code</option>
										}
									}
								</select>
								@Html.ValidationMessage("CountryCode")
							</div>
						</div>

						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Company_TelNo, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Company_TelNo, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Company_TelNo)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Company_FaxNo, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Company_FaxNo, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Company_FaxNo)
							</div>
						</div>

						<!-- Contact H.O.M -->
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Company_ContactNoH, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Company_ContactNoH, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Company_ContactNoH)
							</div>
						</div>

						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Company_ContactNoO, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Company_ContactNoO, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Company_ContactNoO)
							</div>
						</div>

						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Company_ContactNoM, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Company_ContactNoM, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Company_ContactNoM)
							</div>
						</div>

						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Company_ICPassport, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Company_ICPassport, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Company_ICPassport)
							</div>
						</div>

						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Company_JobTitle, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Company_JobTitle, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Company_JobTitle)
							</div>
						</div>

						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Company_Nationality, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Company_Nationality, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Company_Nationality)
							</div>
						</div>

						<div class="form-group row">
							<label class="col-md-3 control-label">Date of Birth: </label>
							<div class="col-md-6">
								<div class="input-group date">
									<span class="input-group-prepend" data-toggle="tooltip" data-placement="bottom" title="Example: 31-01-2000 (DD-MM-YYYY)">
										<span class="input-group-text">
											<i class="fa fa-calendar"></i>
										</span>
									</span>
									<input class="form-control" type="text" id="dob-datepicker" name="dob-datepicker" placeholder="DD-MM-YYYY" />
									@Html.ValidationMessage("dob-datepicker")
								</div>
							</div>
						</div>

						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Company_Email, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Company_Email, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Company_Email)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Company_PlaceOfRegistration, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Company_PlaceOfRegistration, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Company_PlaceOfRegistration)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Company_DateOfRegistration, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Company_DateOfRegistration, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Company_DateOfRegistration)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Company_RegistrationNo, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Company_RegistrationNo, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Company_RegistrationNo)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Company_TypeOfEntity, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.DropDownListFor(cp => customerParticulars.Company_TypeOfEntity, (SelectList)ViewData["TypeOfEntityDropdown"], new { @class = "form-control", @onchange = "TypeOfEntityChange(this)" })
								@Html.ValidationMessageFor(cp => customerParticulars.Company_TypeOfEntity)
							</div>
						</div>
						<div class="form-group">
							<div class="col-sm-9 col-sm-offset-3">
								@Html.TextBoxFor(cp => customerParticulars.Company_TypeOfEntityIfOthers, new { @class = "form-control", @placeholder = "If Others" })
								@Html.ValidationMessageFor(cp => customerParticulars.Company_TypeOfEntityIfOthers)
							</div>
						</div>
					</div>
					<!--End of Company Particular-->
					<!--Natural Particular-->
					<div class="natural" style="@ViewData["NaturalForm"].ToString()">
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Natural_Name, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_Name, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_Name)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Natural_PermanentAddress, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_PermanentAddress, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_PermanentAddress)
							</div>
						</div>
						<div class="form-group">
							<div class="col-sm-3"></div>
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_PermanentAddress2, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_PermanentAddress2)
							</div>
						</div>
						<div class="form-group">
							<div class="col-sm-3"></div>
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_PermanentAddress3, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_PermanentAddress3)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Natural_PermanentPostalCode, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_PermanentPostalCode, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_PermanentPostalCode)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Natural_MailingAddress, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_MailingAddress, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_MailingAddress)
							</div>
						</div>
						<div class="form-group">
							<div class="col-sm-3"></div>
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_MailingAddress2, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_MailingAddress2)
							</div>
						</div>
						<div class="form-group">
							<div class="col-sm-3"></div>
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_MailingAddress3, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_MailingAddress3)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Mailing_PostalCode, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Mailing_PostalCode, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Mailing_PostalCode)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Natural_Nationality, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_Nationality, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_Nationality)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Natural_ICPassportNo, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_ICPassportNo, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_ICPassportNo)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Natural_DOB, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_DOB, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_DOB)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Natural_ContactNoH, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_ContactNoH, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_ContactNoH)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Natural_ContactNoO, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_ContactNoO, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_ContactNoO)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Natural_ContactNoM, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_ContactNoM, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_ContactNoM)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Natural_Email, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_Email, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_Email)
							</div>
						</div>
						<div class="form-group">
							@Html.Label("Bank Account No", new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								<div class="table-responsive">
									<table id="table-bank-account-no" class="table table-hover table-condensed table-bordered">
										<tbody>
											@if (ViewData["BankAccountNo"] != null)
											{
												List<string> accounts = (List<string>)ViewData["BankAccountNo"];
												int i = 1;

												foreach (string account in accounts)
												{
													<tr id="tr-bank-account-no-@i">
														<td>
															@Html.TextBox("BankAccountNo_" + i, account, new { @class = "form-control" })
														</td>
														<td style="text-align: center;vertical-align:middle;">
															<button type="button" class="btn btn-xs btn-round btn-danger btn-icon" data-toggle="tooltip" data-original-title="Remove" onclick="RemoveBankAccountNo(@i)"><i class="icon wb-close"></i></button>
														</td>
													</tr>
													i++;
												}
											}
											else
											{
												<tr id="tr-bank-account-no-1">
													<td>
														@Html.TextBox("BankAccountNo_1", null, new { @class = "form-control" })
													</td>
													<td style="text-align: center;vertical-align:middle;">
														<button type="button" class="btn btn-xs btn-round btn-danger btn-icon" data-toggle="tooltip" data-original-title="Remove" onclick="RemoveBankAccountNo(1)"><i class="icon wb-close"></i></button>
													</td>
												</tr>
											}
										</tbody>
										<tfoot>
											<tr>
												<td colspan="2" style="text-align:center;">
													<button id="btn-add-bank-account-no" type="button" class="btn btn-xs btn-round btn-success btn-icon" data-toggle="tooltip" data-original-title="Add" onclick="AddBankAccountNo()"><i class="icon wb-plus"></i></button>
												</td>
											</tr>
										</tfoot>
									</table>
								</div>
							</div>
						</div>
					</div>
					<!--End of Natural Particular-->

					<div class="form-group">
						<div class="form-group">
							@Html.LabelFor(co => customerOthers.SalesRemarks, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextAreaFor(co => customerOthers.SalesRemarks, new { @class = "form-control", @rows = "4" })
								@Html.ValidationMessageFor(co => customerOthers.SalesRemarks)
							</div>
						</div>
						@Html.Label("Search Tag: ", new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							<select class="selectpicker" multiple id="Search_Tag_Dropdown_Form" name="Search_Tag_Dropdown_Form">

								@if (!string.IsNullOrEmpty(ViewData["SearchTagSelectedItem"].ToString()))
								{
									string[] SearchTagSelectedList = ViewData["SearchTagSelectedItem"].ToString().Split(',');

									foreach (SearchTags _search in getSearchTag)
									{
										bool exist = Array.Exists(SearchTagSelectedList, element => element == _search.ID.ToString());

										if (exist)
										{
											<option value="@_search.ID" selected>@_search.TagName</option>
										}
										else
										{
											<option value="@_search.ID">@_search.TagName</option>
										}
									}
								}
								else
								{
									foreach (SearchTags _search in getSearchTag)
									{
										<option value="@_search.ID">@_search.TagName</option>
									}
								}
							</select>
							@Html.ValidationMessage("Search_Tag_Error_Message")
						</div>
					</div>

					<!-- Has Customer Account, Password, Confirm Password, Is Sub Account, Main Account Customer Dropdown -->
					<div class="form-group">
						@Html.Label("Title: ", new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							<select data-plugin="select2" class="form-control" id="Customer_Title" name="Customer_Title">
								<option value="Mr">Mr</option>
								<option value="Ms">Ms</option>
								<option value="Mrs">Mrs</option>
								<option value="Mdm">Mdm</option>
								<option value="Dr">Dr</option>
							</select>
						</div>
					</div>

					<div class="form-group">
						@Html.Label("Surname: ", new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							@Html.TextBoxFor(cp => customerParticulars.Surname, new { @class = "form-control" })
							@Html.ValidationMessageFor(cp => customerParticulars.Surname)
						</div>
					</div>

					<div class="form-group">
						@Html.Label("Given Name: ", new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							@Html.TextBoxFor(cp => customerParticulars.GivenName, new { @class = "form-control" })
							@Html.ValidationMessageFor(cp => customerParticulars.GivenName)
						</div>
					</div>

					<div class="form-group">
						@Html.Label("Has Customer Account?", new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							@Html.DropDownListFor(cp => customerParticulars.hasCustomerAccount, (SelectList)ViewData["HasCustomerAccountDropdown"], new { @class = "form-control selectpicker", @onchange = "HasCustomerAccountChange(this.options[this.selectedIndex].value)" })
							@Html.ValidationMessageFor(cp => customerParticulars.hasCustomerAccount)
						</div>
					</div>

					<div id="has-customer-account-div">
						<div class="form-group">
							<label class="col-sm-3 control-label">Password</label>
							<div class="col-sm-9">
								@Html.Password("Password", null, new { @class = "form-control", @id = "inputPassword", @placeholder = "Password" })
								@Html.ValidationMessage("Password")
							</div>
						</div>

						<div class="form-group">
							<label class="col-sm-3 control-label">Confirm Password</label>
							<div class="col-sm-9">
								@Html.Password("ConfirmPassword", null, new { @class = "form-control", @id = "inputPassword", @placeholder = "Confirm Password" })
								@Html.ValidationMessage("ConfirmPassword")
							</div>
						</div>
					</div>

					<div class="form-group">
						<label class="col-sm-3 control-label">Customer Account Validated: </label>
						<div class="col-sm-9">
							@Html.DropDownListFor(cp => customerParticulars.isVerify, (SelectList)ViewData["CustomerEmailVerifyDropdown"], new { @class = "form-control selectpicker" })
						</div>
					</div>

					<div class="form-group">
						<label class="col-sm-3 control-label">Transaction Allowed Type (Customer Portal): </label>
						<div class="col-sm-9">
							<span class="checkbox-custom checkbox-primary">
								<input class="form-control" type="checkbox" id="enable-transaction-type-remittance" name="customerParticulars.EnableTransactionType" value="Remittance" @ViewData["EnableTransactionTypeRemittanceCheckbox"].ToString()>
								<label for="enable-transaction-type-remittance">Remittance</label>
							</span>
							<span class="checkbox-custom checkbox-primary">
								<input class="form-control" type="checkbox" id="enable-transaction-type-currency-exchange" name="customerParticulars.EnableTransactionType" value="Currency Exchange" @ViewData["EnableTransactionTypeCurrencyExchangeCheckbox"].ToString()>
								<label for="enable-transaction-type-currency-exchange">Currency Exchange</label>
							</span>
							<span class="checkbox-custom checkbox-primary">
								<input class="form-control" type="checkbox" id="enable-transaction-type-withdrawal" name="customerParticulars.EnableTransactionType" value="Withdrawal" @ViewData["EnableTransactionTypeWithdrawalCheckbox"].ToString()>
								<label for="enable-transaction-type-withdrawal">Withdrawal</label>
							</span>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<!--Natural Person Employment Details-->
	<div class="panel natural" style="@ViewData["NaturalForm"].ToString()">
		<div class="panel-body container-fluid">
			<div class="row row-lg">
				<div class="col-xlg-10 col-md-10">
					<h4>Employment Profile</h4>
					<div class="form-group">
						@Html.LabelFor(cp => customerParticulars.Natural_EmploymentType, new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							<span class="radio-custom radio-primary radio-inline">
								<input type="radio" id="natural-employment-employed" name="customerParticulars.Natural_EmploymentType" value="Employed" @ViewData["NaturalEmploymentEmployedRadio"].ToString()>
								<label for="natural-employment-employed">Employed</label>
							</span>
							<span class="radio-custom radio-primary radio-inline">
								<input type="radio" id="natural-employment-self-employed" name="customerParticulars.Natural_EmploymentType" value="Self Employed" @ViewData["NaturalEmploymentSelfEmployedRadio"].ToString()>
								<label for="natural-employment-self-employed">Self Employed</label>
							</span>
							<br />
							@Html.ValidationMessageFor(cp => customerParticulars.Natural_EmploymentType)
						</div>
					</div>

					<!--Natural Employed-->
					<div class="natural-employed" style="@ViewData["NaturalEmployedForm"].ToString()">
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Natural_EmployedEmployerName, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_EmployedEmployerName, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_EmployedEmployerName)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Natural_EmployedJobTitle, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_EmployedJobTitle, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_EmployedJobTitle)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Natural_EmployedRegisteredAddress, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_EmployedRegisteredAddress, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_EmployedRegisteredAddress)
							</div>
						</div>
						<div class="form-group">
							<div class="col-sm-3"></div>
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_EmployedRegisteredAddress2, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_EmployedRegisteredAddress2)
							</div>
						</div>
						<div class="form-group">
							<div class="col-sm-3"></div>
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_EmployedRegisteredAddress3, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_EmployedRegisteredAddress3)
							</div>
						</div>
					</div>
					<!--End of Natural Employed-->
					<!--Natural Self Employed-->
					<div class="natural-self-employed" style="@ViewData["NaturalSelfEmployedForm"].ToString()">
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Natural_SelfEmployedBusinessName, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_SelfEmployedBusinessName, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_SelfEmployedBusinessName)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Natural_SelfEmployedRegistrationNo, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_SelfEmployedRegistrationNo, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_SelfEmployedRegistrationNo)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Natural_SelfEmployedBusinessAddress, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_SelfEmployedBusinessAddress, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_SelfEmployedBusinessAddress)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cp => customerParticulars.Natural_SelfEmployedBusinessPrincipalPlace, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(cp => customerParticulars.Natural_SelfEmployedBusinessPrincipalPlace, new { @class = "form-control" })
								@Html.ValidationMessageFor(cp => customerParticulars.Natural_SelfEmployedBusinessPrincipalPlace)
							</div>
						</div>
					</div>
					<!--End of Natural Self Employed-->
				</div>
			</div>
		</div>
	</div>
	<!--End of Natural Person Employment Details-->
	<!--End of Customer Particular-->

	<!--Customer Agent Acting-->
	<div class="panel">
		<div class="panel-body container-fluid">
			<div class="row row-lg">
				<div class="col-xlg-10 col-md-10">
					<h4>Are you an agent acting on behalf of the customer?</h4>
					<div class="form-group">
						@Html.LabelFor(ca => customerActingAgents.ActingAgent, new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							<span class="radio-custom radio-primary radio-inline">
								<input type="radio" id="acting-agent-yes" name="customerActingAgents.ActingAgent" value="Yes" @ViewData["CompanyActingAgentYesRadio"].ToString()>
								<label for="acting-agent-yes">Yes</label>
							</span>
							<span class="radio-custom radio-primary radio-inline">
								<input type="radio" id="acting-agent-no" name="customerActingAgents.ActingAgent" value="No" @ViewData["CompanyActingAgentNoRadio"].ToString()>
								<label for="acting-agent-no">No</label>
							</span>
							<br />
							@Html.ValidationMessageFor(ca => customerActingAgents.ActingAgent)
						</div>
					</div>
					<!--Display if Yes, Hide if No-->
					<div class="acting-agent-yes" style="@ViewData["ActingAgentForm"].ToString()">
						<!--Company Agent Action-->
						<div class="company" style="@ViewData["CompanyForm"].ToString()">
							<div class="form-group">
								@Html.LabelFor(ca => customerActingAgents.Company_CustomerType, new { @class = "col-sm-3 control-label" })
								<div class="col-sm-9">
									<span class="radio-custom radio-primary radio-inline">
										<input type="radio" id="company-agent-entity" name="customerActingAgents.Company_CustomerType" value="Entity" @ViewData["CompanyActingAgentCustomerTypeEntityRadio"].ToString()>
										<label for="company-agent-entity">Entity</label>
									</span>
									<span class="radio-custom radio-primary radio-inline">
										<input type="radio" id="company-agent-individual" name="customerActingAgents.Company_CustomerType" value="Individual" @ViewData["CompanyActingAgentCustomerTypeIndividualRadio"].ToString()>
										<label for="company-agent-individual">Individual</label>
									</span>
									<br />
									@Html.ValidationMessageFor(ca => customerActingAgents.Company_CustomerType)
								</div>
							</div>
							<div class="form-group">
								@Html.LabelFor(ca => customerActingAgents.Company_Address, new { @class = "col-sm-3 control-label" })
								<div class="col-sm-9">
									@Html.TextBoxFor(ca => customerActingAgents.Company_Address, new { @class = "form-control" })
									@Html.ValidationMessageFor(ca => customerActingAgents.Company_Address)
								</div>
							</div>
							<div class="form-group">
								@Html.LabelFor(ca => customerActingAgents.Company_PlaceOfRegistration, new { @class = "col-sm-3 control-label" })
								<div class="col-sm-9">
									@Html.TextBoxFor(ca => customerActingAgents.Company_PlaceOfRegistration, new { @class = "form-control" })
									@Html.ValidationMessageFor(ca => customerActingAgents.Company_PlaceOfRegistration)
								</div>
							</div>
							<div class="form-group">
								@Html.LabelFor(ca => customerActingAgents.Company_RegistrationNo, new { @class = "col-sm-3 control-label" })
								<div class="col-sm-9">
									@Html.TextBoxFor(ca => customerActingAgents.Company_RegistrationNo, new { @class = "form-control" })
									@Html.ValidationMessageFor(ca => customerActingAgents.Company_RegistrationNo)
								</div>
							</div>
							<div class="form-group">
								@Html.LabelFor(ca => customerActingAgents.Company_DateOfRegistration, new { @class = "col-sm-3 control-label" })
								<div class="col-sm-9">
									@Html.TextBoxFor(ca => customerActingAgents.Company_DateOfRegistration, new { @class = "form-control" })
									@Html.ValidationMessageFor(ca => customerActingAgents.Company_DateOfRegistration)
								</div>
							</div>
						</div>
						<!--End of Company Agent Acting-->
						<!--Natural Agent Acting-->
						<div class="natural" style="@ViewData["NaturalForm"].ToString()">
							<div class="form-group">
								@Html.LabelFor(ca => customerActingAgents.Natural_Name, new { @class = "col-sm-3 control-label" })
								<div class="col-sm-9">
									@Html.TextBoxFor(ca => customerActingAgents.Natural_Name, new { @class = "form-control" })
									@Html.ValidationMessageFor(ca => customerActingAgents.Natural_Name)
								</div>
							</div>
							<div class="form-group">
								@Html.LabelFor(ca => customerActingAgents.Natural_PermanentAddress, new { @class = "col-sm-3 control-label" })
								<div class="col-sm-9">
									@Html.TextBoxFor(ca => customerActingAgents.Natural_PermanentAddress, new { @class = "form-control" })
									@Html.ValidationMessageFor(ca => customerActingAgents.Natural_PermanentAddress)
								</div>
							</div>
							<div class="form-group">
								@Html.LabelFor(ca => customerActingAgents.Natural_Nationality, new { @class = "col-sm-3 control-label" })
								<div class="col-sm-9">
									@Html.TextBoxFor(ca => customerActingAgents.Natural_Nationality, new { @class = "form-control" })
									@Html.ValidationMessageFor(ca => customerActingAgents.Natural_Nationality)
								</div>
							</div>
							<div class="form-group">
								@Html.LabelFor(ca => customerActingAgents.Natural_ICPassportNo, new { @class = "col-sm-3 control-label" })
								<div class="col-sm-9">
									@Html.TextBoxFor(ca => customerActingAgents.Natural_ICPassportNo, new { @class = "form-control" })
									@Html.ValidationMessageFor(ca => customerActingAgents.Natural_ICPassportNo)
								</div>
							</div>
							<div class="form-group">
								@Html.LabelFor(ca => customerActingAgents.Natural_DOB, new { @class = "col-sm-3 control-label" })
								<div class="col-sm-9">
									@Html.TextBoxFor(ca => customerActingAgents.Natural_DOB, new { @class = "form-control" })
									@Html.ValidationMessageFor(ca => customerActingAgents.Natural_DOB)
								</div>
							</div>
						</div>
						<!--End of Natural Agent Acting-->

						<div class="form-group">
							@Html.LabelFor(ca => customerActingAgents.Relationship, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								@Html.TextBoxFor(ca => customerActingAgents.Relationship, new { @class = "form-control" })
								@Html.ValidationMessageFor(ca => customerActingAgents.Relationship)
							</div>
						</div>
						<div class="form-group">
							<div class="col-sm-3 control-label">
								@Html.LabelFor(ca => customerActingAgents.BasisOfAuthority)
								<br>
								<span class="font-size-10">(E.g. Letter of authorisation or Board resolution, please attach):</span>
							</div>
							<div class="col-sm-9">
								<div class="input-group input-group-file">
									<input type="text" class="form-control" readonly>
									<span class="input-group-btn">
										<span class="btn btn-primary btn-file">
											<i class="icon wb-upload" aria-hidden="true"></i>
											<input id="basis-of-authority-uploader" type="file" multiple>
											@Html.HiddenFor(ca => customerActingAgents.BasisOfAuthority)
										</span>
									</span>
								</div>
								<span class="help-block"><i class="wb-info-circle"></i> Accepts .jpg, .png, .pdf, .doc, .xls format</span>
								@Html.ValidationMessageFor(ca => customerActingAgents.BasisOfAuthority)
								<div id="basis-of-authority-files">
									@if (ViewData["BasisOfAuthorityFiles"] != null)
									{
										string[] files = ViewData["BasisOfAuthorityFiles"].ToString().Split(',');
										foreach (string file in files)
										{
											<div class="margin-top-10 small">
												<a href="@Url.Content("~/FileUploads/Temp/" + file)" target="_blank">@file</a>
												<button type="button" class="btn btn-pure btn-xs btn-danger icon wb-close" onclick="RemoveBasisOfAuthorityFile(this)"></button>
											</div>
										}
									}
								</div>
							</div>
						</div>
					</div>
					<!--End of acting-agent-yes-->
				</div>
			</div>
		</div>
	</div>
	<!--End of Customer Agent Acting-->

	<!--Customer Appointment for Staff-->
	<div class="panel company" style="@ViewData["CompanyForm"].ToString()">
		<div class="panel-body container-fluid">
			<div class="row row-lg">
				<div class="col-xlg-10 col-md-10">
					<h4>Appointment of staff acting on behalf of company to trade with Great East Forex</h4>
					<h5>Authorised Trading Personnel</h5>
					<div class="form-group">
						@Html.Label("Full Name:", new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							@Html.TextBox("Appointment_FullName", null, new { @class = "form-control" })
						</div>
					</div>
					<div class="form-group">
						@Html.Label("IC/Passport No:", new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							@Html.TextBox("Appointment_ICPassportNo", null, new { @class = "form-control" })
						</div>
					</div>
					<div class="form-group">
						@Html.Label("Nationality:", new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							@Html.TextBox("Appointment_Nationality", null, new { @class = "form-control" })
						</div>
					</div>
					<div class="form-group">
						@Html.Label("Job Title:", new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							@Html.TextBox("Appointment_JobTitle", null, new { @class = "form-control" })
						</div>
					</div>
					@*<div class="form-group">
							@Html.Label("Specimen Signature:", new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								<div class="input-group input-group-file">
									<input type="text" class="form-control" readonly>
									<span class="input-group-btn">
										<span class="btn btn-primary btn-file">
											<i class="icon wb-upload" aria-hidden="true"></i>
											<input id="specimen-signature-uploader" type="file" multiple>
											@Html.Hidden("Specimen_Signature")
										</span>
									</span>
								</div>
								<span class="help-block"><i class="wb-info-circle"></i> Accepts .jpg, .png, .pdf, .doc, .xls format</span>
								<div id="specimen-signature-files">
								</div>
							</div>
						</div>*@
					<div class="form-group">
						<div class="col-sm-9 col-sm-offset-3">
							<button type="button" class="btn btn-success" onclick="AddPersonnel()">Add Personnel</button>
						</div>
					</div>
					<div class="col-sm-12 table-responsive">
						<table id="appointment-staff-table" class="table table-hover table-condensed table-bordered" data-striped="true" data-height="250" data-mobile-responsive="true">
							<thead>
								<tr>
									<th>Full Name</th>
									<th>IC/ Passport No</th>
									<th>Nationality</th>
									<th>Job Title</th>
									@*<th>Specimen Signature</th>*@
									<th>Action</th>
								</tr>
							</thead>
							<tbody>
								@{
									if (ViewData["Personnels"] != null)
									{
										List<string> personnels = (List<string>)ViewData["Personnels"];

										foreach (string personnel in personnels)
										{
											string[] data = personnel.Split('|');

											<tr id="personnel_@data[0]">
												<td>@Html.Hidden("Personnel_FullName_" + data[0], data[1])@data[1]</td>
												<td>@Html.Hidden("Personnel_ICPassport_" + data[0], data[2])@data[2]</td>
												<td>@Html.Hidden("Personnel_Nationality_" + data[0], data[3])@data[3]</td>
												<td>@Html.Hidden("Personnel_JobTitle_" + data[0], data[4])@data[4]</td>
												@*<td>
														@Html.Hidden("Personnel_SpecimenSignature_" + data[0], data[5])
														@{
															string[] files = data[5].Split(',');
															int fileCount = 1;

															foreach (string file in files)
															{
																<a id="personnel-download-@data[0]-@fileCount" href="@Url.Content("~/FileUploads/Temp/" + file)" target="_blank" data-toggle="tooltip" data-original-title="Download @file" data-placement="right">download</a><br />
																fileCount++;
															}
														}
													</td>*@
												<td><button id="personnel-remove-@data[0]" type="button" class="btn btn-pure btn-xs btn-danger icon wb-close" data-toggle="tooltip" data-original-title="Remove Personnel" onclick="RemovePersonnel(@data[0])"></button></td>
											</tr>
										}
									}
								}
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</div>
	<!--End of Customer Appointment for Staff-->

	<!--Customer Document Checklist-->
	<div class="panel">
		<div class="panel-body container-fluid">
			<div class="row row-lg">
				<div class="col-xlg-10 col-md-10">
					<h4>Document Checklist</h4>
					<!--Company Checklist-->
					<div class="company" style="@ViewData["CompanyForm"].ToString()">
						<div class="form-group">
							@if (ViewData["CompanyAccountOpeningFormFiles"] != null)
							{
								@Html.LabelFor(cd => customerDocumentChecklists.Company_AccountOpeningForm, new { @class = "col-sm-8 control-label", @id = "company-account-opening-form-label" })
							}
							else
							{
								@Html.LabelFor(cd => customerDocumentChecklists.Company_AccountOpeningForm, new { @class = "col-sm-8 control-label red-800", @id = "company-account-opening-form-label" })
							}
							<div class="col-sm-4">
								<div class="input-group input-group-file">
									<input type="text" class="form-control" readonly="">
									<span class="input-group-btn">
										<span class="btn btn-primary btn-file">
											<i class="icon wb-upload" aria-hidden="true"></i>
											<input id="company-account-opening-form-uploader" type="file" multiple>
											@Html.HiddenFor(cd => customerDocumentChecklists.Company_AccountOpeningForm)
										</span>
									</span>
								</div>
								<span class="help-block"><i class="wb-info-circle"></i> Accepts .jpg, .png, .pdf, .doc, .xls format</span>
								<div id="company-account-opening-form-files">
									@if (ViewData["CompanyAccountOpeningFormFiles"] != null)
									{
										string[] files = ViewData["CompanyAccountOpeningFormFiles"].ToString().Split(',');
										foreach (string file in files)
										{
											<div class="margin-top-10 small">
												<a href="@Url.Content("~/FileUploads/Temp/" + file)" target="_blank">@file</a>
												<button type="button" class="btn btn-pure btn-xs btn-danger icon wb-close" onclick="RemoveCompanyAccountOpeningFormFile(this)"></button>
											</div>
										}
									}
								</div>
							</div>
						</div>

						<div class="form-group">
							@if (ViewData["CompanySelfiePassporWorkingPass"] != null)
							{
								@Html.LabelFor(cd => customerDocumentChecklists.Company_SelfiePassporWorkingPass, new { @class = "col-sm-8 control-label", @id = "company-selfie-passpor-working-pass-label" })
							}
							else
							{
								@Html.LabelFor(cd => customerDocumentChecklists.Company_SelfiePassporWorkingPass, new { @class = "col-sm-8 control-label red-800", @id = "company-selfie-passpor-working-pass-label" })
							}
							<div class="col-sm-4">
								<div class="input-group input-group-file">
									<input type="text" class="form-control" readonly="">
									<span class="input-group-btn">
										<span class="btn btn-primary btn-file">
											<i class="icon wb-upload" aria-hidden="true"></i>
											<input id="company-selfie-passpor-working-pass-uploader" type="file" multiple>
											@Html.HiddenFor(cd => customerDocumentChecklists.Company_SelfiePassporWorkingPass)
										</span>
									</span>
								</div>
								<span class="help-block"><i class="wb-info-circle"></i> Accepts .jpg, .png, .pdf, .doc, .xls format</span>
								<div id="company-selfie-passpor-working-pass-files">
									@if (ViewData["CompanySelfiePassporWorkingPass"] != null)
									{
										string[] files = ViewData["CompanySelfiePassporWorkingPass"].ToString().Split(',');
										foreach (string file in files)
										{
											<div class="margin-top-10 small">
												<a href="@Url.Content("~/FileUploads/Temp/" + file)" target="_blank">@file</a>
												<button type="button" class="btn btn-pure btn-xs btn-danger icon wb-close" onclick="RemoveCompanySelfiePassporWorkingPass(this)"></button>
											</div>
										}
									}
								</div>
							</div>
						</div>

						<div class="form-group">
							@if (ViewData["CompanySelfiePhotoID"] != null)
							{
								@Html.LabelFor(cd => customerDocumentChecklists.Company_SelfiePhotoID, new { @class = "col-sm-8 control-label", @id = "company-selfie-photo-id-label" })
							}
							else
							{
								@Html.LabelFor(cd => customerDocumentChecklists.Company_SelfiePhotoID, new { @class = "col-sm-8 control-label red-800", @id = "company-selfie-photo-id-label" })
							}
							<div class="col-sm-4">
								<div class="input-group input-group-file">
									<input type="text" class="form-control" readonly="">
									<span class="input-group-btn">
										<span class="btn btn-primary btn-file">
											<i class="icon wb-upload" aria-hidden="true"></i>
											<input id="company-selfie-photo-id-uploader" type="file" multiple>
											@Html.HiddenFor(cd => customerDocumentChecklists.Company_SelfiePhotoID)
										</span>
									</span>
								</div>
								<span class="help-block"><i class="wb-info-circle"></i> Accepts .jpg, .png, .pdf, .doc, .xls format</span>
								<div id="company-selfie-photo-id-files">
									@if (ViewData["CompanySelfiePhotoID"] != null)
									{
										string[] files = ViewData["CompanySelfiePhotoID"].ToString().Split(',');
										foreach (string file in files)
										{
											<div class="margin-top-10 small">
												<a href="@Url.Content("~/FileUploads/Temp/" + file)" target="_blank">@file</a>
												<button type="button" class="btn btn-pure btn-xs btn-danger icon wb-close" onclick="RemoveCompanySelfiePhotoID(this)"></button>
											</div>
										}
									}
								</div>
							</div>
						</div>

						<div class="form-group">
							@if (ViewData["CompanyICAuthorizedFormFiles"] != null)
							{
								<label id="company-ic-authorized-person-label" class="col-sm-8 control-label">Photocopy of Identity Card (or valid Working Pass for non-Singaporean) with photograph of all the <u>Authorised Trading Persons</u>:</label>
							}
							else
							{
								<label id="company-ic-authorized-person-label" class="col-sm-8 control-label red-800">Photocopy of Identity Card (or valid Working Pass for non-Singaporean) with photograph of all the <u>Authorised Trading Persons</u>:</label>
							}
							<div class="col-sm-4">
								<div class="input-group input-group-file">
									<input type="text" class="form-control" readonly="">
									<span class="input-group-btn">
										<span class="btn btn-primary btn-file">
											<i class="icon wb-upload" aria-hidden="true"></i>
											<input id="company-ic-authorized-person-uploader" type="file" multiple>
											@Html.HiddenFor(cd => customerDocumentChecklists.Company_ICWithAuthorizedTradingPersons)
										</span>
									</span>
								</div>
								<span class="help-block"><i class="wb-info-circle"></i> Accepts .jpg, .png, .pdf, .doc, .xls format</span>
								<div id="company-ic-authorized-person-files">
									@if (ViewData["CompanyICAuthorizedFormFiles"] != null)
									{
										string[] files = ViewData["CompanyICAuthorizedFormFiles"].ToString().Split(',');
										foreach (string file in files)
										{
											<div class="margin-top-10 small">
												<a href="@Url.Content("~/FileUploads/Temp/" + file)" target="_blank">@file</a>
												<button type="button" class="btn btn-pure btn-xs btn-danger icon wb-close" onclick="RemoveCompanyICAuthorizedPersonFile(this)"></button>
											</div>
										}
									}
								</div>
							</div>
						</div>
						<div class="form-group">
							@if (ViewData["CompanyICDirectorFiles"] != null)
							{
								<label id="company-ic-director-label" class="col-sm-8 control-label">Photocopy of Identity Card (or Passport for non-Singaporean) with photograph of <u>Director(s)</u>:</label>
							}
							else
							{
								<label id="company-ic-director-label" class="col-sm-8 control-label red-800">Photocopy of Identity Card (or Passport for non-Singaporean) with photograph of <u>Director(s)</u>:</label>
							}
							<div class="col-sm-4">
								<div class="input-group input-group-file">
									<input type="text" class="form-control" readonly="">
									<span class="input-group-btn">
										<span class="btn btn-primary btn-file">
											<i class="icon wb-upload" aria-hidden="true"></i>
											<input id="company-ic-director-uploader" type="file" multiple>
											@Html.HiddenFor(cd => customerDocumentChecklists.Company_ICWithDirectors)
										</span>
									</span>
								</div>
								<span class="help-block"><i class="wb-info-circle"></i> Accepts .jpg, .png, .pdf, .doc, .xls format</span>
								<div id="company-ic-director-files">
									@if (ViewData["CompanyICDirectorFiles"] != null)
									{
										string[] files = ViewData["CompanyICDirectorFiles"].ToString().Split(',');
										foreach (string file in files)
										{
											<div class="margin-top-10 small">
												<a href="@Url.Content("~/FileUploads/Temp/" + file)" target="_blank">@file</a>
												<button type="button" class="btn btn-pure btn-xs btn-danger icon wb-close" onclick="RemoveCompanyICDirectorFile(this)"></button>
											</div>
										}
									}
								</div>
							</div>
						</div>
						<div class="form-group">
							@if (ViewData["CompanyBusinessFromAcraFiles"] != null)
							{
								@Html.LabelFor(cd => customerDocumentChecklists.Company_BusinessProfileFromAcra, new { @class = "col-sm-8 control-label", @id = "company-business-from-acra-label" })
							}
							else
							{
								@Html.LabelFor(cd => customerDocumentChecklists.Company_BusinessProfileFromAcra, new { @class = "col-sm-8 control-label red-800", @id = "company-business-from-acra-label" })
							}
							<div class="col-sm-4">
								<div class="input-group input-group-file">
									<input type="text" class="form-control" readonly="">
									<span class="input-group-btn">
										<span class="btn btn-primary btn-file">
											<i class="icon wb-upload" aria-hidden="true"></i>
											<input id="company-business-from-acra-uploader" type="file" multiple>
											@Html.HiddenFor(cd => customerDocumentChecklists.Company_BusinessProfileFromAcra)
										</span>
									</span>
								</div>
								<span class="help-block"><i class="wb-info-circle"></i> Accepts .jpg, .png, .pdf, .doc, .xls format</span>
								<div id="company-business-from-acra-files">
									@if (ViewData["CompanyBusinessFromAcraFiles"] != null)
									{
										string[] files = ViewData["CompanyBusinessFromAcraFiles"].ToString().Split(',');
										foreach (string file in files)
										{
											<div class="margin-top-10 small">
												<a href="@Url.Content("~/FileUploads/Temp/" + file)" target="_blank">@file</a>
												<button type="button" class="btn btn-pure btn-xs btn-danger icon wb-close" onclick="RemoveCompanyBusinessFromAcraFile(this)"></button>
											</div>
										}
									}
								</div>
							</div>
						</div>
					</div>
					<!--End of Company Checklist-->
					<!--Natural Document Checklist-->
					<div class="natural" style="@ViewData["NaturalForm"].ToString()">
						<div class="form-group">
							@if (ViewData["NaturalICOfCustomerFiles"] != null)
							{
								@Html.LabelFor(cd => customerDocumentChecklists.Natural_ICOfCustomer, new { @class = "col-sm-8 control-label", @id = "natural-ic-of-customer-label" })
							}
							else
							{
								@Html.LabelFor(cd => customerDocumentChecklists.Natural_ICOfCustomer, new { @class = "col-sm-8 control-label red-800", @id = "natural-ic-of-customer-label" })
							}
							<div class="col-sm-4">
								<div class="input-group input-group-file">
									<input type="text" class="form-control" readonly="">
									<span class="input-group-btn">
										<span class="btn btn-primary btn-file">
											<i class="icon wb-upload" aria-hidden="true"></i>
											<input id="natural-ic-of-customer-uploader" type="file" multiple>
											@Html.HiddenFor(cd => customerDocumentChecklists.Natural_ICOfCustomer)
										</span>
									</span>
								</div>
								<span class="help-block"><i class="wb-info-circle"></i> Accepts .jpg, .png, .pdf, .doc, .xls format</span>
								<div id="natural-ic-of-customer-files">
									@if (ViewData["NaturalICOfCustomerFiles"] != null)
									{
										string[] files = ViewData["NaturalICOfCustomerFiles"].ToString().Split(',');
										foreach (string file in files)
										{
											<div class="margin-top-10 small">
												<a href="@Url.Content("~/FileUploads/Temp/" + file)" target="_blank">@file</a>
												<button type="button" class="btn btn-pure btn-xs btn-danger icon wb-close" onclick="RemoveNaturalICOfCustomerFile(this)"></button>
											</div>
										}
									}
								</div>
							</div>
						</div>

						<div class="form-group">
							@if (ViewData["NaturalSelfiePhotoID"] != null)
							{
								@Html.LabelFor(cd => customerDocumentChecklists.Natural_SelfiePhotoID, new { @class = "col-sm-8 control-label", @id = "natural-selfie-photo-id-label" })
							}
							else
							{
								@Html.LabelFor(cd => customerDocumentChecklists.Natural_SelfiePhotoID, new { @class = "col-sm-8 control-label red-800", @id = "natural-selfie-photo-id-label" })
							}
							<div class="col-sm-4">
								<div class="input-group input-group-file">
									<input type="text" class="form-control" readonly="">
									<span class="input-group-btn">
										<span class="btn btn-primary btn-file">
											<i class="icon wb-upload" aria-hidden="true"></i>
											<input id="natural-selfie-photo-id-uploader" type="file" multiple>
											@Html.HiddenFor(cd => customerDocumentChecklists.Natural_SelfiePhotoID)
										</span>
									</span>
								</div>
								<span class="help-block"><i class="wb-info-circle"></i> Accepts .jpg, .png, .pdf, .doc, .xls format</span>
								<div id="natural-selfie-photo-id-files">
									@if (ViewData["NaturalSelfiePhotoID"] != null)
									{
										string[] files = ViewData["NaturalSelfiePhotoID"].ToString().Split(',');
										foreach (string file in files)
										{
											<div class="margin-top-10 small">
												<a href="@Url.Content("~/FileUploads/Temp/" + file)" target="_blank">@file</a>
												<button type="button" class="btn btn-pure btn-xs btn-danger icon wb-close" onclick="RemoveNaturalSelfiePhotoID(this)"></button>
											</div>
										}
									}
								</div>
							</div>
						</div>

						<div class="form-group">
							@if (ViewData["NaturalBusinessNameCardFiles"] != null)
							{
								@Html.LabelFor(cd => customerDocumentChecklists.Natural_BusinessNameCard, new { @class = "col-sm-8 control-label", @id = "natural-business-name-card-label" })
							}
							else
							{
								@Html.LabelFor(cd => customerDocumentChecklists.Natural_BusinessNameCard, new { @class = "col-sm-8 control-label red-800", @id = "natural-business-name-card-label" })
							}
							<div class="col-sm-4">
								<div class="input-group input-group-file">
									<input type="text" class="form-control" readonly="">
									<span class="input-group-btn">
										<span class="btn btn-primary btn-file">
											<i class="icon wb-upload" aria-hidden="true"></i>
											<input id="natural-business-name-card-uploader" type="file" multiple>
											@Html.HiddenFor(cd => customerDocumentChecklists.Natural_BusinessNameCard)
										</span>
									</span>
								</div>
								<span class="help-block"><i class="wb-info-circle"></i> Accepts .jpg, .png, .pdf, .doc, .xls format</span>
								<div id="natural-business-name-card-files">
									@if (ViewData["NaturalBusinessNameCardFiles"] != null)
									{
										string[] files = ViewData["NaturalBusinessNameCardFiles"].ToString().Split(',');
										foreach (string file in files)
										{
											<div class="margin-top-10 small">
												<a href="@Url.Content("~/FileUploads/Temp/" + file)" target="_blank">@file</a>
												<button type="button" class="btn btn-pure btn-xs btn-danger icon wb-close" onclick="RemoveNaturalBusinessNameCardFile(this)"></button>
											</div>
										}
									}
								</div>
							</div>
						</div>
						<div class="form-group">
							@if (ViewData["NaturalKYCFormFiles"] != null)
							{
								@Html.LabelFor(cd => customerDocumentChecklists.Natural_KYCForm, new { @class = "col-sm-8 control-label", @id = "natural-kyc-form-label" })
							}
							else
							{
								@Html.LabelFor(cd => customerDocumentChecklists.Natural_KYCForm, new { @class = "col-sm-8 control-label red-800", @id = "natural-kyc-form-label" })
							}
							<div class="col-sm-4">
								<div class="input-group input-group-file">
									<input type="text" class="form-control" readonly="">
									<span class="input-group-btn">
										<span class="btn btn-primary btn-file">
											<i class="icon wb-upload" aria-hidden="true"></i>
											<input id="natural-kyc-form-uploader" type="file" multiple>
											@Html.HiddenFor(cd => customerDocumentChecklists.Natural_KYCForm)
										</span>
									</span>
								</div>
								<span class="help-block"><i class="wb-info-circle"></i> Accepts .jpg, .png, .pdf, .doc, .xls format</span>
								<div id="natural-kyc-form-files">
									@if (ViewData["NaturalKYCFormFiles"] != null)
									{
										string[] files = ViewData["NaturalKYCFormFiles"].ToString().Split(',');
										foreach (string file in files)
										{
											<div class="margin-top-10 small">
												<a href="@Url.Content("~/FileUploads/Temp/" + file)" target="_blank">@file</a>
												<button type="button" class="btn btn-pure btn-xs btn-danger icon wb-close" onclick="RemoveNaturalKYCFormFile(this)"></button>
											</div>
										}
									}
								</div>
							</div>
						</div>
					</div>
					<!--End of Natural Document Checklist-->
				</div>
			</div>
		</div>
	</div>
	<!--End of Customer Document Checklist-->

	<!--Customer Particular for Company-->
	<div class="panel company" style="@ViewData["CompanyForm"].ToString()">
		<div class="panel-body container-fluid">
			<div class="row row-lg">
				<div class="col-xlg-10 col-md-10">
					<h4>Purpose and Intended Nature of Account Relationship and/or Relevant Business Transaction Undertaken</h4>
					<div class="form-group">
						<div class="col-sm-9 col-sm-offset-3">
							@Html.TextAreaFor(cp => customerParticulars.Company_PurposeAndIntended, new { @class = "form-control", @rows = "5", @placeholder = "Provide information on the purpose and intended nature of the account relationship and/or relevant business transaction undertaken. Please also state whether the transaction is for money-changing and/or for remittance purposes." })
							@Html.ValidationMessageFor(cp => customerParticulars.Company_PurposeAndIntended)
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
	<!--End of Customer Particular for Company-->

	<!--Customer Source of Fund-->
	<div class="panel">
		<div class="panel-body container-fluid">
			<div class="row row-lg">
				<div class="col-xlg-10 col-md-10">
					<h4>Source of Funds</h4>
					<!--Company Source of Fund-->
					<div class="company" style="@ViewData["CompanyForm"].ToString()">
						<div class="form-group">
							@Html.LabelFor(cs => customerSourceOfFunds.Company_SourceOfFund, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								<select class="selectpicker" multiple data-live-search="true" data-size="5" id="Company_source_of_fund" name="Company_source_of_fund">
									<option value="Advance from director/shareholder">Advance from director/shareholder</option>
									<option value="Business income">Business income</option>
									<option value="Claims/Compensation">Claims/Compensation</option>
									<option value="Donation/Gift">Donation/Gift</option>
									<option value="Financial support from children">Financial support from children</option>
									<option value="Financial support from parents">Financial support from parents</option>
									<option value="Financial support from Spouse">Financial support from Spouse</option>
									<option value="Freelance income">Freelance income</option>
									<option value="Interest/dividend income">Interest/dividend income</option>
									<option value="Investment income">Investment income</option>
									<option value="Loans">Loans</option>
									<option value="Property investment">Property investment</option>
									<option value="Rental income">Rental income</option>
									<option value="Retirement Fund">Retirement Fund</option>
									<option value="Salary/Savings">Salary/Savings</option>
									<option value="Sales of assets">Sales of assets</option>
									<option value="Share investment">Share investment</option>
									<option value="Tax return">Tax return</option>
									<option value="Venture Capital">Venture Capital</option>
									<option value="Bank Credit Line">Bank Credit Line</option>
									<option value="Directors' / Shareholders' / Sole Proprietor's Investments">Directors' / Shareholders' / Sole Proprietor's Investments</option>
									<option value="Others">Others</option>
								</select>
								@*<span class="checkbox-custom checkbox-primary">
										<input class="form-control" type="checkbox" id="company-sof-bank" name="customerSourceOfFunds.Company_SourceOfFund" value="Bank Credit Line" @ViewData["CompanySOFBankCreditCheckbox"].ToString()>
										<label for="company-sof-bank">Bank Credit Line</label>
									</span>
									<span class="checkbox-custom checkbox-primary">
										<input class="form-control" type="checkbox" id="company-sof-investments" name="customerSourceOfFunds.Company_SourceOfFund" value="Directors' / Shareholders' / Sole Proprietor's Investments" @ViewData["CompanySOFInvestmentCheckbox"].ToString()>
										<label for="company-sof-investments">Directors' / Shareholders' / Sole Proprietor's Investments</label>
									</span>
									<span class="checkbox-custom checkbox-primary">
										<input class="form-control" type="checkbox" id="company-sof-others" name="customerSourceOfFunds.Company_SourceOfFund" value="Others" onchange="CompanySourceOfFundOtherChange(this)" @ViewData["CompanySOFOthersCheckbox"].ToString()>
										<label for="company-sof-others">Others</label>
									</span>*@
								<div class="col-md-9">@Html.ValidationMessage("CompanySourceOfFund")</div>
							</div>
						</div>
						<div class="form-group">
							<div class="col-sm-9 col-sm-offset-3">
								@Html.TextBoxFor(cs => customerSourceOfFunds.Company_SourceOfFundIfOthers, new { @class = "form-control", @placeholder = "If Others", @disabled = "disabled" })
								@Html.ValidationMessageFor(cs => customerSourceOfFunds.Company_SourceOfFundIfOthers)
							</div>
						</div>

						<div class="form-group">
							<label class="col-sm-3 control-label">Name the service(s) you are most likely to use (tick all that apply): </label>
							<div class="col-md-9">
								<select class="selectpicker" multiple data-live-search="true" data-size="5" id="Company_service_like_to_use" name="Company_service_like_to_use">
									<option value="Remittance">Remittance</option>
									<option value="Cash to Master">Cash to Master</option>
									<option value="Currency Exchange">Currency Exchange</option>
								</select>
							</div>
							<div class="col-md-9">
								@Html.ValidationMessage("CompanyServiceLikeToUse")
							</div>
						</div>

						<div class="form-group">
							<label class="col-sm-3 control-label">Purpose of intended transactions: </label>
							<div class="col-md-9">
								<select class="selectpicker" data-live-search="true" data-size="5" id="Company_purpose_of_intended_transactions" name="Company_purpose_of_intended_transactions">
									<option value="Accounting Services">Accounting Services</option>
									<option value="Administrative Expenses">Administrative Expenses</option>
									<option value="Charity">Charity</option>
									<option value="Computer Services">Computer Services</option>
									<option value="Construction Services">Construction Services</option>
									<option value="Corporate Stock and Shares">Corporate Stock and Shares</option>
									<option value="Crude Materials">Crude Materials</option>
									<option value="Education Services and Related">Education Services and Related</option>
									<option value="Equity Capital">Equity Capital</option>
									<option value="Equipment">Equipment</option>
									<option value="Financial Instruments">Financial Instruments</option>
									<option value="Financial Services">Financial Services</option>
									<option value="Food and Live Animals">Food and Live Animals</option>
									<option value="Freight">Freight</option>
									<option value="Goods and Services">Goods and Services</option>
									<option value="Goods for Processing/manufacturing Services">Goods for Processing/manufacturing Services</option>
									<option value="Gift">Gift</option>
									<option value="Health Services">Health Services</option>
									<option value="Real Estate">Real Estate</option>
									<option value="Recreational Services">Recreational Services</option>
									<option value="Rental">Rental</option>
									<option value="Information Services">Information Services</option>
									<option value="Insurance">Insurance</option>
									<option value="Interest">Interest</option>
									<option value="Investment">Investment</option>
									<option value="Investment Income">Investment Income</option>
									<option value="Legal Services">Legal Services</option>
									<option value="Loans">Loans</option>
									<option value="License Fees to Reproduce and Distribute Intellectual Property">License Fees to Reproduce and Distribute Intellectual Property</option>
									<option value="Machinery">Machinery</option>
									<option value="Manufactured Goods">Manufactured Goods</option>
									<option value="Mineral Fuels, Lubricants and Related Material">Mineral Fuels, Lubricants and Related Material</option>
									<option value="Other Business Services">Other Business Services</option>
									<option value="Other Personal Services">Other Personal Services</option>
									<option value="Pension">Pension</option>
									<option value="Research and Development Services">Research and Development Services</option>
									<option value="Social Contributions">Social Contributions</option>
									<option value="Staff Salary">Staff Salary</option>
									<option value="Staff Reimbursement">Staff Reimbursement</option>
									<option value="Subsidiaries of Product or Production">Subsidiaries of Product or Production</option>
									<option value="Supplier Credit">Supplier Credit</option>
									<option value="Staff family maintenance">Staff family maintenance</option>
									<option value="Taxes">Taxes</option>
									<option value="Telecommunication Services">Telecommunication Services</option>
									<option value="Trade Related Services">Trade Related Services</option>
									<option value="Transportation Services">Transportation Services</option>
									<option value="Transfer To Own Account">Transfer To Own Account</option>
								</select>
							</div>
							<div class="col-md-9">
								@Html.ValidationMessage("CompanyPurposeOfIntendedTransactions")
							</div>
						</div>

						<div class="form-group">
							<label class="col-sm-3 control-label">Where did you hear about us?: </label>
							<div class="col-md-9">
								<select class="selectpicker" multiple data-live-search="true" data-size="5" id="Company_hear_about_us" name="Company_hear_about_us">
									<option value="Google">Google</option>
									<option value="Print">Print</option>
									<option value="Word of Mouth (social)">Word of Mouth (social)</option>
									<option value="Word of Mouth (work/colleague)">Word of Mouth (work/colleague)</option>
								</select>
							</div>
							<div class="col-md-9">
								@Html.ValidationMessage("CompanyHearAboutUs")
							</div>
						</div>

						<div class="form-group">
							<label class="col-sm-3 control-label">Politically Exposed Individuals: </label>
							@Html.LabelFor(cs => customerSourceOfFunds.Company_PoliticallyExposedIndividuals_1, new { @class = "col-sm-9" })
							<div class="col-sm-9 col-sm-offset-3">
								<span class="radio-custom radio-primary radio-inline">
									<input type="radio" id="company-q1-yes" name="customerSourceOfFunds.Company_PoliticallyExposedIndividuals_1" value="Yes" @ViewData["CompanySOFPoliticallyExposedIndividualsYesRadio_1"].ToString()>
									<label for="company-q1-yes">Yes</label>
								</span>
								<span class="radio-custom radio-primary radio-inline">
									<input type="radio" id="company-q1-no" name="customerSourceOfFunds.Company_PoliticallyExposedIndividuals_1" value="No" @ViewData["CompanySOFPoliticallyExposedIndividualsNoRadio_1"].ToString()>
									<label for="company-q1-no">No</label>
								</span>
								<br />
								@Html.ValidationMessageFor(cs => customerSourceOfFunds.Company_PoliticallyExposedIndividuals_1)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cs => customerSourceOfFunds.Company_PoliticallyExposedIndividuals_2, new { @class = "col-sm-9 col-sm-offset-3" })
							<div class="col-sm-9 col-sm-offset-3">
								<span class="radio-custom radio-primary radio-inline">
									<input type="radio" id="company-q2-yes" name="customerSourceOfFunds.Company_PoliticallyExposedIndividuals_2" value="Yes" @ViewData["CompanySOFPoliticallyExposedIndividualsYesRadio_2"].ToString()>
									<label for="company-q2-yes">Yes</label>
								</span>
								<span class="radio-custom radio-primary radio-inline">
									<input type="radio" id="company-q2-no" name="customerSourceOfFunds.Company_PoliticallyExposedIndividuals_2" value="No" @ViewData["CompanySOFPoliticallyExposedIndividualsNoRadio_2"].ToString()>
									<label for="company-q2-no">No</label>
								</span>
								<br />
								@Html.ValidationMessageFor(cs => customerSourceOfFunds.Company_PoliticallyExposedIndividuals_2)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cs => customerSourceOfFunds.Company_PoliticallyExposedIndividuals_3, new { @class = "col-sm-9 col-sm-offset-3" })
							<div class="col-sm-9 col-sm-offset-3">
								<span class="radio-custom radio-primary radio-inline">
									<input type="radio" id="company-q3-yes" name="customerSourceOfFunds.Company_PoliticallyExposedIndividuals_3" value="Yes" @ViewData["CompanySOFPoliticallyExposedIndividualsYesRadio_3"].ToString()>
									<label for="company-q3-yes">Yes</label>
								</span>
								<span class="radio-custom radio-primary radio-inline">
									<input type="radio" id="company-q3-no" name="customerSourceOfFunds.Company_PoliticallyExposedIndividuals_3" value="No" @ViewData["CompanySOFPoliticallyExposedIndividualsNoRadio_3"].ToString()>
									<label for="company-q3-no">No</label>
								</span>
								<br />
								@Html.ValidationMessageFor(cs => customerSourceOfFunds.Company_PoliticallyExposedIndividuals_3)
							</div>
						</div>
					</div>
					<!--End of Company Source of Fund-->
					<!--Natural Source of Fund-->
					<div class="natural" style="@ViewData["NaturalForm"].ToString()">
						<div class="form-group">
							@Html.LabelFor(cs => customerSourceOfFunds.Natural_SourceOfFund, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								<select class="selectpicker" multiple data-live-search="true" data-size="5" id="Natural_source_of_fund" name="Natural_source_of_fund">
									<option value="Advance from director/shareholder">Advance from director/shareholder</option>
									<option value="Business income">Business income</option>
									<option value="Claims/Compensation">Claims/Compensation</option>
									<option value="Donation/Gift">Donation/Gift</option>
									<option value="Financial support from children">Financial support from children</option>
									<option value="Financial support from parents">Financial support from parents</option>
									<option value="Financial support from Spouse">Financial support from Spouse</option>
									<option value="Freelance income">Freelance income</option>
									<option value="Interest/dividend income">Interest/dividend income</option>
									<option value="Investment income">Investment income</option>
									<option value="Loans">Loans</option>
									<option value="Property investment">Property investment</option>
									<option value="Rental income">Rental income</option>
									<option value="Retirement Fund">Retirement Fund</option>
									<option value="Salary/Savings">Salary/Savings</option>
									<option value="Sales of assets">Sales of assets</option>
									<option value="Share investment">Share investment</option>
									<option value="Tax return">Tax return</option>
									<option value="Venture Capital">Venture Capital</option>
									<option value="Bank Credit Line">Bank Credit Line</option>
									<option value="Directors' / Shareholders' / Sole Proprietor's Investments">Directors' / Shareholders' / Sole Proprietor's Investments</option>
									<option value="Others">Others</option>
								</select>

								@*<span class="checkbox-custom checkbox-primary">
										<input class="form-control" type="checkbox" id="natural-sof-salary" name="customerSourceOfFunds.Natural_SourceOfFund" value="Salary" @ViewData["NaturalSOFSalaryCheckbox"].ToString()>
										<label for="natural-sof-salary">Salary</label>
									</span>
									<span class="checkbox-custom checkbox-primary">
										<input class="form-control" type="checkbox" id="natural-sof-business-profits" name="customerSourceOfFunds.Natural_SourceOfFund" value="Business Profits" @ViewData["NaturalSOFBusinessProfitCheckbox"].ToString()>
										<label for="natural-sof-business-profits">Business Profits</label>
									</span>
									<span class="checkbox-custom checkbox-primary">
										<input class="form-control" type="checkbox" id="natural-sof-savings" name="customerSourceOfFunds.Natural_SourceOfFund" value="Savings" @ViewData["NaturalSOFSavingsCheckbox"].ToString()>
										<label for="natural-sof-savings">Savings</label>
									</span>
									<span class="checkbox-custom checkbox-primary">
										<input class="form-control" type="checkbox" id="natural-sof-sale-of-real-estate" name="customerSourceOfFunds.Natural_SourceOfFund" value="Sale of Real Estate" @ViewData["NaturalSOFSaleOfRealEstateCheckbox"].ToString()>
										<label for="natural-sof-sale-of-real-estate">Sale of Real Estate</label>
									</span>
									<span class="checkbox-custom checkbox-primary">
										<input class="form-control" type="checkbox" id="natural-sof-gift" name="customerSourceOfFunds.Natural_SourceOfFund" value="Gift/Inheritance" @ViewData["NaturalSOFGiftCheckbox"].ToString()>
										<label for="natural-sof-gift">Gift/Inheritance</label>
									</span>
									<span class="checkbox-custom checkbox-primary">
										<input class="form-control" type="checkbox" id="natural-sof-investment-earnings" name="customerSourceOfFunds.Natural_SourceOfFund" value="Investment Earnings" @ViewData["NaturalSOFInvestmentEarningsCheckbox"].ToString()>
										<label for="natural-sof-investment-earnings">Investment Earnings</label>
									</span>
									<span class="checkbox-custom checkbox-primary">
										<input class="form-control" type="checkbox" id="natural-sof-others" name="customerSourceOfFunds.Natural_SourceOfFund" value="Others" onchange="NaturalSourceOfFundOtherChange(this)" @ViewData["NaturalSOFOthersCheckbox"].ToString()>
										<label for="natural-sof-others">Others</label>
									</span>*@
								<div class="col-md-9">@Html.ValidationMessage("NaturalSourceOfFund")</div>
							</div>
						</div>
						<div class="form-group">
							<div class="col-sm-9 col-sm-offset-3">
								@Html.TextBoxFor(cs => customerSourceOfFunds.Natural_SourceOfFundIfOthers, new { @class = "form-control", @placeholder = "If Others", @disabled = "disabled" })
								@Html.ValidationMessageFor(cs => customerSourceOfFunds.Natural_SourceOfFundIfOthers)
							</div>
						</div>

						<div class="form-group">
							<label class="col-sm-3 control-label">Name the service(s) you are most likely to use (tick all that apply): </label>
							<div class="col-md-9">
								<select class="selectpicker" multiple data-live-search="true" data-size="5" id="Natural_service_like_to_use" name="Natural_service_like_to_use">
									<option value="Remittance">Remittance</option>
									<option value="Cash to Master">Cash to Master</option>
									<option value="Currency Exchange">Currency Exchange</option>
								</select>
							</div>
							<div class="col-md-9">
								@Html.ValidationMessage("NaturalServiceLikeToUse")
							</div>
						</div>

						<div class="form-group">
							<label class="col-sm-3 control-label">Purpose of intended transactions: </label>
							<div class="col-md-9">
								<select class="selectpicker" data-live-search="true" data-size="5" id="Natural_purpose_of_intended_transactions" name="Natural_purpose_of_intended_transactions">
									<option value="Immigration">Immigration</option>
									<option value="Overseas Mortgage And Rental">Overseas Mortgage And Rental</option>
									<option value="Family Or Friends">Family Or Friends</option>
									<option value="Sending Money home">Sending Money home</option>
								</select>
							</div>
							<div class="col-md-9">
								@Html.ValidationMessage("NaturalPurposeOfIntendedTransactions")
							</div>
						</div>

						<div class="form-group">
							<label class="col-sm-3 control-label">Where did you hear about us?: </label>
							<div class="col-md-9">
								<select class="selectpicker" multiple data-live-search="true" data-size="5" id="Natural_hear_about_us" name="Natural_hear_about_us">
									<option value="Google">Google</option>
									<option value="Print">Print</option>
									<option value="Word of Mouth (social)">Word of Mouth (social)</option>
									<option value="Word of Mouth (work/colleague)">Word of Mouth (work/colleague)</option>
								</select>
							</div>
							<div class="col-md-9">
								@Html.ValidationMessage("NaturalHearAboutUs")
							</div>
						</div>

						<div class="form-group">
							@Html.LabelFor(cs => customerSourceOfFunds.Natural_AnnualIncome, new { @class = "col-sm-3 control-label" })
							<div class="col-sm-9">
								<span class="radio-custom radio-primary">
									<input type="radio" id="natural-sof-10-25" name="customerSourceOfFunds.Natural_AnnualIncome" value="$10K TO $25K" @ViewData["NaturalSOFAnnualIncome10to25Radio"].ToString()>
									<label for="natural-sof-10-25">$10K TO $25K</label>
								</span>
								<span class="radio-custom radio-primary">
									<input type="radio" id="natural-sof-25-50" name="customerSourceOfFunds.Natural_AnnualIncome" value="$25K TO $50K" @ViewData["NaturalSOFAnnualIncome25to50Radio"].ToString()>
									<label for="natural-sof-25-50">$25K TO $50K</label>
								</span>
								<span class="radio-custom radio-primary">
									<input type="radio" id="natural-sof-50-100" name="customerSourceOfFunds.Natural_AnnualIncome" value="$50K TO $100K" @ViewData["NaturalSOFAnnualIncome50to100Radio"].ToString()>
									<label for="natural-sof-50-100">$50K TO $100K</label>
								</span>
								<span class="radio-custom radio-primary">
									<input type="radio" id="natural-sof-100-200" name="customerSourceOfFunds.Natural_AnnualIncome" value="$100K TO $200K" @ViewData["NaturalSOFAnnualIncome100to200Radio"].ToString()>
									<label for="natural-sof-100-200">$100K TO $200K</label>
								</span>
								<span class="radio-custom radio-primary">
									<input type="radio" id="natural-sof-200-500" name="customerSourceOfFunds.Natural_AnnualIncome" value="$200K TO $500K" @ViewData["NaturalSOFAnnualIncome200to500Radio"].ToString()>
									<label for="natural-sof-200-500">$200K TO $500K</label>
								</span>
								<span class="radio-custom radio-primary">
									<input type="radio" id="natural-sof-500" name="customerSourceOfFunds.Natural_AnnualIncome" value="ABOVE $500K" @ViewData["NaturalSOFAnnualIncomeAbove500Radio"].ToString()>
									<label for="natural-sof-500">ABOVE $500K</label>
								</span>
								@Html.ValidationMessageFor(cs => customerSourceOfFunds.Natural_AnnualIncome)
							</div>
						</div>
						<div class="form-group">
							<label class="col-sm-3 control-label">Politically Exposed Individuals: </label>
							@Html.LabelFor(cs => customerSourceOfFunds.Natural_PoliticallyExposedIndividuals_1, new { @class = "col-sm-9" })
							<div class="col-sm-9 col-sm-offset-3">
								<span class="radio-custom radio-primary radio-inline">
									<input type="radio" id="natural-q1-yes" name="customerSourceOfFunds.Natural_PoliticallyExposedIndividuals_1" value="Yes" @ViewData["NaturalSOFPoliticallyExposedIndividualsYesRadio_1"].ToString()>
									<label for="natural-q1-yes">Yes</label>
								</span>
								<span class="radio-custom radio-primary radio-inline">
									<input type="radio" id="natural-q1-no" name="customerSourceOfFunds.Natural_PoliticallyExposedIndividuals_1" value="No" @ViewData["NaturalSOFPoliticallyExposedIndividualsNoRadio_1"].ToString()>
									<label for="natural-q1-no">No</label>
								</span>
								<br />
								@Html.ValidationMessageFor(cs => customerSourceOfFunds.Natural_PoliticallyExposedIndividuals_1)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cs => customerSourceOfFunds.Natural_PoliticallyExposedIndividuals_2, new { @class = "col-sm-9 col-sm-offset-3" })
							<div class="col-sm-9 col-sm-offset-3">
								<span class="radio-custom radio-primary radio-inline">
									<input type="radio" id="natural-q2-yes" name="customerSourceOfFunds.Natural_PoliticallyExposedIndividuals_2" value="Yes" @ViewData["NaturalSOFPoliticallyExposedIndividualsYesRadio_2"].ToString()>
									<label for="natural-q2-yes">Yes</label>
								</span>
								<span class="radio-custom radio-primary radio-inline">
									<input type="radio" id="natural-q2-no" name="customerSourceOfFunds.Natural_PoliticallyExposedIndividuals_2" value="No" @ViewData["NaturalSOFPoliticallyExposedIndividualsNoRadio_2"].ToString()>
									<label for="natural-q2-no">No</label>
								</span>
								<br />
								@Html.ValidationMessageFor(cs => customerSourceOfFunds.Natural_PoliticallyExposedIndividuals_2)
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(cs => customerSourceOfFunds.Natural_PoliticallyExposedIndividuals_3, new { @class = "col-sm-9 col-sm-offset-3" })
							<div class="col-sm-9 col-sm-offset-3">
								<span class="radio-custom radio-primary radio-inline">
									<input type="radio" id="natural-q3-yes" name="customerSourceOfFunds.Natural_PoliticallyExposedIndividuals_3" value="Yes" @ViewData["NaturalSOFPoliticallyExposedIndividualsYesRadio_3"].ToString()>
									<label for="natural-q3-yes">Yes</label>
								</span>
								<span class="radio-custom radio-primary radio-inline">
									<input type="radio" id="natural-q3-no" name="customerSourceOfFunds.Natural_PoliticallyExposedIndividuals_3" value="No" @ViewData["NaturalSOFPoliticallyExposedIndividualsNoRadio_3"].ToString()>
									<label for="natural-q3-no">No</label>
								</span>
								<br />
								@Html.ValidationMessageFor(cs => customerSourceOfFunds.Natural_PoliticallyExposedIndividuals_3)
							</div>
						</div>
					</div>
					<!--End of Natural Source of Fund-->
				</div>
			</div>
		</div>
	</div>
	<!--End of Customer Source of Fund-->

	<!--Customer Sanctions and PEP Screening Report-->
	<div class="panel">
		<div class="panel-body container-fluid">
			<div class="row row-lg">
				<div class="col-xlg-10 col-md-10">
					<h4>Sanctions and PEP Screening Report</h4>
					<div class="form-group">
						@Html.Label("Date:", new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							@Html.TextBox("ScreeningReport_Date", DateTime.Now.ToString("dd/MM/yyyy"), new { @class = "form-control" })
						</div>
					</div>
					<div class="form-group">
						@Html.Label("Date of ACRA:", new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							@Html.TextBox("ScreeningReport_DateOfAcra", DateTime.Now.ToString("dd/MM/yyyy"), new { @class = "form-control" })
						</div>
					</div>
					<div class="form-group">
						@Html.Label("Screened By:", new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							@Html.TextBox("ScreeningReport_ScreenedBy", null, new { @class = "form-control" })
						</div>
					</div>
					<div class="form-group">
						<div class="col-sm-9 col-sm-offset-3">
							<span class="checkbox-custom checkbox-primary">
								<input class="form-control" type="checkbox" id="screening-report-1" name="ScreeningReport_1" value="Yes" checked>
								<label for="screening-report-1">Screening of all Directors, Secretary and Shareholders on Acra</label>
							</span>
							<span class="checkbox-custom checkbox-primary">
								<input class="form-control" type="checkbox" id="screening-report-2" name="ScreeningReport_2" value="Yes" checked>
								<label for="screening-report-2">Screening of all Authorized Persons in Account Opening Form and/or Update Form</label>
							</span>
						</div>
					</div>
					<div class="form-group">
						@Html.Label("Remarks :", new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							@Html.TextArea("ScreeningReport_Remarks", null, new { @class = "form-control" })
						</div>
					</div>
					<div class="form-group">
						<div class="col-sm-9 col-sm-offset-3">
							<button type="button" class="btn btn-success" onclick="AddScreeningReport()">Add Screening Report</button>
						</div>
					</div>
					<div class="col-sm-12 table-responsive">
						<table id="pep-screening-report-table" class="table table-hover table-condensed table-bordered" data-striped="true" data-height="250" data-mobile-responsive="true">
							<thead>
								<tr>
									<th>Date</th>
									<th>Date of ACRA</th>
									<th>Screened By</th>
									<th>Screening Report</th>
									<th>Remarks</th>
									<th>Action</th>
								</tr>
							</thead>
							<tbody>
								@if (ViewData["PEPScreeningReports"] != null)
								{
									List<string> screeningReports = (List<string>)ViewData["PEPScreeningReports"];

									int rowCount = 1;

									foreach (string report in screeningReports)
									{
										string[] r = report.Split('|');

										<tr id="pep-screening-report-tr-@rowCount">
											<td>
												@Html.Hidden("PEPScreeningReport_Date_" + rowCount, r[0])@r[0] <br />
												@Html.ValidationMessage("PEPScreeningReport_Date_" + rowCount)
											</td>
											<td>
												@Html.Hidden("PEPScreeningReport_DateOfAcra_" + rowCount, r[1])@r[1] <br />
												@Html.ValidationMessage("PEPScreeningReport_DateOfAcra_" + rowCount)
											</td>
											<td>
												@Html.Hidden("PEPScreeningReport_ScreenedBy_" + rowCount, r[2])@r[2] <br />
												@Html.ValidationMessage("PEPScreeningReport_ScreenedBy_" + rowCount)
											</td>
											<td>
												@{
													string screeningReport1 = "wb-check";
													string screeningReport2 = "wb-check";

													if (r[3] != "Yes")
													{
														screeningReport1 = "wb-close";
													}

													if (r[4] != "Yes")
													{
														screeningReport2 = "wb-close";
													}
												}

												<div class="margin-bottom-15">
													<i class="icon @screeningReport1"></i> @("Screening of all Directors, Secretary and Shareholders on Acra")
													@Html.Hidden("PEPScreeningReport_ScreeningReport1_" + rowCount, r[3])
												</div>
												<div class="margin-bottom-15">
													<i class="icon @screeningReport2"></i> @("Screening of all Authorized Persons in Account Opening Form and/or Update Form")
													@Html.Hidden("PEPScreeningReport_ScreeningReport2_" + rowCount, r[4])
												</div>
											</td>
											<td>@Html.Hidden("PEPScreeningReport_Remarks_" + rowCount, r[5])@r[5]</td>
											<td>
												<button id="pep-screening-report-btn-remove-@rowCount" type="button" class="btn btn-pure btn-xs btn-danger icon wb-close" data-toggle="tooltip" data-original-title="Remove Screening Report" onclick="RemoveScreeningReport(@rowCount)"></button>
											</td>
										</tr>
										rowCount++;
									}
								}
							</tbody>
						</table>
					</div>
					<div class="form-group">
						@Html.LabelFor(co => customerOthers.ScreeningResults, new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							@Html.DropDownListFor(co => customerOthers.ScreeningResults, (SelectList)ViewData["ScreeningResultsDropdown"], new { @class = "form-control" })
							@Html.ValidationMessageFor(co => customerOthers.ScreeningResults)
						</div>
					</div>
					<div class="form-group">
						@if (ViewData["ScreeningResultsDocument"] != null)
						{
							@Html.LabelFor(co => customerOthers.ScreeningResultsDocument, new { @class = "col-sm-3 control-label", @id = "screening-results-document-label" })
						}
						else
						{
							@Html.LabelFor(co => customerOthers.ScreeningResultsDocument, new { @class = "col-sm-3 control-label red-800", @id = "screening-results-document-label" })
						}
						<div class="col-sm-9">
							<div class="input-group input-group-file">
								<input type="text" class="form-control" readonly="">
								<span class="input-group-btn">
									<span class="btn btn-primary btn-file">
										<i class="icon wb-upload" aria-hidden="true"></i>
										<input id="screening-results-document-uploader" type="file" multiple>
										@Html.HiddenFor(co => customerOthers.ScreeningResultsDocument)
									</span>
								</span>
							</div>
							<span class="help-block"><i class="wb-info-circle"></i> Accepts .jpg, .png, .pdf, .doc, .xls format</span>
							<div id="screening-results-document-files">
								@if (ViewData["ScreeningResultsDocument"] != null)
								{
									string[] files = ViewData["ScreeningResultsDocument"].ToString().Split(',');
									foreach (string file in files)
									{
										<div class="margin-top-10 small">
											<a href="@Url.Content("~/FileUploads/Temp/" + file)" target="_blank">@file</a>
											<button type="button" class="btn btn-pure btn-xs btn-danger icon wb-close" onclick="RemoveScreeningResultsDocument(this)"></button>
										</div>
									}
								}
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
	<!--End of Customer Sanctions and PEP Screening Report-->

	<!--Customer Others-->
	<div class="panel">
		<div class="panel-body container-fluid">
			<div class="row row-lg">
				<div class="col-xlg-10 col-md-10">
					<h4>Others</h4>
					<div class="form-group">
						@Html.LabelFor(co => customerOthers.Status, new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							@Html.TextBoxFor(co => customerOthers.Status, new { @class = "form-control", @disabled = "disabled", Value = "Pending Approval" })
						</div>
					</div>
					<div class="form-group">
						@Html.LabelFor(co => customerOthers.ApprovalBy, new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							@Html.TextBoxFor(co => customerOthers.ApprovalBy, new { @class = "form-control", @disabled = "disabled", Value = Session["UserName"].ToString() })
						</div>
					</div>

					<div class="form-group">
						@Html.LabelFor(co => customerOthers.Grading, new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							@Html.DropDownListFor(co => customerOthers.Grading, (SelectList)ViewData["GradingDropdown"], new { @class = "form-control", @onchange = "GradingChange()" })
							@Html.ValidationMessageFor(co => customerOthers.Grading)
						</div>
					</div>
					<div class="form-group">
						@Html.LabelFor(co => customerOthers.NextReviewDate, new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							@Html.TextBoxFor(co => customerOthers.NextReviewDate, new { @class = "form-control", @onchange = "NextReviewDateChange()" })
							@Html.ValidationMessageFor(co => customerOthers.NextReviewDate)
						</div>
					</div>
					<div class="form-group">
						@Html.LabelFor(co => customerOthers.AcraExpiry, new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							@Html.TextBoxFor(co => customerOthers.AcraExpiry, new { @class = "form-control" })
							@Html.ValidationMessageFor(co => customerOthers.AcraExpiry)
						</div>
					</div>
					<div class="form-group">
						@Html.LabelFor(co => customerOthers.GMApprovalAbove, new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							<div class="input-group">
								<span class="input-group-addon">$</span>
								@Html.TextBoxFor(co => customerOthers.GMApprovalAbove, new { @class = "form-control" })
							</div>
							@Html.ValidationMessageFor(co => customerOthers.GMApprovalAbove)
							<span class="help-block"><i class="wb-info-circle"></i> Use 0 for no approval needed for any amount</span>
						</div>
					</div>
					<div class="form-group">
						@Html.LabelFor(co => customerOthers.CustomerProfile, new { @class = "col-sm-3 control-label" })
						<div class="col-sm-9">
							@Html.DropDownListFor(co => customerOthers.CustomerProfile, (SelectList)ViewData["CustomerProfileDropdown"], new { @class = "form-control" })
							@Html.ValidationMessageFor(co => customerOthers.CustomerProfile)
						</div>
					</div>

					<div class="form-group">
						<label class="col-sm-3 control-label">Custom Rate</label>
						<div class="col-sm-9 table-responsive">
							<table id="custom-rate-table" class="table table-hover table-condensed table-bordered" data-striped="true" data-height="250" data-mobile-responsive="true">
								<thead>
									<tr>
										<th>Currency</th>
										<th>Default Rate</th>
										<th>Buy Rate Adjustment</th>
										<th>Buy Rate (Calculated)</th>
										<th>Sell Rate Adjustment</th>
										<th>Sell Rate (Calculated)</th>
										<th>Encashment Rate</th>
									</tr>
								</thead>
								<tbody>
									@{
										List<string> customRates = (List<string>)ViewData["CustomRates"];

										if (customRates.Count > 0)
										{
											int count = 1;

											foreach (string rate in customRates)
											{
												string[] data = rate.Split('|');

												<tr>
													<td>@Html.Hidden("CustomProduct_" + data[0], data[0]) @Html.Hidden("CustomProductCode_" + data[0], data[1]) @data[1]</td>
													<td>
														<span class="checkbox-custom checkbox-primary">
															<input class="selectable-item" type="checkbox" id="default-rate-@data[0]" name="default-rate-@data[0]" @data[5] onclick="DefaultRateChange(this, @data[0])">
															<label for="default-rate-@data[0]"></label>
														</span>
													</td>
													@if (data[5] == "checked")
													{
														<td id="custom-buy-rate-@data[0]">
															@Html.TextBox("CustomBuyRate_" + data[0], data[2], new { @class = "form-control", @disabled = "disabled", @onkeyup = "CalculateBuyRate(this," + @data[0] + ")" })
															@Html.Hidden("CustomBuyRate_" + data[0], data[2])
															@Html.Hidden("CustomBuyRateDefault_" + data[0], data[6])
															@Html.ValidationMessage("CustomBuyRate_" + data[0])
														</td>
														<td id="custom-buy-rateCalculated-@data[0]">
															@Html.TextBox("CustomBuyRateCalculated_" + data[0], "", new { @class = "form-control", @disabled = "disabled" })
														</td>
														<td id="custom-sell-rate-@data[0]">
															@Html.TextBox("CustomSellRate_" + data[0], data[3], new { @class = "form-control", @disabled = "disabled", @onkeyup = "CalculateSellRate(this," + @data[0] + ")" })
															@Html.Hidden("CustomSellRate_" + data[0], data[3])
															@Html.Hidden("CustomSellRateDefault_" + data[0], data[7])
															@Html.ValidationMessage("CustomSellRate_" + data[0])
														</td>
														<td id="custom-sell-rateCalculated-@data[0]">
															@Html.TextBox("CustomSellRateCalculated_" + data[0], "", new { @class = "form-control", @disabled = "disabled" })
														</td>
														<td id="custom-encashment-rate-@data[0]">
															@Html.TextBox("CustomEncashmentRate_" + data[0], data[4], new { @class = "form-control", @disabled = "disabled", @onchange = "RateChange(this)" })
															@Html.Hidden("CustomEncashmentRate_" + data[0], data[4])
															@Html.ValidationMessage("CustomEncashmentRate_" + data[0])
														</td>
													}
													else
													{
														<td id="custom-buy-rate-@data[0]">
															@Html.TextBox("CustomBuyRate_" + data[0], data[2], new { @class = "form-control", @onkeyup = "CalculateBuyRate(this," + @data[0] + ")" })
															@Html.Hidden("CustomBuyRateDefault_" + data[0], data[6])
															@Html.ValidationMessage("CustomBuyRate_" + data[0])
														</td>
														<td id="custom-buy-rateCalculated-@data[0]">

															@Html.TextBox("CustomBuyRateCalculated_" + data[0], string.IsNullOrEmpty(data[2]) ? "0" : !Decimal.TryParse(data[2], out num) ? "0" : ((Convert.ToDecimal(data[6])) * (1 + Convert.ToDecimal(data[2]))).ToString(), new { @class = "form-control", @disabled = "disabled" })

														</td>
														<td id="custom-sell-rate-@data[0]">
															@Html.TextBox("CustomSellRate_" + data[0], data[3], new { @class = "form-control", @onkeyup = "CalculateSellRate(this," + @data[0] + ")" })
															@Html.Hidden("CustomSellRateDefault_" + data[0], data[7])
															@Html.ValidationMessage("CustomSellRate_" + data[0])
														</td>
														<td id="custom-sell-rateCalculated-@data[0]">
															@Html.TextBox("CustomSellRateCalculated_" + data[0], string.IsNullOrEmpty(data[3]) ? "0" : !Decimal.TryParse(data[3], out num) ? "0" : ((Convert.ToDecimal(data[7])) * (1 + Convert.ToDecimal(data[3]))).ToString(), new { @class = "form-control", @disabled = "disabled" })
														</td>
														<td id="custom-encashment-rate-@data[0]">
															@Html.TextBox("CustomEncashmentRate_" + data[0], data[4], new { @class = "form-control", @onchange = "RateChange(this)" })
															@Html.ValidationMessage("CustomEncashmentRate_" + data[0])
														</td>
													}
												</tr>
												count++;
											}
										}
										else
										{
											<tr>
												<td class="no-records-found" colspan="7">No record to display</td>
											</tr>
										}
									}
								</tbody>
							</table>
						</div>
					</div>

					<!-- Remittane Product Custom Rate -->
					<div class="form-group">
						<label class="col-sm-3 control-label">Remittance Products Custom Rate</label>
						<div class="col-sm-9 table-responsive">
							<table id="custom-rate-table" class="table table-hover table-condensed table-bordered" data-striped="true" data-height="250" data-mobile-responsive="true">
								<thead>
									<tr>
										<th>Currency</th>
										<th>Default Rate</th>
										<th>Pay Rate Adjustment</th>
										<th>Pay Rate (Calculated)</th>
										<th>Get Rate Adjustment</th>
										<th>Get Rate (Calculated)</th>
										<th>Transaction Fee</th>
									</tr>
								</thead>
								<tbody>
									@{
										List<string> remittanceProductsCustomRate = (List<string>)ViewData["remittanceProductCustomFees"];

										if (remittanceProductsCustomRate.Count > 0)
										{
											int count = 1;

											foreach (string r in remittanceProductsCustomRate)
											{
												string[] data = r.Split('|');

												<tr>
													<td>@Html.Hidden("RemittanceProducts_" + data[0], data[0]) @Html.Hidden("RemittanceProductsCustomFeeCode_" + data[0], data[1]) @data[1]</td>
													<td>
														<span class="checkbox-custom checkbox-primary">
															<input class="selectable-item" type="checkbox" id="default-fee-@data[0]" name="default-fee-@data[0]" @data[3] onclick="DefaultFeeChange(this, @data[0])">
															<label for="default-fee-@data[0]"></label>
														</span>
													</td>
													@if (data[3] == "checked")
													{
														<td id="custom-rbuy-rate-@data[0]">
															@Html.TextBox("RemittanceProductsCustomBuyRate_" + data[0], data[4], new { @class = "form-control", @disabled = "disabled", @onkeyup = "CalculateRemittanceBuyRate(this," + @data[0] + ")" })
															@Html.Hidden("RemittanceProductsCustomBuyRate_" + data[0], data[4])
															@Html.Hidden("RemittanceProductsCustomBuyRateDefault_" + data[0], data[6])
															@Html.ValidationMessage("RemittanceProductsCustomBuyRate__" + data[0])
														</td>
														<td id="custom-rbuy-rateCalculated-@data[0]">
															@Html.TextBox("RemittanceProductsCustomBuyRateCalculated_" + data[0], "", new { @class = "form-control", @disabled = "disabled" })
														</td>
														<td id="custom-rsell-rate-@data[0]">
															@Html.TextBox("RemittanceProductsCustomSellRate_" + data[0], data[5], new { @class = "form-control", @disabled = "disabled", @onkeyup = "CalculateRemittanceSellRate(this," + @data[0] + ")" })
															@Html.Hidden("RemittanceProductsCustomSellRate_" + data[0], data[5])
															@Html.Hidden("RemittanceProductsCustomSellRateDefault_" + data[0], data[7])
															@Html.ValidationMessage("RemittanceProductsCustomSellRate_" + data[0])
														</td>
														<td id="custom-rsell-rateCalculated-@data[0]">
															@Html.TextBox("RemittanceProductsCustomSellRateCalculated_" + data[0], "", new { @class = "form-control", @disabled = "disabled" })
														</td>
														<td id="custom-fee-@data[0]">
															@Html.TextBox("RemittanceProductsCustomFee_" + data[0], data[2], new { @class = "form-control", @disabled = "disabled", @onchange = "FeeChange(this)" })
															@Html.Hidden("RemittanceProductsCustomFee_" + data[0], data[2])
															@Html.ValidationMessage("RemittanceProductsCustomFee_" + data[0])
														</td>
													}
													else
													{
														<td id="custom-rbuy-rate-@data[0]">
															@Html.TextBox("RemittanceProductsCustomBuyRate_" + data[0], data[4], new { @class = "form-control", @onkeyup = "CalculateRemittanceBuyRate(this," + @data[0] + ")" })
															@Html.Hidden("RemittanceProductsCustomBuyRateDefault_" + data[0], data[6])
															@Html.ValidationMessage("RemittanceProductsCustomBuyRate_" + data[0])
														</td>
														<td id="custom-rbuy-rateCalculated-@data[0]">
															@Html.TextBox("RemittanceProductsCustomBuyRateCalculated_" + data[0], string.IsNullOrEmpty(data[4]) ? "0" : !Decimal.TryParse(data[2], out num) ? "0" : ((Convert.ToDecimal(data[6])) * (1 - Convert.ToDecimal(data[4]))).ToString(), new { @class = "form-control", @disabled = "disabled" })
														</td>
														<td id="custom-rsell-rate-@data[0]">
															@Html.TextBox("RemittanceProductsCustomSellRate_" + data[0], data[5], new { @class = "form-control", @onkeyup = "CalculateRemittanceSellRate(this," + @data[0] + ")" })
															@Html.Hidden("RemittanceProductsCustomSellRateDefault_" + data[0], data[7])
															@Html.ValidationMessage("RemittanceProductsCustomSellRate_" + data[0])
														</td>
														<td id="custom-rsell-rateCalculated-@data[0]">
															@Html.TextBox("RemittanceProductsCustomSellRateCalculated_" + data[0], string.IsNullOrEmpty(data[5]) ? "0" : !Decimal.TryParse(data[5], out num) ? "0" : ((Convert.ToDecimal(data[7])) * (1 + Convert.ToDecimal(data[5]))).ToString(), new { @class = "form-control", @disabled = "disabled" })
														</td>
														<td id="custom-fee-@data[0]">
															@Html.TextBox("RemittanceProductsCustomFee_" + data[0], data[2], new { @class = "form-control", @onchange = "FeeChange(this)" })
															@Html.ValidationMessage("RemittanceProductsCustomFee_" + data[0])
														</td>
													}
												</tr>
												count++;
											}
										}
										else
										{
											<tr>
												<td class="no-records-found" colspan="3">No record to display</td>
											</tr>
										}
									}
								</tbody>
							</table>
						</div>
					</div>
					<!-- End Remittance Product Custom Rate -->
					<div class="form-group">
						<div class="col-sm-9">
							<button type="button" class="btn btn-primary" id="disable_button" onclick="disableButton()">Save</button>
							<a href="@Url.Action("Create")" class="btn btn-default btn-outline">Reset</a>
							@{
								int page = 1;

								if (ViewData["Page"] != null)
								{
									page = Convert.ToInt32(ViewData["Page"]);
								}
							}
							<a href="@Url.Action("Listing", new { @page = page })" class="btn btn-default">Back</a>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
	<!--End of Customer Others-->
}

<link rel="stylesheet" href="@Url.Content("~/Content/vendor/bootstrap-datepicker/css/bootstrap-datepicker.css")">
<script src="@Url.Content("~/Content/vendor/bootstrap-datepicker/js/bootstrap-datepicker.js")"></script>

<script>
    function AddBankAccountNo() {
        $("#btn-add-bank-account-no").attr("disabled", "disabled");

        var rowId = 1;
        if ($("#table-bank-account-no tbody tr").length > 0) {
            rowId = parseInt($("#table-bank-account-no tbody tr:last")[0].id.split("-")[4]) + 1;
        }

        var $tr = $("<tr></tr>").attr("id", "tr-bank-account-no-" + rowId);

        var $td1 = $("<td></td>");
        var $textbox = $("<input type='text' class='form-control' />").attr("id", "BankAccountNo_" + rowId).attr("name", "BankAccountNo_" + rowId);
        $td1.append($textbox);

        var $td2 = $("<td style='text-align:center;vertical-align:middle;'></td>");
        var $button = $("<button type='button' class='btn btn-xs btn-round btn-danger btn-icon' data-toggle='tooltip' data-original-title='Remove'><i class='icon wb-close'></i></button>").attr("onclick", "RemoveBankAccountNo(" + rowId + ")");
        $td2.append($button);

        $tr.append($td1).append($td2);
        $("#table-bank-account-no tbody").append($tr);
        $button.tooltip();

        $("#btn-add-bank-account-no").removeAttr("disabled");
    }

    function RemoveBankAccountNo(rowId) {
        $("#tr-bank-account-no-" + rowId).remove();
    }

	$(document).ready(function ()
	{
		var date = new Date();
		var getDate = '@ViewData["CustomerDOB"]';
		var today = new Date(date.getFullYear(), date.getMonth(), date.getDate());

		if (getDate != "")
		{
			today = getDate;
		}

		$('#dob-datepicker').datepicker({
			calendarWeeks: true,
			todayHighlight: true,
			autoclose: true,
			endDate: '+0d',
			format: 'dd-mm-yyyy',
			startView: 2
		}).datepicker("setDate", today);

		//Set Others to last
		//$("#Country").find("option[value='48']").appendTo($("#Country"));
		$("#Country").find("option:contains('Others')").appendTo($("#Country"));

		var CompanysourceOfFund = '@ViewData["CompanySourceOfFund"]'.replace(/&#39;/g, "'").split(',');

		$('#Company_source_of_fund').selectpicker();
		$('#Company_source_of_fund').selectpicker('val', CompanysourceOfFund);

		for (var i = 0; i < CompanysourceOfFund.length; i++)
		{
			if (CompanysourceOfFund[i] == "Others")
			{
				if ($('#customerSourceOfFunds_Company_SourceOfFundIfOthers').prop('disabled'))
				{
					$("#customerSourceOfFunds_Company_SourceOfFundIfOthers").prop("disabled", false);
				}
			}
			else
			{
				if (!$('#customerSourceOfFunds_Company_SourceOfFundIfOthers').prop('disabled'))
				{
					$("#customerSourceOfFunds_Company_SourceOfFundIfOthers").prop("disabled", true);
				}
			}
		}

		//Natural Source of fund
		var NaturalsourceOfFund = '@ViewData["NaturalSourceOfFund"]'.replace(/&#39;/g, "'").split(',');

		$('#Natural_source_of_fund').selectpicker();
		$('#Natural_source_of_fund').selectpicker('val', NaturalsourceOfFund);

		for (var i = 0; i < NaturalsourceOfFund.length; i++)
		{
			if (NaturalsourceOfFund[i] == "Others")
			{
				if ($('#customerSourceOfFunds_Natural_SourceOfFundIfOthers').prop('disabled'))
				{
					$("#customerSourceOfFunds_Natural_SourceOfFundIfOthers").prop("disabled", false);
				}
			}
			else
			{
				if (!$('#customerSourceOfFunds_Natural_SourceOfFundIfOthers').prop('disabled'))
				{
					$("#customerSourceOfFunds_Natural_SourceOfFundIfOthers").prop("disabled", true);
				}
			}
		}

		//preselect Title when postback
		var getTitle = '@ViewData["CustomerTitle"]';

		//this is for postback used, if getTitle is empty means it is initial data load.
		if (getTitle != "")
		{
			$('#Customer_Title').val(getTitle);
			$('#Customer_Title').trigger('change'); // Notify any JS components that the value changed
		}

		//preselect Title when postback
		var getCountry = '@ViewData["CustomerCountry"]';

		//this is for postback used, if getTitle is empty means it is initial data load.
		if (getCountry != 0) {
			$('#Country').val(getCountry);
			$('#Country').trigger('change'); // Notify any JS components that the value changed
		}
		else
		{
			$('#Country').val(9);
			$('#Country').trigger('change'); // Notify any JS components that the value changed
		}

		//preselect Title when postback
		var getCountryCode = '@ViewData["CustomerCountryCode"]';

		//this is for postback used, if getTitle is empty means it is initial data load.
		if (getCountryCode != 0) {
			$('#CountryCode').val(getCountryCode);
			$('#CountryCode').trigger('change'); // Notify any JS components that the value changed
		}
		else
		{
			$('#CountryCode').val(196);
			$('#CountryCode').trigger('change'); // Notify any JS components that the value changed
		}

		var Companyservice = '@ViewData["CompanyServiceLikeToUse"]'.split(',');

		if (Companyservice != '')
		{
			$('#Company_service_like_to_use').selectpicker();
			$('#Company_service_like_to_use').selectpicker('val', Companyservice);
		}

		//Purpose of Intended Transactions
		var cpoit = '@ViewData["CompanyPurposeOfIntendedTransactions"]';

		if (cpoit != '')
		{
			$('#Company_purpose_of_intended_transactions').selectpicker();
			$('#Company_purpose_of_intended_transactions').selectpicker('val', cpoit);
		}

		//hear about us
		var chau = '@ViewData["CompanyHearAboutUs"]'.split(',');

		if (chau != '')
		{
			$('#Company_hear_about_us').selectpicker();
			$('#Company_hear_about_us').selectpicker('val', chau);
		}

		var Naturalservice = '@ViewData["NaturalServiceLikeToUse"]'.split(',');

		if (Naturalservice != '')
		{
			$('#Natural_service_like_to_use').selectpicker();
			$('#Natural_service_like_to_use').selectpicker('val', Naturalservice);
		}

		//Purpose of Intended Transactions
		var npoit = '@ViewData["NaturalPurposeOfIntendedTransactions"]';

		if (npoit != '')
		{
			$('#Natural_purpose_of_intended_transactions').selectpicker();
			$('#Natural_purpose_of_intended_transactions').selectpicker('val', npoit);
		}

		//hear about us
		var nhau = '@ViewData["NaturalHearAboutUs"]'.split(',');

		if (nhau != '')
		{
			$('#Natural_hear_about_us').selectpicker();
			$('#Natural_hear_about_us').selectpicker('val', nhau);
		}

        TypeOfEntityChange($("#customerParticulars_Company_TypeOfEntity")[0]);
        //CompanySourceOfFundOtherChange($("#company-sof-others")[0]);
        //NaturalSourceOfFundOtherChange($("#natural-sof-others")[0]);

        $("#customerParticulars_Company_DateOfRegistration, #customerParticulars_Natural_DOB, #customerActingAgents_Company_DateOfRegistration, #customerActingAgents_Natural_DOB, #customerOthers_NextReviewDate, #customerOthers_AcraExpiry, #ScreeningReport_Date, #ScreeningReport_DateOfAcra").datepicker({
            autoclose: true,
            format: "dd/mm/yyyy"
        });

        var autoFillReviewDate = "@ViewData["AutoFillNextReviewDate"]";

        if (autoFillReviewDate == "True") {
            GradingChange();
		}

		//Is Main Account Part
		$('#MainAccountCustomer').select2();
		var MainAccountValue = $('#customerParticulars_IsSubAccount').val();
		IsMainAccountChange(MainAccountValue);

		//Has Customer Account Part
		var HasCustomerAccountValue = $('#customerParticulars_hasCustomerAccount').val();
		HasCustomerAccountChange(HasCustomerAccountValue);

	});

	function IsMainAccountChange(id)
	{
		//0 = main account, hide main account customer dropdown
		if (id == 0)
		{
			$("#is-sub-account-div").hide();
			$("#customerParticulars_Company_RegisteredName").prop("readonly", false);
			$("#customerParticulars_Company_BusinessAddress1").prop("readonly", false);
			$("#customerParticulars_Company_BusinessAddress2").prop("readonly", false);
			$("#customerParticulars_Company_BusinessAddress3").prop("readonly", false);
			$("#customerParticulars_Company_PostalCode").prop("readonly", false);
			$("#customerParticulars_Shipping_Address1").prop("readonly", false);
			$("#customerParticulars_Shipping_Address2").prop("readonly", false);
			$("#customerParticulars_Shipping_Address3").prop("readonly", false);
			$("#customerParticulars_Shipping_PostalCode").prop("readonly", false);
			$('#Country').prop("disabled", false);
			if ($('#Country').val() == null)
			{
				$('#Country').val($("#Country option:first").val()).trigger('change');
			}

			$('#CountryCode').prop("disabled", false);
			if ($('#CountryCode').val() == null)
			{
				$('#CountryCode').val($("#CountryCode option:first").val()).trigger('change');
			}

			$("#customerParticulars_Company_TelNo").prop("readonly", false);
			$("#customerParticulars_Company_FaxNo").prop("readonly", false);
			$("#customerParticulars_Company_PlaceOfRegistration").prop("readonly", false);
			$("#customerParticulars_Company_DateOfRegistration").prop("disabled", false);
			$("#customerParticulars_Company_RegistrationNo").prop("readonly", false);
			$("#customerParticulars_Company_TypeOfEntity").prop("disabled", false);
			$("#customerParticulars_Company_TypeOfEntityIfOthers").prop("readonly", false);
		}
		else
		{
			$("#is-sub-account-div").show();
			LoadThisCustomerOnChange();

			//Update all the Company Fields to be readonly type.
			$("#customerParticulars_Company_RegisteredName").prop("readonly", true);
			$("#customerParticulars_Company_BusinessAddress1").prop("readonly", true);
			$("#customerParticulars_Company_BusinessAddress2").prop("readonly", true);
			$("#customerParticulars_Company_BusinessAddress3").prop("readonly", true);
			$("#customerParticulars_Company_PostalCode").prop("readonly", true);
			$("#customerParticulars_Shipping_Address1").prop("readonly", true);
			$("#customerParticulars_Shipping_Address2").prop("readonly", true);
			$("#customerParticulars_Shipping_Address3").prop("readonly", true);
			$("#customerParticulars_Shipping_PostalCode").prop("readonly", true);
			$('#Country').prop("disabled", true);
			$('#CountryCode').prop("disabled", true);
			$("#customerParticulars_Company_TelNo").prop("readonly", true);
			$("#customerParticulars_Company_FaxNo").prop("readonly", true);
			$("#customerParticulars_Company_PlaceOfRegistration").prop("readonly", true);
			$("#customerParticulars_Company_DateOfRegistration").prop("disabled", true);
			$("#customerParticulars_Company_RegistrationNo").prop("readonly", true);
			$("#customerParticulars_Company_TypeOfEntity").prop("disabled", true);
			$("#customerParticulars_Company_TypeOfEntityIfOthers").prop("readonly", true);
		}
	}

	function HasCustomerAccountChange(id) {
		//1 = has customer account, show password field
		//0 = no customer account, hide password field
		if (id == 0) {
			$("#has-customer-account-div").hide();
		}
		else
		{
			$("#has-customer-account-div").show();
		}
	}

	function CustomerTypeForm()
	{
        var type = $("#customerParticulars_CustomerType").val();

		if (type == "Corporate & Trading Company")
		{
            $(".company").show();
			$(".natural").hide();
			$("#is-corporate-type-div").show();
        }
		else
		{
            $(".company").hide();
			$(".natural").show();
			$("#is-corporate-type-div").hide();
			$("#customerParticulars_IsSubAccount").val(0);
			$("#customerParticulars_IsSubAccount").trigger('change');
        }
    }

    function TypeOfEntityChange($this) {
        if ($this.value != "Others") {
            $("#customerParticulars_Company_TypeOfEntityIfOthers").attr("disabled", "disabled");
        }
        else {
            $("#customerParticulars_Company_TypeOfEntityIfOthers").removeAttr("disabled");
        }
    }

    $("#natural-employment-employed").on("click", function () {
        $(".natural-employed").show();
        $(".natural-self-employed").hide();
    });

    $("#natural-employment-self-employed").on("click", function () {
        $(".natural-employed").hide();
        $(".natural-self-employed").show();
    });

	//function CompanySourceOfFundOtherChange($this)
	//{
 //       if ($this.checked) {
 //           $("#customerSourceOfFunds_Company_SourceOfFundIfOthers").removeAttr("disabled");
 //       }
 //       else {
 //           $("#customerSourceOfFunds_Company_SourceOfFundIfOthers").attr("disabled", "disabled");
 //       }
 //   }

    //function NaturalSourceOfFundOtherChange($this) {
    //    if ($this.checked) {
    //        $("#customerSourceOfFunds_Natural_SourceOfFundIfOthers").removeAttr("disabled");
    //    }
    //    else {
    //        $("#customerSourceOfFunds_Natural_SourceOfFundIfOthers").attr("disabled", "disabled");
    //    }
    //}

    $("#acting-agent-yes").on("click", function () {
        $(".acting-agent-yes").show();
    });

    $("#acting-agent-no").on("click", function () {
        $(".acting-agent-yes").hide();
	});

	$('#Company_source_of_fund').change(function ()
	{
			var text = $('#Company_source_of_fund').val() + '';

			var textArr = text.replace(/&#39;/g, "'").split(',');

			for (var i = 0; i < textArr.length; i++)
			{
				if (textArr[i] == "Others")
				{
					if ($('#customerSourceOfFunds_Company_SourceOfFundIfOthers').prop('disabled'))
					{
						$("#customerSourceOfFunds_Company_SourceOfFundIfOthers").prop("disabled", false);
					}
				}
				else
				{
					if (!$('#customerSourceOfFunds_Company_SourceOfFundIfOthers').prop('disabled'))
					{
						$("#customerSourceOfFunds_Company_SourceOfFundIfOthers").prop("disabled", true);
					}
				}
			}
	});

	$('#Natural_source_of_fund').change(function ()
	{
			var text = $('#Natural_source_of_fund').val() + '';

			var textArr = text.replace(/&#39;/g, "'").split(',');

			for (var i = 0; i < textArr.length; i++)
			{
				if (textArr[i] == "Others")
				{
					if ($('#customerSourceOfFunds_Natural_SourceOfFundIfOthers').prop('disabled'))
					{
						$("#customerSourceOfFunds_Natural_SourceOfFundIfOthers").prop("disabled", false);
					}
				}
				else
				{
					if (!$('#customerSourceOfFunds_Natural_SourceOfFundIfOthers').prop('disabled'))
					{
						$("#customerSourceOfFunds_Natural_SourceOfFundIfOthers").prop("disabled", true);
					}
				}
			}
	});


    //Basis of Authority Uploads
    $("#basis-of-authority-uploader").on("change", function (e) {
        var $file = this,
        $formData = new FormData();
        if ($file.files.length > 0) {
            for (var i = 0; i < $file.files.length; i++) {
                $formData.append("file-" + i, $file.files[i]);
            }
        }
        $.ajax({
            url: "@Url.Action("FileUploader")",
            type: "POST",
            data: $formData,
            dataType: "json",
            contentType: false,
            processData: false,
            success: function ($data) {
                if ($data.result == "success") {
                    AppendBasisOfAuthorityFiles($data.msg);
                }
                else {
                    alertify.alert($data.msg);
                }
            },
            error: function (e) {
                alertify.alert("An error occured while uploading files!");
            }
        });
    });

    function AppendBasisOfAuthorityFiles(data) {
        var files = data.split(",");
        for (var i = 0; i < files.length; i++) {
            var $div = $("<div class='margin-top-10 small'></div>");
            //var $a = $("<a href='@Url.Content("~/FileUploads/Temp/")" + files[i] + "' target='_blank'>" + files[i] + "</a>");
            var $button = $("<button type='button' class='btn btn-pure btn-xs btn-danger icon wb-close' onclick='RemoveBasisOfAuthorityFile(this)'></button>");

			var $a = document.createElement('a');
			var linkText = document.createTextNode(files[i]);
			$a.appendChild(linkText);
			$a.title = files[i];
			$a.href = "@Url.Content("~/FileUploads/Temp/")" + files[i];
			$a.target = "_blank";
			document.body.appendChild($a);

            $("#basis-of-authority-files").append($div.append($a).append($button));
        }
        var uploadedFiles = $("#customerActingAgents_BasisOfAuthority").val();
        if (uploadedFiles != "") {
            uploadedFiles += ",";
        }
        $("#customerActingAgents_BasisOfAuthority").val(uploadedFiles + data);
    }

    function RemoveBasisOfAuthorityFile($this) {
        var files = $("#customerActingAgents_BasisOfAuthority").val().split(",");
        var newFiles = "";
        for (var i = 0; i < files.length; i++) {
            if (files[i] != $this.previousSibling.innerHTML) {
                newFiles += files[i] + ",";
            }
        }
        newFiles = newFiles.slice(0, newFiles.length - 1);
        $("#customerActingAgents_BasisOfAuthority").val(newFiles);
        $this.parentNode.remove();
    }

    //Specimen Signature Uploads
    @*$("#specimen-signature-uploader").on("change", function (e) {
        var $file = this,
        $formData = new FormData();
        if ($file.files.length > 0) {
            for (var i = 0; i < $file.files.length; i++) {
                $formData.append("file-" + i, $file.files[i]);
            }
        }
        $.ajax({
            url: "@Url.Action("FileUploader")",
            type: "POST",
            data: $formData,
            dataType: "json",
            contentType: false,
            processData: false,
            success: function ($data) {
                if ($data.result == "success") {
                    AppendSpecimenSignatureFiles($data.msg);
                }
                else {
                    alertify.alert($data.msg);
                }
            },
            error: function (e) {
                alertify.alert("An error occured while uploading files!");
            }
        });
    });

    function AppendSpecimenSignatureFiles(data) {
        var files = data.split(",");
        var $block = $("<div></div>");
        for (var i = 0; i < files.length; i++) {
            var $div = $("<div class='margin-top-10 small'></div>");
            var $a = $("<a href='@Url.Content("~/FileUploads/Temp/")" + files[i] + "' target='_blank'>" + files[i] + "</a>");
            var $button = $("<button type='button' class='btn btn-pure btn-xs btn-danger icon wb-close' onclick='RemoveSpecimenSignature(this)'></button>");

            $block.append($div.append($a).append($button));
        }
        $("#specimen-signature-files").html($block);
        $("#Specimen_Signature").val(data);
    }

    function RemoveSpecimenSignature($this) {
        var files = $("#Specimen_Signature").val().split(",");
        var newFiles = "";
        for (var i = 0; i < files.length; i++) {
            if (files[i] != $this.previousSibling.innerHTML) {
                newFiles += files[i] + ",";
            }
        }
        newFiles = newFiles.slice(0, newFiles.length - 1);
        $("#Specimen_Signature").val(newFiles);
        $this.parentNode.remove();
    }*@

    function AddPersonnel() {
        var fullname = $("#Appointment_FullName").val();
        var icpassport = $("#Appointment_ICPassportNo").val();
        var nationality = $("#Appointment_Nationality").val();
        var jobtitle = $("#Appointment_JobTitle").val();
        //var signature = $("#Specimen_Signature").val();
        var result = "";

        if (fullname == "") {
            result += "Full Name is required!<br/>";
        }

        if (icpassport == "") {
            result += "IC/Passport No is required!<br/>";
        }

        if (nationality == "") {
            result += "Nationality is required!<br/>";
        }

        if (jobtitle == "") {
            result += "Job Title is required!<br/>";
        }

        //if (signature == "") {
        //    result += "Specimen Signature is required!<br/>";
        //}

        if (result == "") {
            var url = "@Url.Action("AddPersonnel")";
            var count = 1;
            if ($("#appointment-staff-table tbody tr").length > 0) {
                count = parseInt($("#appointment-staff-table tbody tr:last")[0].id.split("_")[1]) + 1;
            }
            $.ajax({
                url: url,
                type: "GET",
                data: { fullname: fullname, icpassport: icpassport, nationality: nationality, jobtitle: jobtitle, count: count },
                success: function (data) {
                    $("#appointment-staff-table tbody").append(data);

                    //var fileCount = signature.split(",");

                    //for (var i = 1; i <= fileCount.length; i++) {
                    //    $("#personnel-download-" + count + "-" + i).tooltip();
                    //}
                    $("#personnel-remove-" + count).tooltip();

                    $("#Appointment_FullName").val("");
                    $("#Appointment_ICPassportNo").val("");
                    $("#Appointment_Nationality").val("");
                    $("#Appointment_JobTitle").val("");
                    //$("#Specimen_Signature").val("");
                    //$("#specimen-signature-files").html("");

                    alertify.success(fullname + " has been added!");
                },
                error: function (e) {
                    alertify.alert("An error occured while adding personnel record!");
                }
            });
        }
        else {
            alertify.alert(result);
        }
    }

    function RemovePersonnel(id) {
        alertify.confirm("Are you sure you want to remove this record?", function (e) {
            if (e) {
                $("#appointment-staff-table tbody tr#personnel_" + id).remove();
                alertify.success("Personnel removed!");
            }
        });
    }

    //Company Account Opening Form Uploads
    $("#company-account-opening-form-uploader").on("change", function (e) {
        var $file = this,
        $formData = new FormData();
        if ($file.files.length > 0) {
            for (var i = 0; i < $file.files.length; i++) {
                $formData.append("file-" + i, $file.files[i]);
            }
        }
        $.ajax({
            url: "@Url.Action("FileUploader")",
            type: "POST",
            data: $formData,
            dataType: "json",
            contentType: false,
            processData: false,
            success: function ($data) {
                if ($data.result == "success") {
                    AppendCompanyAccountOpeningFormFiles($data.msg);
                }
                else {
                    alertify.alert($data.msg);
                }
            },
            error: function (e) {
                alertify.alert("An error occured while uploading files!");
            }
        });
    });

    function AppendCompanyAccountOpeningFormFiles(data) {
        var files = data.split(",");
        for (var i = 0; i < files.length; i++) {
            var $div = $("<div class='margin-top-10 small'></div>");
            //var $a = $("<a href='@Url.Content("~/FileUploads/Temp/")" + files[i] + "' target='_blank'>" + files[i] + "</a>");
            var $button = $("<button type='button' class='btn btn-pure btn-xs btn-danger icon wb-close' onclick='RemoveCompanyAccountOpeningFormFile(this)'></button>");

			var $a = document.createElement('a');
			var linkText = document.createTextNode(files[i]);
			$a.appendChild(linkText);
			$a.title = files[i];
			$a.href = "@Url.Content("~/FileUploads/Temp/")" + files[i];
			$a.target = "_blank";
			document.body.appendChild($a);

            $("#company-account-opening-form-files").append($div.append($a).append($button));
        }

        var uploadedFiles = $("#customerDocumentChecklists_Company_AccountOpeningForm").val();
        if (uploadedFiles != "") {
            uploadedFiles += ",";
        }
        $("#customerDocumentChecklists_Company_AccountOpeningForm").val(uploadedFiles + data);

        if ($("#company-account-opening-form-label").hasClass("red-800")) {
            $("#company-account-opening-form-label").removeClass("red-800")
        }
    }

    function RemoveCompanyAccountOpeningFormFile($this) {
        var files = $("#customerDocumentChecklists_Company_AccountOpeningForm").val().split(",");
        var newFiles = "";
        for (var i = 0; i < files.length; i++) {
            if (files[i] != $this.previousSibling.innerHTML) {
                newFiles += files[i] + ",";
            }
        }
        newFiles = newFiles.slice(0, newFiles.length - 1);
        $("#customerDocumentChecklists_Company_AccountOpeningForm").val(newFiles);
        $this.parentNode.remove();

        if ($("#customerDocumentChecklists_Company_AccountOpeningForm").val() == "") {
            if (!$("#company-account-opening-form-label").hasClass("red-800")) {
                $("#company-account-opening-form-label").addClass("red-800")
            }
        }
    }

    //Company IC Authotized Person Uploads
    $("#company-ic-authorized-person-uploader").on("change", function (e) {
        var $file = this,
        $formData = new FormData();
        if ($file.files.length > 0) {
            for (var i = 0; i < $file.files.length; i++) {
                $formData.append("file-" + i, $file.files[i]);
            }
        }
        $.ajax({
            url: "@Url.Action("FileUploader")",
            type: "POST",
            data: $formData,
            dataType: "json",
            contentType: false,
            processData: false,
            success: function ($data) {
                if ($data.result == "success") {
                    AppendCompanyICAuthorizedPersonFiles($data.msg);
                }
                else {
                    alertify.alert($data.msg);
                }
            },
            error: function (e) {
                alertify.alert("An error occured while uploading files!");
            }
        });
    });

    function AppendCompanyICAuthorizedPersonFiles(data) {
        var files = data.split(",");
        for (var i = 0; i < files.length; i++) {
            var $div = $("<div class='margin-top-10 small'></div>");
            //var $a = $("<a href='@Url.Content("~/FileUploads/Temp/")" + files[i] + "' target='_blank'>" + files[i] + "</a>");
            var $button = $("<button type='button' class='btn btn-pure btn-xs btn-danger icon wb-close' onclick='RemoveCompanyICAuthorizedPersonFile(this)'></button>");

			var $a = document.createElement('a');
			var linkText = document.createTextNode(files[i]);
			$a.appendChild(linkText);
			$a.title = files[i];
			$a.href = "@Url.Content("~/FileUploads/Temp/")" + files[i];
			$a.target = "_blank";
			document.body.appendChild($a);

            $("#company-ic-authorized-person-files").append($div.append($a).append($button));
        }

        var uploadedFiles = $("#customerDocumentChecklists_Company_ICWithAuthorizedTradingPersons").val();
        if (uploadedFiles != "") {
            uploadedFiles += ",";
        }
        $("#customerDocumentChecklists_Company_ICWithAuthorizedTradingPersons").val(uploadedFiles + data);

        if ($("#company-ic-authorized-person-label").hasClass("red-800")) {
            $("#company-ic-authorized-person-label").removeClass("red-800")
        }
    }

    function RemoveCompanyICAuthorizedPersonFile($this) {
        var files = $("#customerDocumentChecklists_Company_ICWithAuthorizedTradingPersons").val().split(",");
        var newFiles = "";
        for (var i = 0; i < files.length; i++) {
            if (files[i] != $this.previousSibling.innerHTML) {
                newFiles += files[i] + ",";
            }
        }
        newFiles = newFiles.slice(0, newFiles.length - 1);
        $("#customerDocumentChecklists_Company_ICWithAuthorizedTradingPersons").val(newFiles);
        $this.parentNode.remove();

        if ($("#customerDocumentChecklists_Company_ICWithAuthorizedTradingPersons").val() == "") {
            if (!$("#company-ic-authorized-person-label").hasClass("red-800")) {
                $("#company-ic-authorized-person-label").addClass("red-800")
            }
        }
    }

    //Company IC Director Uploads
    $("#company-ic-director-uploader").on("change", function (e) {
        var $file = this,
        $formData = new FormData();
        if ($file.files.length > 0) {
            for (var i = 0; i < $file.files.length; i++) {
                $formData.append("file-" + i, $file.files[i]);
            }
        }
        $.ajax({
            url: "@Url.Action("FileUploader")",
            type: "POST",
            data: $formData,
            dataType: "json",
            contentType: false,
            processData: false,
            success: function ($data) {
                if ($data.result == "success") {
                    AppendCompanyICDirectorFiles($data.msg);
                }
                else {
                    alertify.alert($data.msg);
                }
            },
            error: function (e) {
                alertify.alert("An error occured while uploading files!");
            }
        });
    });

    function AppendCompanyICDirectorFiles(data) {
        var files = data.split(",");
        for (var i = 0; i < files.length; i++) {
            var $div = $("<div class='margin-top-10 small'></div>");
            //var $a = $("<a href='@Url.Content("~/FileUploads/Temp/")" + files[i] + "' target='_blank'>" + files[i] + "</a>");
            var $button = $("<button type='button' class='btn btn-pure btn-xs btn-danger icon wb-close' onclick='RemoveCompanyICDirectorFile(this)'></button>");

			var $a = document.createElement('a');
			var linkText = document.createTextNode(files[i]);
			$a.appendChild(linkText);
			$a.title = files[i];
			$a.href = "@Url.Content("~/FileUploads/Temp/")" + files[i];
			$a.target = "_blank";
			document.body.appendChild($a);

            $("#company-ic-director-files").append($div.append($a).append($button));
        }

        var uploadedFiles = $("#customerDocumentChecklists_Company_ICWithDirectors").val();
        if (uploadedFiles != "") {
            uploadedFiles += ",";
        }
        $("#customerDocumentChecklists_Company_ICWithDirectors").val(uploadedFiles + data);

        if ($("#company-ic-director-label").hasClass("red-800")) {
            $("#company-ic-director-label").removeClass("red-800")
        }
    }

    function RemoveCompanyICDirectorFile($this) {
        var files = $("#customerDocumentChecklists_Company_ICWithDirectors").val().split(",");
        var newFiles = "";
        for (var i = 0; i < files.length; i++) {
            if (files[i] != $this.previousSibling.innerHTML) {
                newFiles += files[i] + ",";
            }
        }
        newFiles = newFiles.slice(0, newFiles.length - 1);
        $("#customerDocumentChecklists_Company_ICWithDirectors").val(newFiles);
        $this.parentNode.remove();

        if ($("#customerDocumentChecklists_Company_ICWithDirectors").val() == "") {
            if (!$("#company-ic-director-label").hasClass("red-800")) {
                $("#company-ic-director-label").addClass("red-800")
            }
        }
    }

    //Company Business From Acra Uploads
    $("#company-business-from-acra-uploader").on("change", function (e) {
        var $file = this,
        $formData = new FormData();
        if ($file.files.length > 0) {
            for (var i = 0; i < $file.files.length; i++) {
                $formData.append("file-" + i, $file.files[i]);
            }
        }
        $.ajax({
            url: "@Url.Action("FileUploader")",
            type: "POST",
            data: $formData,
            dataType: "json",
            contentType: false,
            processData: false,
            success: function ($data) {
                if ($data.result == "success") {
                    AppendCompanyBusinessFromAcraFiles($data.msg);
                }
                else {
                    alertify.alert($data.msg);
                }
            },
            error: function (e) {
                alertify.alert("An error occured while uploading files!");
            }
        });
    });

    function AppendCompanyBusinessFromAcraFiles(data) {
        var files = data.split(",");
        for (var i = 0; i < files.length; i++) {
            var $div = $("<div class='margin-top-10 small'></div>");
            //var $a = $("<a href='@Url.Content("~/FileUploads/Temp/")" + files[i] + "' target='_blank'>" + files[i] + "</a>");
            var $button = $("<button type='button' class='btn btn-pure btn-xs btn-danger icon wb-close' onclick='RemoveCompanyBusinessFromAcraFile(this)'></button>");

			var $a = document.createElement('a');
			var linkText = document.createTextNode(files[i]);
			$a.appendChild(linkText);
			$a.title = files[i];
			$a.href = "@Url.Content("~/FileUploads/Temp/")" + files[i];
			$a.target = "_blank";
			document.body.appendChild($a);

            $("#company-business-from-acra-files").append($div.append($a).append($button));
        }

        var uploadedFiles = $("#customerDocumentChecklists_Company_BusinessProfileFromAcra").val();
        if (uploadedFiles != "") {
            uploadedFiles += ",";
        }
        $("#customerDocumentChecklists_Company_BusinessProfileFromAcra").val(uploadedFiles + data);

        if ($("#company-business-from-acra-label").hasClass("red-800")) {
            $("#company-business-from-acra-label").removeClass("red-800")
        }
    }

    function RemoveCompanyBusinessFromAcraFile($this) {
        var files = $("#customerDocumentChecklists_Company_BusinessProfileFromAcra").val().split(",");
        var newFiles = "";
        for (var i = 0; i < files.length; i++) {
            if (files[i] != $this.previousSibling.innerHTML) {
                newFiles += files[i] + ",";
            }
        }
        newFiles = newFiles.slice(0, newFiles.length - 1);
        $("#customerDocumentChecklists_Company_BusinessProfileFromAcra").val(newFiles);
        $this.parentNode.remove();

        if ($("#customerDocumentChecklists_Company_BusinessProfileFromAcra").val() == "") {
            if (!$("#company-business-from-acra-label").hasClass("red-800")) {
                $("#company-business-from-acra-label").addClass("red-800")
            }
        }
	}

	//start
	//Company Selfie Passport Working Pass
    $("#company-selfie-passpor-working-pass-uploader").on("change", function (e) {
        var $file = this,
        $formData = new FormData();
        if ($file.files.length > 0) {
            for (var i = 0; i < $file.files.length; i++) {
                $formData.append("file-" + i, $file.files[i]);
            }
        }
        $.ajax({
            url: "@Url.Action("FileUploader")",
            type: "POST",
            data: $formData,
            dataType: "json",
            contentType: false,
            processData: false,
            success: function ($data) {
                if ($data.result == "success") {
                    AppendCompanySelfiePassporWorkingPass($data.msg);
                }
                else {
                    alertify.alert($data.msg);
                }
            },
            error: function (e) {
                alertify.alert("An error occured while uploading files!");
            }
        });
    });

    function AppendCompanySelfiePassporWorkingPass(data) {
        var files = data.split(",");
        for (var i = 0; i < files.length; i++) {
            var $div = $("<div class='margin-top-10 small'></div>");
            //var $a = $("<a href='@Url.Content("~/FileUploads/Temp/")" + files[i] + "' target='_blank'>" + files[i] + "</a>");
            var $button = $("<button type='button' class='btn btn-pure btn-xs btn-danger icon wb-close' onclick='RemoveCompanySelfiePassporWorkingPass(this)'></button>");

			var $a = document.createElement('a');
			var linkText = document.createTextNode(files[i]);
			$a.appendChild(linkText);
			$a.title = files[i];
			$a.href = "@Url.Content("~/FileUploads/Temp/")" + files[i];
			$a.target = "_blank";
			document.body.appendChild($a);

            $("#company-selfie-passpor-working-pass-files").append($div.append($a).append($button));
        }

        var uploadedFiles = $("#customerDocumentChecklists_Company_SelfiePassporWorkingPass").val();
        if (uploadedFiles != "") {
            uploadedFiles += ",";
        }
        $("#customerDocumentChecklists_Company_SelfiePassporWorkingPass").val(uploadedFiles + data);

        if ($("#company-selfie-passpor-working-pass-label").hasClass("red-800")) {
            $("#company-selfie-passpor-working-pass-label").removeClass("red-800")
        }
    }

    function RemoveCompanySelfiePassporWorkingPass($this) {
        var files = $("#customerDocumentChecklists_Company_SelfiePassporWorkingPass").val().split(",");
        var newFiles = "";
        for (var i = 0; i < files.length; i++) {
            if (files[i] != $this.previousSibling.innerHTML) {
                newFiles += files[i] + ",";
            }
        }
        newFiles = newFiles.slice(0, newFiles.length - 1);
        $("#customerDocumentChecklists_Company_SelfiePassporWorkingPass").val(newFiles);
        $this.parentNode.remove();

        if ($("#customerDocumentChecklists_Company_SelfiePassporWorkingPass").val() == "") {
            if (!$("#company-selfie-passpor-working-pass-label").hasClass("red-800")) {
                $("#company-selfie-passpor-working-pass-label").addClass("red-800")
            }
        }
	}

	//Company Selfie Photo ID
    $("#company-selfie-photo-id-uploader").on("change", function (e) {
        var $file = this,
        $formData = new FormData();
        if ($file.files.length > 0) {
            for (var i = 0; i < $file.files.length; i++) {
                $formData.append("file-" + i, $file.files[i]);
            }
        }
        $.ajax({
            url: "@Url.Action("FileUploader")",
            type: "POST",
            data: $formData,
            dataType: "json",
            contentType: false,
            processData: false,
            success: function ($data) {
                if ($data.result == "success") {
                    AppendCompanySelfiePhotoID($data.msg);
                }
                else {
                    alertify.alert($data.msg);
                }
            },
            error: function (e) {
                alertify.alert("An error occured while uploading files!");
            }
        });
    });

    function AppendCompanySelfiePhotoID(data) {
        var files = data.split(",");
        for (var i = 0; i < files.length; i++) {
            var $div = $("<div class='margin-top-10 small'></div>");
            //var $a = $("<a href='@Url.Content("~/FileUploads/Temp/")" + files[i] + "' target='_blank'>" + files[i] + "</a>");
            var $button = $("<button type='button' class='btn btn-pure btn-xs btn-danger icon wb-close' onclick='RemoveCompanySelfiePhotoID(this)'></button>");

			var $a = document.createElement('a');
			var linkText = document.createTextNode(files[i]);
			$a.appendChild(linkText);
			$a.title = files[i];
			$a.href = "@Url.Content("~/FileUploads/Temp/")" + files[i];
			$a.target = "_blank";
			document.body.appendChild($a);

            $("#company-selfie-photo-id-files").append($div.append($a).append($button));
        }

        var uploadedFiles = $("#customerDocumentChecklists_Company_SelfiePhotoID").val();
        if (uploadedFiles != "") {
            uploadedFiles += ",";
        }
        $("#customerDocumentChecklists_Company_SelfiePhotoID").val(uploadedFiles + data);

        if ($("#company-selfie-photo-id-label").hasClass("red-800")) {
            $("#company-selfie-photo-id-label").removeClass("red-800")
        }
    }

    function RemoveCompanySelfiePhotoID($this) {
        var files = $("#customerDocumentChecklists_Company_SelfiePhotoID").val().split(",");
        var newFiles = "";
        for (var i = 0; i < files.length; i++) {
            if (files[i] != $this.previousSibling.innerHTML) {
                newFiles += files[i] + ",";
            }
        }
        newFiles = newFiles.slice(0, newFiles.length - 1);
        $("#customerDocumentChecklists_Company_SelfiePhotoID").val(newFiles);
        $this.parentNode.remove();

        if ($("#customerDocumentChecklists_Company_SelfiePhotoID").val() == "") {
            if (!$("#company-selfie-photo-id-label").hasClass("red-800")) {
                $("#company-selfie-photo-id-label").addClass("red-800")
            }
        }
	}

	//Natural Selfie Photo ID
    $("#natural-selfie-photo-id-uploader").on("change", function (e) {
        var $file = this,
        $formData = new FormData();
        if ($file.files.length > 0) {
            for (var i = 0; i < $file.files.length; i++) {
                $formData.append("file-" + i, $file.files[i]);
            }
        }
        $.ajax({
            url: "@Url.Action("FileUploader")",
            type: "POST",
            data: $formData,
            dataType: "json",
            contentType: false,
            processData: false,
            success: function ($data) {
                if ($data.result == "success") {
                    AppendNaturalSelfiePhotoID($data.msg);
                }
                else {
                    alertify.alert($data.msg);
                }
            },
            error: function (e) {
                alertify.alert("An error occured while uploading files!");
            }
        });
    });

    function AppendNaturalSelfiePhotoID(data) {
        var files = data.split(",");
        for (var i = 0; i < files.length; i++) {
            var $div = $("<div class='margin-top-10 small'></div>");
            //var $a = $("<a href='@Url.Content("~/FileUploads/Temp/")" + files[i] + "' target='_blank'>" + files[i] + "</a>");
            var $button = $("<button type='button' class='btn btn-pure btn-xs btn-danger icon wb-close' onclick='RemoveNaturalSelfiePhotoID(this)'></button>");

			var $a = document.createElement('a');
			var linkText = document.createTextNode(files[i]);
			$a.appendChild(linkText);
			$a.title = files[i];
			$a.href = "@Url.Content("~/FileUploads/Temp/")" + files[i];
			$a.target = "_blank";
			document.body.appendChild($a);

            $("#natural-selfie-photo-id-files").append($div.append($a).append($button));
        }

        var uploadedFiles = $("#customerDocumentChecklists_Natural_SelfiePhotoID").val();
        if (uploadedFiles != "") {
            uploadedFiles += ",";
        }
        $("#customerDocumentChecklists_Natural_SelfiePhotoID").val(uploadedFiles + data);

        if ($("#natural-selfie-photo-id-label").hasClass("red-800")) {
            $("#natural-selfie-photo-id-label").removeClass("red-800")
        }
    }

    function RemoveNaturalSelfiePhotoID($this) {
        var files = $("#customerDocumentChecklists_Natural_SelfiePhotoID").val().split(",");
        var newFiles = "";
        for (var i = 0; i < files.length; i++) {
            if (files[i] != $this.previousSibling.innerHTML) {
                newFiles += files[i] + ",";
            }
        }
        newFiles = newFiles.slice(0, newFiles.length - 1);
        $("#customerDocumentChecklists_Natural_SelfiePhotoID").val(newFiles);
        $this.parentNode.remove();

        if ($("#customerDocumentChecklists_Natural_SelfiePhotoID").val() == "") {
            if (!$("#natural-selfie-photo-id-label").hasClass("red-800")) {
                $("#natural-selfie-photo-id-label").addClass("red-800")
            }
        }
    }
	//end

    //Natural IC Of Customer Uploads
    $("#natural-ic-of-customer-uploader").on("change", function (e) {
        var $file = this,
        $formData = new FormData();
        if ($file.files.length > 0) {
            for (var i = 0; i < $file.files.length; i++) {
                $formData.append("file-" + i, $file.files[i]);
            }
        }
        $.ajax({
            url: "@Url.Action("FileUploader")",
            type: "POST",
            data: $formData,
            dataType: "json",
            contentType: false,
            processData: false,
            success: function ($data) {
                if ($data.result == "success") {
                    AppendNaturalICOfCustomerFiles($data.msg);
                }
                else {
                    alertify.alert($data.msg);
                }
            },
            error: function (e) {
                alertify.alert("An error occured while uploading files!");
            }
        });
    });

    function AppendNaturalICOfCustomerFiles(data) {
        var files = data.split(",");
        for (var i = 0; i < files.length; i++) {
            var $div = $("<div class='margin-top-10 small'></div>");
            //var $a = $("<a href='@Url.Content("~/FileUploads/Temp/")" + files[i] + "' target='_blank'>" + files[i] + "</a>");
            var $button = $("<button type='button' class='btn btn-pure btn-xs btn-danger icon wb-close' onclick='RemoveNaturalICOfCustomerFile(this)'></button>");

			var $a = document.createElement('a');
			var linkText = document.createTextNode(files[i]);
			$a.appendChild(linkText);
			$a.title = files[i];
			$a.href = "@Url.Content("~/FileUploads/Temp/")" + files[i];
			$a.target = "_blank";
			document.body.appendChild($a);

            $("#natural-ic-of-customer-files").append($div.append($a).append($button));
        }

        var uploadedFiles = $("#customerDocumentChecklists_Natural_ICOfCustomer").val();
        if (uploadedFiles != "") {
            uploadedFiles += ",";
        }
        $("#customerDocumentChecklists_Natural_ICOfCustomer").val(uploadedFiles + data);

        if ($("#natural-ic-of-customer-label").hasClass("red-800")) {
            $("#natural-ic-of-customer-label").removeClass("red-800")
        }
    }

    function RemoveNaturalICOfCustomerFile($this) {
        var files = $("#customerDocumentChecklists_Natural_ICOfCustomer").val().split(",");
        var newFiles = "";
        for (var i = 0; i < files.length; i++) {
            if (files[i] != $this.previousSibling.innerHTML) {
                newFiles += files[i] + ",";
            }
        }
        newFiles = newFiles.slice(0, newFiles.length - 1);
        $("#customerDocumentChecklists_Natural_ICOfCustomer").val(newFiles);
        $this.parentNode.remove();

        if ($("#customerDocumentChecklists_Natural_ICOfCustomer").val() == "") {
            if (!$("#natural-ic-of-customer-label").hasClass("red-800")) {
                $("#natural-ic-of-customer-label").addClass("red-800")
            }
        }
    }

    //Natural Business Name Card Uploads
    $("#natural-business-name-card-uploader").on("change", function (e) {
        var $file = this,
        $formData = new FormData();
        if ($file.files.length > 0) {
            for (var i = 0; i < $file.files.length; i++) {
                $formData.append("file-" + i, $file.files[i]);
            }
        }
        $.ajax({
            url: "@Url.Action("FileUploader")",
            type: "POST",
            data: $formData,
            dataType: "json",
            contentType: false,
            processData: false,
            success: function ($data) {
                if ($data.result == "success") {
                    AppendNaturalBusinessNameCardFiles($data.msg);
                }
                else {
                    alertify.alert($data.msg);
                }
            },
            error: function (e) {
                alertify.alert("An error occured while uploading files!");
            }
        });
    });

    function AppendNaturalBusinessNameCardFiles(data) {
        var files = data.split(",");
        for (var i = 0; i < files.length; i++) {
            var $div = $("<div class='margin-top-10 small'></div>");
            //var $a = $("<a href='@Url.Content("~/FileUploads/Temp/")" + files[i] + "' target='_blank'>" + files[i] + "</a>");
            var $button = $("<button type='button' class='btn btn-pure btn-xs btn-danger icon wb-close' onclick='RemoveNaturalBusinessNameCardFile(this)'></button>");

			var $a = document.createElement('a');
			var linkText = document.createTextNode(files[i]);
			$a.appendChild(linkText);
			$a.title = files[i];
			$a.href = "@Url.Content("~/FileUploads/Temp/")" + files[i];
			$a.target = "_blank";
			document.body.appendChild($a);

            $("#natural-business-name-card-files").append($div.append($a).append($button));
        }

        var uploadedFiles = $("#customerDocumentChecklists_Natural_BusinessNameCard").val();
        if (uploadedFiles != "") {
            uploadedFiles += ",";
        }
        $("#customerDocumentChecklists_Natural_BusinessNameCard").val(uploadedFiles + data);

        if ($("#natural-business-name-card-label").hasClass("red-800")) {
            $("#natural-business-name-card-label").removeClass("red-800")
        }
    }

    function RemoveNaturalBusinessNameCardFile($this) {
        var files = $("#customerDocumentChecklists_Natural_BusinessNameCard").val().split(",");
        var newFiles = "";
        for (var i = 0; i < files.length; i++) {
            if (files[i] != $this.previousSibling.innerHTML) {
                newFiles += files[i] + ",";
            }
        }
        newFiles = newFiles.slice(0, newFiles.length - 1);
        $("#customerDocumentChecklists_Natural_BusinessNameCard").val(newFiles);
        $this.parentNode.remove();

        if ($("#customerDocumentChecklists_Natural_BusinessNameCard").val() == "") {
            if (!$("#natural-business-name-card-label").hasClass("red-800")) {
                $("#natural-business-name-card-label").addClass("red-800")
            }
        }
    }

    //Natural KYC Form Uploads
    $("#natural-kyc-form-uploader").on("change", function (e) {
        var $file = this,
        $formData = new FormData();
        if ($file.files.length > 0) {
            for (var i = 0; i < $file.files.length; i++) {
                $formData.append("file-" + i, $file.files[i]);
            }
        }
        $.ajax({
            url: "@Url.Action("FileUploader")",
            type: "POST",
            data: $formData,
            dataType: "json",
            contentType: false,
            processData: false,
            success: function ($data) {
                if ($data.result == "success") {
                    AppendNaturalKYCFormFiles($data.msg);
                }
                else {
                    alertify.alert($data.msg);
                }
            },
            error: function (e) {
                alertify.alert("An error occured while uploading files!");
            }
        });
    });

    function AppendNaturalKYCFormFiles(data) {
        var files = data.split(",");
        for (var i = 0; i < files.length; i++) {
            var $div = $("<div class='margin-top-10 small'></div>");
            //var $a = $("<a href='@Url.Content("~/FileUploads/Temp/")" + files[i] + "' target='_blank'>" + files[i] + "</a>");
            var $button = $("<button type='button' class='btn btn-pure btn-xs btn-danger icon wb-close' onclick='RemoveNaturalKYCFormFile(this)'></button>");

			var $a = document.createElement('a');
			var linkText = document.createTextNode(files[i]);
			$a.appendChild(linkText);
			$a.title = files[i];
			$a.href = "@Url.Content("~/FileUploads/Temp/")" + files[i];
			$a.target = "_blank";
			document.body.appendChild($a);

            $("#natural-kyc-form-files").append($div.append($a).append($button));
        }

        var uploadedFiles = $("#customerDocumentChecklists_Natural_KYCForm").val();
        if (uploadedFiles != "") {
            uploadedFiles += ",";
        }
        $("#customerDocumentChecklists_Natural_KYCForm").val(uploadedFiles + data);

        if ($("#natural-kyc-form-label").hasClass("red-800")) {
            $("#natural-kyc-form-label").removeClass("red-800")
        }
    }

    function RemoveNaturalKYCFormFile($this) {
        var files = $("#customerDocumentChecklists_Natural_KYCForm").val().split(",");
        var newFiles = "";
        for (var i = 0; i < files.length; i++) {
            if (files[i] != $this.previousSibling.innerHTML) {
                newFiles += files[i] + ",";
            }
        }
        newFiles = newFiles.slice(0, newFiles.length - 1);
        $("#customerDocumentChecklists_Natural_KYCForm").val(newFiles);
        $this.parentNode.remove();

        if ($("#customerDocumentChecklists_Natural_KYCForm").val() == "") {
            if (!$("#natural-kyc-form-label").hasClass("red-800")) {
                $("#natural-kyc-form-label").addClass("red-800")
            }
        }
    }

    //Sanctions and PEP Screening Report
    function AddScreeningReport() {
        var date = $("#ScreeningReport_Date").val();
        var dateOfAcra = $("#ScreeningReport_DateOfAcra").val();
        var screenedBy = $("#ScreeningReport_ScreenedBy").val();

        var result = "";

        if (date == "") {
            result += "Date is required!<br/>";
        }

        if (dateOfAcra == "") {
            result += "Date of ACRA is required!<br/>";
        }

        if (screenedBy == "") {
            result += "Screened By is required!<br/>";
        }

        if (result == "") {
            var screeningReport_1 = $("#screening-report-1");
            if (screeningReport_1[0].checked) {
                screeningReport_1 = "Yes";
            }
            else {
                screeningReport_1 = "No";
            }
            var screeningReport_2 = $("#screening-report-2");
            if (screeningReport_2[0].checked) {
                screeningReport_2 = "Yes";
            }
            else {
                screeningReport_2 = "No";
            }
            var remarks = $("#ScreeningReport_Remarks").val();

            var url = "@Url.Action("AddScreeningReport")";

            var rowId = 1;

            if ($("#pep-screening-report-table tbody tr").length > 0) {
                rowId = parseInt($("#pep-screening-report-table tbody tr:last")[0].id.split("-")[4]) + 1;
            }

            $.ajax({
                type: "POST",
                cache: false,
                url: url,
                data: { rowId: rowId, date: date, dateOfAcra: dateOfAcra, screenedBy: screenedBy, screeningReport_1: screeningReport_1, screeningReport_2: screeningReport_2, remarks: remarks },
                success: function (data) {
                    $("#pep-screening-report-table tbody").append(data);
                    $("#pep-screening-report-btn-remove-" + rowId).tooltip();

                    $("#ScreeningReport_Date").datepicker("update", new Date());
                    $("#ScreeningReport_DateOfAcra").datepicker("update", new Date());
                    $("#ScreeningReport_ScreenedBy").val("");
                    $("#screening-report-1").iCheck("check");
                    $("#screening-report-2").iCheck("check");
                    $("#ScreeningReport_Remarks").val("");

                    alertify.success("Sanctions and PEP Screening Report has been added!");
                },
                error: function (e) {
                    console.log(e);
                    alertify.alert("An error occurred while adding Sanctions and PEP Screening Report!");
                }
            });
        }
        else {
            alertify.alert(result);
        }
    }

    function RemoveScreeningReport(rowId) {
        alertify.confirm("Are you sure you want to remove this record?", function (e) {
            if (e) {
                $("#pep-screening-report-tr-" + rowId).remove();
                alertify.success("PEP Screening Report has been removed!");
            }
        });
    }

    //Screening Results Document Uploads
    $("#screening-results-document-uploader").on("change", function (e) {
        var $file = this,
        $formData = new FormData();
        if ($file.files.length > 0) {
            for (var i = 0; i < $file.files.length; i++) {
                $formData.append("file-" + i, $file.files[i]);
            }
        }
        $.ajax({
            url: "@Url.Action("FileUploader")",
            type: "POST",
            data: $formData,
            dataType: "json",
            contentType: false,
            processData: false,
            success: function ($data) {
                if ($data.result == "success") {
                    AppendScreeningResultsDocument($data.msg);
                }
                else {
                    alertify.alert($data.msg);
                }
            },
            error: function (e) {
                alertify.alert("An error occured while uploading files!");
            }
        });
    });

    function AppendScreeningResultsDocument(data) {
        var files = data.split(",");
        for (var i = 0; i < files.length; i++) {
            var $div = $("<div class='margin-top-10 small'></div>");
            //var $a = $("<a href='@Url.Content("~/FileUploads/Temp/")" + files[i] + "' target='_blank'>" + files[i] + "</a>");
            var $button = $("<button type='button' class='btn btn-pure btn-xs btn-danger icon wb-close' onclick='RemoveScreeningResultsDocument(this)'></button>");

			var $a = document.createElement('a');
			var linkText = document.createTextNode(files[i]);
			$a.appendChild(linkText);
			$a.title = files[i];
			$a.href = "@Url.Content("~/FileUploads/Temp/")" + files[i];
			$a.target = "_blank";
			document.body.appendChild($a);

            $("#screening-results-document-files").append($div.append($a).append($button));
        }

        var uploadedFiles = $("#customerOthers_ScreeningResultsDocument").val();
        if (uploadedFiles != "") {
            uploadedFiles += ",";
        }
        $("#customerOthers_ScreeningResultsDocument").val(uploadedFiles + data);

        if ($("#screening-results-document-label").hasClass("red-800")) {
            $("#screening-results-document-label").removeClass("red-800")
        }
    }

    function RemoveScreeningResultsDocument($this) {
        var files = $("#customerOthers_ScreeningResultsDocument").val().split(",");
        var newFiles = "";
        for (var i = 0; i < files.length; i++) {
            if (files[i] != $this.previousSibling.innerHTML) {
                newFiles += files[i] + ",";
            }
        }
        newFiles = newFiles.slice(0, newFiles.length - 1);
        $("#customerOthers_ScreeningResultsDocument").val(newFiles);
        $this.parentNode.remove();

        if ($("#customerOthers_ScreeningResultsDocument").val() == "") {
            if (!$("#screening-results-document-label").hasClass("red-800")) {
                $("#screening-results-document-label").addClass("red-800")
            }
        }
    }

    function DefaultRateChange($this, id) {
        if ($this.checked) {
            var buyRate = $("#CustomBuyRate_" + id).val();
            var sellRate = $("#CustomSellRate_" + id).val();
            var encashmentRate = $("#CustomEncashmentRate_" + id).val();

			$("#CustomBuyRate_" + id).attr("disabled", "disabled");
			$("#CustomBuyRateCalculated_" + id).val("");
			$("#CustomSellRate_" + id).attr("disabled", "disabled");
			$("#CustomSellRateCalculated_" + id).val("");
            $("#CustomEncashmentRate_" + id).attr("disabled", "disabled");

            var buyRateHidden = $("<input type='hidden' name='CustomBuyRate_" + id + "' value='" + buyRate + "'></input>");
            var sellRateHidden = $("<input type='hidden' name='CustomSellRate_" + id + "' value='" + sellRate + "'></input>");
            var encashmentRateHidden = $("<input type='hidden' name='CustomEncashmentRate_" + id + "' value='" + encashmentRate + "'></input>");

            $("#custom-buy-rate-" + id).append(buyRateHidden);
            $("#custom-sell-rate-" + id).append(sellRateHidden);
            $("#custom-encashment-rate-" + id).append(encashmentRateHidden);
        }
		else
		{
			$("#CustomBuyRate_" + id).removeAttr("disabled", "disabled");

			var OriginalValue = $("#CustomBuyRateDefault_" + id).val();
			var InputValue = $("#CustomBuyRate_" + id).val();
			var CalculatedValue = Number(OriginalValue) * (Number(1) + Number(InputValue));
			$("#CustomBuyRateCalculated_" + id).val(CalculatedValue);

			$("#CustomSellRate_" + id).removeAttr("disabled", "disabled");

			var OriginalValueSell = $("#CustomSellRateDefault_" + id).val();
			var InputValueSell = $("#CustomSellRate_" + id).val();
			var CalculatedValueSell = Number(OriginalValueSell) * (Number(1) + Number(InputValueSell));
			$("#CustomSellRateCalculated_" + id).val(CalculatedValueSell);

            $("#CustomEncashmentRate_" + id).removeAttr("disabled", "disabled");

            $("input[type='hidden'][name='CustomBuyRate_" + id + "']").remove();
            $("input[type='hidden'][name='CustomSellRate_" + id + "']").remove();
            $("input[type='hidden'][name='CustomEncashmentRate_" + id + "']").remove();
        }
	}

	function DefaultFeeChange($this, id) {
		if ($this.checked)
		{
			var buyRate = $("#RemittanceProductsCustomBuyRate_" + id).val();
			var sellRate = $("#RemittanceProductsCustomSellRate_" + id).val();

			$("#RemittanceProductsCustomBuyRate_" + id).attr("disabled", "disabled");
			$("#RemittanceProductsCustomBuyRateCalculated_" + id).val("");
			$("#RemittanceProductsCustomSellRate_" + id).attr("disabled", "disabled");
			$("#RemittanceProductsCustomSellRateCalculated_" + id).val("");

			var buyRateHidden = $("<input type='hidden' name='RemittanceProductsCustomBuyRate_" + id + "' value='" + buyRate + "'></input>");
            var sellRateHidden = $("<input type='hidden' name='RemittanceProductsCustomSellRate_" + id + "' value='" + sellRate + "'></input>");

			$("#custom-rbuy-rate-" + id).append(buyRateHidden);
            $("#custom-rsell-rate-" + id).append(sellRateHidden);

            var fee = $("#RemittanceProductsCustomFee_" + id).val();
            $("#RemittanceProductsCustomFee_" + id).attr("disabled", "disabled");
            var feeHidden = $("<input type='hidden' name='RemittanceProductsCustomFee_" + id + "' value='" + fee + "'></input>");

            $("#custom-fee-" + id).append(feeHidden);
        }
		else {

			$("#RemittanceProductsCustomBuyRate_" + id).removeAttr("disabled", "disabled");

			var OriginalValue = $("#RemittanceProductsCustomBuyRateDefault_" + id).val();
			var InputValue = $("#RemittanceProductsCustomBuyRate_" + id).val();
			var CalculatedValue = Number(OriginalValue) * (Number(1) - Number(InputValue));
			$("#RemittanceProductsCustomBuyRateCalculated_" + id).val(CalculatedValue);

			$("#RemittanceProductsCustomSellRate_" + id).removeAttr("disabled", "disabled");

			var OriginalValueSell = $("#RemittanceProductsCustomSellRateDefault_" + id).val();
			var InputValueSell = $("#RemittanceProductsCustomSellRate_" + id).val();
			var CalculatedValueSell = Number(OriginalValueSell) * (Number(1) + Number(InputValueSell));
			$("#RemittanceProductsCustomSellRateCalculated_" + id).val(CalculatedValueSell);

			$("input[type='hidden'][name='RemittanceProductsCustomBuyRate_" + id + "']").remove();
            $("input[type='hidden'][name='RemittanceProductsCustomSellRate_" + id + "']").remove();

            $("#RemittanceProductsCustomFee_" + id).removeAttr("disabled", "disabled");
            $("input[type='hidden'][name='RemittanceProductsCustomFee_" + id + "']").remove();
        }
    }

    function GradingChange() {
        var grading = $("#customerOthers_Grading").val();

        var today = new Date();
        var yearToAdd = 0;

        if (grading == "Low") {
            yearToAdd = 5;
        }
        else if (grading == "Medium") {
            yearToAdd = 2;
        }
        else if (grading == "High") {
            yearToAdd = 1;
        }

        if (yearToAdd > 0) {
            var year = today.getFullYear() + yearToAdd;
            var month = today.getMonth();
            var date = today.getDate();
            today = new Date(year, month, date, 0, 0, 0);

            $("#customerOthers_NextReviewDate").datepicker("setDate", today);
        }
    }

    var a = "@ViewData["AutoFillNextReviewDate"]";

    function NextReviewDateChange() {
        if (a == "True") {
            $("#customerOthers_AcraExpiry").datepicker({ autoclose: true, format: "dd/mm/yyyy" }).datepicker("setDate", $("#customerOthers_NextReviewDate").datepicker("getDate"));
        }
        else {
            a = "True";
        }
    }

    function RateChange($this) {
        var amount = $this.value;
        if (amount != "") {
            var field = "Rate";
            var url = "@Url.Action("ValidateAmount")";
            $.ajax({
                type: "GET",
                url: url,
                data: { amount: amount, field: field },
                success: function (data) {
                    data = JSON.parse(data);
                    if (data.result == "true") {
                        var url = "@Url.Action("FormatAmount")";
                        $.ajax({
                            type: "GET",
                            url: url,
                            data: { amount: amount, dp: 0, field: "rate" },
                            success: function (data) {
                                data = JSON.parse(data);
                                $this.value = data.msg;
                            }
                        });
                    }
                    else {
                        alertify.alert(data.msg);
                    }
                }
            });
        }
	}

	function FeeChange($this) {
        var amount = $this.value;
        if (amount != "") {
            var field = "Transaction Fee";
            var url = "@Url.Action("ValidateAmount")";
            $.ajax({
                type: "GET",
                url: url,
                data: { amount: amount, field: field },
                success: function (data) {
                    data = JSON.parse(data);
                    if (data.result == "true") {
                        var url = "@Url.Action("FormatAmount")";
                        $.ajax({
                            type: "GET",
                            url: url,
                            data: { amount: amount, dp: 0, field: "rate" },
                            success: function (data) {
                                data = JSON.parse(data);
                                $this.value = data.msg;
                            }
                        });
                    }
                    else {
                        alertify.alert(data.msg);
                    }
                }
            });
        }
    }

    function disableButton()
    {
        $("#disable_button").attr("disabled", true);
        $("#form-create").submit();
	}

	function CalculateBuyRate($this, id)
	{
		var OriginalValue = $("#CustomBuyRateDefault_" + id).val();
		var InputValue = $this.value;
		var CalculatedValue = Number(OriginalValue) * (Number(1) - Number(InputValue));
		console.log(OriginalValue);
		$("#CustomBuyRateCalculated_" + id).val(CalculatedValue);
	}

	function CalculateSellRate($this, id)
	{
		var OriginalValue = $("#CustomSellRateDefault_" + id).val();
		var InputValue = $this.value;
		var CalculatedValue = Number(OriginalValue) * (Number(1) + Number(InputValue));

		$("#CustomSellRateCalculated_" + id).val(CalculatedValue);
	}

	//Remittance Calculate Rate
	function CalculateRemittanceBuyRate($this, id)
	{
		var OriginalValue = $("#RemittanceProductsCustomBuyRateDefault_" + id).val();
		var InputValue = $this.value;
		var CalculatedValue = Number(OriginalValue) * (Number(1) - Number(InputValue));
		console.log(id);
		$("#RemittanceProductsCustomBuyRateCalculated_" + id).val(CalculatedValue);
	}

	function CalculateRemittanceSellRate($this, id)
	{
		var OriginalValue = $("#RemittanceProductsCustomSellRateDefault_" + id).val();
		var InputValue = $this.value;
		var CalculatedValue = Number(OriginalValue) * (Number(1) + Number(InputValue));

		$("#RemittanceProductsCustomSellRateCalculated_" + id).val(CalculatedValue);
	}

	function LoadThisCustomerOnChange()
	{
		event.preventDefault();
		var GetCustomerID = $("#MainAccountCustomer").val();

		//$('#LoadThisCustomer').hide();
		//$('#LoadThisCustomerText').show();

		var url = "@Url.Action("LoadCustomerRecord")";

		$.ajax({
			type: 'POST',
			url: url,
			data: { customerid: GetCustomerID },
			dataType: 'json',
			error: function (res) {
				console.log(res);
				$('#LoadThisCustomer').show();
				//$('#LoadThisCustomerText').hide();
				$(".preload").hide();
			},
			beforeSend: function ()
			{
				// setting a timeout
				$(".preload").show();
			},
			success: function (res) {
				console.log(res);
				$("#customerParticulars_Company_RegisteredName").val(res.res.customerRecord.Company_RegisteredName);
				$("#customerParticulars_Company_BusinessAddress1").val(res.res.customerRecord.Company_BusinessAddress1);
				$("#customerParticulars_Company_BusinessAddress2").val(res.res.customerRecord.Company_BusinessAddress2);
				$("#customerParticulars_Company_BusinessAddress3").val(res.res.customerRecord.Company_BusinessAddress3);
				$("#customerParticulars_Company_PostalCode").val(res.res.customerRecord.Company_PostalCode);

				$("#customerParticulars_Shipping_Address1").val(res.res.customerRecord.Shipping_Address1);
				$("#customerParticulars_Shipping_Address2").val(res.res.customerRecord.Shipping_Address2);
				$("#customerParticulars_Shipping_Address3").val(res.res.customerRecord.Shipping_Address3);
				$("#customerParticulars_Shipping_PostalCode").val(res.res.customerRecord.Shipping_PostalCode);

				//Country
				$('#Country').val(res.res.customerRecord.Company_Country).trigger('change');
				$('#CountryCode').val(res.res.customerRecord.Company_CountryCode).trigger('change');

				$("#customerParticulars_Company_TelNo").val(res.res.customerRecord.Company_TelNo);
				$("#customerParticulars_Company_FaxNo").val(res.res.customerRecord.Company_FaxNo);

				$("#customerParticulars_Company_PlaceOfRegistration").val(res.res.customerRecord.Company_PlaceOfRegistration);

				$("#customerParticulars_Company_DateOfRegistration").datepicker('setDate', dateFormat(new Date(parseInt((res.res.customerRecord.Company_DateOfRegistration).match(/\d+/)[0]))));

				$("#customerParticulars_Company_RegistrationNo").val(res.res.customerRecord.Company_RegistrationNo);

				$("#customerParticulars_Company_TypeOfEntity").val(res.res.customerRecord.Company_TypeOfEntity);

				if (res.res.customerRecord.Company_TypeOfEntity == "Others")
				{
					$("#customerParticulars_Company_TypeOfEntityIfOthers").attr("disabled", false);
					$("#customerParticulars_Company_TypeOfEntityIfOthers").val(res.res.customerRecord.Company_TypeOfEntityIfOthers);
				}
				else
				{
					$("#customerParticulars_Company_TypeOfEntityIfOthers").attr("disabled", true);
					$("#customerParticulars_Company_TypeOfEntityIfOthers").val("");
				}

				//Transaction Allow Type
				var GetTransactionAllowType = res.res.customerRecord.EnableTransactionType;

				if (GetTransactionAllowType != null) {
					var SplitText = GetTransactionAllowType.split(',');

					$('#enable-transaction-type-remittance').prop('checked', false);
					$('#enable-transaction-type-currency-exchange').prop('checked', false);
					$('#enable-transaction-type-withdrawal').prop('checked', false);

					$.each(SplitText, function (index, value) {

						if (value == "Remittance") {
							//$('#enable-transaction-type-remitance').attr('checked', true);
							$("#enable-transaction-type-remittance").prop('checked', true);
						}
						else if (value == "Currency Exchange") {
							$('#enable-transaction-type-currency-exchange').prop('checked', true);
						}
						else if (value == "Withdrawal")
						{
							$('#enable-transaction-type-withdrawal').prop('checked', true);
						}
						console.log(value);
					});
					$(".preload").hide();
				}
				else
				{
					$('#enable-transaction-type-remittance').prop('checked', false);
					$('#enable-transaction-type-currency-exchange').prop('checked', false);
					$('#enable-transaction-type-withdrawal').prop('checked', false);
					$(".preload").hide();
				}

				//$('#LoadThisCustomer').show();
				//$('#LoadThisCustomerText').hide();
				$(".preload").hide();
			}
		});
	}

	@*$("#LoadThisCustomer").click(function (event)
	{
		event.preventDefault();
		var GetCustomerID = $("#MainAccountCustomer").val();

		$('#LoadThisCustomer').hide();
		$('#LoadThisCustomerText').show();

		var url = "@Url.Action("LoadCustomerRecord")";

		$.ajax({
			type: 'POST',
			url: url,
			data: { customerid: GetCustomerID },
			dataType: 'json',
			error: function (res) {
				console.log(res);
				$('#LoadThisCustomer').show();
				$('#LoadThisCustomerText').hide();
			},
			success: function (res) {
				console.log(res);
				$("#customerParticulars_Company_BusinessAddress1").val(res.res.customerRecord.Company_BusinessAddress1);
				$("#customerParticulars_Company_BusinessAddress2").val(res.res.customerRecord.Company_BusinessAddress2);
				$("#customerParticulars_Company_BusinessAddress3").val(res.res.customerRecord.Company_BusinessAddress3);
				$("#customerParticulars_Company_PostalCode").val(res.res.customerRecord.Company_PostalCode);

				$("#customerParticulars_Shipping_Address1").val(res.res.customerRecord.Shipping_Address1);
				$("#customerParticulars_Shipping_Address2").val(res.res.customerRecord.Shipping_Address2);
				$("#customerParticulars_Shipping_Address3").val(res.res.customerRecord.Shipping_Address3);
				$("#customerParticulars_Shipping_PostalCode").val(res.res.customerRecord.Shipping_PostalCode);

				//Country
				$('#Country').val(res.res.customerRecord.Company_Country).trigger('change');
				$('#CountryCode').val(res.res.customerRecord.Company_CountryCode).trigger('change');

				$("#customerParticulars_Company_TelNo").val(res.res.customerRecord.Company_TelNo);
				$("#customerParticulars_Company_FaxNo").val(res.res.customerRecord.Company_FaxNo);

				$("#customerParticulars_Company_PlaceOfRegistration").val(res.res.customerRecord.Company_PlaceOfRegistration);

				$("#customerParticulars_Company_DateOfRegistration").datepicker('setDate', dateFormat(new Date(parseInt((res.res.customerRecord.Company_DateOfRegistration).match(/\d+/)[0]))));

				$("#customerParticulars_Company_RegistrationNo").val(res.res.customerRecord.Company_RegistrationNo);

				$("#customerParticulars_Company_TypeOfEntity").val(res.res.customerRecord.Company_TypeOfEntity);

				if (res.res.customerRecord.Company_TypeOfEntity == "Others")
				{
					$("#customerParticulars_Company_TypeOfEntityIfOthers").attr("disabled", false);
					$("#customerParticulars_Company_TypeOfEntityIfOthers").val(res.res.customerRecord.Company_TypeOfEntityIfOthers);
				}
				else
				{
					$("#customerParticulars_Company_TypeOfEntityIfOthers").attr("disabled", true);
					$("#customerParticulars_Company_TypeOfEntityIfOthers").val("");
				}

				//Transaction Allow Type
				var GetTransactionAllowType = res.res.customerRecord.EnableTransactionType;

				if (GetTransactionAllowType != null) {
					var SplitText = GetTransactionAllowType.split(',');

					$('#enable-transaction-type-remittance').prop('checked', false);
					$('#enable-transaction-type-currency-exchange').prop('checked', false);
					$('#enable-transaction-type-withdrawal').prop('checked', false);

					$.each(SplitText, function (index, value) {

						if (value == "Remittance") {
							//$('#enable-transaction-type-remitance').attr('checked', true);
							$("#enable-transaction-type-remittance").prop('checked', true);
						}
						else if (value == "Currency Exchange") {
							$('#enable-transaction-type-currency-exchange').prop('checked', true);
						}
						else if (value == "Withdrawal")
						{
							$('#enable-transaction-type-withdrawal').prop('checked', true);
						}
						console.log(value);
					});
				}
				else
				{
					$('#enable-transaction-type-remittance').prop('checked', false);
					$('#enable-transaction-type-currency-exchange').prop('checked', false);
					$('#enable-transaction-type-withdrawal').prop('checked', false);
				}

				$('#LoadThisCustomer').show();
				$('#LoadThisCustomerText').hide();
			}
		});
	});*@

	$("#ViewMainAccount").click(function (event)
	{
		event.preventDefault();
		var GetCustomerID = $("#MainAccountCustomer").val();
		var url = '@Url.Action("Edit","Customer", new { id = "" })' + "/" + GetCustomerID;
		window.open(url, '_blank');
	});

	function dateFormat(d)
	{
		//console.log(d);

		var GetDate = (d.getDate() + "").padStart(2, "0");
		var GetMonth = ((d.getMonth() + 1) + "").padStart(2, "0");
		var GetYear = d.getFullYear();
		var FullDate = GetDate + "/" + GetMonth + "/" + GetYear;

		return FullDate;
	}

</script>