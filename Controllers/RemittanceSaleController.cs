using BarcodeLib;
using DataAccess;
using DataAccess.POCO;
using GreatEastForex.Helper;
using GreatEastForex.Models;
using Newtonsoft.Json;
using PagedList;
using Rotativa;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Configuration;
using System.Data.Entity.Infrastructure;
using System.IO;
using System.Linq;
using System.Text;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using System.Web.SessionState;
using System.Data.SqlClient;
using System.Data;
using OfficeOpenXml;
using System.Text.RegularExpressions;

namespace GreatEastForex.Controllers
{
    [HandleError]
    [RedirectingActionAttributeRemittance]
    [SessionState(SessionStateBehavior.ReadOnly)]
    public class RemittanceSaleController : ControllerBase
    {
        #region Initialize models
        private ISaleRepository _salesModel;
        private IRemittanceSaleRepository _remittancesalesModel;
        private ISaleTransactionRepository _saleTransactionsModel;
        private IRemittanceOrderRepository _remittanceordersModel;
        private ISaleTransactionDenominationRepository _saleTransactionDenominationsModel;
        private IAgentRepository _agentsModel;
        private IBeneficiaryRepository _beneficiaryModel;
        private ICustomerParticularRepository _customerParticularsModel;
        private ICustomerOtherRepository _customerOthersModel;
        private ICustomerCustomRateRepository _customerCustomRatesModel;
        private IInventoryRepository _inventoriesModel;
        private IProductRepository _productsModel;
        private IRemittanceProductRepository _remittanceproductsModel;
        private IProductInventoryRepository _productInventoriesModel;
        private IProductDenominationRepository _productDenominationsModel;
        private ISettingRepository _settingsModel;
        private IEndDayTradeRepository _endDayTradesModel;
        private IEndDayTradeTransactionRepository _endDayTradeTransactionsModel;
        private IEmailLogRepository _emailLogsModel;
        private IUserRepository _usersModel;
        private IApprovalHistorysRepository _approvalHistorysModel;
        private int sgdDp = 2;
        private int rateDP = 12;
		public static readonly object LockObject = new object();
		#endregion

		public RemittanceSaleController()
            : this(new SaleRepository(), new RemittanceSaleRepository(), new SaleTransactionRepository(), new RemittanceOrderRepository(), new SaleTransactionDenominationRepository(), new AgentRepository(), new BeneficiaryRepository(), new CustomerParticularRepository(), new CustomerOtherRepository(), new CustomerCustomRateRepository(), new InventoryRepository(), new ProductRepository(), new RemittanceProductRepository(), new ProductInventoryRepository(), new ProductDenominationRepository(), new SettingRepository(), new EndDayTradeRepository(), new EndDayTradeTransactionRepository(), new EmailLogRepository(), new UserRepository(), new ApprovalHistorysRepository())
        {

        }

        public RemittanceSaleController(ISaleRepository salesModel, IRemittanceSaleRepository remittancesalesModel, ISaleTransactionRepository saleTransactionsModel, IRemittanceOrderRepository remittanceOrder, ISaleTransactionDenominationRepository saleTransactionDenominationsModel, IAgentRepository agentRepository, IBeneficiaryRepository beneficiaryRepository, ICustomerParticularRepository customerParticularsModel, ICustomerOtherRepository customerOthersModel, ICustomerCustomRateRepository customerCustomRatesModel, IInventoryRepository inventoriesModel, IProductRepository productsModel, IRemittanceProductRepository remittanceProduct, IProductInventoryRepository productInventoriesModel, IProductDenominationRepository productDenominationsModel, ISettingRepository settingsModel, IEndDayTradeRepository endDayTradesModel, IEndDayTradeTransactionRepository endDayTradeTransactionsModel, IEmailLogRepository emailLogsModel, IUserRepository usersModel, IApprovalHistorysRepository approvalHistorysModel)
        {
            _salesModel = salesModel;
            _remittancesalesModel = remittancesalesModel;
            _saleTransactionsModel = saleTransactionsModel;
            _remittanceordersModel = remittanceOrder;
            _saleTransactionDenominationsModel = saleTransactionDenominationsModel;
            _agentsModel = agentRepository;
            _beneficiaryModel = beneficiaryRepository;
            _customerParticularsModel = customerParticularsModel;
            _customerOthersModel = customerOthersModel;
            _customerCustomRatesModel = customerCustomRatesModel;
            _inventoriesModel = inventoriesModel;
            _productsModel = productsModel;
            _remittanceproductsModel = remittanceProduct;
            _productInventoriesModel = productInventoriesModel;
            _productDenominationsModel = productDenominationsModel;
            _settingsModel = settingsModel;
            _endDayTradesModel = endDayTradesModel;
            _endDayTradeTransactionsModel = endDayTradeTransactionsModel;
            _emailLogsModel = emailLogsModel;
            _usersModel = usersModel;
            _approvalHistorysModel = approvalHistorysModel;
            Product sgd = _productsModel.FindCurrencyCode("SGD");
            sgdDp = sgd.Decimal;
            ViewData["SGDDP"] = sgdDp;
            ViewData["RateDP"] = rateDP;
            ViewData["SGDFormat"] = GetDecimalFormat(sgdDp);
            ViewData["RateFormat"] = GetRateFormat(rateDP);
        }

        // GET: Sale
        public ActionResult Index()
        {
            if (TempData["SearchKeyword"] != null)
            {
                TempData.Remove("SearchKeyword");
            }

            if (TempData["SearchStatus"] != null)
            {
                TempData.Remove("SearchStatus");
            }

            return RedirectToAction("Listing");
        }

        //GET: ListingTesting
        public ActionResult ListingTesting(int page = 1, string searchStatus = "")
        {
            int pageSize = Convert.ToInt32(ConfigurationManager.AppSettings["SalePageSize"]);

            TempData["Page"] = page;
            ViewData["Page"] = page;

            TempData["PageSize"] = pageSize;
            ViewData["PageSize"] = pageSize;

            ViewData["SearchKeyword"] = "";

            if (TempData["SearchKeyword"] != null)
            {
                ViewData["SearchKeyword"] = TempData["SearchKeyword"];
                TempData.Keep("SearchKeyword");
            }

            ViewData["SearchStatus"] = searchStatus;
            TempData["SearchStatus"] = searchStatus;

            ViewData["AllSalesActive"] = "";
            ViewData["AllCompletedActive"] = "";
            ViewData["AllDeliveriesActive"] = "";
            ViewData["AllPendingActive"] = "";

            ViewData["PendingAccountActive"] = "";
            ViewData["PendingPackingActive"] = "";
            ViewData["PendingIncomingDeliveryActive"] = "";
            ViewData["PendingCashierActive"] = "";

            ViewData["PendingAssignDeliveryActive"] = "";
            ViewData["PendingDeliveryActive"] = "";
            ViewData["PendingGMApproval"] = "";
            ViewData["PendingGMApprovalReject"] = "";

            if (searchStatus == "Completed")
            {
                ViewData["AllCompletedActive"] = "active";
                ViewData["CurrentStatus"] = "All Completed";
            }
            else if (searchStatus == "Deliveries")
            {
                ViewData["AllDeliveriesActive"] = "active";
                ViewData["CurrentStatus"] = "All Deliveries";
            }
            else if (searchStatus == "Pending")
            {
                ViewData["AllPendingActive"] = "active";
                ViewData["CurrentStatus"] = "All Pending";
            }
            else if (searchStatus == "Pending Assign Delivery")
            {
                ViewData["PendingAssignDeliveryActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Assign Delivery Only";
            }
            else if (searchStatus == "Pending Delivery")
            {
                ViewData["PendingDeliveryActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Delivery Only";
            }
            else if (searchStatus == "Pending GM Approval")
            {
                ViewData["PendingGMApproval"] = "active";
                ViewData["CurrentStatus"] = "Pending GM Approval";
            }
            else if (searchStatus == "Pending GM Approval (Rejected)")
            {
                ViewData["PendingGMApprovalReject"] = "active";
                ViewData["CurrentStatus"] = "Pending GM Approval (Rejected)";
            }
            else if (searchStatus == "Pending Accounts")
            {
                ViewData["PendingAccountActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Accounts";

            }
            else if (searchStatus == "Pending Packing")
            {
                ViewData["PendingPackingActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Packing";
            }
            else if (searchStatus.Contains("Pending Incoming Delivery"))
            {
                ViewData["PendingIncomingDeliveryActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Incoming Delivery";
            }
            else if (searchStatus == "Pending Cashier")
            {
                ViewData["PendingCashierActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Cashier";
            }
            else
            {
                ViewData["AllSalesActive"] = "active";
                ViewData["CurrentStatus"] = "All Sales";
            }

            //check if is junior dealer only, then only show his own data.
            string userRole = Session["UserRole"].ToString();
            string[] userRoleList = userRole.Split(',');

            var getTotalPage = new int();
            bool MultipleRole = true;
            int userid = Convert.ToInt32(Session["UserId"].ToString());

            if (Array.IndexOf(userRoleList, "Junior Dealer") >= 0)
            {
                if (userRoleList.Length > 1)
                {
                    //this is contain another role
                    getTotalPage = _salesModel.GetPageCount2(ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString(), MultipleRole, userid);
                }
                else
                {
                    //this is only junior dealer
                    MultipleRole = false;
                    getTotalPage = _salesModel.GetPageCount2(ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString(), MultipleRole, userid);
                }
            }

            //var checkPageItems = _salesModel.GetCustomItems2(page, ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString(), MultipleRole, userid);

            var sales2 = new List<DataAccess.SaleListingModel>();
            var salesTransactionList = new List<DataAccess.SaleTransactionsModel>();

            int fixTotalItems = 50;
            int minusPerpage = 50;
            int getMaxItems = page * fixTotalItems;
            int getRange = getMaxItems - minusPerpage;

            //SQL Command here
            using (var connection = new SqlConnection(ConfigurationManager.ConnectionStrings["GreatEastForex"].ConnectionString))
            {
                connection.Open();
                string commandText = "";

                if (!string.IsNullOrEmpty(ViewData["SearchKeyword"].ToString()))
                {
                    if (!MultipleRole)
                    {
                        //var rec = db.Sales.Where(e => e.CreatedBy == userid && e.IsDeleted == "N" && (e.MemoID.Contains(keyword) || e.CustomerParticulars.Company_RegisteredName.Contains(keyword) || e.CustomerParticulars.Natural_Name.Contains(keyword))).ToList();
                        commandText = @"SELECT sa.Status as SA_Status, sa.TransactionType as SA_TransactionType, sa.ID as SA_ID, sa.CreatedOn as SA_CreatedOn, sa.CreatedBy as SA_CreatedBy, sa.IsDeleted as SA_IsDeleted, sa.MemoID as SA_MemoID, sa.CustomerParticularId as SA_CustomerParticularId, cp.ID as CP_ID, cp.Company_RegisteredName as CP_CompanyRegisteredName, cp.Natural_Name as CP_NaturalName, cp.CustomerCode as CP_CustomerCode FROM [dbo].[Sales] sa FULL OUTER JOIN [dbo].[CustomerParticulars] cp ON sa.CustomerParticularId = cp.ID WHERE sa.IsDeleted = 'N' AND sa.CreatedBy = " + userid + " AND (sa.MemoID LIKE '%" + ViewData["SearchKeyword"].ToString() + "%' OR cp.Company_RegisteredName LIKE '" + ViewData["SearchKeyword"].ToString() + "' OR cp.Natural_Name LIKE '" + ViewData["SearchKeyword"].ToString() + "') ORDER BY sa.CreatedOn DESC OFFSET " + getRange + " ROWS FETCH NEXT " + fixTotalItems + " ROWS ONLY";
                    }
                    else
                    {
                        commandText = @"SELECT sa.Status as SA_Status, sa.TransactionType as SA_TransactionType, sa.ID as SA_ID, sa.CreatedOn as SA_CreatedOn, sa.CreatedBy as SA_CreatedBy, sa.IsDeleted as SA_IsDeleted, sa.MemoID as SA_MemoID, sa.CustomerParticularId as SA_CustomerParticularId, cp.ID as CP_ID, cp.Company_RegisteredName as CP_CompanyRegisteredName, cp.Natural_Name as CP_NaturalName, cp.CustomerCode as CP_CustomerCode FROM [dbo].[Sales] sa FULL OUTER JOIN [dbo].[CustomerParticulars] cp ON sa.CustomerParticularId = cp.ID WHERE sa.IsDeleted = 'N' AND (sa.MemoID LIKE '%" + ViewData["SearchKeyword"].ToString() + "%' OR cp.Company_RegisteredName LIKE '" + ViewData["SearchKeyword"].ToString() + "' OR cp.Natural_Name LIKE '" + ViewData["SearchKeyword"].ToString() + "') ORDER BY sa.CreatedOn DESC OFFSET " + getRange + " ROWS FETCH NEXT " + fixTotalItems + " ROWS ONLY";
                    }
                }
                else if (!string.IsNullOrEmpty(ViewData["SearchStatus"].ToString()))
                {
                    //if (status == "Pending GM Approval")
                    if (ViewData["SearchStatus"].ToString() == "Pending GM Approval")
                    {
                        if (!MultipleRole)
                        {
                            commandText = @"SELECT sa.Status as SA_Status, sa.TransactionType as SA_TransactionType, sa.ID as SA_ID, sa.CreatedOn as SA_CreatedOn, sa.CreatedBy as SA_CreatedBy, sa.IsDeleted as SA_IsDeleted, sa.MemoID as SA_MemoID, sa.CustomerParticularId as SA_CustomerParticularId, cp.ID as CP_ID, cp.Company_RegisteredName as CP_CompanyRegisteredName, cp.Natural_Name as CP_NaturalName, cp.CustomerCode as CP_CustomerCode FROM [dbo].[Sales] sa FULL OUTER JOIN [dbo].[CustomerParticulars] cp ON sa.CustomerParticularId = cp.ID WHERE sa.IsDeleted = 'N' AND sa.CreatedBy = " + userid + " AND sa.Status = 'Pending GM Approval' ORDER BY sa.CreatedOn DESC OFFSET " + getRange + " ROWS FETCH NEXT " + fixTotalItems + " ROWS ONLY";
                        }
                        else
                        {
                            commandText = @"SELECT sa.Status as SA_Status, sa.TransactionType as SA_TransactionType, sa.ID as SA_ID, sa.CreatedOn as SA_CreatedOn, sa.CreatedBy as SA_CreatedBy, sa.IsDeleted as SA_IsDeleted, sa.MemoID as SA_MemoID, sa.CustomerParticularId as SA_CustomerParticularId, cp.ID as CP_ID, cp.Company_RegisteredName as CP_CompanyRegisteredName, cp.Natural_Name as CP_NaturalName, cp.CustomerCode as CP_CustomerCode FROM [dbo].[Sales] sa FULL OUTER JOIN [dbo].[CustomerParticulars] cp ON sa.CustomerParticularId = cp.ID WHERE sa.IsDeleted = 'N' AND sa.Status = 'Pending GM Approval' ORDER BY sa.CreatedOn DESC OFFSET " + getRange + " ROWS FETCH NEXT " + fixTotalItems + " ROWS ONLY";
                        }
                    }
                    else
                    {
                        if (ViewData["SearchStatus"].ToString() == "Deliveries")
                        {
                            if (!MultipleRole)
                            {
                                commandText = @"SELECT sa.Status as SA_Status, sa.TransactionType as SA_TransactionType, sa.ID as SA_ID, sa.CreatedOn as SA_CreatedOn, sa.CreatedBy as SA_CreatedBy, sa.IsDeleted as SA_IsDeleted, sa.MemoID as SA_MemoID, sa.CustomerParticularId as SA_CustomerParticularId, cp.ID as CP_ID, cp.Company_RegisteredName as CP_CompanyRegisteredName, cp.Natural_Name as CP_NaturalName, cp.CustomerCode as CP_CustomerCode FROM [dbo].[Sales] sa FULL OUTER JOIN [dbo].[CustomerParticulars] cp ON sa.CustomerParticularId = cp.ID WHERE sa.IsDeleted = 'N' AND sa.CreatedBy = " + userid + " AND sa.Status = 'Pending Assign Delivery' OR sa.Status = 'Pending Delivery' OR sa.Status = 'Pending Incoming Delivery' ORDER BY sa.CreatedOn DESC OFFSET " + getRange + " ROWS FETCH NEXT " + fixTotalItems + " ROWS ONLY";
                                //rec = rec.Where(e => e.CreatedBy == userid && e.Status.Contains("Pending Assign Delivery") || e.Status.Contains("Pending Delivery") || e.Status.Contains("Pending Incoming Delivery")).ToList();
                            }
                            else
                            {
                                commandText = @"SELECT sa.Status as SA_Status, sa.TransactionType as SA_TransactionType, sa.ID as SA_ID, sa.CreatedOn as SA_CreatedOn, sa.CreatedBy as SA_CreatedBy, sa.IsDeleted as SA_IsDeleted, sa.MemoID as SA_MemoID, sa.CustomerParticularId as SA_CustomerParticularId, cp.ID as CP_ID, cp.Company_RegisteredName as CP_CompanyRegisteredName, cp.Natural_Name as CP_NaturalName, cp.CustomerCode as CP_CustomerCode FROM [dbo].[Sales] sa FULL OUTER JOIN [dbo].[CustomerParticulars] cp ON sa.CustomerParticularId = cp.ID WHERE sa.IsDeleted = 'N' AND sa.Status = 'Pending Assign Delivery' OR sa.Status = 'Pending Delivery' OR sa.Status = 'Pending Incoming Delivery' ORDER BY sa.CreatedOn DESC OFFSET " + getRange + " ROWS FETCH NEXT " + fixTotalItems + " ROWS ONLY";
                                //rec = rec.Where(e => e.Status.Contains("Pending Assign Delivery") || e.Status.Contains("Pending Delivery") || e.Status.Contains("Pending Incoming Delivery")).ToList();
                            }
                        }
                        else
                        {
                            if (!MultipleRole)
                            {
                                commandText = @"SELECT sa.Status as SA_Status, sa.TransactionType as SA_TransactionType, sa.ID as SA_ID, sa.CreatedOn as SA_CreatedOn, sa.CreatedBy as SA_CreatedBy, sa.IsDeleted as SA_IsDeleted, sa.MemoID as SA_MemoID, sa.CustomerParticularId as SA_CustomerParticularId, cp.ID as CP_ID, cp.Company_RegisteredName as CP_CompanyRegisteredName, cp.Natural_Name as CP_NaturalName, cp.CustomerCode as CP_CustomerCode FROM [dbo].[Sales] sa FULL OUTER JOIN [dbo].[CustomerParticulars] cp ON sa.CustomerParticularId = cp.ID WHERE sa.IsDeleted = 'N' AND sa.CreatedBy = " + userid + " AND sa.Status LIKE '" + ViewData["SearchStatus"].ToString() + "' ORDER BY sa.CreatedOn DESC OFFSET " + getRange + " ROWS FETCH NEXT " + fixTotalItems + " ROWS ONLY";
                                //rec = rec.Where(e => e.CreatedBy == userid && e.Status.Contains("Pending Assign Delivery") || e.Status.Contains("Pending Delivery") || e.Status.Contains("Pending Incoming Delivery")).ToList();
                            }
                            else
                            {
                                commandText = @"SELECT sa.Status as SA_Status, sa.TransactionType as SA_TransactionType, sa.ID as SA_ID, sa.CreatedOn as SA_CreatedOn, sa.CreatedBy as SA_CreatedBy, sa.IsDeleted as SA_IsDeleted, sa.MemoID as SA_MemoID, sa.CustomerParticularId as SA_CustomerParticularId, cp.ID as CP_ID, cp.Company_RegisteredName as CP_CompanyRegisteredName, cp.Natural_Name as CP_NaturalName, cp.CustomerCode as CP_CustomerCode FROM [dbo].[Sales] sa FULL OUTER JOIN [dbo].[CustomerParticulars] cp ON sa.CustomerParticularId = cp.ID WHERE sa.IsDeleted = 'N' AND sa.Status LIKE '" + ViewData["SearchStatus"].ToString() + "' ORDER BY sa.CreatedOn DESC OFFSET " + getRange + " ROWS FETCH NEXT " + fixTotalItems + " ROWS ONLY";
                                //rec = rec.Where(e => e.Status.Contains("Pending Assign Delivery") || e.Status.Contains("Pending Delivery") || e.Status.Contains("Pending Incoming Delivery")).ToList();
                            }
                        }
                    }
                }
                else
                {
                    if (!MultipleRole)
                    {
                        commandText = @"SELECT sa.Status as SA_Status, sa.TransactionType as SA_TransactionType, sa.ID as SA_ID, sa.CreatedOn as SA_CreatedOn, sa.CreatedBy as SA_CreatedBy, sa.IsDeleted as SA_IsDeleted, sa.MemoID as SA_MemoID, sa.CustomerParticularId as SA_CustomerParticularId, cp.ID as CP_ID, cp.Company_RegisteredName as CP_CompanyRegisteredName, cp.Natural_Name as CP_NaturalName, cp.CustomerCode as CP_CustomerCode FROM [dbo].[Sales] sa FULL OUTER JOIN [dbo].[CustomerParticulars] cp ON sa.CustomerParticularId = cp.ID WHERE sa.IsDeleted = 'N' AND sa.CreatedBy = " + userid + " ORDER BY sa.CreatedOn DESC OFFSET " + getRange + " ROWS FETCH NEXT " + fixTotalItems + " ROWS ONLY";
                    }
                    else
                    {
                        commandText = @"SELECT sa.Status as SA_Status, sa.TransactionType as SA_TransactionType, sa.ID as SA_ID, sa.CreatedOn as SA_CreatedOn, sa.CreatedBy as SA_CreatedBy, sa.IsDeleted as SA_IsDeleted, sa.MemoID as SA_MemoID, sa.CustomerParticularId as SA_CustomerParticularId, cp.ID as CP_ID, cp.Company_RegisteredName as CP_CompanyRegisteredName, cp.Natural_Name as CP_NaturalName, cp.CustomerCode as CP_CustomerCode FROM [dbo].[Sales] sa FULL OUTER JOIN [dbo].[CustomerParticulars] cp ON sa.CustomerParticularId = cp.ID WHERE sa.IsDeleted = 'N' ORDER BY sa.CreatedOn DESC OFFSET " + getRange + " ROWS FETCH NEXT " + fixTotalItems + " ROWS ONLY";
                    }
                }

                using (SqlCommand command = new SqlCommand("SET ARITHABORT ON", connection))
                {
                    command.ExecuteNonQuery();
                    command.CommandText = commandText;
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        sales2 = reader.Cast<IDataRecord>()
                        .Select(x => new DataAccess.SaleListingModel
                        {
                            SalesID = (int)x["SA_ID"],
                            SalesMemoID = (string)x["SA_MemoID"],
                            SalesCreatedOn = (DateTime)x["SA_CreatedOn"],
                            Sales_CustomerParticularID = (int)x["SA_CustomerParticularId"],
                            SalesCreatedBy = (int)x["SA_CreatedBy"],
                            CP_CustomerCode = (string)x["CP_CustomerCode"],
                            CP_CompanyRegisteredName = (x["CP_CompanyRegisteredName"] == DBNull.Value) ? "" : (string)x["CP_CompanyRegisteredName"],
                            CP_NaturalName = (x["CP_NaturalName"] == DBNull.Value) ? "" : (string)x["CP_NaturalName"],
                            Sales_TransactionType = (x["SA_TransactionType"] == DBNull.Value) ? "" : (string)x["SA_TransactionType"],
                            Sales_Status = (x["SA_Status"] == DBNull.Value) ? "" : (string)x["SA_Status"]
                        }).ToList();

                        sales2 = sales2.OrderByDescending(e => e.SalesCreatedOn).ToList();
                    }
                }

                Dictionary<int, bool> deleteSales1 = new Dictionary<int, bool>();

                commandText = @"SELECT TransactionType, CurrencyId FROM [dbo].[SaleTransactions]";

                using (SqlCommand command = new SqlCommand("SET ARITHABORT ON", connection))
                {
                    command.ExecuteNonQuery();
                    command.CommandText = commandText;
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        salesTransactionList = reader.Cast<IDataRecord>()
                        .Select(x => new DataAccess.SaleTransactionsModel
                        {
                            SaleTransaction_TransactionType = (x["TransactionType"] == DBNull.Value) ? "" : (string)x["TransactionType"],
                            SaleTransaction_CurrencyID = (int)x["CurrencyId"]
                        }).ToList();
                    }
                }

                bool isDeletable = true;

                foreach (DataAccess.SaleListingModel _salesModel in sales2)
                {
                    isDeletable = true;

                    if (_salesModel.Sales_TransactionType != "Sell" && _salesModel.Sales_Status == "Completed")
                    {

                    }
                }
            }


            //END COmmand Here

            ViewData["Paginations"] = getTotalPage;
            ViewData["getPaging"] = page;
            ViewData["Sales"] = sales2;

            //Dictionary<int, bool> deleteSales1 = new Dictionary<int, bool>();
            //foreach (Sale sales in checkPageItems)
            //{
            //	bool isDeletable = true;

            //	if (sales.TransactionType != "Sell" && sales.Status == "Completed")
            //	{
            //		List<SaleTransaction> filteredTransactions = sales.SaleTransactions.Where(e => e.TransactionType == "Buy").ToList();

            //		foreach (SaleTransaction transaction in filteredTransactions)
            //		{
            //			EndDayTrade trade = _endDayTradesModel.GetProductCurrentTrade(transaction.CurrencyId, sales.LastApprovalOn);

            //			if (trade != null)
            //			{
            //				EndDayTrade futureTrade = _endDayTradesModel.GetProductFutureTrade(transaction.CurrencyId, trade.CurrentActivationTime);

            //				if (futureTrade != null)
            //				{
            //					isDeletable = false;
            //				}
            //			}
            //		}
            //	}

            //	deleteSales1.Add(sales.ID, isDeletable);
            //}

            //ViewData["DeleteSales"] = deleteSales1;

            ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
            return View();
        }

        //GET: Listing
        public ActionResult Listing(int page = 1, string searchStatus = "")
        {
            int pageSize = Convert.ToInt32(ConfigurationManager.AppSettings["SalePageSize"]);

            TempData["Page"] = page;
            ViewData["Page"] = page;

            TempData["PageSize"] = pageSize;
            ViewData["PageSize"] = pageSize;

            ViewData["SearchKeyword"] = "";

            if (TempData["SearchKeyword"] != null)
            {
                ViewData["SearchKeyword"] = TempData["SearchKeyword"];
                TempData.Keep("SearchKeyword");
            }

            ViewData["SearchStatus"] = searchStatus;
            TempData["SearchStatus"] = searchStatus;

            ViewData["AllSalesActive"] = "";
            ViewData["AllCompletedActive"] = "";
            ViewData["PendingAccountsCheckFunds"] = "";
            ViewData["AllPendingActive"] = "";

            ViewData["PendingAccountActive"] = "";
            ViewData["PendingAccountsCheckTransaction"] = "";
            ViewData["PendingCustomer"] = "";

            ViewData["PendingGMApproval"] = "";
            ViewData["PendingGMApprovalReject"] = "";

            if (searchStatus == "Completed")
            {
                ViewData["AllCompletedActive"] = "active";
                ViewData["CurrentStatus"] = "All Completed";
            }
            else if (searchStatus == "Pending")
            {
                ViewData["AllPendingActive"] = "active";
                ViewData["CurrentStatus"] = "All Pending";
            }
            else if (searchStatus == "Pending Accounts (Check Funds)")
            {
                ViewData["PendingAccountsCheckFunds"] = "active";
                ViewData["CurrentStatus"] = "Pending Accounts (Check Funds)";
            }
            else if (searchStatus == "Pending Accounts (Check Transaction)")
            {
                ViewData["PendingAccountsCheckTransaction"] = "active";
                ViewData["CurrentStatus"] = "Pending Accounts (Check Transaction)";
            }
            else if (searchStatus == "Pending GM Approval")
            {
                ViewData["PendingGMApproval"] = "active";
                ViewData["CurrentStatus"] = "Pending GM Approval";
            }
            else if (searchStatus == "Pending GM Approval (Rejected)")
            {
                ViewData["PendingGMApprovalReject"] = "active";
                ViewData["CurrentStatus"] = "Pending GM Approval (Rejected)";
            }
            else if (searchStatus == "Pending Accounts")
            {
                ViewData["PendingAccountActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Accounts";

            }
            else if (searchStatus == "Pending Customer")
            {
                ViewData["PendingCustomer"] = "active";
                ViewData["CurrentStatus"] = "Pending Customer";
            }
            else
            {
                ViewData["AllSalesActive"] = "active";
                ViewData["CurrentStatus"] = "All Sales";
            }

            //check if is junior dealer only, then only show his own data.
            string userRole = Session["UserRole"].ToString();
            string[] userRoleList = userRole.Split(',');

            var getTotalPage = new int();
            bool MultipleRole = true;
            int userid = Convert.ToInt32(Session["UserId"].ToString());
            if (Array.IndexOf(userRoleList, "Junior Dealer") >= 0)
            {
                if (userRoleList.Length > 1)
                {
                    //this is contain another role
                    getTotalPage = _remittancesalesModel.GetPageCount2(ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString(), MultipleRole, userid);
                }
                else
                {
                    //this is only junior dealer
                    MultipleRole = false;
                    getTotalPage = _remittancesalesModel.GetPageCount2(ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString(), MultipleRole, userid);
                }
            }
            else
            {
                getTotalPage = _remittancesalesModel.GetPageCount(ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString());
            }

            var checkPageItems = _remittancesalesModel.GetCustomItems2(page, ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString(), MultipleRole, userid);


            ViewData["Paginations"] = getTotalPage;
            ViewData["getPaging"] = page;
            ViewData["Sales"] = checkPageItems;

            Dictionary<int, bool> deleteSales1 = new Dictionary<int, bool>();
            foreach (Remittances sales in checkPageItems)
            {
                bool isDeletable = true;


                List<RemittanceOrders> filteredTransactions = sales.RemittanceOders.Where(e => e.RemittanceId == sales.ID).ToList();

                foreach (RemittanceOrders transaction in filteredTransactions)
                {
                    EndDayTrade trade = _endDayTradesModel.GetProductCurrentTrade(transaction.GetCurrency, sales.LastApprovalOn);

                    if (trade != null)
                    {
                        EndDayTrade futureTrade = _endDayTradesModel.GetProductFutureTrade(transaction.GetCurrency, trade.CurrentActivationTime);

                        if (futureTrade != null)
                        {
                            isDeletable = false;
                        }
                    }
                }


                deleteSales1.Add(sales.ID, isDeletable);
            }

            ViewData["DeleteSales"] = deleteSales1;

            ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
            return View();
        }

        //POST: Listing
        [HttpPost]
        public ActionResult Listing(FormCollection form)
        {
            int page = 1;
            int pageSize = Convert.ToInt32(ConfigurationManager.AppSettings["SalePageSize"]);

            TempData["Page"] = page;
            ViewData["Page"] = page;

            TempData["PageSize"] = pageSize;
            ViewData["PageSize"] = pageSize;

            ViewData["SearchKeyword"] = form["SearchKeyword"].Trim();
            TempData["SearchKeyword"] = form["SearchKeyword"].Trim();

            ViewData["SearchStatus"] = "";

            if (TempData["SearchStatus"] != null)
            {
                ViewData["SearchStatus"] = TempData["SearchStatus"];
            }

            ViewData["AllSalesActive"] = "";
            ViewData["AllCompletedActive"] = "";
            ViewData["PendingAccountsCheckFunds"] = "";
            ViewData["AllPendingActive"] = "";

            ViewData["PendingAccountActive"] = "";
            ViewData["PendingAccountsCheckTransaction"] = "";
            ViewData["PendingCustomer"] = "";

            ViewData["PendingGMApproval"] = "";
            ViewData["PendingGMApprovalReject"] = "";

            if (ViewData["SearchStatus"].ToString() == "Completed")
            {
                ViewData["AllCompletedActive"] = "active";
                ViewData["CurrentStatus"] = "All Completed";
            }
            else if (ViewData["SearchStatus"].ToString() == "Pending Accounts (Check Funds)")
            {
                ViewData["AllDeliveriesActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Accounts (Check Funds)";
            }
            else if (ViewData["SearchStatus"].ToString() == "Pending")
            {
                ViewData["AllPendingActive"] = "active";
                ViewData["CurrentStatus"] = "All Pending";
            }
            else if (ViewData["SearchStatus"].ToString() == "Pending Accounts (Check Transaction)")
            {
                ViewData["PendingAssignDeliveryActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Accounts (Check Transaction)";
            }
            else if (ViewData["SearchStatus"].ToString() == "Pending Customer")
            {
                ViewData["PendingDeliveryActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Customer";
            }
            else if (ViewData["SearchStatus"].ToString() == "Pending Accounts")
            {
                ViewData["PendingAccountActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Accounts";

            }
            else if (ViewData["SearchStatus"].ToString() == "Pending GM Approval")
            {
                ViewData["PendingGMApproval"] = "active";
                ViewData["CurrentStatus"] = "Pending GM Approval";
            }
            else if (ViewData["SearchStatus"].ToString() == "Pending GM Approval (Rejected)")
            {
                ViewData["PendingGMApprovalReject"] = "active";
                ViewData["CurrentStatus"] = "Pending GM Approval (Rejected)";
            }
            else
            {
                ViewData["AllSalesActive"] = "active";
                ViewData["CurrentStatus"] = "All Sales";
            }

            //Start
            string userRole = Session["UserRole"].ToString();
            string[] userRoleList = userRole.Split(',');

            var getTotalPage = new int();
            bool MultipleRole = true;
            int userid = Convert.ToInt32(Session["UserId"].ToString());

            if (Array.IndexOf(userRoleList, "Junior Dealer") >= 0)
            {
                if (userRoleList.Length > 1)
                {
                    //this is contain another role
                    getTotalPage = _remittancesalesModel.GetPageCount2(ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString(), MultipleRole, userid);
                }
                else
                {
                    //this is only junior dealer
                    MultipleRole = false;
                    getTotalPage = _remittancesalesModel.GetPageCount2(ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString(), MultipleRole, userid);
                }
            }
            else
            {
                getTotalPage = _remittancesalesModel.GetPageCount(ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString());
            }

            var checkPageItems = _remittancesalesModel.GetCustomItems2(page, ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString(), MultipleRole, userid);

            //End
            ViewData["Paginations"] = getTotalPage;
            ViewData["getPaging"] = page;
            ViewData["Sales"] = checkPageItems;

            Dictionary<int, bool> deleteSales1 = new Dictionary<int, bool>();
            foreach (Remittances sales in checkPageItems)
            {
                bool isDeletable = true;

                List<RemittanceOrders> filteredTransactions = sales.RemittanceOders.ToList();

                foreach (RemittanceOrders transaction in filteredTransactions)
                {
                    EndDayTrade trade = _endDayTradesModel.GetProductCurrentTrade(transaction.GetCurrency, sales.LastApprovalOn);

                    if (trade != null)
                    {
                        EndDayTrade futureTrade = _endDayTradesModel.GetProductFutureTrade(transaction.GetCurrency, trade.CurrentActivationTime);

                        if (futureTrade != null)
                        {
                            isDeletable = false;
                        }
                    }
                }
                deleteSales1.Add(sales.ID, isDeletable);
            }

            ViewData["DeleteSales"] = deleteSales1;

            ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
            return View();
        }

        //GET: ViewTransactions
        public ActionResult ViewTransactions(int id)
        {
            Remittances sales = _remittancesalesModel.GetSingle(id);
            sales.RemittanceOders = sales.RemittanceOders.OrderBy(e => e.ID).ToList();
            ViewData["Sale"] = sales;
            var paycurrencyCode = _remittanceproductsModel.GetSingle(sales.RemittanceOders.FirstOrDefault().PayCurrency).ProductDecimal;
            var agent = _agentsModel.GetSingle(sales.AgentId);
            string agentName = "";
            if (agent != null)
            {
                agentName = agent.AgentId + " - " + agent.CompanyName;
            }
            ViewData["SGDDP"] = GetDecimalFormat(paycurrencyCode);
            ViewData["RATEDP"] = GetRateFormat(rateDP);
            ViewData["Agent"] = agentName;
            Dictionary<int, string> dictionaryAmountForeignFormat = new Dictionary<int, string> {
                {0, "###,0"},
                {1, "#,##0.0"},
                {2, "#,##0.00"},
                {3, "#,##0.000"},
                {4, "#,##0.0000"},
                {5, "#,##0.00000"},
                {6, "#,##0.000000"},
                {7, "#,##0.0000000"},
                {8, "#,##0.00000000"},
                {9, "#,##0.000000000"},
                {10, "#,##0.0000000000"},
                {11, "#,##0.00000000000"},
                {12, "#,##0.000000000000"}
            };
            ViewData["DictionaryAmountForeignFormat"] = dictionaryAmountForeignFormat;

            return View();
        }

        //GET: View Approval History Model
        public ActionResult ViewApprovalHistory(int id)
        {
            IList<ApprovalHistorys> getApprovalHistory = _approvalHistorysModel.GetAll("RemittanceSale", id);
            ViewData["ApprovalHistory"] = getApprovalHistory;
            ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
            return View();
        }

        public ActionResult AddChequeModel(int id)
        {
            ViewData["RowID"] = id;
            return View();
        }

        public ActionResult AddBankTransferModel(int id)
        {
            ViewData["RowID"] = id;
            return View();
        }

        public ActionResult AddBenefiacryAccount(int id)
        {
            Dropdown[] beneficiaries = BeneficiariesDDL();
            Dropdown[] docsuppList = SupportDocTypeDDL();
            Dropdown[] countries = CountryDDL();
            Dropdown[] paymentList = PurposePaymentDDL(0);
            Dropdown[] fundList = SourceFundsDDL();
            Dropdown[] nationalities = NationalityDDL();
            ViewData["BeneficiaryDropdown"] = new SelectList(beneficiaries, "val", "name");
            ViewData["SupportDocTypeDropdown"] = new SelectList(docsuppList, "val", "name");
            ViewData["CountriesDropdown"] = new SelectList(countries, "val", "name");
            ViewData["PurposePaymentDropdown"] = new SelectList(paymentList, "val", "name");
            ViewData["SourceFundDropdown"] = new SelectList(fundList, "val", "name");
            ViewData["NationalitiesDropdown"] = new SelectList(nationalities, "val", "name");
            ViewData["RowID"] = id;
            ViewData["Transaction_BeneficiaryName"] = "";
            ViewData["Transaction_BeneficiaryBankAccount"] = "";
            ViewData["Transaction_BeneficiaryPaymentDetails"] = "";
            ViewData["Transaction_BeneficiaryBankCode"] = "";
            ViewData["Transaction_BeneficiaryBankAddress"] = "";
            ViewData["Transaction_BeneficiaryCompanyRegistration"] = "";
            ViewData["Transaction_BeneficiaryUploadSuporting"] = "";
            ViewData["Transaction_BeneficiaryCompanyContact"] = "";

            ViewData["BusinessRadio"] = "";
            ViewData["IndividualRadio"] = "checked";

            return View();
        }

        //GET: ViewEmailLogsIndex
        public ActionResult ViewEmailLogsIndex(int id)
        {
            if (TempData["EmailLogsSearchKeyword"] != null)
            {
                TempData.Remove("EmailLogsSearchKeyword");
            }

            return RedirectToAction("EmailLogsSearchKeyword", new { @id = id });
        }

        //GET: ViewEmailLogs
        public ActionResult ViewEmailLogs(int id, int page = 1)
        {
            Remittances sale = null;

            if (Session["UserRole"].ToString().Contains("Super Admin") || Session["UserRole"].ToString().Contains("General Manager"))
            {
                sale = _remittancesalesModel.GetSingle(id);

                if (sale == null)
                {
                    TempData.Add("Result", "danger|Sale record not found!");
                }
            }
            else
            {
                TempData.Add("Result", "danger|You are not allowed to view email logs!");
            }

            ViewData["EmailLogsTitle"] = "Email Logs";

            int pageSize = Convert.ToInt32(ConfigurationManager.AppSettings["SalePageSize"]);

            TempData["EmailLogsPage"] = page;
            ViewData["EmailLogsPage"] = page;

            TempData["EmailLogsPageSize"] = pageSize;
            ViewData["EmailLogsPageSize"] = pageSize;

            ViewData["EmailLogsSearchKeyword"] = "";
            if (TempData["EmailLogsSearchKeyword"] != null)
            {
                ViewData["EmailLogsSearchKeyword"] = TempData["EmailLogsSearchKeyword"].ToString();
            }

            IPagedList<EmailLog> emailLogs = null;

            if (sale != null)
            {
                emailLogs = _emailLogsModel.GetPaged(new List<string> { "Email Receipt", "Email Confirmation" }, ViewData["EmailLogsSearchKeyword"].ToString(), sale.ID, page, pageSize);

                ViewData["EmailLogsTitle"] = "Email Logs - " + sale.MemoID;
            }

            ViewData["EmailLog"] = emailLogs;
            ViewData["SaleId"] = id;
            ViewData["EmailReceiptFolder"] = ConfigurationManager.AppSettings["EmailReceiptFolder"].ToString();
            ViewData["EmailConfirmationFolder"] = ConfigurationManager.AppSettings["EmailConfirmationFolder"].ToString();

            ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
            return View();
        }

        //POST: ViewEmailLogs
        [HttpPost]
        public ActionResult ViewEmailLogs(int id, FormCollection form)
        {
            Remittances sale = null;

            if (Session["UserRole"].ToString().Contains("Super Admin") || Session["UserRole"].ToString().Contains("General Manager"))
            {
                sale = _remittancesalesModel.GetSingle(id);

                if (sale == null)
                {
                    TempData.Add("Result", "danger|Sale record not found!");
                }
            }
            else
            {
                TempData.Add("Result", "danger|You are not allowed to view email logs!");
            }

            ViewData["EmailLogsTitle"] = "Email Logs";

            int page = 1;
            int pageSize = Convert.ToInt32(ConfigurationManager.AppSettings["SalePageSize"]);

            TempData["EmailLogsPage"] = page;
            ViewData["EmailLogsPage"] = page;

            TempData["EmailLogsPageSize"] = pageSize;
            ViewData["EmailLogsPageSize"] = pageSize;

            ViewData["EmailLogsSearchKeyword"] = form["EmailLogsSearchKeyword"].Trim();
            TempData["EmailLogsSearchKeyword"] = form["EmailLogsSearchKeyword"].Trim();

            IPagedList<EmailLog> emailLogs = null;

            if (sale != null)
            {
                emailLogs = _emailLogsModel.GetPaged(new List<string> { "Email Receipt", "Email Confirmation" }, ViewData["EmailLogsSearchKeyword"].ToString(), sale.ID, page, pageSize);

                ViewData["EmailLogsTitle"] = "Email Logs - " + sale.MemoID;
            }

            ViewData["EmailLog"] = emailLogs;
            ViewData["SaleId"] = id;
            ViewData["EmailReceiptFolder"] = ConfigurationManager.AppSettings["EmailReceiptFolder"].ToString();
            ViewData["EmailConfirmationFolder"] = ConfigurationManager.AppSettings["EmailConfirmationFolder"].ToString();

            ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
            return View();
        }

        //GET: Create
        [RedirectingActionForCreate]
        public ActionResult Create()
        {
            Dropdown[] customerDDL = CustomerDDL();
            Dropdown[] agentDDL = AgentDDL();
            ViewData["CustomerDropdown"] = new SelectList(customerDDL, "val", "name");
            ViewData["AgentDropdown"] = new SelectList(agentDDL, "val", "name");

            ViewData["CustomerContact"] = "";
            ViewData["CustomerAddress"] = "";
            ViewData["CustomerShippingAddress"] = "";
            ViewData["CostPrice"] = "";
            ViewData["AgentRate"] = "";
            ViewData["AgentFee"] = "";
            //Dropdown[] collectionTimeDDL = CollectionTimeDDL();
            //ViewData["CollectionTimeDropdown"] = new SelectList(collectionTimeDDL, "val", "name");

            ViewData["NonUrgentRadio"] = "checked";
            ViewData["UrgentRadio"] = "";
            ViewData["RowId"] = "1";
            //ViewData["RequireDeliveryCheckbox"] = "";
            //ViewData["TransactionTypeBuyRadio"] = "";
            //ViewData["TransactionTypeSellRadio"] = "";
            //ViewData["TransactionTypeEncashmentRadio"] = "";
            //ViewData["TransactionTypeSwapRadio"] = "";
            //ViewData["TransactionTypeCrossCurrencyRadio"] = "";
            //ViewData["LocalPaymentModeCashCheckbox"] = "checked";
            //ViewData["LocalPaymentModeCheque1Checkbox"] = "";
            //ViewData["LocalPaymentModeCheque2Checkbox"] = "";
            //ViewData["LocalPaymentModeCheque3Checkbox"] = "";
            //ViewData["LocalPaymentModeBankTransferCheckbox"] = "";

            //Dropdown[] localPaymentBankDDL = LocalPaymentBankDDL();
            //ViewData["CashBankDropdown"] = new SelectList(localPaymentBankDDL, "val", "name", "CASH");
            //ViewData["Cheque1BankDropdown"] = new SelectList(localPaymentBankDDL, "val", "name");
            //ViewData["Cheque2BankDropdown"] = new SelectList(localPaymentBankDDL, "val", "name");
            //ViewData["Cheque3BankDropdown"] = new SelectList(localPaymentBankDDL, "val", "name");
            //ViewData["BankTransferBankDropdown"] = new SelectList(localPaymentBankDDL, "val", "name");

            //ViewData["PendingChequeLog"] = 0;
            //ViewData["PendingBankTransferLog"] = 0;

            //ViewData["PendingLocalCheque1Log"] = 0;
            //ViewData["PendingLocalCheque2Log"] = 0;
            //ViewData["PendingLocalCheque3Log"] = 0;
            //ViewData["PendingLocalBankTransferLog"] = 0;

            ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
            return View();
        }

        //POST: Create
        [HttpPost]
        [RedirectingActionForCreate]
        public ActionResult Create(Remittances sales, FormCollection form)
        {
            int page = 1;

            //ViewData["PendingChequeLog"] = 0;
            //ViewData["PendingBankTransferLog"] = 0;

            //ViewData["PendingLocalCheque1Log"] = 0;
            //ViewData["PendingLocalCheque2Log"] = 0;
            //ViewData["PendingLocalCheque3Log"] = 0;
            //ViewData["PendingLocalBankTransferLog"] = 0;

            CustomerParticular customer = null;
            //sales.CashBank = "CASH";

            if (sales.CustomerParticularId > 0)
            {
                customer = _customerParticularsModel.GetSingle(sales.CustomerParticularId);

                if (customer == null)
                {
                    ModelState.AddModelError("sales.CustomerParticularId", "Customer record not found.");
                }
                else
                {
                    if (customer.Others[0].Status != "Active")
                    {
                        ModelState.AddModelError("sales.CustomerParticularId", "Customer is not active.");
                    }
                }
            }
            if (!string.IsNullOrEmpty(sales.Remarks))
            {
                if (sales.Remarks.Length > 255)
                {
                    ModelState.AddModelError("sales.Remarks", "Remarks cannot exceed 255 characters.");
                }
            }
            if (!string.IsNullOrEmpty(sales.CustomerRemarks))
            {
                if (sales.CustomerRemarks.Length > 255)
                {
                    ModelState.AddModelError("sales.CustomerRemarks", "Customer remarks cannot exceed 255 characters.");
                }
            }

            List<string> transactionKeys = form.AllKeys.Where(e => e.Contains("Transaction_ID_")).ToList();

            decimal totalGet = 0;
            decimal totalPay = 0;

            if (transactionKeys.Count > 0)
            {
                foreach (string key in transactionKeys)
                {
                    string rowId = key.Split('_')[2];

                    //Validation for All Transaction Types
                    if (string.IsNullOrEmpty(form["Transaction_Type_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_Type_" + rowId, "Type is required.");
                    }

                    if (string.IsNullOrEmpty(form["Transaction_PayCurrency_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_PayCurrency_" + rowId, "Currency is required.");
                    }
                    else
                    {
                        RemittanceProducts currency = _remittanceproductsModel.GetSingle(Convert.ToInt32(form["Transaction_PayCurrency_" + rowId]));

                        if (currency == null)
                        {
                            ModelState.AddModelError("Transaction_PayCurrency_" + rowId, "Currency record not found.");
                        }
                    }

                    if (string.IsNullOrEmpty(form["Transaction_GetCurrency_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_GetCurrency_" + rowId, "Currency is required.");
                    }
                    else
                    {
                        RemittanceProducts currency = _remittanceproductsModel.GetSingle(Convert.ToInt32(form["Transaction_GetCurrency_" + rowId]));

                        if (currency == null)
                        {
                            ModelState.AddModelError("Transaction_GetCurrency_" + rowId, "Currency record not found.");
                        }
                    }

                    if (string.IsNullOrEmpty(form["Transaction_PayAmount_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_PayAmount_" + rowId, "Amount (Pay) is required.");
                    }
                    else
                    {
                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_PayAmount_" + rowId]);

                        if (!checkAmountLocalFormat)
                        {
                            ModelState.AddModelError("Transaction_PayAmount_" + rowId, "Amount (Pay) is not valid.");
                        }
                        else
                        {
                            totalPay += Convert.ToDecimal(form["Transaction_PayAmount_" + rowId]);
                        }
                    }

                    if (string.IsNullOrEmpty(form["Transaction_GetAmount_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_GetAmount_" + rowId, "Amount (Get) is required.");
                    }
                    else
                    {
                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_GetAmount_" + rowId]);

                        if (!checkAmountLocalFormat)
                        {
                            ModelState.AddModelError("Transaction_GetAmount_" + rowId, "Amount (Get) is not valid.");
                        }
                        else
                        {
                            RemittanceProducts getcurrency = _remittanceproductsModel.GetSingle(Convert.ToInt32(form["Transaction_GetCurrency_" + rowId]));
                            //if (getcurrency != null)
                            //{
                            //    var maxamount = getcurrency.MaxAmount;
                            //    if (maxamount < Convert.ToDecimal(form["Transaction_GetAmount_" + rowId]) && maxamount != 0)
                            //    {
                            //        ModelState.AddModelError("Transaction_GetAmount_" + rowId, "Amount (Get) exceeded max amount.");
                            //    }
                            //}

                            totalGet += Convert.ToDecimal(form["Transaction_GetAmount_" + rowId]);
                        }
                    }

                    if (string.IsNullOrEmpty(form["Transaction_PayPaymentType_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_PayPaymentType_" + rowId, "Payment Type is not valid.");
                    }
                    else
                    {
                        if (form["Transaction_PayPaymentType_" + rowId].ToString() == "2")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_ChequeNo_" + rowId, "Cheque No. is required.");
                            }
                            else
                            {
                                //if (sales.TransactionType == "Buy")
                                //{
                                //    ViewData["PendingChequeLog"] = 1;
                                //}
                            }
                            if (string.IsNullOrEmpty(form["Transaction_DepositAccount_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_DepositAccount_" + rowId, "Deposit Account is required.");
                            }
                        }
                        else if (form["Transaction_PayPaymentType_" + rowId].ToString() == "3")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_BankTransferNo_" + rowId, "Bank Transfer No. is required.");
                            }
                            else
                            {
                                //if (sales.TransactionType == "Buy")
                                //{
                                //    ViewData["PendingBankTransferLog"] = 1;
                                //}
                            }
                            if (string.IsNullOrEmpty(form["Transaction_DepositAccount_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_DepositAccount_" + rowId, "Deposit Account is required.");
                            }
                        }
                    }

                    if (string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is required.");
                    }
                    else
                    {
                        bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                        if (checkRateFormat)
                        {
                            if (sales.CustomerParticularId > 0 && !string.IsNullOrEmpty(form["Transaction_PayCurrency_" + rowId]))
                            {
                                //RemittanceProducts product = _remittanceproductsModel.GetSingle(Convert.ToInt32(form["Transaction_PayCurrency_" + rowId]));
                                //decimal buyRate = 0;
                                //decimal acceptable = product.AcceptableRange;

                                //if (acceptable > 0)
                                //{
                                //    //if (product.PayRate != null)
                                //    //{
                                //    //    buyRate = Convert.ToDecimal(product.PayRate);
                                //    //}
                                //    //else
                                //    //{
                                //    buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                //    //}

                                //    //decimal upperLimit = buyRate * (1 + acceptable / 100);
                                //    //decimal lowerLimit = buyRate * (1 - acceptable / 100);
                                //    decimal rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);

                                //    if (rate > acceptable)
                                //    {
                                //        ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is out of acceptable range.");
                                //    }
                                //}
                            }
                        }
                        else
                        {
                            ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is not valid.");
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_Fee_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_Fee_" + rowId, "Transaction fee is required.");
                    }
                    else
                    {
                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Fee_" + rowId]);

                        if (!checkAmountLocalFormat)
                        {
                            ModelState.AddModelError("Transaction_Fee_" + rowId, "Transaction Fee is not valid.");
                        }
                    }
                    bool beneficiaryForm = false;
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryName_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryName_" + rowId, "Full name is required.");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_BeneficiaryName_" + rowId].Length > 255)
                        {
                            ModelState.AddModelError("Transaction_BeneficiaryName_" + rowId, "Full name cannot more than 255 words.");
                            beneficiaryForm = true;
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryBankAccount_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryBankAccount_" + rowId, "Bank Account is required.");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_BeneficiaryBankAccount_" + rowId].Length > 100)
                        {
                            ModelState.AddModelError("Transaction_BeneficiaryBankAccount_" + rowId, "Bank Account cannot more than 100 words.");
                            beneficiaryForm = true;
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_ContactNoMain_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_ContactNoMain_" + rowId, "Contact No is required.");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_ContactNoMain_" + rowId].Length > 100)
                        {
                            ModelState.AddModelError("Transaction_ContactNoMain_" + rowId, "Contact No cannot more than 100 words.");
                            beneficiaryForm = true;
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_AddressMain_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_AddressMain_" + rowId, "Address is required.");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_AddressMain_" + rowId].Length > 255)
                        {
                            ModelState.AddModelError("Transaction_AddressMain_" + rowId, "Address cannot more than 255 words.");
                            beneficiaryForm = true;
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryBankName_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryBankName_" + rowId, "Bank Name is required.");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_BeneficiaryBankName_" + rowId].Length > 100)
                        {
                            ModelState.AddModelError("Transaction_BeneficiaryBankName_" + rowId, "Bank Name cannot more than 100 words.");
                            beneficiaryForm = true;
                        }
                    }
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankCode_" + rowId]))
                    {
                        if (form["Transaction_BeneficiaryBankCode_" + rowId].Length > 100)
                        {
                            ModelState.AddModelError("Transaction_BeneficiaryBankCode_" + rowId, "Bank code cannot more than 100 words.");
                            beneficiaryForm = true;
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryBankCountry_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryBankCountry_" + rowId, "Bank country is required.");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (Convert.ToInt32(form["Transaction_BeneficiaryBankCountry_" + rowId]) == 48)
                        {
                            if (string.IsNullOrEmpty(form["Transaction_OtherBankCountry_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_OtherBankCountry_" + rowId, "Other Bank country is required.");
                                beneficiaryForm = true;
                            }
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryBankAddress_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryBankAddress_" + rowId, "Bank address is required.");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_BeneficiaryBankAddress_" + rowId].Length > 255)
                        {
                            ModelState.AddModelError("Transaction_BeneficiaryBankAddress_" + rowId, "Bank address cannot more than 255 words.");
                            beneficiaryForm = true;
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryPurposePayment_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryPurposePayment_" + rowId, "Purpose of payment is required.");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (Convert.ToInt32(form["Transaction_BeneficiaryPurposePayment_" + rowId]) == 52)
                        {
                            if (string.IsNullOrEmpty(form["Transaction_OtherPurposePayment_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_OtherPurposePayment_" + rowId, "Other purpose of payment is required.");
                                beneficiaryForm = true;
                            }
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiarySourceFund_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiarySourceFund_" + rowId, "Source of funds is required.");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (Convert.ToInt32(form["Transaction_BeneficiarySourceFund_" + rowId]) == 20)
                        {
                            if (string.IsNullOrEmpty(form["Transaction_OtherSourceFund_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_OtherSourceFund_" + rowId, "Other source of funds is required.");
                                beneficiaryForm = true;
                            }
                        }
                    }
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiarySupportDocType_" + rowId]))
                    {
                        if (form["Transaction_BeneficiarySupportDocType_" + rowId].ToString() != "0")
                        {
                            //if (string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadSuporting_" + rowId].ToString()))
                            //{
                            //    ModelState.AddModelError("Transaction_BeneficiaryUploadSuporting_" + rowId, "Upload Supporting is required.");
                            //    beneficiaryForm = true;
                            //}

                            if (Convert.ToInt32(form["Transaction_BeneficiarySupportDocType_" + rowId]) == 11)
                            {
                                if (string.IsNullOrEmpty(form["Transaction_OtherSupportDocType_" + rowId]))
                                {
                                    ModelState.AddModelError("Transaction_OtherSupportDocType_" + rowId, "Other upload supporting is required.");
                                    beneficiaryForm = true;
                                }
                            }

                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryPaymentDetails_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryPaymentDetails_" + rowId, "Payment Details / Instructions is required.");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_BeneficiaryPaymentDetails_" + rowId].Length > 255)
                        {
                            ModelState.AddModelError("Transaction_BeneficiaryPaymentDetails_" + rowId, "Payment Details / Instructions cannot more than 255 words.");
                            beneficiaryForm = true;
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryType_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryType_" + rowId, "Beneficiary type is required.");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_BeneficiaryType_" + rowId].ToString() == "individual")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_BeneficiaryNationality_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_BeneficiaryNationality_" + rowId, "Nationality is required.");
                                beneficiaryForm = true;
                            }
                            else
                            {
                                if (Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]) == 201)
                                {
                                    if (string.IsNullOrEmpty(form["Transaction_OtherNationality_" + rowId]))
                                    {
                                        ModelState.AddModelError("Transaction_OtherNationality_" + rowId, "Other nationality is required.");
                                        beneficiaryForm = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (string.IsNullOrEmpty(form["Transaction_BeneficiaryCompanyRegistration_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_BeneficiaryCompanyRegistration_" + rowId, "Company registration no is required.");
                                beneficiaryForm = true;
                            }
                            else
                            {
                                if (form["Transaction_BeneficiaryCompanyRegistration_" + rowId].Length > 100)
                                {
                                    ModelState.AddModelError("Transaction_BeneficiaryCompanyRegistration_" + rowId, "Company registration no cannot more than 100 words.");
                                    beneficiaryForm = true;
                                }
                            }
                            if (string.IsNullOrEmpty(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_BeneficiaryCategoryBusiness_" + rowId, "Category of business is required.");
                                beneficiaryForm = true;
                            }
                            else
                            {
                                if (Convert.ToInt32(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]) == 331)
                                {
                                    if (string.IsNullOrEmpty(form["Transaction_OtherCategoryBusiness_" + rowId]))
                                    {
                                        ModelState.AddModelError("Transaction_OtherCategoryBusiness_" + rowId, "Other category of business is required.");
                                        beneficiaryForm = true;
                                    }
                                }
                            }
                            if (string.IsNullOrEmpty(form["Transaction_BeneficiaryCompanyContact_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_BeneficiaryCompanyContact_" + rowId, "Company contact no is required.");
                                beneficiaryForm = true;
                            }
                            else
                            {
                                if (form["Transaction_BeneficiaryCompanyContact_" + rowId].Length > 100)
                                {
                                    ModelState.AddModelError("Transaction_BeneficiaryCompanyContact_" + rowId, "Company contact no cannot more than 100 words.");
                                    beneficiaryForm = true;
                                }
                            }
                        }
                    }
                    if (beneficiaryForm)
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryForm_" + rowId, "Beneficiary Form is not valid.");
                    }

                }
            }
            else
            {
                ModelState.AddModelError("Transaction", "Please add at least ONE transaction.");
            }

			if (!string.IsNullOrEmpty(form["AgentId"].ToString()))
			{
				sales.AgentId = Convert.ToInt32(form["AgentId"]);
			}

			if (ModelState.IsValid)
            {
                bool sale_result = false;

                //For rollback if error occured
                Dictionary<int, decimal[]> productOldRates = new Dictionary<int, decimal[]>();

                try
                {
					lock (LockObject)
					{
						string memoID = _settingsModel.GetCodeValue("PREFIX_REMITTANCE") + DateTime.Now.ToString("yy");

						Remittances lastRecord = _remittancesalesModel.GetLastRecord();

						if (lastRecord != null)
						{
                            var output = Regex.Replace(lastRecord.MemoID, @"[^0-9]", string.Empty);
                            int id = Convert.ToInt32(output.Substring(2)) + 1;
							memoID += id.ToString().PadLeft(7, '0');
						}
						else
						{
							memoID += "0000001";
						}

						Remittances checkMemoID = _remittancesalesModel.GetSingle(memoID);

						if (checkMemoID != null)
						{
							TempData.Add("Result", "danger|Same Memo ID [" + memoID + "] record exist. Please back to listing and check again.");
						}
						else
						{
							sales.MemoID = memoID;

							sales.IssueDate = DateTime.Now;
							var getCustomerDetail = _customerParticularsModel.GetSingle(sales.CustomerParticularId);
							if (getCustomerDetail.CustomerType == "Corporate & Trading Company")
							{
								sales.Address1 = getCustomerDetail.Company_BusinessAddress1;
								sales.Address2 = getCustomerDetail.Company_BusinessAddress2;
								sales.Address3 = getCustomerDetail.Company_BusinessAddress3;
								sales.ShippingAddress1 = getCustomerDetail.Shipping_Address1;
								sales.ShippingAddress2 = getCustomerDetail.Shipping_Address2;
								sales.ShippingAddress3 = getCustomerDetail.Shipping_Address3;
								sales.ContactNo = getCustomerDetail.Company_TelNo;
							}
							else
							{
								sales.Address1 = getCustomerDetail.Natural_PermanentAddress;
								sales.Address2 = getCustomerDetail.Natural_PermanentAddress2;
								sales.Address3 = getCustomerDetail.Natural_PermanentAddress3;
								sales.ShippingAddress1 = getCustomerDetail.Natural_MailingAddress;
								sales.ShippingAddress2 = getCustomerDetail.Natural_MailingAddress2;
								sales.ShippingAddress3 = getCustomerDetail.Natural_MailingAddress3;
								sales.ContactNo = getCustomerDetail.Natural_ContactNoM;
							}

							sales.TotalPayAmount = totalPay;
							sales.TotalGetAmount = totalGet;
							sales.CreatedBy = Convert.ToInt32(Session["UserId"]);
							sales.Status = "Pending Dealer";
							sales.CreatedFrom = "Admin";
							if (customer.Others[0].GMApprovalAbove > 0)
							{
								if (sales.TotalPayAmount >= Convert.ToDecimal(customer.Others[0].GMApprovalAbove))
								{
									sales.Status = "Pending GM Approval";
								}
							}

							sale_result = _remittancesalesModel.Add(sales);

							if (sale_result)
							{
								int userid = Convert.ToInt32(Session["UserId"]);
								string tableAffected = "RemittanceSales";
								string description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Created Remittance Sale [" + sales.MemoID + "]";

								bool sale_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);

								if (sale_log)
								{
									//Add Approval History
									bool approval_history = _approvalHistorysModel.Add("RemittanceSale", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Create", "[" + Session["Username"].ToString() + "] Created Remittance Sale [" + sales.MemoID + "]");

								}

								bool add_transaction = false;
								bool add_denomination = false;

								//To update Product rates for new sale, after changes 0.7
								Dictionary<int, decimal> buyTransactions = new Dictionary<int, decimal>();
								Dictionary<int, decimal> sellTransactions = new Dictionary<int, decimal>();

								foreach (string key in transactionKeys)
								{
									string rowId = key.Split('_')[2];

									RemittanceOrders transaction = new RemittanceOrders();
									transaction.RemittanceId = sales.ID;
									transaction.TransactionID = form[key].ToString();
									transaction.GetAmount = Convert.ToDecimal(form["Transaction_GetAmount_" + rowId]);
									transaction.PayAmount = Convert.ToDecimal(form["Transaction_PayAmount_" + rowId]);
									transaction.GetPaymentType = form["Transaction_GetPaymentType_" + rowId].ToString();
									transaction.PayPaymentType = form["Transaction_PayPaymentType_" + rowId].ToString();
									transaction.PayDepositAccount = Convert.ToInt32(form["Transaction_DepositAccount_" + rowId]);
									transaction.BeneficiaryBankAccountNo = form["Transaction_BeneficiaryBankAccount_" + rowId].ToString();
									transaction.BeneficiaryBankAddress = form["Transaction_BeneficiaryBankAddress_" + rowId].ToString();
									transaction.BeneficiaryBankCode = form["Transaction_BeneficiaryBankCode_" + rowId].ToString();
									transaction.BeneficiaryContactNoMain = form["Transaction_ContactNoMain_" + rowId].ToString();
									transaction.BeneficiaryAddressMain = form["Transaction_AddressMain_" + rowId].ToString();
									transaction.BeneficiaryBankName = form["Transaction_BeneficiaryBankName_" + rowId].ToString();
									transaction.IBANEuropeBSBAustralia = form["Transaction_IBANEuropeBSBAustralia_" + rowId].ToString();
									transaction.BeneficiaryBankCountry = Convert.ToInt32(form["Transaction_BeneficiaryBankCountry_" + rowId]);
									if (Convert.ToInt32(form["Transaction_BeneficiaryBankCountry_" + rowId]) == 48)
									{
										transaction.BankCountryIfOthers = form["Transaction_OtherBankCountry_" + rowId].ToString();
									}
									if (form["Transaction_BeneficiaryType_" + rowId].ToString() == "business")
									{
										transaction.BeneficiaryCategoryOfBusiness = Convert.ToInt32(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]);
										if (Convert.ToInt32(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]) == 331)
										{
											transaction.BeneficiaryBusinessCategoryIfOthers = form["Transaction_OtherCategoryBusiness_" + rowId].ToString();
										}
										transaction.BeneficiaryCompanyContactNo = form["Transaction_BeneficiaryCompanyContact_" + rowId].ToString();
										transaction.BeneficiaryCompanyRegistrationNo = form["Transaction_BeneficiaryCompanyRegistration_" + rowId].ToString();
										transaction.BeneficiaryNationality = Convert.ToInt32(form["Transaction_BeneficiaryCategoryOfBusiness_" + rowId]);
									}
									else
									{
										transaction.BeneficiaryNationality = Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]);
										if (Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]) == 201)
										{
											transaction.BeneficiaryNationalityIfOthers = form["Transaction_OtherNationality_" + rowId].ToString();
										}
										transaction.BeneficiaryCategoryOfBusiness = Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]);
										transaction.BeneficiaryCompanyContactNo = "";
										transaction.BeneficiaryCompanyRegistrationNo = "";
									}
									transaction.BeneficiaryFullName = form["Transaction_BeneficiaryName_" + rowId].ToString();
									transaction.BeneficiaryPaymentDetails = form["Transaction_BeneficiaryPaymentDetails_" + rowId].ToString();
									transaction.BeneficiaryPurposeOfPayment = Convert.ToInt32(form["Transaction_BeneficiaryPurposePayment_" + rowId]);
									if (Convert.ToInt32(form["Transaction_BeneficiaryPurposePayment_" + rowId]) == 52)
									{
										transaction.PurposeOfPaymentIfOthers = form["Transaction_OtherPurposePayment_" + rowId].ToString();
									}
									transaction.BeneficiarySourceOfPayment = Convert.ToInt32(form["Transaction_BeneficiarySourceFund_" + rowId]);
									if (Convert.ToInt32(form["Transaction_BeneficiarySourceFund_" + rowId]) == 20)
									{
										transaction.SourceOfPaymentIfOthers = form["Transaction_OtherSourceFund_" + rowId].ToString();
									}
									transaction.BeneficiaryType = form["Transaction_BeneficiaryType_" + rowId].ToString();
									if (string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadSuporting_" + rowId]))
									{
										transaction.BeneficiaryUploadSupportingFile = "";
									}
									else
									{
										transaction.BeneficiaryUploadSupportingFile = form["Transaction_BeneficiaryUploadSuporting_" + rowId].ToString();
									}
									if (string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadIDPassport_" + rowId]))
									{
										transaction.BeneficiaryUploadIDCopy = "";
									}
									else
									{
										transaction.BeneficiaryUploadIDCopy = form["Transaction_BeneficiaryUploadIDPassport_" + rowId].ToString();
									}
									transaction.BeneficiaryUploadSupportingType = Convert.ToInt32(form["Transaction_BeneficiarySupportDocType_" + rowId]);
									if (Convert.ToInt32(form["Transaction_BeneficiarySupportDocType_" + rowId]) == 11)
									{
										transaction.UploadSupportingTypeIfOthers = form["Transaction_OtherSupportDocType_" + rowId].ToString();
									}

									transaction.PayCurrency = Convert.ToInt32(form["Transaction_PayCurrency_" + rowId]);
									transaction.GetCurrency = Convert.ToInt32(form["Transaction_GetCurrency_" + rowId]);
									transaction.Rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
									transaction.Fee = Convert.ToDecimal(form["Transaction_Fee_" + rowId]);
									var getPayProduct = _remittanceproductsModel.GetSingle(Convert.ToInt32(form["Transaction_PayCurrency_" + rowId]));
									if (getPayProduct != null)
									{
										if (getPayProduct.PayRate != null && getPayProduct.PayRate > 0)
										{
											transaction.currentPayRate = getPayProduct.PayRate ?? 0;
										}
										else
										{
											if (getPayProduct.AutomatedPayRate != null && getPayProduct.AutomatedPayRate > 0)
												transaction.currentPayRate = getPayProduct.AutomatedPayRate ?? 0;
										}
									}
									//else
									//{
									//    transaction.currentPayRate = Convert.ToDecimal(form["payRate_" + rowId]);
									//}
									if (!string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
									{
										transaction.ChequeNo = form["Transaction_ChequeNo_" + rowId].ToString();
									}
									if (!string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
									{
										transaction.BankTransferNo = form["Transaction_BankTransferNo_" + rowId].ToString();
									}

									bool result_transaction = _remittanceordersModel.Add(transaction);

									if (result_transaction)
									{
										if (!string.IsNullOrEmpty(transaction.BeneficiaryUploadSupportingFile))
										{
											string[] supportDocFile = transaction.BeneficiaryUploadSupportingFile.Split(',');

											foreach (string file in supportDocFile)
											{
												string sourceFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), file);
												string destinationFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["BeneficiarySupportDocumentsFolder"].ToString()), file);

												if (System.IO.File.Exists(sourceFile))
												{
													System.IO.File.Move(sourceFile, destinationFile);
												}
											}
										}
										if (!string.IsNullOrEmpty(transaction.BeneficiaryUploadIDCopy))
										{
											string[] supportDocFile = transaction.BeneficiaryUploadIDCopy.Split(',');

											foreach (string file in supportDocFile)
											{
												string sourceFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), file);
												string destinationFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["BeneficiaryUploadIDCopyFolder"].ToString()), file);

												if (System.IO.File.Exists(sourceFile))
												{
													System.IO.File.Move(sourceFile, destinationFile);
												}
											}
										}
										if (!add_transaction)
										{
											add_transaction = true;
										}
									}
								}

								//after add all the sale transaction, write log file.
								if (add_transaction)
								{
									userid = Convert.ToInt32(Session["UserId"]);
									tableAffected = "RemittanceOrders";
									description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Created Remittance Order [" + sales.MemoID + "]";

									bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
								}

								TempData.Add("Result", "success|You have successfully created a New Memo [" + sales.MemoID + "]!");

								return RedirectToAction("Listing", new { @page = page });
							}
							else
							{
								TempData.Add("Result", "danger|An error occured while saving sale record!");
							}
						}
					}
                }
                catch (DbUpdateException e)
                {
                    if (e.ToString().Contains("was deadlocked on lock resources with another process and has been chosen as the deadlock victim"))
                    {
                        bool result = _remittancesalesModel.Delete(sales.ID);

                        foreach (int key in productOldRates.Keys)
                        {
                            Product product = _productsModel.GetSingle(key);

                            product.BuyRate = productOldRates[key][0];
                            product.SellRate = productOldRates[key][1];

                            _productsModel.Update(key, product);
                        }

                        TempData.Add("Result", "danger|An error occured while saving sale record! Please submit again!");
                    }
                    else
                    {
						if(sales.ID > 0)
						{
							var checkRemttanceSaleTransaction = _remittanceordersModel.GetSaleTransactions(sales.ID);

							if (checkRemttanceSaleTransaction.Count == 0)
							{
								bool result = _remittancesalesModel.Delete(sales.ID);
							}
						}
                        throw;
                    }
                }
                catch
                {
                    throw;
                }
            }
            else
            {
                TempData.Add("Result", "danger|There is something wrong in the form!");
            }

            var agentId = 0;

            if (!string.IsNullOrEmpty(form["AgentId"].ToString()))
            {
                agentId = Convert.ToInt32(form["AgentId"]);
            }
            sales.AgentId = agentId;
            Dropdown[] customerDDL = CustomerDDL();
            ViewData["CustomerDropdown"] = new SelectList(customerDDL, "val", "name", sales.CustomerParticularId);
            Dropdown[] agentDDL = AgentDDL();
            ViewData["AgentDropdown"] = new SelectList(agentDDL, "val", "name", agentId);
            ViewData["CustomerContact"] = "";
            ViewData["CustomerAddress"] = "";
            if (customer != null)
            {
                string contact = "";
                string address = "";
                string shippingadress = "";

                if (customer.CustomerType == "Corporate & Trading Company")
                {
                    contact = customer.Company_TelNo;
                    if (!string.IsNullOrEmpty(customer.Company_BusinessAddress2))
                    {
                        address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_PostalCode;
                        if (!string.IsNullOrEmpty(customer.Company_BusinessAddress3))
                        {
                            address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_BusinessAddress3 + ", " + customer.Company_PostalCode;

                        }
                    }
                    else
                    {
                        address = customer.Company_BusinessAddress1 + ", " + customer.Company_PostalCode;
                    }

                    if (!string.IsNullOrEmpty(customer.Shipping_Address2))
                    {
                        shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_Address2 + ", " + customer.Shipping_PostalCode;

                        if (!string.IsNullOrEmpty(customer.Shipping_Address3))
                        {
                            shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_Address2 + ", " + customer.Shipping_Address3 + ", " + customer.Shipping_PostalCode;

                        }
                    }
                    else
                    {
                        shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_PostalCode;
                    }

                }
                else
                {
                    contact = customer.Natural_ContactNoM;
                    address = customer.Natural_PermanentAddress;
                    shippingadress = customer.Natural_MailingAddress + ", " + customer.Natural_MailingAddress2 + ", " + customer.Shipping_PostalCode;
                }

                ViewData["CustomerContact"] = contact;
                ViewData["CustomerAddress"] = address;
                ViewData["CustomerShippingAddress"] = shippingadress;
            }

            if (ViewData["CustomerShippingAddress"] == null)
            {
                ViewData["CustomerShippingAddress"] = "";
            }
            //Dropdown[] collectionTimeDDL = CollectionTimeDDL();
            //ViewData["CollectionTimeDropdown"] = new SelectList(collectionTimeDDL, "val", "name", sales.CollectionTime);

            ViewData["NonUrgentRadio"] = "";
            ViewData["UrgentRadio"] = "";
            if (sales.IsUrgent == 1)
            {
                ViewData["UrgentRadio"] = "checked";
            }
            else
            {
                ViewData["NonUrgentRadio"] = "checked";
            }
            ViewData["CostPrice"] = sales.CostPrice;
            if (sales.AgentFee == null || sales.AgentFee < 0)
            {
                sales.AgentFee = 0;
            }
            if (sales.AgentRate == null || sales.AgentRate < 0)
            {
                sales.AgentRate = 0;
            }
            ViewData["AgentRate"] = sales.AgentRate;
            ViewData["AgentFee"] = sales.AgentFee;


            IList<RemittanceOrderData> transactions = new List<RemittanceOrderData>();
            int payDecimal = 1;
            string paySymbol = "$";
            foreach (string key in transactionKeys)
            {
                RemittanceOrderData transactionData = new RemittanceOrderData();
                //transactionData.Denominations = new List<DenominationsData>();

                string rowId = key.Split('_')[2];
                //rowId = rowId.ToString().PadLeft(3, '0');
                string transactionID = form[key];
                string type = form["Transaction_Type_" + rowId].ToString();

                string productId = form["Transaction_PayCurrency_" + rowId].ToString();
                RemittanceProducts product = _remittanceproductsModel.GetSingle(Convert.ToInt32(productId));
                string currencyFormat = GetDecimalFormat(product.ProductDecimal);
                paySymbol = product.ProductSymbol;
                string getproductId = form["Transaction_GetCurrency_" + rowId].ToString();
                RemittanceProducts getproduct = _remittanceproductsModel.GetSingle(Convert.ToInt32(getproductId));
                string getcurrencyFormat = GetDecimalFormat(getproduct.ProductDecimal);

                Dropdown2[] currency = CurrencyDDL2("Remittance");
                var payCurrencyDDL = new SelectList(currency, "val", "name", dataGroupField: "group", productId);
                var getCurrencyDDL = new SelectList(currency, "val", "name", dataGroupField: "group", getproductId);

                string symbol = _remittanceproductsModel.GetSingle(Convert.ToInt32(productId)).ProductSymbol;
                string rate = "";
                if (!string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                {
                    rate = form["Transaction_Rate_" + rowId].ToString();
                }
                //int unit = Convert.ToInt32(form["Transaction_Unit_" + rowId].ToString().Replace(",", ""));

                //string encashmentRate = "";
                //if (!string.IsNullOrEmpty(form["Transaction_EncashmentRate_" + rowId]))
                //{
                //    encashmentRate = form["Transaction_EncashmentRate_" + rowId].ToString();
                //}

                //string crossRate = "";
                //if (!string.IsNullOrEmpty(form["Transaction_CrossRate_" + rowId]))
                //{
                //    crossRate = form["Transaction_CrossRate_" + rowId].ToString();
                //}

                string paymentModeVal = "";
                if (!string.IsNullOrEmpty(form["Transaction_PayPaymentType_" + rowId]))
                {
                    paymentModeVal = form["Transaction_PayPaymentType_" + rowId].ToString();
                }
                Dropdown[] paymentMode = PaymentModeDDL(Convert.ToInt32(productId));
                SelectList paymentModeDDL = new SelectList(paymentMode, "val", "name", paymentModeVal);

                //string getpaymentModeVal = "";
                //if (!string.IsNullOrEmpty(form["Transaction_GetPaymentType_" + rowId]))
                //{
                //    getpaymentModeVal = form["Transaction_GetPaymentType_" + rowId].ToString();
                //}
                //Dropdown[] getpaymentModeDDL = new Dropdown[1];
                //getpaymentModeDDL[0] = new Dropdown { name = "Bank Transfer", val = "Bank Transfer" };
                Dropdown[] getpaymentMode = new Dropdown[1];
                getpaymentMode[0] = new Dropdown { name = "Bank Transfer", val = "3" };
                SelectList getpaymentModeDDL = new SelectList(getpaymentMode, "val", "name");

                string disabledCheque = "disabled";
                string disabledBankTranfer = "disabled";
                string disabledDepositAcc = "disabled";
                string disabledOtherPurposePayment = "disabled";
                string disabledOtherCategoryBusiness = "disabled";
                string disabledOtherNationalities = "disabled";
                string disabledOtherSourceFund = "disabled";
                string disabledOtherSuppDocType = "disabled";
                string disabledOtherBankCountry = "disabled";
                if (paymentModeVal == "2")
                {
                    disabledCheque = "";
                    disabledDepositAcc = "";
                }
                else if (paymentModeVal == "3")
                {
                    disabledBankTranfer = "";
                    disabledDepositAcc = "";
                }

                string chequeNo = "";
                if (!string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
                {
                    if (paymentModeVal == "2")
                        chequeNo = form["Transaction_ChequeNo_" + rowId].ToString();
                }

                string depositAcc = "";
                if (!string.IsNullOrEmpty(form["Transaction_DepositAccount_" + rowId]))
                {
                    depositAcc = form["Transaction_DepositAccount_" + rowId].ToString();
                }

                Dropdown[] paymentBankDDL = PayBankDDL();
                var depositAccDDL = new SelectList(paymentBankDDL, "val", "name", depositAcc);

                string bankTransferNo = "";
                if (!string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
                {
                    if (paymentModeVal == "3")
                        bankTransferNo = form["Transaction_BankTransferNo_" + rowId].ToString();
                }

                string amountPay = "";
                if (!string.IsNullOrEmpty(form["Transaction_PayAmount_" + rowId]))
                {
                    amountPay = form["Transaction_PayAmount_" + rowId].ToString();
                }

                string amountGet = "";
                if (!string.IsNullOrEmpty(form["Transaction_GetAmount_" + rowId]))
                {
                    amountGet = form["Transaction_GetAmount_" + rowId].ToString();
                }

                string transactionPayrate = "";
                if (!string.IsNullOrEmpty(form["payrate_" + rowId]))
                {
                    transactionPayrate = form["payrate_" + rowId].ToString();
                }

                string transactionCurrentPayrate = "";
                if (product != null)
                {
                    if (product.PayRate != null && product.PayRate > 0)
                    {
                        transactionCurrentPayrate = product.PayRate.ToString();

                    }
                    else
                    {
                        if (product.AutomatedPayRate != null && product.AutomatedPayRate > 0)
                            transactionCurrentPayrate = product.AutomatedPayRate.ToString();
                    }
                }


                string transactionGetrate = "";
                if (!string.IsNullOrEmpty(form["getrate_" + rowId]))
                {
                    transactionGetrate = form["getrate_" + rowId].ToString();
                }

                string gettransactionFees = "";
                if (!string.IsNullOrEmpty(form["gettransactionFees_" + rowId]))
                {
                    gettransactionFees = form["gettransactionFees_" + rowId].ToString();
                }

                string transactionFees = "";
                if (!string.IsNullOrEmpty(form["Transaction_Fee_" + rowId]))
                {
                    transactionFees = form["Transaction_Fee_" + rowId].ToString();
                }
                Dropdown[] beneficiaries = BeneficiariesDDL();
                Dropdown[] docsuppList = SupportDocTypeDDL();
                Dropdown[] countries = CountryDDL();
                Dropdown[] paymentList = PurposePaymentDDL(0);
                Dropdown[] fundList = SourceFundsDDL();
                Dropdown[] nationalities = NationalityDDL();
                Dropdown2[] BusinessCategoriesLists = BusinessCategoryDDL();
                ViewData["BeneficiaryDropdown"] = new SelectList(beneficiaries, "val", "name");

                string beneficiaryName = "";
                if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryName_" + rowId]))
                {
                    beneficiaryName = form["Transaction_BeneficiaryName_" + rowId].ToString();
                }

                string beneficiaryBankAcc = "";
                if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankAccount_" + rowId]))
                {
                    beneficiaryBankAcc = form["Transaction_BeneficiaryBankAccount_" + rowId].ToString();
                }

                string beneficiaryBankCode = "";
                if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankCode_" + rowId]))
                {
                    beneficiaryBankCode = form["Transaction_BeneficiaryBankCode_" + rowId].ToString();
                }

                string beneficiaryBankCountry = "";
                string otherBankCountry = "";
                if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankCountry_" + rowId]))
                {
                    beneficiaryBankCountry = form["Transaction_BeneficiaryBankCountry_" + rowId].ToString();

                    if (Convert.ToInt32(form["Transaction_BeneficiaryBankCountry_" + rowId]) == 48)
                    {
                        disabledOtherBankCountry = "";
                        otherBankCountry = form["Transaction_OtherBankCountry_" + rowId].ToString();
                    }
                }
                var countriesDDL = new SelectList(countries, "val", "name", beneficiaryBankCountry);

                string beneficiaryAddress = "";
                if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankAddress_" + rowId]))
                {
                    beneficiaryAddress = form["Transaction_BeneficiaryBankAddress_" + rowId].ToString();
                }

                string beneficiaryMainContact = "";
                if (!string.IsNullOrEmpty(form["Transaction_ContactNoMain_" + rowId]))
                {
                    beneficiaryMainContact = form["Transaction_ContactNoMain_" + rowId].ToString();
                }

                string beneficiaryMainAddress = "";
                if (!string.IsNullOrEmpty(form["Transaction_AddressMain_" + rowId]))
                {
                    beneficiaryMainAddress = form["Transaction_AddressMain_" + rowId].ToString();
                }

                string beneficiaryBankName = "";
                if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankName_" + rowId]))
                {
                    beneficiaryBankName = form["Transaction_BeneficiaryBankName_" + rowId].ToString();
                }

                string IBANEuropeBSBAustralia = "";
                if (!string.IsNullOrEmpty(form["Transaction_IBANEuropeBSBAustralia_" + rowId]))
                {
                    IBANEuropeBSBAustralia = form["Transaction_IBANEuropeBSBAustralia_" + rowId].ToString();
                }
                string beneficiaryType = "";
                ViewData["IndividualRadio_" + rowId] = "";
                ViewData["BusinessRadio_" + rowId] = "";
                if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryType_" + rowId]))
                {
                    beneficiaryType = form["Transaction_BeneficiaryType_" + rowId].ToString();

                    if (beneficiaryType == "individual")
                    {
                        ViewData["IndividualRadio_" + rowId] = "checked";
                        paymentList = PurposePaymentDDL(0);
                    }
                    else if (beneficiaryType == "business")
                    {
                        ViewData["BusinessRadio_" + rowId] = "checked";
                        paymentList = PurposePaymentDDL(1);
                    }
                }

                string beneficiaryPurposePayment = "";
                string otherPurposePayment = "";
                if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryPurposePayment_" + rowId]))
                {
                    beneficiaryPurposePayment = form["Transaction_BeneficiaryPurposePayment_" + rowId].ToString();
                    if (Convert.ToInt32(form["Transaction_BeneficiaryPurposePayment_" + rowId]) == 52)
                    {
                        disabledOtherPurposePayment = "";
                        otherPurposePayment = form["Transaction_OtherPurposePayment_" + rowId].ToString();
                    }
                }
                var paymentListDDL = new SelectList(paymentList, "val", "name", beneficiaryPurposePayment);

                string beneficiarySourceFund = "";
                string otherSourceFund = "";
                if (!string.IsNullOrEmpty(form["Transaction_BeneficiarySourceFund_" + rowId]))
                {
                    beneficiarySourceFund = form["Transaction_BeneficiarySourceFund_" + rowId].ToString();
                    if (Convert.ToInt32(form["Transaction_BeneficiarySourceFund_" + rowId]) == 20)
                    {
                        disabledOtherCategoryBusiness = "";
                        otherSourceFund = form["Transaction_OtherSourceFund_" + rowId].ToString();
                    }
                }
                var fundListDDL = new SelectList(fundList, "val", "name", beneficiarySourceFund);

                string beneficiarySuppDocType = "";
                string otherSuppDocType = "";
                if (!string.IsNullOrEmpty(form["Transaction_BeneficiarySupportDocType_" + rowId]))
                {
                    beneficiarySuppDocType = form["Transaction_BeneficiarySupportDocType_" + rowId].ToString();
                    if (Convert.ToInt32(form["Transaction_BeneficiarySupportDocType_" + rowId]) == 11)
                    {
                        disabledOtherSuppDocType = "";
                        otherSuppDocType = form["Transaction_OtherSupportDocType_" + rowId].ToString();
                    }
                }
                var suppDocDDL = new SelectList(docsuppList, "val", "name", beneficiarySuppDocType);

                string beneficiaryUploadSuporting = "";
                if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadSuporting_" + rowId]))
                {
                    beneficiaryUploadSuporting = form["Transaction_BeneficiaryUploadSuporting_" + rowId].ToString();
                }

                string beneficiaryIDPassport = "";
                if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadIDPassport_" + rowId]))
                {
                    beneficiaryIDPassport = form["Transaction_BeneficiaryUploadIDPassport_" + rowId].ToString();
                }

                string beneficiaryPaymentDetails = "";
                if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryPaymentDetails_" + rowId]))
                {
                    beneficiaryPaymentDetails = form["Transaction_BeneficiaryPaymentDetails_" + rowId].ToString();
                }

                string beneficiaryNationality = "";
                string otherNationality = "";
                if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryNationality_" + rowId]))
                {
                    beneficiaryNationality = form["Transaction_BeneficiaryNationality_" + rowId].ToString();
                    if (Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]) == 201)
                    {
                        disabledOtherNationalities = "";
                        otherNationality = form["Transaction_OtherNationality_" + rowId].ToString();
                    }
                }
                var nationalitiesDDL = new SelectList(nationalities, "val", "name", beneficiaryNationality);

                string beneficiaryCompanyRegistration = "";
                if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryCompanyRegistration_" + rowId]))
                {
                    beneficiaryCompanyRegistration = form["Transaction_BeneficiaryCompanyRegistration_" + rowId].ToString();
                }

                string beneficiaryCategoryBusiness = "";
                string otherCategoryBusiness = "";
                if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]))
                {
                    beneficiaryCategoryBusiness = form["Transaction_BeneficiaryCategoryBusiness_" + rowId].ToString();
                    if (Convert.ToInt32(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]) == 331)
                    {
                        disabledOtherCategoryBusiness = "";
                        otherCategoryBusiness = form["Transaction_OtherCategoryBusiness_" + rowId].ToString();
                    }
                }
                var categoryBusinessDDL = new SelectList(BusinessCategoriesLists, "val", "name", dataGroupField: "group", beneficiaryCategoryBusiness);

                string beneficiaryCompanyContact = "";
                if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryCompanyContact_" + rowId]))
                {
                    beneficiaryCompanyContact = form["Transaction_BeneficiaryCompanyContact_" + rowId].ToString();
                }

                string totalCalculatedForeign = "0.00";
                string remainingForeign = "0.00";
                string totalOrderForeign = "0.00";

                transactionData.RowId = rowId.ToString();
                transactionData.transactionID = transactionID;
                transactionData.PayAmount = amountPay;
                transactionData.BankTransferNo = bankTransferNo;
                transactionData.ChequeNo = chequeNo;
                //transactionData.PayCurrency = currencyFormat;
                transactionData.payDecimalFormat = currencyFormat;
                transactionData.PayCurrencyDDL = payCurrencyDDL;
                transactionData.GetCurrencyDDL = getCurrencyDDL;
                transactionData.PayPaymentModeDDL = paymentModeDDL;
                transactionData.GetPaymentModeDDL = getpaymentModeDDL;
                transactionData.DepositAccountDDL = depositAccDDL;
                transactionData.countriesDDL = countriesDDL;
                transactionData.fundListDDL = fundListDDL;
                transactionData.nationalitiesDDL = nationalitiesDDL;
                transactionData.paymentListDDL = paymentListDDL;
                transactionData.suppDocDDL = suppDocDDL;
                transactionData.categoryBusinessDDL = categoryBusinessDDL;
                transactionData.PayDepositAccount = depositAcc;
                transactionData.DisabledDepositAccount = disabledDepositAcc;
                transactionData.PayPaymentType = paymentModeVal;
                transactionData.Rate = rate;
                transactionData.GetAmount = amountGet;
                transactionData.getDecimalFormat = getcurrencyFormat;
                //transactionData.GetCurrency = getcurrencyFormat;
                transactionData.GetPaymentType = chequeNo;
                transactionData.DisabledBankTransferNo = disabledBankTranfer;
                transactionData.DisabledChequeNo = disabledCheque;
                transactionData.transactionPayrate = transactionPayrate;
                transactionData.transactionGetrate = transactionGetrate;
                transactionData.gettransactionFees = gettransactionFees;
                transactionData.transactionFees = transactionFees;
                transactionData.BeneficiaryBankAccountNo = beneficiaryBankAcc;
                transactionData.BeneficiaryBankAddress = beneficiaryAddress;
                transactionData.BeneficiaryBankCode = beneficiaryBankCode;
                transactionData.BeneficiaryBankCountry = beneficiaryBankCountry;
                transactionData.BeneficiaryCategoryOfBusiness = beneficiaryCategoryBusiness;
                transactionData.BeneficiaryCompanyContactNo = beneficiaryCompanyContact;
                transactionData.BeneficiaryCompanyRegistrationNo = beneficiaryCompanyRegistration;
                transactionData.BeneficiaryFullName = beneficiaryName;
                transactionData.BeneficiaryNationality = beneficiaryNationality;
                transactionData.BeneficiaryPaymentDetails = beneficiaryPaymentDetails;
                transactionData.BeneficiaryPurposeOfPayment = beneficiaryPurposePayment;
                transactionData.BeneficiarySourceOfPayment = beneficiarySourceFund;
                transactionData.BeneficiaryType = beneficiaryType;
                transactionData.BankTransferNo = bankTransferNo;
                transactionData.BeneficiaryUploadSupportingFile = beneficiaryUploadSuporting;
                transactionData.BeneficiaryUploadSupportingType = beneficiarySuppDocType;
                transactionData.BeneficiaryContactNoMain = beneficiaryMainContact;
                transactionData.BeneficiaryAddressMain = beneficiaryMainAddress;
                transactionData.BeneficiaryBankName = beneficiaryBankName;
                transactionData.IBANEuropeBSBAustralia = IBANEuropeBSBAustralia;
                transactionData.BankCountryIfOthers = otherBankCountry;
                transactionData.disabledBankCountryIfOthers = disabledOtherBankCountry;
                transactionData.BeneficiaryNationalityIfOthers = otherNationality;
                transactionData.disabledBeneficiaryNationalityIfOthers = disabledOtherNationalities;
                transactionData.BeneficiaryBusinessCategoryIfOthers = otherCategoryBusiness;
                transactionData.disabledBeneficiaryBusinessCategoryIfOthers = disabledOtherCategoryBusiness;
                transactionData.PurposeOfPaymentIfOthers = otherPurposePayment;
                transactionData.disabledPurposeOfPaymentIfOthers = disabledOtherPurposePayment;
                transactionData.SourceOfPaymentIfOthers = otherSourceFund;
                transactionData.disabledSourceOfPaymentIfOthers = disabledOtherSourceFund;
                transactionData.UploadSupportingTypeIfOthers = otherSuppDocType;
                transactionData.disabledUploadSupportingTypeIfOthers = disabledOtherSuppDocType;
                transactionData.BeneficiaryUploadIDCopy = beneficiaryIDPassport;
                transactionData.currentPayRate = transactionCurrentPayrate;

                transactions.Add(transactionData);
            }

            ViewData["SaleTransactionsData"] = transactions;
            //ViewData["SaleTransactionType"] = sales.TransactionType;

            RemittanceProducts sgd = _remittanceproductsModel.FindCurrencyCode("SGD");

            ViewData["TotalForeign"] = totalGet.ToString(GetRateFormat(8));
            ViewData["TotalLocal"] = totalPay.ToString(GetDecimalFormat(payDecimal));
            ViewData["PaySymbol"] = paySymbol;

            ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
            return View();
        }

		//Start
		//GET: Edit2
		public ActionResult Edit(int id, string module = "RemittanceSale")
		{
			int page = 1;

			if (TempData["Page"] != null)
			{
				page = Convert.ToInt32(TempData.Peek("Page"));
				ViewData["Page"] = page;
				TempData.Keep("Page");
			}

			//check role if only junior dealer then only can update his own records.
			string userRole = Session["UserRole"].ToString();
			string[] userRoleList = userRole.Split(',');
			int userid = Convert.ToInt32(Session["UserId"].ToString());
			Remittances sales = new Remittances();

			if (Array.IndexOf(userRoleList, "Junior Dealer") >= 0)
			{
				sales = _remittancesalesModel.GetSingle(id);

				if (userRoleList.Length > 1)
				{
					//this is multiple role
				}
				else
				{
					//if single role, then only can update his own record
					if (sales.CreatedBy != userid)
					{
						TempData.Add("Result", "error|Unable to access to this sales.");
						return RedirectToAction("Listing", module, new { @page = page });
					}
				}
			}
			else
			{
				//this is not junior dealer
				sales = _remittancesalesModel.GetSingle(id);
			}

			if (sales != null)
			{
				if ((sales.Status.Contains("Pending Dealer") && Array.IndexOf(userRoleList, "Dealer") >= 0) || (sales.Status.Contains("Pending Account") && Array.IndexOf(userRoleList, "Finance") >= 0) || (sales.Status.Contains("Pending Customer") && Array.IndexOf(userRoleList, "Dealer") >= 0))
				{
					return RedirectToAction("SaleApproval", new { @id = id, @module = module });
				}

				ViewData["Disabled"] = "";

				List<string> disabledStatus = new List<string>() { "Completed", "Pending GM Approval", "Pending GM Approval (Rejected)", "Cancelled", "Rejected", "Pending Delete GM Approval" };
				if (disabledStatus.Contains(sales.Status) || !Session["UserRole"].ToString().Contains("Super Admin"))
				{
					ViewData["Disabled"] = "disabled";
				}

				Dropdown[] customerDDL = CustomerDDL();
				ViewData["CustomerDropdown"] = new SelectList(customerDDL, "val", "name", sales.CustomerParticularId);
				CustomerParticular customer = sales.CustomerParticulars;
				ViewData["CustomerContact"] = "";
				ViewData["CustomerAddress"] = "";
				Dropdown[] agentDDL = AgentDDL();
				ViewData["AgentDropdown"] = new SelectList(agentDDL, "val", "name", sales.AgentId);
				ViewData["CreatedBy"] = "";
				using (var context = new DataAccess.GreatEastForex())
				{
					var createdfrom = sales.CreatedFrom;
					if (!string.IsNullOrEmpty(createdfrom))
					{
						if (createdfrom == "Admin")
						{
							string createbyName = context.Users.Where(e => e.ID == sales.CreatedBy).FirstOrDefault().Name;
							ViewData["CreatedBy"] = createbyName;
						}
						else
						{

							var createby = context.CustomerParticulars.Where(e => e.ID == sales.CreatedBy).FirstOrDefault();
							var createbyName = "";
							if (!string.IsNullOrEmpty(createby.Surname) && !string.IsNullOrEmpty(createby.GivenName))
							{
								createbyName = createby.Surname + " " + createby.GivenName;
							}
							else
							{
								if (createby.CustomerType == "Corporate & Trading Company")
								{

									createbyName = createby.Company_RegisteredName;
								}
								else
								{
									createbyName = createby.Natural_Name;
								}
							}
							ViewData["CreatedBy"] = createbyName;
						}
					}
				}
				if (customer != null)
				{
					string contact = "";
					string address = "";
					string shippingadress = "";

					if (customer.CustomerType == "Corporate & Trading Company")
					{
						contact = customer.Company_TelNo;
						if (!string.IsNullOrEmpty(customer.Company_BusinessAddress2))
						{
							address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_PostalCode;
							if (!string.IsNullOrEmpty(customer.Company_BusinessAddress3))
							{
								address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_BusinessAddress3 + ", " + customer.Company_PostalCode;

							}
						}
						else
						{
							address = customer.Company_BusinessAddress1 + ", " + customer.Company_PostalCode;
						}

						if (!string.IsNullOrEmpty(customer.Shipping_Address2))
						{
							shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_Address2 + ", " + customer.Shipping_PostalCode;

							if (!string.IsNullOrEmpty(customer.Shipping_Address3))
							{
								shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_Address2 + ", " + customer.Shipping_Address3 + ", " + customer.Shipping_PostalCode;

							}
						}
						else
						{
							shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_PostalCode;
						}

					}
					else
					{
						contact = customer.Natural_ContactNoM;
						address = customer.Natural_PermanentAddress;
						shippingadress = customer.Natural_MailingAddress + ", " + customer.Natural_MailingAddress2 + ", " + customer.Shipping_PostalCode;
					}

					ViewData["CustomerContact"] = contact;
					ViewData["CustomerAddress"] = address;
					ViewData["CustomerShippingAddress"] = shippingadress;
				}

				if (ViewData["CustomerShippingAddress"] == null)
				{
					ViewData["CustomerShippingAddress"] = "";
				}


				//Dropdown[] collectionTimeDDL = CollectionTimeDDL();
				//ViewData["CollectionTimeDropdown"] = new SelectList(collectionTimeDDL, "val", "name", sales.CollectionTime);

				ViewData["NonUrgentRadio"] = "";
				ViewData["UrgentRadio"] = "";
				if (sales.IsUrgent == 1)
				{
					ViewData["UrgentRadio"] = "checked";
				}
				else
				{
					ViewData["NonUrgentRadio"] = "checked";
				}
				ViewData["CostPrice"] = sales.CostPrice;
				ViewData["AgentRate"] = sales.AgentRate;
				ViewData["AgentFee"] = sales.AgentFee;
				RemittanceProducts sgd = _remittanceproductsModel.FindCurrencyCode("SGD");
				string sgdFormat = GetDecimalFormat(sgd.ProductDecimal);
				string rateFormat = GetRateFormat(rateDP);


				IList<RemittanceOrderData> transactions = new List<RemittanceOrderData>();

				int rowId = 1;
				decimal totalForeign = 0;
				decimal totalLocal = 0;
				string payFormat = "";
				string paySymbol = "$";
				foreach (RemittanceOrders transaction in sales.RemittanceOders.OrderBy(e => e.ID))
				{
					//string currencyFormat = GetDecimalFormat(transaction.Products.Decimal);

					RemittanceOrderData transactionData = new RemittanceOrderData();
					//transactionData.Denominations = new List<DenominationsData>();
					string transactionID = transaction.TransactionID;
					string type = "Remittance";
					//string vesselName = transaction.VesselName;
					string productId = transaction.PayCurrency.ToString();
					RemittanceProducts product = _remittanceproductsModel.GetSingle(Convert.ToInt32(productId));
					string currencyFormat = GetDecimalFormat(product.ProductDecimal);
					payFormat = GetDecimalFormat(product.ProductDecimal);
					paySymbol = product.ProductSymbol;
					string getproductId = transaction.GetCurrency.ToString();
					RemittanceProducts getproduct = _remittanceproductsModel.GetSingle(Convert.ToInt32(getproductId));
					string getcurrencyFormat = GetDecimalFormat(getproduct.ProductDecimal);

					Dropdown2[] currency = CurrencyDDL2("Remittance");
					var payCurrencyDDL = new SelectList(currency, "val", "name", dataGroupField: "group", selectedValue: productId);
					var getCurrencyDDL = new SelectList(currency, "val", "name", dataGroupField: "group", getproductId);

					string symbol = _remittanceproductsModel.GetSingle(Convert.ToInt32(productId)).ProductSymbol;
					string rate = transaction.Rate.ToString();

					string paymentModeVal = transaction.PayPaymentType;
					Dropdown[] paymentMode = PaymentModeDDL(Convert.ToInt32(productId));
					SelectList paymentModeDDL = new SelectList(paymentMode, "val", "name", selectedValue: paymentModeVal);

					Dropdown[] getpaymentMode = new Dropdown[1];
					getpaymentMode[0] = new Dropdown { name = "Bank Transfer", val = "3" };
					SelectList getpaymentModeDDL = new SelectList(getpaymentMode, "val", "name");

					string disabledCheque = "disabled";
					string disabledBankTranfer = "disabled";
					string disabledDepositAcc = "disabled";
					string disabledOtherPurposePayment = "disabled";
					string disabledOtherCategoryBusiness = "disabled";
					string disabledOtherNationalities = "disabled";
					string disabledOtherSourceFund = "disabled";
					string disabledOtherSuppDocType = "disabled";
					string disabledOtherBankCountry = "disabled";
					if (paymentModeVal == "2")
					{
						disabledCheque = "";
						disabledDepositAcc = "";
					}
					else if (paymentModeVal == "3")
					{
						disabledBankTranfer = "";
						disabledDepositAcc = "";
					}

					Dropdown[] paymentBankDDL = PayBankDDL();
					var depositAccDDL = new SelectList(paymentBankDDL, "val", "name", selectedValue: transaction.PayDepositAccount);

					Dropdown[] beneficiaries = BeneficiariesDDL();
					Dropdown[] docsuppList = SupportDocTypeDDL();
					Dropdown[] countries = CountryDDL();
					Dropdown[] paymentList = PurposePaymentDDL(0);
					Dropdown[] fundList = SourceFundsDDL();
					Dropdown[] nationalities = NationalityDDL();
					Dropdown2[] BusinessCategoriesLists = BusinessCategoryDDL();
					ViewData["BeneficiaryDropdown"] = new SelectList(beneficiaries, "val", "name");

					string currentPayrate = transaction.currentPayRate.ToString(GetDecimalFormat(rateDP));

					string beneficiaryIDPassport = transaction.BeneficiaryUploadIDCopy;

					string beneficiaryName = transaction.BeneficiaryFullName;

					string beneficiaryBankAcc = transaction.BeneficiaryBankAccountNo;

					string beneficiaryBankCode = transaction.BeneficiaryBankCode;

					string beneficiaryBankCountry = transaction.BeneficiaryBankCountry.ToString();
					string otherBankCountry = "";
					if (beneficiaryBankCountry == "48")
					{
						if (!string.IsNullOrEmpty(transaction.BankCountryIfOthers))
						{
							otherBankCountry = transaction.BankCountryIfOthers.ToString();
						}
						disabledOtherBankCountry = "";
					}
					var countriesDDL = new SelectList(countries, "val", "name", beneficiaryBankCountry);

					string beneficiaryAddress = transaction.BeneficiaryBankAddress;

					string beneficiaryType = transaction.BeneficiaryType;
					ViewData["IndividualRadio_" + rowId] = "";
					ViewData["BusinessRadio_" + rowId] = "";
					if (!string.IsNullOrEmpty(beneficiaryType))
					{

						if (beneficiaryType == "individual")
						{
							ViewData["IndividualRadio_" + rowId] = "checked";
							paymentList = PurposePaymentDDL(0);
						}
						else if (beneficiaryType == "business")
						{
							ViewData["BusinessRadio_" + rowId] = "checked";
							paymentList = PurposePaymentDDL(1);
						}
					}

					string beneficiaryPurposePayment = transaction.BeneficiaryPurposeOfPayment.ToString();
					string otherPurposePayment = "";
					if (beneficiaryPurposePayment == "52")
					{
						if (!string.IsNullOrEmpty(transaction.PurposeOfPaymentIfOthers))
						{
							otherPurposePayment = transaction.PurposeOfPaymentIfOthers.ToString();
						}
						disabledOtherPurposePayment = "";
					}
					var paymentListDDL = new SelectList(paymentList, "val", "name", beneficiaryPurposePayment);

					string beneficiarySourceFund = transaction.BeneficiarySourceOfPayment.ToString();
					string otherSourceFund = "";
					if (beneficiarySourceFund == "20")
					{
						if (!string.IsNullOrEmpty(transaction.SourceOfPaymentIfOthers))
						{
							otherSourceFund = transaction.SourceOfPaymentIfOthers.ToString();
						}
						disabledOtherSourceFund = "";
					}
					var fundListDDL = new SelectList(fundList, "val", "name", beneficiarySourceFund);

					string beneficiarySuppDocType = transaction.BeneficiaryUploadSupportingType.ToString();
					string otherSuppDocType = "";
					if (beneficiarySuppDocType == "11")
					{
						if (!string.IsNullOrEmpty(transaction.UploadSupportingTypeIfOthers))
						{
							otherSuppDocType = transaction.UploadSupportingTypeIfOthers.ToString();
						}
						disabledOtherSuppDocType = "";
					}
					var suppDocDDL = new SelectList(docsuppList, "val", "name", beneficiarySuppDocType);

					string beneficiaryUploadSuporting = transaction.BeneficiaryUploadSupportingFile;

					string beneficiaryPaymentDetails = transaction.BeneficiaryPaymentDetails;
					string beneficiaryContactNoMain = transaction.BeneficiaryContactNoMain;
					string beneficiaryAddressMain = transaction.BeneficiaryAddressMain;
					string beneficiaryBankName = transaction.BeneficiaryBankName;
					string beneficiaryIBAN = transaction.IBANEuropeBSBAustralia;

					string beneficiaryNationality = transaction.BeneficiaryNationality.ToString();
					string otherNationality = "";
					if (beneficiaryNationality == "201")
					{
						if (!string.IsNullOrEmpty(transaction.BeneficiaryNationalityIfOthers))
						{
							otherNationality = transaction.BeneficiaryNationalityIfOthers.ToString();
						}
						disabledOtherNationalities = "";
					}
					var nationalitiesDDL = new SelectList(nationalities, "val", "name", beneficiaryNationality);

					string beneficiaryCompanyRegistration = transaction.BeneficiaryCompanyRegistrationNo;

					string beneficiaryCategoryBusiness = transaction.BeneficiaryCategoryOfBusiness.ToString();
					string otherCategoryBusiness = "";
					if (beneficiaryCategoryBusiness == "331")
					{
						if (!string.IsNullOrEmpty(transaction.BeneficiaryBusinessCategoryIfOthers))
						{
							otherCategoryBusiness = transaction.BeneficiaryBusinessCategoryIfOthers.ToString();
						}
						disabledOtherCategoryBusiness = "";
					}
					var categoryBusinessDDL = new SelectList(BusinessCategoriesLists, "val", "name", dataGroupField: "group", beneficiaryCategoryBusiness);

					string beneficiaryCompanyContact = transaction.BeneficiaryCompanyContactNo;

					string totalCalculatedForeign = "0.00";
					string remainingForeign = "0.00";
					string totalOrderForeign = "0.00";
					decimal? payRate = null;
					decimal? getRate = null;
					decimal? gettransactionFees = null;
					string payDecimalformat = "";
					string getDecimalformat = "";
					using (var context = new DataAccess.GreatEastForex())
					{
						var getProduct = context.RemittanceProducts.Where(e => e.ID == transaction.GetCurrency).FirstOrDefault();
						var payProduct = context.RemittanceProducts.Where(e => e.ID == transaction.PayCurrency).FirstOrDefault();
						getDecimalformat = GetDecimalFormat(getProduct.ProductDecimal);
						payDecimalformat = GetDecimalFormat(payProduct.ProductDecimal);
						var convertpayrate = Convert.ToDecimal(payProduct.PayRate).ToString(payDecimalformat);
						var convertgetrate = Convert.ToDecimal(getProduct.GetRate).ToString(getDecimalformat);
						gettransactionFees = getProduct.TransactionFee;

						if (payProduct.PayRate != null && payProduct.PayRate > 0)
							payRate = Convert.ToDecimal(convertpayrate);
						if (getProduct.GetRate != null && getProduct.GetRate > 0)
							getRate = Convert.ToDecimal(convertgetrate);

						var payCustomRemittanceRate = context.CustomerRemittanceProductCustomRates.Where(e => e.CustomerParticularId == sales.CustomerParticularId && e.RemittanceProductId == payProduct.ID).FirstOrDefault();
						var getCustomRemittanceRate = context.CustomerRemittanceProductCustomRates.Where(e => e.CustomerParticularId == sales.CustomerParticularId && e.RemittanceProductId == getProduct.ID).FirstOrDefault();

						var finalPayProductRate = payRate;
						var finalGetProductRate = getRate;
						if (payRate > 0)
						{
							if (payCustomRemittanceRate != null)
							{
								if (payCustomRemittanceRate.PayRateAdjustment != null && payCustomRemittanceRate.PayRateAdjustment > 0)
								{
									var OriginalValue = finalPayProductRate;
									var InputValue = Convert.ToDecimal(payCustomRemittanceRate.PayRateAdjustment);
									finalPayProductRate = OriginalValue * (1 - InputValue);
								}
							}
							else if (payProduct.BuyRateAdjustment != null && payProduct.BuyRateAdjustment != 0)
							{
								var OriginalValue = finalPayProductRate;
								var InputValue = Convert.ToDecimal(payProduct.BuyRateAdjustment);
								finalPayProductRate = OriginalValue * (1 - InputValue);
							}
						}
						else
						{
							if (payProduct.AutomatedPayRate != null)
							{
								finalPayProductRate = Convert.ToDecimal(payProduct.AutomatedPayRate);
								if (payCustomRemittanceRate != null)
								{
									if (payCustomRemittanceRate.PayRateAdjustment != null && payCustomRemittanceRate.PayRateAdjustment > 0)
									{
										var OriginalValue = finalPayProductRate;
										var InputValue = Convert.ToDecimal(payCustomRemittanceRate.PayRateAdjustment);
										finalPayProductRate = OriginalValue * (1 - InputValue);
									}
								}
								else if (payProduct.BuyRateAdjustment != null && payProduct.BuyRateAdjustment != 0)
								{
									var OriginalValue = finalPayProductRate;
									var InputValue = Convert.ToDecimal(payProduct.BuyRateAdjustment);
									finalPayProductRate = OriginalValue * (1 - InputValue);
								}
							}
						}
						if (getRate > 0)
						{
							if (getCustomRemittanceRate != null)
							{
								if (getCustomRemittanceRate.GetRateAdjustment != null && getCustomRemittanceRate.GetRateAdjustment > 0)
								{
									var OriginalValue = finalGetProductRate;
									var InputValue = Convert.ToDecimal(getCustomRemittanceRate.GetRateAdjustment);
									finalGetProductRate = OriginalValue * (1 + InputValue);
								}
							}
							else if (getProduct.SellRateAdjustment != null && getProduct.SellRateAdjustment != 0)
							{
								var OriginalValue = finalGetProductRate;
								var InputValue = Convert.ToDecimal(getProduct.SellRateAdjustment);
								finalGetProductRate = OriginalValue * (1 + InputValue);
							}
						}
						else
						{
							if (getProduct.AutomatedGetRate != null)
							{
								finalGetProductRate = Convert.ToDecimal(getProduct.AutomatedGetRate);
								if (getCustomRemittanceRate != null)
								{
									if (getCustomRemittanceRate.GetRateAdjustment != null && getCustomRemittanceRate.GetRateAdjustment > 0)
									{
										var OriginalValue = finalGetProductRate;
										var InputValue = Convert.ToDecimal(getCustomRemittanceRate.GetRateAdjustment);
										finalGetProductRate = OriginalValue * (1 + InputValue);
									}
								}
								else if (getProduct.SellRateAdjustment != null && getProduct.SellRateAdjustment != 0)
								{
									var OriginalValue = finalGetProductRate;
									var InputValue = Convert.ToDecimal(getProduct.SellRateAdjustment);
									finalGetProductRate = OriginalValue * (1 + InputValue);
								}
							}
						}
						payRate = finalPayProductRate;
						getRate = finalGetProductRate;
					}

					transactionData.RowId = rowId.ToString();
					transactionData.ID = transaction.ID;
					transactionData.transactionID = transactionID;
					transactionData.PayAmount = transaction.PayAmount.ToString();
					transactionData.BankTransferNo = transaction.BankTransferNo;
					transactionData.ChequeNo = transaction.ChequeNo;
					//transactionData.PayCurrency = currencyFormat;
					transactionData.payDecimalFormat = currencyFormat;
					transactionData.PayCurrencyDDL = payCurrencyDDL;
					transactionData.GetCurrencyDDL = getCurrencyDDL;
					transactionData.PayPaymentModeDDL = paymentModeDDL;
					transactionData.GetPaymentModeDDL = getpaymentModeDDL;
					transactionData.DepositAccountDDL = depositAccDDL;
					transactionData.countriesDDL = countriesDDL;
					transactionData.fundListDDL = fundListDDL;
					transactionData.nationalitiesDDL = nationalitiesDDL;
					transactionData.paymentListDDL = paymentListDDL;
					transactionData.suppDocDDL = suppDocDDL;
					transactionData.categoryBusinessDDL = categoryBusinessDDL;
					transactionData.PayDepositAccount = transaction.PayDepositAccount.ToString();
					transactionData.DisabledDepositAccount = disabledDepositAcc;
					transactionData.PayPaymentType = paymentModeVal;
					transactionData.Rate = rate;
					transactionData.GetAmount = transaction.GetAmount.ToString();
					//transactionData.GetCurrency = getcurrencyFormat;
					transactionData.getDecimalFormat = getcurrencyFormat;
					transactionData.GetPaymentType = transaction.GetPaymentType;
					transactionData.DisabledBankTransferNo = disabledBankTranfer;
					transactionData.DisabledChequeNo = disabledCheque;
					transactionData.transactionPayrate = Convert.ToDecimal(payRate).ToString(payDecimalformat);
					transactionData.transactionGetrate = Convert.ToDecimal(getRate).ToString(getDecimalformat);
					transactionData.gettransactionFees = gettransactionFees.ToString();
					transactionData.transactionFees = transaction.Fee.ToString();
					transactionData.payDecimalFormat = payDecimalformat;
					transactionData.getDecimalFormat = getDecimalformat;
					transactionData.BeneficiaryBankAccountNo = beneficiaryBankAcc;
					transactionData.BeneficiaryBankAddress = beneficiaryAddress;
					transactionData.BeneficiaryBankCode = beneficiaryBankCode;
					transactionData.BeneficiaryBankCountry = beneficiaryBankCountry;
					transactionData.BeneficiaryCategoryOfBusiness = beneficiaryCategoryBusiness;
					transactionData.BeneficiaryCompanyContactNo = beneficiaryCompanyContact;
					transactionData.BeneficiaryCompanyRegistrationNo = beneficiaryCompanyRegistration;
					transactionData.BeneficiaryFullName = beneficiaryName;
					transactionData.BeneficiaryNationality = beneficiaryNationality;
					transactionData.BeneficiaryPaymentDetails = beneficiaryPaymentDetails;
					transactionData.BeneficiaryPurposeOfPayment = beneficiaryPurposePayment;
					transactionData.BeneficiarySourceOfPayment = beneficiarySourceFund;
					transactionData.BeneficiaryType = beneficiaryType;
					transactionData.BeneficiaryUploadSupportingFile = beneficiaryUploadSuporting;
					transactionData.BeneficiaryUploadSupportingType = beneficiarySuppDocType;
					transactionData.BeneficiaryContactNoMain = beneficiaryContactNoMain;
					transactionData.BeneficiaryAddressMain = beneficiaryAddressMain;
					transactionData.BeneficiaryBankName = beneficiaryBankName;
					transactionData.IBANEuropeBSBAustralia = beneficiaryIBAN;
					transactionData.BankCountryIfOthers = otherBankCountry;
					transactionData.disabledBankCountryIfOthers = disabledOtherBankCountry;
					transactionData.BeneficiaryNationalityIfOthers = otherNationality;
					transactionData.disabledBeneficiaryNationalityIfOthers = disabledOtherNationalities;
					transactionData.BeneficiaryBusinessCategoryIfOthers = otherCategoryBusiness;
					transactionData.disabledBeneficiaryBusinessCategoryIfOthers = disabledOtherCategoryBusiness;
					transactionData.PurposeOfPaymentIfOthers = otherPurposePayment;
					transactionData.disabledPurposeOfPaymentIfOthers = disabledOtherPurposePayment;
					transactionData.SourceOfPaymentIfOthers = otherSourceFund;
					transactionData.disabledSourceOfPaymentIfOthers = disabledOtherSourceFund;
					transactionData.UploadSupportingTypeIfOthers = otherSuppDocType;
					transactionData.disabledUploadSupportingTypeIfOthers = disabledOtherSuppDocType;
					transactionData.currentPayRate = currentPayrate;
					transactionData.BeneficiaryUploadIDCopy = beneficiaryIDPassport;

					transactions.Add(transactionData);

					totalLocal += transaction.PayAmount;
					totalForeign += transaction.GetAmount;
					rowId++;
				}

				ViewData["SaleTransactionsData"] = transactions;

				ViewData["TotalForeign"] = totalForeign.ToString(GetRateFormat(8));
				ViewData["TotalLocal"] = totalLocal.ToString(payFormat);
				ViewData["PaySymbol"] = paySymbol;
				ViewData["Sale"] = sales;
				ViewData["SaleId"] = sales.ID;
				ViewData["PendingApproval"] = "No";
				if (sales.Status == "Pending GM Approval" || sales.Status == "Pending Delete GM Approval")
				{
					ViewData["PendingApproval"] = "Yes";
				}
				ViewData["SaleTransactionType"] = "Remittance";
				ViewData["Module"] = module;

				ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
				return View();
			}
			else
			{
				TempData.Add("Result", "error|Memo ID not found!");
			}

			return RedirectToAction("Listing", module, new { @page = page });
		}

		[HttpPost]
		public ActionResult Edit(int id, Remittances sales, FormCollection form, string module = "RemittanceSale")
		{
			int page = 1;

			if (TempData["Page"] != null)
			{
				page = Convert.ToInt32(TempData["Page"]);
				ViewData["Page"] = page;
			}

			Remittances oldData = _remittancesalesModel.GetSingle(id);
			sales = oldData;

			//For rollback
			Remittances rollBack_Sale = new Remittances()
			{
				ID = oldData.ID,
				MemoID = oldData.MemoID,
				CustomerParticularId = oldData.CustomerParticularId,
				IssueDate = oldData.IssueDate,
				CreatedBy = oldData.CreatedBy,
				IsUrgent = oldData.IsUrgent,
				Remarks = oldData.Remarks,
				CustomerRemarks = oldData.CustomerRemarks,
				Status = oldData.Status,
				LastApprovalOn = oldData.LastApprovalOn,
				Address1 = oldData.Address1,
				Address2 = oldData.Address2,
				Address3 = oldData.Address3,
				AgentId = oldData.AgentId,
				CreatedOn = oldData.CreatedOn,
				CreatedFrom = oldData.CreatedFrom,
				CostPrice = oldData.CostPrice,
				AgentFee = oldData.AgentFee,
				AgentRate = oldData.AgentRate,
				ContactNo = oldData.ContactNo,
				CustomerParticulars = oldData.CustomerParticulars,
				RemittanceOders = oldData.RemittanceOders,
				ShippingAddress1 = oldData.ShippingAddress1,
				ShippingAddress2 = oldData.ShippingAddress2,
				ShippingAddress3 = oldData.ShippingAddress3,
				TotalGetAmount = oldData.TotalGetAmount,
				TotalPayAmount = oldData.TotalPayAmount,
				IsDeleted = oldData.IsDeleted,
				UpdatedOn = oldData.UpdatedOn

			};

			Dictionary<int, RemittanceOrders> rollBack_saleTransactions = new Dictionary<int, RemittanceOrders>();

			sales.ID = oldData.ID;
			sales.MemoID = oldData.MemoID;
			//sales.CustomerParticularId = oldData.CustomerParticularId;
			sales.IssueDate = oldData.IssueDate;
			sales.CreatedBy = oldData.CreatedBy;
			//sales.CustomerRemarks = oldData.CustomerRemarks;
			sales.LastApprovalOn = oldData.LastApprovalOn;

			foreach (string modelKey in ModelState.Keys)
			{
				if (ModelState[modelKey].Errors.Count > 0)
				{
					ModelState[modelKey].Errors.Clear();
				}
			}
            
			if (string.IsNullOrEmpty(form["sales.CustomerParticularId"]))
			{
				ModelState.AddModelError("sales.CustomerParticularId", "Please select Customer.");
			}
            else
            {
                if(!FormValidationHelper.IntegerValidation(form["sales.CustomerParticularId"]))
                {
					ModelState.AddModelError("sales.CustomerParticularId", "Please select proper customer.");
				}
			}

			if (!string.IsNullOrEmpty(sales.Remarks))
			{
				if (sales.Remarks.Length > 255)
				{
					ModelState.AddModelError("sales.Remarks", "Remarks cannot exceed 255 characters.");
				}
			}

			if (!string.IsNullOrEmpty(form["sales.CostPrice"].ToString()))
			{
				bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.CostPrice"].ToString());

				if (!checkFormat)
				{
					ModelState.AddModelError("sales.CostPrice", "Cost Price is not valid.");
				}
				else
				{
					var split = form["sales.CostPrice"].ToString().Split('.');
					if (split.Length > 1)
					{
						var getDecimalPoint = split[1].Length;
						if (getDecimalPoint > 2)
						{
							ModelState.AddModelError("sales.CostPrice", "Cost Price only allow two decimal points.");
						}
					}
				}
			}

			if (!string.IsNullOrEmpty(form["sales.AgentFee"].ToString()))
			{
				bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.AgentFee"].ToString());

				if (!checkFormat)
				{
					ModelState.AddModelError("sales.AgentFee", "Agent Fee is not valid.");
				}
				else
				{
					var split = form["sales.AgentFee"].ToString().Split('.');
					if (split.Length > 1)
					{
						var getDecimalPoint = split[1].Length;
						if (getDecimalPoint > 2)
						{
							ModelState.AddModelError("sales.AgentFee", "Agent Fee only allow two decimal points.");
						}
					}
				}
			}

			if (!string.IsNullOrEmpty(form["sales.AgentRate"].ToString()))
			{
				bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.AgentRate"].ToString());

				if (!checkFormat)
				{
					ModelState.AddModelError("sales.AgentRate", "Agent Rate is not valid.");
				}
				else
				{
					var split = form["sales.AgentRate"].ToString().Split('.');
					if (split.Length > 1)
					{
						var getDecimalPoint = split[1].Length;
						if (getDecimalPoint > 12)
						{
							ModelState.AddModelError("sales.AgentRate", "Agent Rate only allow twelve decimal points.");
						}
					}
				}
			}

			List<string> transactionKeys = form.AllKeys.Where(e => e.Contains("Transaction_ID_")).ToList();
			decimal totalGet = 0;
			decimal totalPay = 0;
			foreach (string key in transactionKeys)
			{
				string rowId = key.Split('_')[2];

				if (string.IsNullOrEmpty(form["Transaction_Type_" + rowId]))
				{
					ModelState.AddModelError("Transaction_Type_" + rowId, "Type is required!");
				}

				if (string.IsNullOrEmpty(form["Transaction_PayCurrency_" + rowId]))
				{
					ModelState.AddModelError("Transaction_PayCurrency_" + rowId, "Currency is required!");
				}
				else
				{
					RemittanceProducts currency = _remittanceproductsModel.GetSingle(Convert.ToInt32(form["Transaction_PayCurrency_" + rowId]));

					if (currency == null)
					{
						ModelState.AddModelError("Transaction_PayCurrency_" + rowId, "Currency record not found!");
					}
				}

				if (string.IsNullOrEmpty(form["Transaction_GetCurrency_" + rowId]))
				{
					ModelState.AddModelError("Transaction_GetCurrency_" + rowId, "Currency is required!");
				}
				else
				{
					RemittanceProducts currency = _remittanceproductsModel.GetSingle(Convert.ToInt32(form["Transaction_GetCurrency_" + rowId]));

					if (currency == null)
					{
						ModelState.AddModelError("Transaction_GetCurrency_" + rowId, "Currency record not found!");
					}
				}

				if (string.IsNullOrEmpty(form["Transaction_PayAmount_" + rowId]))
				{
					ModelState.AddModelError("Transaction_PayAmount_" + rowId, "Amount (Pay) is required!");
				}
				else
				{
					bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_PayAmount_" + rowId]);

					if (!checkAmountLocalFormat)
					{
						ModelState.AddModelError("Transaction_PayAmount_" + rowId, "Amount (Pay) is not valid!");
					}
					else
					{
						totalPay += Convert.ToDecimal(form["Transaction_PayAmount_" + rowId]);
					}
				}

				if (string.IsNullOrEmpty(form["Transaction_GetAmount_" + rowId]))
				{
					ModelState.AddModelError("Transaction_GetAmount_" + rowId, "Amount (Get) is required!");
				}
				else
				{
					bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_GetAmount_" + rowId]);

					if (!checkAmountLocalFormat)
					{
						ModelState.AddModelError("Transaction_GetAmount_" + rowId, "Amount (Get) is not valid!");
					}
					else
					{
						RemittanceProducts getcurrency = _remittanceproductsModel.GetSingle(Convert.ToInt32(form["Transaction_GetCurrency_" + rowId]));
						//if (getcurrency != null)
						//{
						//    var maxamount = getcurrency.MaxAmount;
						//    if (maxamount < Convert.ToDecimal(form["Transaction_GetAmount_" + rowId]) && maxamount != 0)
						//    {
						//        ModelState.AddModelError("Transaction_GetAmount_" + rowId, "Amount (Get) exceeded max amount.");
						//    }
						//}
						totalGet += Convert.ToDecimal(form["Transaction_GetAmount_" + rowId]);
					}
				}

				if (string.IsNullOrEmpty(form["Transaction_PayPaymentType_" + rowId]))
				{
					ModelState.AddModelError("Transaction_PayPaymentType_" + rowId, "Payment Type is not valid!");
				}
				else
				{
					if (form["Transaction_PayPaymentType_" + rowId].ToString() == "2")
					{
						if (string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
						{
							ModelState.AddModelError("Transaction_ChequeNo_" + rowId, "Cheque No. is required!");
						}
						else
						{
							//if (sales.TransactionType == "Buy")
							//{
							//    ViewData["PendingChequeLog"] = 1;
							//}
						}
						if (string.IsNullOrEmpty(form["Transaction_DepositAccount_" + rowId]))
						{
							ModelState.AddModelError("Transaction_DepositAccount_" + rowId, "Deposit Account is required!");
						}
					}
					else if (form["Transaction_PayPaymentType_" + rowId].ToString() == "3")
					{
						if (string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
						{
							ModelState.AddModelError("Transaction_BankTransferNo_" + rowId, "Bank Transfer No. is required!");
						}
						else
						{
							//if (sales.TransactionType == "Buy")
							//{
							//    ViewData["PendingBankTransferLog"] = 1;
							//}
						}
						if (string.IsNullOrEmpty(form["Transaction_DepositAccount_" + rowId]))
						{
							ModelState.AddModelError("Transaction_DepositAccount_" + rowId, "Deposit Account is required!");
						}
					}
				}

				if (string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
				{
					ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is required!");
				}
				else
				{
					bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

					if (checkRateFormat)
					{
						//if (sales.CustomerParticularId > 0 && !string.IsNullOrEmpty(form["Transaction_PayCurrency_" + rowId]))
						//{
						//RemittanceProducts product = _remittanceproductsModel.GetSingle(Convert.ToInt32(form["Transaction_PayCurrency_" + rowId]));
						//decimal buyRate = 0;
						//decimal acceptable = product.AcceptableRange;

						//if (acceptable > 0)
						//{
						//    //if (product.PayRate != null)
						//    //{
						//    //    buyRate = Convert.ToDecimal(product.PayRate);
						//    //}
						//    //else
						//    //{
						//    buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
						//    //}

						//    //decimal upperLimit = buyRate * (1 + acceptable / 100);
						//    //decimal lowerLimit = buyRate * (1 - acceptable / 100);
						//    decimal rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);

						//    if (rate > acceptable)
						//    {
						//        ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is out of acceptable range.");
						//    }
						//}
						//}
					}
					else
					{
						ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is not valid!");
					}
				}
				if (string.IsNullOrEmpty(form["Transaction_Fee_" + rowId]))
				{
					ModelState.AddModelError("Transaction_Fee_" + rowId, "Transaction fee is required!");
				}
				else
				{
					bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Fee_" + rowId]);

					if (!checkAmountLocalFormat)
					{
						ModelState.AddModelError("Transaction_Fee_" + rowId, "Transaction Fee is not valid!");
					}
				}
				bool beneficiaryForm = false;
				if (string.IsNullOrEmpty(form["Transaction_BeneficiaryName_" + rowId]))
				{
					ModelState.AddModelError("Transaction_BeneficiaryName_" + rowId, "Full name is required!");
					beneficiaryForm = true;
				}
				else
				{
					if (form["Transaction_BeneficiaryName_" + rowId].Length > 255)
					{
						ModelState.AddModelError("Transaction_BeneficiaryName_" + rowId, "Full name cannot more than 255 words!");
						beneficiaryForm = true;
					}
				}
				if (string.IsNullOrEmpty(form["Transaction_BeneficiaryBankAccount_" + rowId]))
				{
					ModelState.AddModelError("Transaction_BeneficiaryBankAccount_" + rowId, "Bank Account is required!");
					beneficiaryForm = true;
				}
				else
				{
					if (form["Transaction_BeneficiaryBankAccount_" + rowId].Length > 100)
					{
						ModelState.AddModelError("Transaction_BeneficiaryBankAccount_" + rowId, "Bank Account cannot more than 100 words!");
						beneficiaryForm = true;
					}
				}
				if (string.IsNullOrEmpty(form["Transaction_ContactNoMain_" + rowId]))
				{
					ModelState.AddModelError("Transaction_ContactNoMain_" + rowId, "Contact No is required!");
					beneficiaryForm = true;
				}
				else
				{
					if (form["Transaction_ContactNoMain_" + rowId].Length > 100)
					{
						ModelState.AddModelError("Transaction_ContactNoMain_" + rowId, "Contact No cannot more than 100 words!");
						beneficiaryForm = true;
					}
				}
				if (string.IsNullOrEmpty(form["Transaction_AddressMain_" + rowId]))
				{
					ModelState.AddModelError("Transaction_AddressMain_" + rowId, "Address is required!");
					beneficiaryForm = true;
				}
				else
				{
					if (form["Transaction_AddressMain_" + rowId].Length > 255)
					{
						ModelState.AddModelError("Transaction_AddressMain_" + rowId, "Address cannot more than 255 words!");
						beneficiaryForm = true;
					}
				}
				if (string.IsNullOrEmpty(form["Transaction_BeneficiaryBankName_" + rowId]))
				{
					ModelState.AddModelError("Transaction_BeneficiaryBankName_" + rowId, "Bank Name is required!");
					beneficiaryForm = true;
				}
				else
				{
					if (form["Transaction_BeneficiaryBankName_" + rowId].Length > 100)
					{
						ModelState.AddModelError("Transaction_BeneficiaryBankName_" + rowId, "Bank Name cannot more than 100 words!");
						beneficiaryForm = true;
					}
				}
				if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankCode_" + rowId]))
				{
					if (form["Transaction_BeneficiaryBankCode_" + rowId].Length > 100)
					{
						ModelState.AddModelError("Transaction_BeneficiaryBankCode_" + rowId, "Bank code cannot more than 100 words!");
						beneficiaryForm = true;
					}
				}
				if (string.IsNullOrEmpty(form["Transaction_BeneficiaryBankCountry_" + rowId]))
				{
					ModelState.AddModelError("Transaction_BeneficiaryBankCountry_" + rowId, "Bank country is required!");
					beneficiaryForm = true;
				}
				else
				{
					if (Convert.ToInt32(form["Transaction_BeneficiaryBankCountry_" + rowId]) == 48)
					{
						if (string.IsNullOrEmpty(form["Transaction_OtherBankCountry_" + rowId]))
						{
							ModelState.AddModelError("Transaction_OtherBankCountry_" + rowId, "Other Bank country is required!");
							beneficiaryForm = true;
						}
					}
				}
				if (string.IsNullOrEmpty(form["Transaction_BeneficiaryBankAddress_" + rowId]))
				{
					ModelState.AddModelError("Transaction_BeneficiaryBankAddress_" + rowId, "Bank address is required!");
					beneficiaryForm = true;
				}
				else
				{
					if (form["Transaction_BeneficiaryBankAddress_" + rowId].Length > 255)
					{
						ModelState.AddModelError("Transaction_BeneficiaryBankAddress_" + rowId, "Bank address cannot more than 255 words!");
						beneficiaryForm = true;
					}
				}
				if (string.IsNullOrEmpty(form["Transaction_BeneficiaryPurposePayment_" + rowId]))
				{
					ModelState.AddModelError("Transaction_BeneficiaryPurposePayment_" + rowId, "Purpose of payment is required!");
					beneficiaryForm = true;
				}
				else
				{
					if (Convert.ToInt32(form["Transaction_BeneficiaryPurposePayment_" + rowId]) == 52)
					{
						if (string.IsNullOrEmpty(form["Transaction_OtherPurposePayment_" + rowId]))
						{
							ModelState.AddModelError("Transaction_OtherPurposePayment_" + rowId, "Other purpose of payment is required!");
							beneficiaryForm = true;
						}
					}
				}
				if (!string.IsNullOrEmpty(form["Transaction_BeneficiarySupportDocType_" + rowId]))
				{
					if (form["Transaction_BeneficiarySupportDocType_" + rowId].ToString() != "0")
					{
						//if (string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadSuporting_" + rowId].ToString()))
						//{
						//    ModelState.AddModelError("Transaction_BeneficiaryUploadSuporting_" + rowId, "Upload Supporting is required!");
						//    beneficiaryForm = true;
						//}
						if (Convert.ToInt32(form["Transaction_BeneficiarySupportDocType_" + rowId]) == 11)
						{
							if (string.IsNullOrEmpty(form["Transaction_OtherSupportDocType_" + rowId]))
							{
								ModelState.AddModelError("Transaction_OtherSupportDocType_" + rowId, "Other upload supporting is required!");
								beneficiaryForm = true;
							}
						}
					}

				}
				if (string.IsNullOrEmpty(form["Transaction_BeneficiarySourceFund_" + rowId]))
				{
					ModelState.AddModelError("Transaction_BeneficiarySourceFund_" + rowId, "Source of funds is required!");
					beneficiaryForm = true;
				}
				else
				{
					if (Convert.ToInt32(form["Transaction_BeneficiarySourceFund_" + rowId]) == 20)
					{
						if (string.IsNullOrEmpty(form["Transaction_OtherSourceFund_" + rowId]))
						{
							ModelState.AddModelError("Transaction_OtherSourceFund_" + rowId, "Other source of fund is required!");
							beneficiaryForm = true;
						}
					}
				}
				if (string.IsNullOrEmpty(form["Transaction_BeneficiaryPaymentDetails_" + rowId]))
				{
					ModelState.AddModelError("Transaction_BeneficiaryPaymentDetails_" + rowId, "Payment Details / Instructions is required!");
					beneficiaryForm = true;
				}
				else
				{
					if (form["Transaction_BeneficiaryPaymentDetails_" + rowId].Length > 255)
					{
						ModelState.AddModelError("Transaction_BeneficiaryPaymentDetails_" + rowId, "Payment Details / Instructions cannot more than 255 words!");
						beneficiaryForm = true;
					}
				}
				if (string.IsNullOrEmpty(form["Transaction_BeneficiaryType_" + rowId]))
				{
					ModelState.AddModelError("Transaction_BeneficiaryType_" + rowId, "Beneficiary type is required!");
					beneficiaryForm = true;
				}
				else
				{
					if (form["Transaction_BeneficiaryType_" + rowId].ToString() == "individual")
					{
						if (string.IsNullOrEmpty(form["Transaction_BeneficiaryNationality_" + rowId]))
						{
							ModelState.AddModelError("Transaction_BeneficiaryNationality_" + rowId, "Nationality is required!");
							beneficiaryForm = true;
						}
						else
						{
							if (Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]) == 201)
							{
								if (string.IsNullOrEmpty(form["Transaction_OtherNationality_" + rowId]))
								{
									ModelState.AddModelError("Transaction_OtherNationality_" + rowId, "Other nationality is required!");
									beneficiaryForm = true;
								}
							}
						}
					}
					else
					{
						if (string.IsNullOrEmpty(form["Transaction_BeneficiaryCompanyRegistration_" + rowId]))
						{
							ModelState.AddModelError("Transaction_BeneficiaryCompanyRegistration_" + rowId, "Company registration no is required!");
							beneficiaryForm = true;
						}
						else
						{
							if (form["Transaction_BeneficiaryCompanyRegistration_" + rowId].Length > 100)
							{
								ModelState.AddModelError("Transaction_BeneficiaryCompanyRegistration_" + rowId, "Company registration no cannot more than 100 words!");
								beneficiaryForm = true;
							}
						}
						if (string.IsNullOrEmpty(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]))
						{
							ModelState.AddModelError("Transaction_BeneficiaryCategoryBusiness_" + rowId, "Category of business is required!");
							beneficiaryForm = true;
						}
						else
						{
							if (Convert.ToInt32(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]) == 331)
							{
								if (string.IsNullOrEmpty(form["Transaction_OtherCategoryBusiness_" + rowId]))
								{
									ModelState.AddModelError("Transaction_OtherCategoryBusiness_" + rowId, "Other category of business is required!");
									beneficiaryForm = true;
								}
							}
						}
						if (string.IsNullOrEmpty(form["Transaction_BeneficiaryCompanyContact_" + rowId]))
						{
							ModelState.AddModelError("Transaction_BeneficiaryCompanyContact_" + rowId, "Company contact no is required!");
							beneficiaryForm = true;
						}
						else
						{
							if (form["Transaction_BeneficiaryCompanyContact_" + rowId].Length > 100)
							{
								ModelState.AddModelError("Transaction_BeneficiaryCompanyContact_" + rowId, "Company contact no cannot more than 100 words!");
								beneficiaryForm = true;
							}
						}
					}
				}
				if (beneficiaryForm)
				{
					ModelState.AddModelError("Transaction_BeneficiaryForm_" + rowId, "Beneficiary Form is not valid!");
				}

			}

			if (ModelState.IsValid)
			{
                try
                {
					sales.LastApprovalOn = DateTime.Now;
					sales.UpdatedOn = DateTime.Now;
					sales.Remarks = form["sales.Remarks"];
                    sales.CustomerRemarks = form["sales.CustomerRemarks"];
					sales.CostPrice = Convert.ToDecimal(form["sales.CostPrice"]);
                    sales.CustomerParticularId = Convert.ToInt32(form["sales.CustomerParticularId"]);

					if (!string.IsNullOrEmpty(form["sales.AgentFee"]))
					{
						sales.AgentFee = Convert.ToDecimal(form["sales.AgentFee"]);
					}
					else
					{
						sales.AgentFee = 0;
					}
					if (!string.IsNullOrEmpty(form["sales.AgentFee"]))
					{
						sales.AgentRate = Convert.ToDecimal(form["sales.AgentRate"]);
					}
					else
					{
						sales.AgentRate = 0;
					}

					var agentId = 0;
					if (!string.IsNullOrEmpty(form["AgentId"].ToString()))
					{
						agentId = Convert.ToInt32(form["AgentId"]);
					}
					sales.AgentId = agentId;
					sales.TotalPayAmount = totalPay;
					sales.TotalGetAmount = totalGet;
					bool result = _remittancesalesModel.Update(sales.ID, sales);

					if (result)
					{
						int userid = Convert.ToInt32(Session["UserId"]);
						string tableAffected = "RemittanceSales";
						string ActionType = "Update";
						string description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Updated Remittance Sale [" + sales.MemoID + "]";
						string approvallog = "[" + Session["Username"].ToString() + "] Updated Remittance Sale [" + sales.MemoID + "]";

						bool sale_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);

						if (sale_log)
						{
							//Add Approval History
							bool approval_history = _approvalHistorysModel.Add("RemittanceSale", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), ActionType, approvallog);

						}

						//Update Transaction Payment Mode
						bool hasUpdateTransaction = false;

						foreach (string key in transactionKeys)
						{
							string rowId = key.Split('_')[2];

							int transactionId = Convert.ToInt32(form["Transaction_TransactionId_" + rowId]);

							RemittanceOrders oldTransaction = _remittanceordersModel.GetSingle(transactionId);

                            if(oldTransaction != null)
                            {
								rollBack_saleTransactions.Add(oldTransaction.ID, new RemittanceOrders()
								{
									ID = oldTransaction.ID,
									RemittanceId = oldTransaction.RemittanceId,
									TransactionID = oldTransaction.TransactionID,
									PayAmount = oldTransaction.PayAmount,
									GetAmount = oldTransaction.GetAmount,
									GetCurrency = oldTransaction.GetCurrency,
									PayCurrency = oldTransaction.PayCurrency,
									GetPaymentType = oldTransaction.GetPaymentType,
									PayPaymentType = oldTransaction.PayPaymentType,
									PayDepositAccount = oldTransaction.PayDepositAccount,
									ChequeNo = oldTransaction.ChequeNo,
									Fee = oldTransaction.Fee,
									Rate = oldTransaction.Rate,
									BeneficiaryBankAccountNo = oldTransaction.BeneficiaryBankAccountNo,
									BeneficiaryBankAddress = oldTransaction.BeneficiaryBankAddress,
									BankTransferNo = oldTransaction.BankTransferNo,
									BeneficiaryBankCountry = oldTransaction.BeneficiaryBankCountry,
									BeneficiaryCategoryOfBusiness = oldTransaction.BeneficiaryCategoryOfBusiness,
									BeneficiaryCompanyContactNo = oldTransaction.BeneficiaryCompanyContactNo,
									BeneficiaryCompanyRegistrationNo = oldTransaction.BeneficiaryCompanyRegistrationNo,
									BeneficiaryFullName = oldTransaction.BeneficiaryFullName,
									BeneficiaryNationality = oldTransaction.BeneficiaryNationality,
									BeneficiaryPurposeOfPayment = oldTransaction.BeneficiaryPurposeOfPayment,
									BeneficiaryPaymentDetails = oldTransaction.BeneficiaryPaymentDetails,
									BeneficiarySourceOfPayment = oldTransaction.BeneficiarySourceOfPayment,
									BeneficiaryType = oldTransaction.BeneficiaryType,
									BeneficiaryUploadSupportingFile = oldTransaction.BeneficiaryUploadSupportingFile,
									BeneficiaryUploadSupportingType = oldTransaction.BeneficiaryUploadSupportingType,
									BeneficiaryBankCode = oldTransaction.BeneficiaryBankCode,
									BeneficiaryContactNoMain = oldTransaction.BeneficiaryContactNoMain,
									BeneficiaryAddressMain = oldTransaction.BeneficiaryAddressMain,
									BeneficiaryBankName = oldTransaction.BeneficiaryBankName,
									IBANEuropeBSBAustralia = oldTransaction.IBANEuropeBSBAustralia,
									BankCountryIfOthers = oldTransaction.BankCountryIfOthers,
									BeneficiaryBusinessCategoryIfOthers = oldTransaction.BeneficiaryBusinessCategoryIfOthers,
									BeneficiaryNationalityIfOthers = oldTransaction.BeneficiaryNationalityIfOthers,
									PurposeOfPaymentIfOthers = oldTransaction.PurposeOfPaymentIfOthers,
									SourceOfPaymentIfOthers = oldTransaction.SourceOfPaymentIfOthers,
									UploadSupportingTypeIfOthers = oldTransaction.UploadSupportingTypeIfOthers,
									BeneficiaryUploadIDCopy = oldTransaction.BeneficiaryUploadIDCopy,
									currentPayRate = oldTransaction.currentPayRate
								});
							}
                            else
                            {
                                oldTransaction = new RemittanceOrders();
                            }

							var getPayProduct = _remittanceproductsModel.GetSingle(Convert.ToInt32(form["Transaction_PayCurrency_" + rowId]));
							if (getPayProduct != null)
							{
								bool updateCurrentPayrate = false;
								if (oldTransaction.PayAmount != Convert.ToDecimal(form["Transaction_PayAmount_" + rowId].ToString()))
								{
									updateCurrentPayrate = true;
								}
								if (oldTransaction.GetAmount != Convert.ToDecimal(form["Transaction_GetAmount_" + rowId].ToString()))
								{
									updateCurrentPayrate = true;
								}
								if (oldTransaction.PayCurrency != Convert.ToInt32(form["Transaction_PayCurrency_" + rowId].ToString()))
								{
									updateCurrentPayrate = true;
								}
								if (oldTransaction.GetCurrency != Convert.ToInt32(form["Transaction_GetCurrency_" + rowId].ToString()))
								{
									updateCurrentPayrate = true;
								}
								if (oldTransaction.Rate != Convert.ToDecimal(form["Transaction_Rate_" + rowId].ToString()))
								{
									updateCurrentPayrate = true;
								}
								if (oldTransaction.Fee != Convert.ToDecimal(form["Transaction_Fee_" + rowId].ToString()))
								{
									updateCurrentPayrate = true;
								}

								if (updateCurrentPayrate)
								{
									if (getPayProduct.PayRate != null && getPayProduct.PayRate > 0)
									{
										oldTransaction.currentPayRate = getPayProduct.PayRate ?? 0;
									}
									else
									{
										if (getPayProduct.AutomatedPayRate != null && getPayProduct.AutomatedPayRate > 0)
											oldTransaction.currentPayRate = getPayProduct.AutomatedPayRate ?? 0;
									}
								}
							}
							//oldTransaction.currentPayRate = Convert.ToDecimal(form["payRate_" + rowId]);
							oldTransaction.PayPaymentType = form["Transaction_PayPaymentType_" + rowId].ToString();
							oldTransaction.PayAmount = Convert.ToDecimal(form["Transaction_PayAmount_" + rowId].ToString());
							oldTransaction.GetAmount = Convert.ToDecimal(form["Transaction_GetAmount_" + rowId].ToString());
							oldTransaction.PayCurrency = Convert.ToInt32(form["Transaction_PayCurrency_" + rowId].ToString());
							oldTransaction.GetCurrency = Convert.ToInt32(form["Transaction_GetCurrency_" + rowId].ToString());
							oldTransaction.Rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId].ToString());
							oldTransaction.Fee = Convert.ToDecimal(form["Transaction_Fee_" + rowId].ToString());
							oldTransaction.BeneficiaryBankAccountNo = form["Transaction_BeneficiaryBankAccount_" + rowId].ToString();
							oldTransaction.BeneficiaryBankAddress = form["Transaction_BeneficiaryBankAddress_" + rowId].ToString();
							oldTransaction.BeneficiaryBankCode = form["Transaction_BeneficiaryBankCode_" + rowId].ToString();
							oldTransaction.BeneficiaryContactNoMain = form["Transaction_ContactNoMain_" + rowId].ToString();
							oldTransaction.BeneficiaryAddressMain = form["Transaction_AddressMain_" + rowId].ToString();
							oldTransaction.BeneficiaryBankName = form["Transaction_BeneficiaryBankName_" + rowId].ToString();
							oldTransaction.IBANEuropeBSBAustralia = form["Transaction_IBANEuropeBSBAustralia_" + rowId].ToString();
							oldTransaction.BeneficiaryBankCountry = Convert.ToInt32(form["Transaction_BeneficiaryBankCountry_" + rowId]);
                            oldTransaction.GetPaymentType = form["Transaction_GetPaymentType_" + rowId].ToString();

							if (Convert.ToInt32(form["Transaction_BeneficiaryBankCountry_" + rowId]) == 48)
							{
								oldTransaction.BankCountryIfOthers = form["Transaction_OtherBankCountry_" + rowId].ToString();
							}
							if (form["Transaction_BeneficiaryType_" + rowId].ToString() == "business")
							{
								oldTransaction.BeneficiaryCategoryOfBusiness = Convert.ToInt32(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]);
								if (Convert.ToInt32(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]) == 331)
								{
									oldTransaction.BeneficiaryBusinessCategoryIfOthers = form["Transaction_OtherCategoryBusiness_" + rowId].ToString();
								}
								oldTransaction.BeneficiaryCompanyContactNo = form["Transaction_BeneficiaryCompanyContact_" + rowId].ToString();
								oldTransaction.BeneficiaryCompanyRegistrationNo = form["Transaction_BeneficiaryCompanyRegistration_" + rowId].ToString();
								oldTransaction.BeneficiaryNationality = Convert.ToInt32(form["Transaction_BeneficiaryCategoryOfBusiness_" + rowId]);
							}
							else
							{
								oldTransaction.BeneficiaryNationality = Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]);
								if (Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]) == 201)
								{
									oldTransaction.BeneficiaryNationalityIfOthers = form["Transaction_OtherNationality_" + rowId].ToString();
								}
								oldTransaction.BeneficiaryCategoryOfBusiness = Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]);
								oldTransaction.BeneficiaryCompanyContactNo = "";
								oldTransaction.BeneficiaryCompanyRegistrationNo = "";
							}
							oldTransaction.BeneficiaryFullName = form["Transaction_BeneficiaryName_" + rowId].ToString();
							oldTransaction.BeneficiaryPaymentDetails = form["Transaction_BeneficiaryPaymentDetails_" + rowId].ToString();
							oldTransaction.BeneficiaryPurposeOfPayment = Convert.ToInt32(form["Transaction_BeneficiaryPurposePayment_" + rowId]);
							if (Convert.ToInt32(form["Transaction_BeneficiaryPurposePayment_" + rowId]) == 52)
							{
								oldTransaction.PurposeOfPaymentIfOthers = form["Transaction_OtherPurposePayment_" + rowId].ToString();
							}
							oldTransaction.BeneficiarySourceOfPayment = Convert.ToInt32(form["Transaction_BeneficiarySourceFund_" + rowId]);
							if (Convert.ToInt32(form["Transaction_BeneficiarySourceFund_" + rowId]) == 20)
							{
								oldTransaction.SourceOfPaymentIfOthers = form["Transaction_OtherSourceFund_" + rowId].ToString();
							}
							oldTransaction.BeneficiaryType = form["Transaction_BeneficiaryType_" + rowId].ToString();
							if (string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadSuporting_" + rowId]))
							{
								oldTransaction.BeneficiaryUploadSupportingFile = "";
							}
							else
							{
								oldTransaction.BeneficiaryUploadSupportingFile = form["Transaction_BeneficiaryUploadSuporting_" + rowId].ToString();
							}
							if (string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadIDPassport_" + rowId]))
							{
								oldTransaction.BeneficiaryUploadIDCopy = "";
							}
							else
							{
								oldTransaction.BeneficiaryUploadIDCopy = form["Transaction_BeneficiaryUploadIDPassport_" + rowId].ToString();
							}
							oldTransaction.BeneficiaryUploadSupportingType = Convert.ToInt32(form["Transaction_BeneficiarySupportDocType_" + rowId]);
							if (Convert.ToInt32(form["Transaction_BeneficiarySupportDocType_" + rowId]) == 11)
							{
								oldTransaction.UploadSupportingTypeIfOthers = form["Transaction_OtherSupportDocType_" + rowId].ToString();
							}
							if (oldTransaction.PayPaymentType == "1")
							{
								oldTransaction.ChequeNo = null;
								oldTransaction.BankTransferNo = null;
								oldTransaction.PayDepositAccount = 0;
							}
							else if (oldTransaction.PayPaymentType == "2")
							{
								oldTransaction.ChequeNo = form["Transaction_ChequeNo_" + rowId].ToString();
								oldTransaction.BankTransferNo = null;
								oldTransaction.PayDepositAccount = Convert.ToInt32(form["Transaction_DepositAccount_" + rowId]);
							}
							else if (oldTransaction.PayPaymentType == "3")
							{
								oldTransaction.ChequeNo = null;
								oldTransaction.BankTransferNo = form["Transaction_BankTransferNo_" + rowId].ToString();
								oldTransaction.PayDepositAccount = Convert.ToInt32(form["Transaction_DepositAccount_" + rowId]);
							}
                            bool transaction_update_result = false;

							if (oldTransaction.ID > 0)
                            {
                                //this is update
								transaction_update_result = _remittanceordersModel.Update(oldTransaction.ID, oldTransaction);
							}
                            else
                            {
                                oldTransaction.RemittanceId = id;
								oldTransaction.TransactionID = form[key].ToString();
								transaction_update_result = _remittanceordersModel.Add(oldTransaction);
							}

							if (transaction_update_result)
							{
								if (!string.IsNullOrEmpty(oldTransaction.BeneficiaryUploadSupportingFile))
								{
									string[] supportDocFile = oldTransaction.BeneficiaryUploadSupportingFile.Split(',');

									foreach (string file in supportDocFile)
									{
										string sourceFile = "";
										string destinationFile = "";
										if (sales.CreatedFrom == "Admin")
										{
											sourceFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), file);
											destinationFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["BeneficiarySupportDocumentsFolder"].ToString()), file);
										}
										else
										{
											sourceFile = ConfigurationManager.AppSettings["SharedNetworkTempFolder"].ToString() + file;//Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["SharedNetworkTempFolder"].ToString()), file);
											destinationFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["BeneficiarySupportDocumentsFolder"].ToString()), file);
										}

										if (!string.IsNullOrEmpty(sourceFile) && !string.IsNullOrEmpty(destinationFile))
										{
											if (System.IO.File.Exists(sourceFile))
											{
												System.IO.File.Move(sourceFile, destinationFile);
											}
										}
									}
								}
								if (!string.IsNullOrEmpty(oldTransaction.BeneficiaryUploadIDCopy))
								{
									string[] supportDocFile = oldTransaction.BeneficiaryUploadIDCopy.Split(',');

									foreach (string file in supportDocFile)
									{
										string sourceFile = "";
										string destinationFile = "";
										if (sales.CreatedFrom == "Admin")
										{
											sourceFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), file);
											destinationFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["BeneficiaryUploadIDCopyFolder"].ToString()), file);
										}
										else
										{
											sourceFile = ConfigurationManager.AppSettings["SharedNetworkTempFolder"].ToString() + file;//Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["SharedNetworkTempFolder"].ToString()), file);
											destinationFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["BeneficiaryUploadIDCopyFolder"].ToString()), file);
										}

										if (!string.IsNullOrEmpty(sourceFile) && !string.IsNullOrEmpty(destinationFile))
										{
											if (System.IO.File.Exists(sourceFile))
											{
												System.IO.File.Move(sourceFile, destinationFile);
											}
										}
									}
								}
								if (!hasUpdateTransaction)
								{
									hasUpdateTransaction = true;
								}
							}

						}

						if (hasUpdateTransaction)
						{
							userid = Convert.ToInt32(Session["UserId"]);
							tableAffected = "RemittanceOrders";
							description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Updated Remittance Order [" + sales.MemoID + "]";
							bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
						}

						TempData.Add("Result", "success|" + sales.MemoID + " has been successfully updated!");

						return RedirectToAction("Listing", module, new { @page = page });
					}
					else
					{
						TempData.Add("Result", "danger|An error occured while saving sale record!");
					}
				}
				catch (DbUpdateException e)
				{
					if (e.ToString().Contains("was deadlocked on lock resources with another process and has been chosen as the deadlock victim"))
					{
						//Roll back sale
						_remittancesalesModel.Update(rollBack_Sale.ID, rollBack_Sale);

						//Role back Transactions
						foreach (int key in rollBack_saleTransactions.Keys)
						{
							_remittanceordersModel.Update(key, rollBack_saleTransactions[key]);
						}

						TempData.Add("Result", "danger|An error occured while saving sale record! Please submit again!");
					}
					else
					{
						throw;
					}
				}
				catch (Exception e)
				{
					//Roll back sale
					_remittancesalesModel.Update(rollBack_Sale.ID, rollBack_Sale);

					//Role back Transactions
					foreach (int key in rollBack_saleTransactions.Keys)
					{
						_remittanceordersModel.Update(key, rollBack_saleTransactions[key]);
					}

					TempData.Add("Result", "danger|An error occured while saving sale record! " + e.Message + "!");
				}
			}
			else
			{
				TempData.Add("Result", "danger|There is something wrong in the form!");
			}

			Dropdown[] customerDDL = CustomerDDL();
			ViewData["CustomerDropdown"] = new SelectList(customerDDL, "val", "name", sales.CustomerParticularId);
			CustomerParticular customer = sales.CustomerParticulars;
			ViewData["CustomerContact"] = "";
			ViewData["CustomerAddress"] = "";
			Dropdown[] agentDDL = AgentDDL();
			ViewData["AgentDropdown"] = new SelectList(agentDDL, "val", "name", sales.AgentId);
			ViewData["CreatedBy"] = "";
			using (var context = new DataAccess.GreatEastForex())
			{
				var createdfrom = sales.CreatedFrom;
				if (!string.IsNullOrEmpty(createdfrom))
				{
					if (createdfrom == "Admin")
					{
						string createbyName = context.Users.Where(e => e.ID == sales.CreatedBy).FirstOrDefault().Name;
						ViewData["CreatedBy"] = createbyName;
					}
					else
					{

						var createby = context.CustomerParticulars.Where(e => e.ID == sales.CreatedBy).FirstOrDefault();
						var createbyName = "";
						if (!string.IsNullOrEmpty(createby.Surname) && !string.IsNullOrEmpty(createby.GivenName))
						{
							createbyName = createby.Surname + " " + createby.GivenName;
						}
						else
						{
							if (createby.CustomerType == "Corporate & Trading Company")
							{

								createbyName = createby.Company_RegisteredName;
							}
							else
							{
								createbyName = createby.Natural_Name;
							}
						}
						ViewData["CreatedBy"] = createbyName;
					}
				}
			}
			if (customer != null)
			{
				string contact = "";
				string address = "";
				string shippingadress = "";

				if (customer.CustomerType == "Corporate & Trading Company")
				{
					contact = customer.Company_TelNo;
					if (!string.IsNullOrEmpty(customer.Company_BusinessAddress2))
					{
						address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_PostalCode;
						if (!string.IsNullOrEmpty(customer.Company_BusinessAddress3))
						{
							address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_BusinessAddress3 + ", " + customer.Company_PostalCode;

						}
					}
					else
					{
						address = customer.Company_BusinessAddress1 + ", " + customer.Company_PostalCode;
					}

					if (!string.IsNullOrEmpty(customer.Shipping_Address2))
					{
						shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_Address2 + ", " + customer.Shipping_PostalCode;

						if (!string.IsNullOrEmpty(customer.Shipping_Address3))
						{
							shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_Address2 + ", " + customer.Shipping_Address3 + ", " + customer.Shipping_PostalCode;

						}
					}
					else
					{
						shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_PostalCode;
					}

				}
				else
				{
					contact = customer.Natural_ContactNoM;
					address = customer.Natural_PermanentAddress;
					shippingadress = customer.Natural_MailingAddress + ", " + customer.Natural_MailingAddress2 + ", " + customer.Shipping_PostalCode;
				}

				ViewData["CustomerContact"] = contact;
				ViewData["CustomerAddress"] = address;
				ViewData["CustomerShippingAddress"] = shippingadress;
			}

			if (ViewData["CustomerShippingAddress"] == null)
			{
				ViewData["CustomerShippingAddress"] = "";
			}


			//Dropdown[] collectionTimeDDL = CollectionTimeDDL();
			//ViewData["CollectionTimeDropdown"] = new SelectList(collectionTimeDDL, "val", "name", sales.CollectionTime);

			ViewData["NonUrgentRadio"] = "";
			ViewData["UrgentRadio"] = "";
			if (sales.IsUrgent == 1)
			{
				ViewData["UrgentRadio"] = "checked";
			}
			else
			{
				ViewData["NonUrgentRadio"] = "checked";
			}
			ViewData["CostPrice"] = sales.CostPrice;
			ViewData["AgentRate"] = sales.AgentRate;
			ViewData["AgentFee"] = sales.AgentFee;
			RemittanceProducts sgd = _remittanceproductsModel.FindCurrencyCode("SGD");
			string sgdFormat = GetDecimalFormat(sgd.ProductDecimal);
			string rateFormat = GetRateFormat(rateDP);

			IList<RemittanceOrderData> transactions = new List<RemittanceOrderData>();

			int _rowId = 1;

			decimal totalForeign = 0;
			decimal totalLocal = 0;
			string paySymbol = "$";
			string payFormat = "";
			int payDecimal = 1;
			foreach (string key in transactionKeys)
			{
				RemittanceOrderData transactionData = new RemittanceOrderData();
				//transactionData.Denominations = new List<DenominationsData>();

				string rowId = key.Split('_')[2];
				//rowId = rowId.ToString().PadLeft(3, '0');
				string transactionID = form["Transaction_ID_" + rowId].ToString();
                string roid = "";

				if (!string.IsNullOrEmpty(form["Transaction_TransactionId_" + rowId]))
                {
					roid = form["Transaction_TransactionId_" + rowId].ToString();
				}

				string type = form["Transaction_Type_" + rowId].ToString();
				//string payPaymentType = "";
				//if (!string.IsNullOrEmpty(form["Transaction_PayPaymentType_" + rowId]))
				//{
				//    payPaymentType = form["Transaction_PayPaymentType_" + rowId].ToString();
				//}

				string productId = form["Transaction_PayCurrency_" + rowId].ToString();
				RemittanceProducts product = _remittanceproductsModel.GetSingle(Convert.ToInt32(productId));
				string currencyFormat = GetDecimalFormat(product.ProductDecimal);
				paySymbol = product.ProductSymbol;
				payFormat = GetDecimalFormat(product.ProductDecimal);
				string getproductId = form["Transaction_GetCurrency_" + rowId].ToString();
				RemittanceProducts getproduct = _remittanceproductsModel.GetSingle(Convert.ToInt32(getproductId));
				string getcurrencyFormat = GetDecimalFormat(getproduct.ProductDecimal);

				Dropdown2[] currency = CurrencyDDL2("Remittance");
				var payCurrencyDDL = new SelectList(currency, "val", "name", dataGroupField: "group", productId);
				var getCurrencyDDL = new SelectList(currency, "val", "name", dataGroupField: "group", getproductId);

				string symbol = _remittanceproductsModel.GetSingle(Convert.ToInt32(productId)).ProductSymbol;
				string rate = "";
				if (!string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
				{
					rate = form["Transaction_Rate_" + rowId].ToString();
				}

				string paymentModeVal = "";
				if (!string.IsNullOrEmpty(form["Transaction_PayPaymentType_" + rowId]))
				{
					paymentModeVal = form["Transaction_PayPaymentType_" + rowId].ToString();
				}
				Dropdown[] paymentMode = PaymentModeDDL(Convert.ToInt32(productId));
				SelectList paymentModeDDL = new SelectList(paymentMode, "val", "name", paymentModeVal);

				Dropdown[] getpaymentMode = new Dropdown[1];
				getpaymentMode[0] = new Dropdown { name = "Bank Transfer", val = "3" };
				SelectList getpaymentModeDDL = new SelectList(getpaymentMode, "val", "name");

				string disabledCheque = "disabled";
				string disabledBankTranfer = "disabled";
				string disabledDepositAcc = "disabled";
				string disabledOtherPurposePayment = "disabled";
				string disabledOtherCategoryBusiness = "disabled";
				string disabledOtherNationalities = "disabled";
				string disabledOtherSourceFund = "disabled";
				string disabledOtherSuppDocType = "disabled";
				string disabledOtherBankCountry = "disabled";
				if (paymentModeVal == "2")
				{
					disabledCheque = "";
					disabledDepositAcc = "";
				}
				else if (paymentModeVal == "3")
				{
					disabledBankTranfer = "";
					disabledDepositAcc = "";
				}

				string chequeNo = "";
				if (!string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
				{
					chequeNo = form["Transaction_ChequeNo_" + rowId].ToString();
				}

				string depositAcc = "";
				if (!string.IsNullOrEmpty(form["Transaction_DepositAccount_" + rowId]))
				{
					depositAcc = form["Transaction_DepositAccount_" + rowId].ToString();
				}

				Dropdown[] paymentBankDDL = PayBankDDL();
				var depositAccDDL = new SelectList(paymentBankDDL, "val", "name", depositAcc);

				string bankTransferNo = "";
				if (!string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
				{
					bankTransferNo = form["Transaction_BankTransferNo_" + rowId].ToString();
				}

				string amountPay = "";
				if (!string.IsNullOrEmpty(form["Transaction_PayAmount_" + rowId]))
				{
					amountPay = form["Transaction_PayAmount_" + rowId].ToString();
				}

				string amountGet = "";
				if (!string.IsNullOrEmpty(form["Transaction_GetAmount_" + rowId]))
				{
					amountGet = form["Transaction_GetAmount_" + rowId].ToString();
				}

				string transactionPayrate = "";
				if (!string.IsNullOrEmpty(form["payrate_" + rowId]))
				{
					transactionPayrate = form["payrate_" + rowId].ToString();
				}

				string transactionCurrentPayrate = "";
				if (product != null)
				{
					if (product.PayRate != null && product.PayRate > 0)
					{
						transactionCurrentPayrate = product.PayRate.ToString();

					}
					else
					{
						if (product.AutomatedPayRate != null && product.AutomatedPayRate > 0)
							transactionCurrentPayrate = product.AutomatedPayRate.ToString();
					}
				}

				string transactionGetrate = "";
				if (!string.IsNullOrEmpty(form["getrate_" + rowId]))
				{
					transactionGetrate = form["getrate_" + rowId].ToString();
				}

				string gettransactionFees = "";
				if (!string.IsNullOrEmpty(form["gettransactionFees_" + rowId]))
				{
					gettransactionFees = form["gettransactionFees_" + rowId].ToString();
				}

				string transactionFees = "";
				if (!string.IsNullOrEmpty(form["Transaction_Fee_" + rowId]))
				{
					transactionFees = form["Transaction_Fee_" + rowId].ToString();
				}

				string payDecimalFormat = "";
				if (!string.IsNullOrEmpty(form["payDecimalFormat_" + rowId]))
				{
					payDecimalFormat = form["payDecimalFormat_" + rowId].ToString();
				}

				string getDecimalFormat = "";
				if (!string.IsNullOrEmpty(form["getDecimalFormat_" + rowId]))
				{
					getDecimalFormat = form["getDecimalFormat_" + rowId].ToString();
				}

				Dropdown[] beneficiaries = BeneficiariesDDL();
				Dropdown[] docsuppList = SupportDocTypeDDL();
				Dropdown[] countries = CountryDDL();
				Dropdown[] paymentList = PurposePaymentDDL(0);
				Dropdown[] fundList = SourceFundsDDL();
				Dropdown[] nationalities = NationalityDDL();
				Dropdown2[] BusinessCategoriesLists = BusinessCategoryDDL();
				ViewData["BeneficiaryDropdown"] = new SelectList(beneficiaries, "val", "name");

				string beneficiaryName = "";
				if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryName_" + rowId]))
				{
					beneficiaryName = form["Transaction_BeneficiaryName_" + rowId].ToString();
				}

				string beneficiaryBankAcc = "";
				if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankAccount_" + rowId]))
				{
					beneficiaryBankAcc = form["Transaction_BeneficiaryBankAccount_" + rowId].ToString();
				}

				string beneficiaryBankCode = "";
				if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankCode_" + rowId]))
				{
					beneficiaryBankCode = form["Transaction_BeneficiaryBankCode_" + rowId].ToString();
				}

				string beneficiaryBankCountry = "";
				string otherBankCountry = "";
				if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankCountry_" + rowId]))
				{
					beneficiaryBankCountry = form["Transaction_BeneficiaryBankCountry_" + rowId].ToString();
					if (Convert.ToInt32(form["Transaction_BeneficiaryBankCountry_" + rowId]) == 48)
					{
						disabledOtherBankCountry = "";
						otherBankCountry = form["Transaction_OtherBankCountry_" + rowId].ToString();
					}
				}
				var countriesDDL = new SelectList(countries, "val", "name", beneficiaryBankCountry);

				string beneficiaryAddress = "";
				if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankAddress_" + rowId]))
				{
					beneficiaryAddress = form["Transaction_BeneficiaryBankAddress_" + rowId].ToString();
				}
				string beneficiaryMainContact = "";
				if (!string.IsNullOrEmpty(form["Transaction_ContactNoMain_" + rowId]))
				{
					beneficiaryMainContact = form["Transaction_ContactNoMain_" + rowId].ToString();
				}

				string beneficiaryMainAddress = "";
				if (!string.IsNullOrEmpty(form["Transaction_AddressMain_" + rowId]))
				{
					beneficiaryMainAddress = form["Transaction_AddressMain_" + rowId].ToString();
				}

				string beneficiaryBankName = "";
				if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankName_" + rowId]))
				{
					beneficiaryBankName = form["Transaction_BeneficiaryBankName_" + rowId].ToString();
				}

				string IBANEuropeBSBAustralia = "";
				if (!string.IsNullOrEmpty(form["Transaction_IBANEuropeBSBAustralia_" + rowId]))
				{
					IBANEuropeBSBAustralia = form["Transaction_IBANEuropeBSBAustralia_" + rowId].ToString();
				}
				string beneficiaryType = "";
				ViewData["IndividualRadio_" + rowId] = "";
				ViewData["BusinessRadio_" + rowId] = "";
				if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryType_" + rowId]))
				{
					beneficiaryType = form["Transaction_BeneficiaryType_" + rowId].ToString();

					if (beneficiaryType == "individual")
					{
						ViewData["IndividualRadio_" + rowId] = "checked";
						paymentList = PurposePaymentDDL(0);
					}
					else if (beneficiaryType == "business")
					{
						ViewData["BusinessRadio_" + rowId] = "checked";
						paymentList = PurposePaymentDDL(1);
					}
				}

				string beneficiaryPurposePayment = "";
				string otherPurposePayment = "";
				if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryPurposePayment_" + rowId]))
				{
					beneficiaryPurposePayment = form["Transaction_BeneficiaryPurposePayment_" + rowId].ToString();
					if (Convert.ToInt32(form["Transaction_BeneficiaryPurposePayment_" + rowId]) == 52)
					{
						disabledOtherPurposePayment = "";
						otherPurposePayment = form["Transaction_OtherPurposePayment_" + rowId].ToString();
					}
				}
				var paymentListDDL = new SelectList(paymentList, "val", "name", beneficiaryPurposePayment);

				string beneficiarySourceFund = "";
				string otherSourceFund = "";
				if (!string.IsNullOrEmpty(form["Transaction_BeneficiarySourceFund_" + rowId]))
				{
					beneficiarySourceFund = form["Transaction_BeneficiarySourceFund_" + rowId].ToString();
					if (Convert.ToInt32(form["Transaction_BeneficiarySourceFund_" + rowId]) == 20)
					{
						disabledOtherCategoryBusiness = "";
						otherSourceFund = form["Transaction_OtherSourceFund_" + rowId].ToString();
					}
				}
				var fundListDDL = new SelectList(fundList, "val", "name", beneficiarySourceFund);

				string beneficiarySuppDocType = "";
				string otherSuppDocType = "";
				if (!string.IsNullOrEmpty(form["Transaction_BeneficiarySupportDocType_" + rowId]))
				{
					beneficiarySuppDocType = form["Transaction_BeneficiarySupportDocType_" + rowId].ToString();
					if (Convert.ToInt32(form["Transaction_BeneficiarySupportDocType_" + rowId]) == 11)
					{
						disabledOtherSuppDocType = "";
						otherSuppDocType = form["Transaction_OtherSupportDocType_" + rowId].ToString();
					}
				}
				var suppDocDDL = new SelectList(docsuppList, "val", "name", beneficiarySuppDocType);

				string beneficiaryUploadSuporting = "";
				if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadSuporting_" + rowId]))
				{
					beneficiaryUploadSuporting = form["Transaction_BeneficiaryUploadSuporting_" + rowId].ToString();
				}

				string beneficiaryIDPassport = "";
				if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadIDPassport_" + rowId]))
				{
					beneficiaryIDPassport = form["Transaction_BeneficiaryUploadIDPassport_" + rowId].ToString();
				}

				string beneficiaryPaymentDetails = "";
				if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryPaymentDetails_" + rowId]))
				{
					beneficiaryPaymentDetails = form["Transaction_BeneficiaryPaymentDetails_" + rowId].ToString();
				}

				string beneficiaryNationality = "";
				string otherNationality = "";
				if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryNationality_" + rowId]))
				{
					beneficiaryNationality = form["Transaction_BeneficiaryNationality_" + rowId].ToString();
					if (Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]) == 201)
					{
						disabledOtherNationalities = "";
						otherNationality = form["Transaction_OtherNationality_" + rowId].ToString();
					}
				}
				var nationalitiesDDL = new SelectList(nationalities, "val", "name", beneficiaryNationality);

				string beneficiaryCompanyRegistration = "";
				if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryCompanyRegistration_" + rowId]))
				{
					beneficiaryCompanyRegistration = form["Transaction_BeneficiaryCompanyRegistration_" + rowId].ToString();
				}

				string beneficiaryCategoryBusiness = "";
				string otherCategoryBusiness = "";
				if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]))
				{
					beneficiaryCategoryBusiness = form["Transaction_BeneficiaryCategoryBusiness_" + rowId].ToString();
					if (Convert.ToInt32(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]) == 331)
					{
						disabledOtherCategoryBusiness = "";
						otherCategoryBusiness = form["Transaction_OtherCategoryBusiness_" + rowId].ToString();
					}
				}
				var categoryBusinessDDL = new SelectList(BusinessCategoriesLists, "val", "name", dataGroupField: "group", beneficiaryCategoryBusiness);

				string beneficiaryCompanyContact = "";
				if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryCompanyContact_" + rowId]))
				{
					beneficiaryCompanyContact = form["Transaction_BeneficiaryCompanyContact_" + rowId].ToString();
				}


				string totalCalculatedForeign = "0.00";
				string remainingForeign = "0.00";
				string totalOrderForeign = "0.00";

				transactionData.RowId = rowId.ToString();

                if(!string.IsNullOrEmpty(roid))
                {
					transactionData.ID = Convert.ToInt32(roid);
				}
				transactionData.transactionID = transactionID;
				transactionData.PayAmount = amountPay;
				transactionData.BankTransferNo = bankTransferNo;
				transactionData.ChequeNo = chequeNo;
				//transactionData.PayCurrency = currencyFormat;
				transactionData.payDecimalFormat = currencyFormat;
				transactionData.PayCurrencyDDL = payCurrencyDDL;
				transactionData.GetCurrencyDDL = getCurrencyDDL;
				transactionData.PayPaymentModeDDL = paymentModeDDL;
				transactionData.GetPaymentModeDDL = getpaymentModeDDL;
				transactionData.DepositAccountDDL = depositAccDDL;
				transactionData.countriesDDL = countriesDDL;
				transactionData.fundListDDL = fundListDDL;
				transactionData.nationalitiesDDL = nationalitiesDDL;
				transactionData.paymentListDDL = paymentListDDL;
				transactionData.suppDocDDL = suppDocDDL;
				transactionData.categoryBusinessDDL = categoryBusinessDDL;
				transactionData.PayDepositAccount = depositAcc;
				transactionData.DisabledDepositAccount = disabledDepositAcc;
				transactionData.PayPaymentType = paymentModeVal;
				transactionData.Rate = rate;
				transactionData.GetAmount = amountGet;
				//transactionData.GetCurrency = getcurrencyFormat;
				transactionData.getDecimalFormat = getcurrencyFormat;
				transactionData.GetPaymentType = chequeNo;
				transactionData.DisabledBankTransferNo = disabledBankTranfer;
				transactionData.DisabledChequeNo = disabledCheque;
				transactionData.transactionPayrate = transactionPayrate;
				transactionData.transactionGetrate = transactionGetrate;
				transactionData.gettransactionFees = gettransactionFees;
				transactionData.transactionFees = transactionFees;
				transactionData.BeneficiaryBankAccountNo = beneficiaryBankAcc;
				transactionData.BeneficiaryBankAddress = beneficiaryAddress;
				transactionData.BeneficiaryBankCode = beneficiaryBankCode;
				transactionData.BeneficiaryBankCountry = beneficiaryBankCountry;
				transactionData.BeneficiaryCategoryOfBusiness = beneficiaryCategoryBusiness;
				transactionData.BeneficiaryCompanyContactNo = beneficiaryCompanyContact;
				transactionData.BeneficiaryCompanyRegistrationNo = beneficiaryCompanyRegistration;
				transactionData.BeneficiaryFullName = beneficiaryName;
				transactionData.BeneficiaryNationality = beneficiaryNationality;
				transactionData.BeneficiaryPaymentDetails = beneficiaryPaymentDetails;
				transactionData.BeneficiaryPurposeOfPayment = beneficiaryPurposePayment;
				transactionData.BeneficiarySourceOfPayment = beneficiarySourceFund;
				transactionData.BeneficiaryType = beneficiaryType;
				transactionData.BankTransferNo = bankTransferNo;
				transactionData.BeneficiaryUploadSupportingFile = beneficiaryUploadSuporting;
				transactionData.BeneficiaryUploadSupportingType = beneficiarySuppDocType;
				transactionData.BeneficiaryContactNoMain = beneficiaryMainContact;
				transactionData.BeneficiaryAddressMain = beneficiaryMainAddress;
				transactionData.BeneficiaryBankName = beneficiaryBankName;
				transactionData.IBANEuropeBSBAustralia = IBANEuropeBSBAustralia;
				transactionData.BankCountryIfOthers = otherBankCountry;
				transactionData.disabledBankCountryIfOthers = disabledOtherBankCountry;
				transactionData.BeneficiaryNationalityIfOthers = otherNationality;
				transactionData.disabledBeneficiaryNationalityIfOthers = disabledOtherNationalities;
				transactionData.BeneficiaryBusinessCategoryIfOthers = otherCategoryBusiness;
				transactionData.disabledBeneficiaryBusinessCategoryIfOthers = disabledOtherCategoryBusiness;
				transactionData.PurposeOfPaymentIfOthers = otherPurposePayment;
				transactionData.disabledPurposeOfPaymentIfOthers = disabledOtherPurposePayment;
				transactionData.SourceOfPaymentIfOthers = otherSourceFund;
				transactionData.disabledSourceOfPaymentIfOthers = disabledOtherSourceFund;
				transactionData.UploadSupportingTypeIfOthers = otherSuppDocType;
				transactionData.disabledUploadSupportingTypeIfOthers = disabledOtherSuppDocType;
				transactionData.BeneficiaryUploadIDCopy = beneficiaryIDPassport;
				transactionData.currentPayRate = transactionCurrentPayrate;

				transactions.Add(transactionData);
			}

			ViewData["SaleTransactionsData"] = transactions;

			ViewData["TotalForeign"] = totalForeign.ToString(GetRateFormat(8));
			ViewData["TotalLocal"] = totalLocal.ToString(payFormat);
			ViewData["PaySymbol"] = paySymbol;
			ViewData["Sale"] = sales;
			ViewData["SaleId"] = sales.ID;
			ViewData["PendingApproval"] = "No";
			if (sales.Status == "Pending GM Approval" || sales.Status == "Pending Delete GM Approval")
			{
				ViewData["PendingApproval"] = "Yes";
			}
			ViewData["SaleTransactionType"] = "Remittance";
			ViewData["Module"] = module;

			ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
			return View();
		}

		//End


		//GET: Edit
		//public ActionResult Edit(int id, string module = "RemittanceSale")
  //      {
  //          int page = 1;

  //          if (TempData["Page"] != null)
  //          {
  //              page = Convert.ToInt32(TempData.Peek("Page"));
  //              ViewData["Page"] = page;
  //              TempData.Keep("Page");
  //          }

  //          //check role if only junior dealer then only can update his own records.
  //          string userRole = Session["UserRole"].ToString();
  //          string[] userRoleList = userRole.Split(',');
  //          int userid = Convert.ToInt32(Session["UserId"].ToString());
  //          Remittances sales = new Remittances();

  //          if (Array.IndexOf(userRoleList, "Junior Dealer") >= 0)
  //          {
		//		sales = _remittancesalesModel.GetSingle(id);

		//		if (userRoleList.Length > 1)
		//		{
		//			//this is multiple role
		//		}
		//		else
		//		{
		//			//if single role, then only can update his own record
		//			if (sales.CreatedBy != userid)
		//			{
		//				TempData.Add("Result", "error|Unable to access to this sales.");
		//				return RedirectToAction("Listing", module, new { @page = page });
		//			}
		//		}
  //          }
  //          else
  //          {
  //              //this is not junior dealer
  //              sales = _remittancesalesModel.GetSingle(id);
  //          }

  //          ///Sale sales = _salesModel.GetSingle2(id);
  //          if (sales != null)
  //          {

  //              if ((sales.Status.Contains("Pending Dealer") && Array.IndexOf(userRoleList, "Dealer") >= 0) || (sales.Status.Contains("Pending Account") && Array.IndexOf(userRoleList, "Finance") >= 0) || (sales.Status.Contains("Pending Customer") && Array.IndexOf(userRoleList, "Dealer") >= 0))
  //              {
  //                  return RedirectToAction("SaleApproval", new { @id = id, @module = module });
  //              }

  //              ViewData["Disabled"] = "";

  //              List<string> disabledStatus = new List<string>() { "Completed", "Pending GM Approval", "Pending GM Approval (Rejected)", "Cancelled", "Rejected", "Pending Delete GM Approval" };
  //              if (disabledStatus.Contains(sales.Status) || !Session["UserRole"].ToString().Contains("Super Admin"))
  //              {
  //                  ViewData["Disabled"] = "disabled";
  //              }

  //              Dropdown[] customerDDL = CustomerDDL(sales.CustomerParticularId);
  //              ViewData["CustomerDropdown"] = new SelectList(customerDDL, "val", "name", sales.CustomerParticularId);

  //              CustomerParticular customer = sales.CustomerParticulars;

  //              ViewData["CustomerContact"] = "";
  //              ViewData["CustomerAddress"] = "";
  //              Dropdown[] agentDDL = AgentDDL();
  //              ViewData["AgentDropdown"] = new SelectList(agentDDL, "val", "name", sales.AgentId);
  //              ViewData["CreatedBy"] = "";
  //              using (var context = new DataAccess.GreatEastForex())
  //              {
  //                  var createdfrom = sales.CreatedFrom;
  //                  if (!string.IsNullOrEmpty(createdfrom))
  //                  {
  //                      if (createdfrom == "Admin")
  //                      {
  //                          string createbyName = context.Users.Where(e => e.ID == sales.CreatedBy).FirstOrDefault().Name;
  //                          ViewData["CreatedBy"] = createbyName;
  //                      }
  //                      else
  //                      {

  //                          var createby = context.CustomerParticulars.Where(e => e.ID == sales.CreatedBy).FirstOrDefault();
  //                          var createbyName = "";
  //                          if (!string.IsNullOrEmpty(createby.Surname) && !string.IsNullOrEmpty(createby.GivenName))
  //                          {
  //                              createbyName = createby.Surname + " " + createby.GivenName;
  //                          }
  //                          else
  //                          {
  //                              if (createby.CustomerType == "Corporate & Trading Company")
  //                              {

  //                                  createbyName = createby.Company_RegisteredName;
  //                              }
  //                              else
  //                              {
  //                                  createbyName = createby.Natural_Name;
  //                              }
  //                          }
  //                          ViewData["CreatedBy"] = createbyName;
  //                      }
  //                  }
  //              }
  //              if (customer != null)
  //              {
  //                  string contact = "";
  //                  string address = "";
  //                  string shippingadress = "";

  //                  if (customer.CustomerType == "Corporate & Trading Company")
  //                  {
  //                      contact = customer.Company_TelNo;
  //                      if (!string.IsNullOrEmpty(customer.Company_BusinessAddress2))
  //                      {
  //                          address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_PostalCode;
  //                          if (!string.IsNullOrEmpty(customer.Company_BusinessAddress3))
  //                          {
  //                              address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_BusinessAddress3 + ", " + customer.Company_PostalCode;

  //                          }
  //                      }
  //                      else
  //                      {
  //                          address = customer.Company_BusinessAddress1 + ", " + customer.Company_PostalCode;
  //                      }

  //                      if (!string.IsNullOrEmpty(customer.Shipping_Address2))
  //                      {
  //                          shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_Address2 + ", " + customer.Shipping_PostalCode;

  //                          if (!string.IsNullOrEmpty(customer.Shipping_Address3))
  //                          {
  //                              shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_Address2 + ", " + customer.Shipping_Address3 + ", " + customer.Shipping_PostalCode;

  //                          }
  //                      }
  //                      else
  //                      {
  //                          shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_PostalCode;
  //                      }

  //                  }
  //                  else
  //                  {
  //                      contact = customer.Natural_ContactNoM;
  //                      address = customer.Natural_PermanentAddress;
  //                      shippingadress = customer.Natural_MailingAddress + ", " + customer.Natural_MailingAddress2 + ", " + customer.Shipping_PostalCode;
  //                  }

  //                  ViewData["CustomerContact"] = contact;
  //                  ViewData["CustomerAddress"] = address;
  //                  ViewData["CustomerShippingAddress"] = shippingadress;
  //              }

  //              if (ViewData["CustomerShippingAddress"] == null)
  //              {
  //                  ViewData["CustomerShippingAddress"] = "";
  //              }


  //              //Dropdown[] collectionTimeDDL = CollectionTimeDDL();
  //              //ViewData["CollectionTimeDropdown"] = new SelectList(collectionTimeDDL, "val", "name", sales.CollectionTime);

  //              ViewData["NonUrgentRadio"] = "";
  //              ViewData["UrgentRadio"] = "";
  //              if (sales.IsUrgent == 1)
  //              {
  //                  ViewData["UrgentRadio"] = "checked";
  //              }
  //              else
  //              {
  //                  ViewData["NonUrgentRadio"] = "checked";
  //              }
  //              ViewData["CostPrice"] = sales.CostPrice;
  //              ViewData["AgentRate"] = sales.AgentRate;
  //              ViewData["AgentFee"] = sales.AgentFee;
  //              RemittanceProducts sgd = _remittanceproductsModel.FindCurrencyCode("SGD");
  //              string sgdFormat = GetDecimalFormat(sgd.ProductDecimal);
  //              string rateFormat = GetRateFormat(rateDP);

  //              IList<RemittanceOrderData> transactions = new List<RemittanceOrderData>();

  //              int rowId = 1;
  //              decimal totalForeign = 0;
  //              decimal totalLocal = 0;

  //              foreach (RemittanceOrders transaction in sales.RemittanceOders.OrderBy(e => e.ID))
  //              {
  //                  //string currencyFormat = GetDecimalFormat(transaction.Products.Decimal);

  //                  RemittanceOrderData transactionData = new RemittanceOrderData();
  //                  //transactionData.Denominations = new List<DenominationsData>();
  //                  int count = 1;
  //                  string transactionID = count.ToString().PadLeft(3, '0');
  //                  count++;
  //                  string type = "Remittance";
  //                  //string vesselName = transaction.VesselName;
  //                  string productId = transaction.PayCurrency.ToString();
  //                  RemittanceProducts product = _remittanceproductsModel.GetSingle(Convert.ToInt32(productId));
  //                  string currencyFormat = GetDecimalFormat(product.ProductDecimal);

  //                  string getproductId = transaction.GetCurrency.ToString();
  //                  RemittanceProducts getproduct = _remittanceproductsModel.GetSingle(Convert.ToInt32(getproductId));
  //                  string getcurrencyFormat = GetDecimalFormat(getproduct.ProductDecimal);

  //                  Dropdown2[] currency = CurrencyDDL2("Remittance");
  //                  var payCurrencyDDL = new SelectList(currency, "val", "name", dataGroupField: "group", productId);
  //                  var getCurrencyDDL = new SelectList(currency, "val", "name", dataGroupField: "group", getproductId);

  //                  string symbol = _remittanceproductsModel.GetSingle(Convert.ToInt32(productId)).ProductSymbol;
  //                  string rate = transaction.Rate.ToString();

  //                  string paymentModeVal = transaction.PayPaymentType;
  //                  Dropdown[] paymentMode = PaymentModeDDL(Convert.ToInt32(productId));
  //                  SelectList paymentModeDDL = new SelectList(paymentMode, "val", "name", paymentModeVal);

  //                  Dropdown[] getpaymentMode = new Dropdown[1];
  //                  getpaymentMode[0] = new Dropdown { name = "Bank Transfer", val = "3" };
  //                  SelectList getpaymentModeDDL = new SelectList(getpaymentMode, "val", "name");

  //                  string disabledCheque = "disabled";
  //                  string disabledBankTranfer = "disabled";
  //                  string disabledDepositAcc = "disabled";
  //                  string disabledOtherPurposePayment = "disabled";
  //                  string disabledOtherCategoryBusiness = "disabled";
  //                  string disabledOtherNationalities = "disabled";
  //                  string disabledOtherSourceFund = "disabled";
  //                  string disabledOtherSuppDocType = "disabled";
  //                  string disabledOtherBankCountry = "disabled";
  //                  if (paymentModeVal == "2")
  //                  {
  //                      disabledCheque = "";
  //                      disabledDepositAcc = "";
  //                  }
  //                  else if (paymentModeVal == "3")
  //                  {
  //                      disabledBankTranfer = "";
  //                      disabledDepositAcc = "";
  //                  }

  //                  Dropdown[] paymentBankDDL = PayBankDDL();
  //                  var depositAccDDL = new SelectList(paymentBankDDL, "val", "name", transaction.PayDepositAccount);

  //                  Dropdown[] beneficiaries = BeneficiariesDDL();
  //                  Dropdown[] docsuppList = SupportDocTypeDDL();
  //                  Dropdown[] countries = CountryDDL();
  //                  Dropdown[] paymentList = PurposePaymentDDL(0);
  //                  Dropdown[] fundList = SourceFundsDDL();
  //                  Dropdown[] nationalities = NationalityDDL();
  //                  Dropdown2[] BusinessCategoriesLists = BusinessCategoryDDL();
  //                  ViewData["BeneficiaryDropdown"] = new SelectList(beneficiaries, "val", "name");

  //                  string beneficiaryName = transaction.BeneficiaryFullName;

  //                  string beneficiaryBankAcc = transaction.BeneficiaryBankAccountNo;

  //                  string beneficiaryBankCode = transaction.BeneficiaryBankCode;

  //                  string beneficiaryBankCountry = transaction.BeneficiaryBankCountry.ToString();
  //                  string otherBankCountry = "";
  //                  if (beneficiaryBankCountry == "48")
  //                  {
  //                      if (!string.IsNullOrEmpty(transaction.BankCountryIfOthers))
  //                      {
  //                          otherBankCountry = transaction.BankCountryIfOthers.ToString();
  //                      }
  //                      disabledOtherBankCountry = "";
  //                  }
  //                  var countriesDDL = new SelectList(countries, "val", "name", beneficiaryBankCountry);

  //                  string beneficiaryAddress = transaction.BeneficiaryBankAddress;

  //                  string beneficiaryType = transaction.BeneficiaryType;
  //                  ViewData["IndividualRadio_" + rowId] = "";
  //                  ViewData["BusinessRadio_" + rowId] = "";
  //                  if (!string.IsNullOrEmpty(beneficiaryType))
  //                  {

  //                      if (beneficiaryType == "individual")
  //                      {
  //                          ViewData["IndividualRadio_" + rowId] = "checked";
  //                      }
  //                      else if (beneficiaryType == "business")
  //                      {
  //                          ViewData["BusinessRadio_" + rowId] = "checked";
  //                      }
  //                  }

  //                  string beneficiaryPurposePayment = transaction.BeneficiaryPurposeOfPayment.ToString();
  //                  string otherPurposePayment = "";
  //                  if (beneficiaryPurposePayment == "52")
  //                  {
  //                      if (!string.IsNullOrEmpty(transaction.PurposeOfPaymentIfOthers))
  //                      {
  //                          otherPurposePayment = transaction.PurposeOfPaymentIfOthers.ToString();
  //                      }
  //                      disabledOtherPurposePayment = "";
  //                  }
  //                  var paymentListDDL = new SelectList(paymentList, "val", "name", beneficiaryPurposePayment);

  //                  string beneficiarySourceFund = transaction.BeneficiarySourceOfPayment.ToString();
  //                  string otherSourceFund = "";
  //                  if (beneficiarySourceFund == "20")
  //                  {
  //                      if (!string.IsNullOrEmpty(transaction.SourceOfPaymentIfOthers))
  //                      {
  //                          otherSourceFund = transaction.SourceOfPaymentIfOthers.ToString();
  //                      }
  //                      disabledOtherSourceFund = "";
  //                  }
  //                  var fundListDDL = new SelectList(fundList, "val", "name", beneficiarySourceFund);

  //                  string beneficiarySuppDocType = transaction.BeneficiaryUploadSupportingType.ToString();
  //                  string otherSuppDocType = "";
  //                  if (beneficiarySuppDocType == "11")
  //                  {
  //                      if (!string.IsNullOrEmpty(transaction.UploadSupportingTypeIfOthers))
  //                      {
  //                          otherSuppDocType = transaction.UploadSupportingTypeIfOthers.ToString();
  //                      }
  //                      disabledOtherSuppDocType = "";
  //                  }
  //                  var suppDocDDL = new SelectList(docsuppList, "val", "name", beneficiarySuppDocType);

  //                  string beneficiaryUploadSuporting = transaction.BeneficiaryUploadSupportingFile;
  //                  string beneficiaryIDPassport = transaction.BeneficiaryUploadIDCopy;
  //                  string currentPayrate = transaction.currentPayRate.ToString(GetDecimalFormat(rateDP));

  //                  string beneficiaryPaymentDetails = transaction.BeneficiaryPaymentDetails;
  //                  string beneficiaryContactNoMain = transaction.BeneficiaryContactNoMain;
  //                  string beneficiaryAddressMain = transaction.BeneficiaryAddressMain;
  //                  string beneficiaryBankName = transaction.BeneficiaryBankName;
  //                  string beneficiaryIBAN = transaction.IBANEuropeBSBAustralia;

  //                  string beneficiaryNationality = transaction.BeneficiaryNationality.ToString();
  //                  string otherNationality = "";
  //                  if (beneficiaryNationality == "201")
  //                  {
  //                      if (!string.IsNullOrEmpty(transaction.BeneficiaryNationalityIfOthers))
  //                      {
  //                          otherNationality = transaction.BeneficiaryNationalityIfOthers.ToString();
  //                      }
  //                      disabledOtherNationalities = "";
  //                  }
  //                  var nationalitiesDDL = new SelectList(nationalities, "val", "name", beneficiaryNationality);

  //                  string beneficiaryCompanyRegistration = transaction.BeneficiaryCompanyRegistrationNo;

  //                  string beneficiaryCategoryBusiness = transaction.BeneficiaryCategoryOfBusiness.ToString();
  //                  string otherCategoryBusiness = "";
  //                  if (beneficiaryCategoryBusiness == "331")
  //                  {
  //                      if (!string.IsNullOrEmpty(transaction.BeneficiaryBusinessCategoryIfOthers))
  //                      {
  //                          otherCategoryBusiness = transaction.BeneficiaryBusinessCategoryIfOthers.ToString();
  //                      }
  //                      disabledOtherCategoryBusiness = "";
  //                  }
  //                  var categoryBusinessDDL = new SelectList(BusinessCategoriesLists, "val", "name", dataGroupField: "group", beneficiaryCategoryBusiness);

  //                  string beneficiaryCompanyContact = transaction.BeneficiaryCompanyContactNo;

  //                  string totalCalculatedForeign = "0.00";
  //                  string remainingForeign = "0.00";
  //                  string totalOrderForeign = "0.00";
  //                  decimal? payRate = null;
  //                  decimal? getRate = null;
  //                  decimal? gettransactionFees = null;
  //                  using (var context = new DataAccess.GreatEastForex())
  //                  {
  //                      var getProduct = context.RemittanceProducts.Where(e => e.ID == transaction.GetCurrency).FirstOrDefault();
  //                      var payProduct = context.RemittanceProducts.Where(e => e.ID == transaction.PayCurrency).FirstOrDefault();
  //                      var getDecimalformat = GetDecimalFormat(getProduct.ProductDecimal);
  //                      var payDecimalformat = GetDecimalFormat(payProduct.ProductDecimal);
  //                      var convertpayrate = Convert.ToDecimal(payProduct.PayRate).ToString(payDecimalformat);
  //                      var convertgetrate = Convert.ToDecimal(getProduct.GetRate).ToString(getDecimalformat);
  //                      gettransactionFees = getProduct.TransactionFee;

  //                      payRate = Convert.ToDecimal(convertpayrate);
  //                      getRate = Convert.ToDecimal(convertgetrate);
  //                  }

  //                  //if (denominationKeys.Count > 0)
  //                  //{
  //                  //    totalCalculatedForeign = Convert.ToDecimal(form["Denomination_Total_Calculated_Foreign_" + rowId]).ToString(currencyFormat);
  //                  //    remainingForeign = Convert.ToDecimal(form["Denomination_Remaining_Foreign_" + rowId].ToString()).ToString(currencyFormat);
  //                  //    totalOrderForeign = Convert.ToDecimal(form["Denomination_Total_Order_Foreign_" + rowId].ToString()).ToString(currencyFormat);
  //                  //}

  //                  transactionData.RowId = rowId.ToString();
  //                  transactionData.ID = transaction.ID;
  //                  transactionData.transactionID = transaction.TransactionID;
  //                  transactionData.PayAmount = transaction.PayAmount.ToString();
  //                  transactionData.BankTransferNo = transaction.BankTransferNo;
  //                  transactionData.ChequeNo = transaction.ChequeNo;
  //                  //transactionData.PayCurrency = currencyFormat;
  //                  transactionData.payDecimalFormat = currencyFormat;
  //                  transactionData.PayCurrencyDDL = payCurrencyDDL;
  //                  transactionData.GetCurrencyDDL = getCurrencyDDL;
  //                  transactionData.PayPaymentModeDDL = paymentModeDDL;
  //                  transactionData.GetPaymentModeDDL = getpaymentModeDDL;
  //                  transactionData.DepositAccountDDL = depositAccDDL;
  //                  transactionData.countriesDDL = countriesDDL;
  //                  transactionData.fundListDDL = fundListDDL;
  //                  transactionData.nationalitiesDDL = nationalitiesDDL;
  //                  transactionData.paymentListDDL = paymentListDDL;
  //                  transactionData.suppDocDDL = suppDocDDL;
  //                  transactionData.categoryBusinessDDL = categoryBusinessDDL;
  //                  transactionData.PayDepositAccount = transaction.PayDepositAccount.ToString();
  //                  transactionData.DisabledDepositAccount = disabledDepositAcc;
  //                  transactionData.PayPaymentType = paymentModeVal;
  //                  transactionData.Rate = rate;
  //                  transactionData.GetAmount = transaction.GetAmount.ToString();
  //                  //transactionData.GetCurrency = getcurrencyFormat;
  //                  transactionData.getDecimalFormat = getcurrencyFormat;
  //                  transactionData.GetPaymentType = transaction.GetPaymentType;
  //                  transactionData.DisabledBankTransferNo = disabledBankTranfer;
  //                  transactionData.DisabledChequeNo = disabledCheque;
  //                  transactionData.transactionPayrate = payRate.ToString();
  //                  transactionData.transactionGetrate = getRate.ToString();
  //                  transactionData.gettransactionFees = gettransactionFees.ToString();
  //                  transactionData.transactionFees = transaction.Fee.ToString();
  //                  transactionData.BeneficiaryBankAccountNo = beneficiaryBankAcc;
  //                  transactionData.BeneficiaryBankAddress = beneficiaryAddress;
  //                  transactionData.BeneficiaryBankCode = beneficiaryBankCode;
  //                  transactionData.BeneficiaryBankCountry = beneficiaryBankCountry;
  //                  transactionData.BeneficiaryCategoryOfBusiness = beneficiaryCategoryBusiness;
  //                  transactionData.BeneficiaryCompanyContactNo = beneficiaryCompanyContact;
  //                  transactionData.BeneficiaryCompanyRegistrationNo = beneficiaryCompanyRegistration;
  //                  transactionData.BeneficiaryFullName = beneficiaryName;
  //                  transactionData.BeneficiaryNationality = beneficiaryNationality;
  //                  transactionData.BeneficiaryPaymentDetails = beneficiaryPaymentDetails;
  //                  transactionData.BeneficiaryPurposeOfPayment = beneficiaryPurposePayment;
  //                  transactionData.BeneficiarySourceOfPayment = beneficiarySourceFund;
  //                  transactionData.BeneficiaryType = beneficiaryType;
  //                  transactionData.BeneficiaryUploadSupportingFile = beneficiaryUploadSuporting;
  //                  transactionData.BeneficiaryUploadSupportingType = beneficiarySuppDocType;
  //                  transactionData.BeneficiaryContactNoMain = beneficiaryContactNoMain;
  //                  transactionData.BeneficiaryAddressMain = beneficiaryAddressMain;
  //                  transactionData.BeneficiaryBankName = beneficiaryBankName;
  //                  transactionData.IBANEuropeBSBAustralia = beneficiaryIBAN;
  //                  transactionData.BankCountryIfOthers = otherBankCountry;
  //                  transactionData.disabledBankCountryIfOthers = disabledOtherBankCountry;
  //                  transactionData.BeneficiaryNationalityIfOthers = otherNationality;
  //                  transactionData.disabledBeneficiaryNationalityIfOthers = disabledOtherNationalities;
  //                  transactionData.BeneficiaryBusinessCategoryIfOthers = otherCategoryBusiness;
  //                  transactionData.disabledBeneficiaryBusinessCategoryIfOthers = disabledOtherCategoryBusiness;
  //                  transactionData.PurposeOfPaymentIfOthers = otherPurposePayment;
  //                  transactionData.disabledPurposeOfPaymentIfOthers = disabledOtherPurposePayment;
  //                  transactionData.SourceOfPaymentIfOthers = otherSourceFund;
  //                  transactionData.disabledSourceOfPaymentIfOthers = disabledOtherSourceFund;
  //                  transactionData.UploadSupportingTypeIfOthers = otherSuppDocType;
  //                  transactionData.disabledUploadSupportingTypeIfOthers = disabledOtherSuppDocType;
  //                  transactionData.currentPayRate = currentPayrate;
  //                  transactionData.BeneficiaryUploadIDCopy = beneficiaryIDPassport;

  //                  transactions.Add(transactionData);

  //                  totalLocal += transaction.PayAmount;
  //                  totalForeign += transaction.GetAmount;
  //                  rowId++;
  //              }

  //              ViewData["SaleTransactionsData"] = transactions;

  //              ViewData["TotalForeign"] = totalForeign.ToString(GetRateFormat(8));
  //              ViewData["TotalLocal"] = totalLocal.ToString(sgdFormat);

  //              ViewData["Sale"] = sales;
  //              ViewData["SaleId"] = sales.ID;
  //              ViewData["PendingApproval"] = "No";
  //              if (sales.Status == "Pending GM Approval" || sales.Status == "Pending Delete GM Approval")
  //              {
  //                  ViewData["PendingApproval"] = "Yes";
  //              }
  //              ViewData["SaleTransactionType"] = "Remittance";
  //              ViewData["Module"] = module;

  //              ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
  //              return View();
  //          }
  //          else
  //          {
  //              TempData.Add("Result", "error|Memo ID not found!");
  //          }

  //          return RedirectToAction("Listing", module, new { @page = page });
  //      }

  //      //POST: Edit
  //      [HttpPost]
  //      public ActionResult Edit(int id, Remittances sales, FormCollection form, string module = "RemittanceSale")
  //      {
  //          int page = 1;

  //          if (TempData["Page"] != null)
  //          {
  //              page = Convert.ToInt32(TempData["Page"]);
  //              ViewData["Page"] = page;
  //          }

  //          Remittances oldData = _remittancesalesModel.GetSingle(id);
  //          sales.MemoID = oldData.MemoID;
  //          sales.IssueDate = oldData.IssueDate;
  //          sales.CreatedBy = oldData.CreatedBy;
  //          sales.AgentId = oldData.AgentId;
  //          sales.CostPrice = oldData.CostPrice;
  //          sales.AgentRate = oldData.AgentRate;
  //          sales.AgentFee = oldData.AgentFee;
  //          sales.Status = oldData.Status;
  //          sales.LastApprovalOn = oldData.LastApprovalOn;
  //          sales.CustomerRemarks = oldData.CustomerRemarks;

  //          CustomerParticular customer = null;

  //          if (sales.CustomerParticularId > 0)
  //          {
  //              customer = _customerParticularsModel.GetSingle(sales.CustomerParticularId);

  //              if (customer == null)
  //              {
  //                  ModelState.AddModelError("sales.CustomerParticularId", "Customer record not found!");
  //              }
  //              else
  //              {
  //                  if (customer.Others[0].Status != "Active")
  //                  {
  //                      ModelState.AddModelError("sales.CustomerParticularId", "Customer is not active!");
  //                  }
  //              }
  //          }

  //          List<string> transactionKeys = form.AllKeys.Where(e => e.Contains("Transaction_ID_")).ToList();

  //          decimal totalForeign = 0;
  //          decimal totalLocal = 0;

  //          if (transactionKeys.Count > 0)
  //          {
  //              foreach (string key in transactionKeys)
  //              {
  //                  string rowId = key.Split('_')[2];

  //                  //Validation for All Transaction Types
  //                  if (string.IsNullOrEmpty(form["Transaction_PayPaymentType_" + rowId]))
  //                  {
  //                      ModelState.AddModelError("Transaction_PayPaymentType_" + rowId, "Payment Mode is not valid!");
  //                  }
  //                  else
  //                  {
  //                      if (form["Transaction_PayPaymentType_" + rowId].ToString() == "2")
  //                      {
  //                          if (string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
  //                          {
  //                              ModelState.AddModelError("Transaction_ChequeNo_" + rowId, "Cheque No. is required!");
  //                          }
  //                      }
  //                      else if (form["Transaction_PayPaymentType_" + rowId].ToString() == "3")
  //                      {
  //                          if (string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
  //                          {
  //                              ModelState.AddModelError("Transaction_BankTransferNo_" + rowId, "Bank Transfer No. is not valid!");
  //                          }
  //                      }
  //                  }

  //                  if (string.IsNullOrEmpty(form["Transaction_PayAmount_" + rowId]))
  //                  {
  //                      ModelState.AddModelError("Transaction_PayAmount_" + rowId, "Pay amount is required!");
  //                  }
  //                  else
  //                  {
  //                      bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_PayAmount_" + rowId]);

  //                      if (!checkAmountLocalFormat)
  //                      {
  //                          ModelState.AddModelError("Transaction_PayAmount_" + rowId, "Pay amount is not valid!");
  //                      }
  //                      else
  //                      {
  //                          totalLocal += Convert.ToDecimal(form["Transaction_PayAmount_" + rowId]);
  //                      }
  //                  }

  //                  if (string.IsNullOrEmpty(form["Transaction_GetAmount_" + rowId]))
  //                  {
  //                      ModelState.AddModelError("Transaction_GetAmount_" + rowId, "Get Amount is required!");
  //                  }
  //                  else
  //                  {
  //                      bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_GetAmount_" + rowId]);

  //                      if (!checkAmountLocalFormat)
  //                      {
  //                          ModelState.AddModelError("Transaction_GetAmount_" + rowId, "Get Amount is not valid!");
  //                      }
  //                      else
  //                      {
  //                          totalForeign += Convert.ToDecimal(form["Transaction_GetAmount_" + rowId]);
  //                      }
  //                  }
  //              }
  //          }
  //          else
  //          {
  //              ModelState.AddModelError("Transaction", "Please add at least ONE transaction!");
  //          }

  //          if (ModelState.IsValid)
  //          {

  //              sales.TotalPayAmount = totalLocal;
  //              sales.TotalGetAmount = totalForeign;
  //              if (customer.Others[0].GMApprovalAbove > 0)
  //              {
  //                  if (sales.TotalPayAmount >= Convert.ToDecimal(customer.Others[0].GMApprovalAbove))
  //                  {
  //                      sales.Status = "Pending GM Approval";
  //                  }
  //              }

  //              bool result = false;

  //              if (oldData.Status.Contains("Approval"))
  //              {
  //                  oldData.Remarks = sales.Remarks;

  //                  result = _remittancesalesModel.Update(oldData.ID, oldData);
  //              }
  //              else
  //              {
  //                  result = _remittancesalesModel.Update(id, sales);
  //              }

  //              if (result)
  //              {
  //                  int userid = Convert.ToInt32(Session["UserId"]);
  //                  string tableAffected = "RemittanceSales";
  //                  string description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Updated Remittance Sale [" + sales.MemoID + "]";

  //                  bool sale_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);

  //                  if (sale_log)
  //                  {
  //                      //Add Approval History
  //                      bool approval_history = _approvalHistorysModel.Add("RemittanceSale", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Updated Remittance Sale [" + sales.MemoID + "]");

  //                  }

  //                  if (!oldData.Status.Contains("Approval"))
  //                  {
  //                      //Delete Old Transactions
  //                      if (oldData.RemittanceOders.Count > 0)
  //                      {
  //                          bool del_transaction = false;

  //                          bool delete_transaction = _saleTransactionsModel.Delete2(oldData.ID);

  //                          if (delete_transaction)
  //                          {
  //                              if (!del_transaction)
  //                              {
  //                                  del_transaction = true;
  //                              }
  //                          }

  //                          if (del_transaction)
  //                          {
  //                              userid = Convert.ToInt32(Session["UserId"]);
  //                              tableAffected = "RemittanceOrder";
  //                              description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Deleted Remittance Order [" + sales.MemoID + "]";

  //                              bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
  //                          }

  //                      }

  //                      //Add New Transactions
  //                      if (transactionKeys.Count > 0)
  //                      {
  //                          bool add_transaction = false;
  //                          //bool add_denomination = false;

  //                          foreach (string key in transactionKeys)
  //                          {
  //                              string rowId = key.Split('_')[2];

  //                              RemittanceOrders transaction = new RemittanceOrders();
  //                              transaction.RemittanceId = id;
  //                              //transaction.ID = Convert.ToInt32(form[key].ToString());
  //                              transaction.currentPayRate = Convert.ToDecimal(form["payRate_" + rowId]);
  //                              transaction.GetAmount = Convert.ToDecimal(form["Transaction_GetAmount_" + rowId]);
  //                              transaction.PayAmount = Convert.ToDecimal(form["Transaction_PayAmount_" + rowId]);
  //                              transaction.GetPaymentType = form["Transaction_GetPaymentType_" + rowId].ToString();
  //                              transaction.PayPaymentType = form["Transaction_PayPaymentType_" + rowId].ToString();
  //                              transaction.PayDepositAccount = Convert.ToInt32(form["Transaction_DepositAccount_" + rowId]);
  //                              transaction.BeneficiaryBankAccountNo = form["Transaction_BeneficiaryBankAccount_" + rowId].ToString();
  //                              transaction.BeneficiaryBankAddress = form["Transaction_BeneficiaryBankAddress_" + rowId].ToString();
  //                              transaction.BeneficiaryBankCode = form["Transaction_BeneficiaryBankCode_" + rowId].ToString();
  //                              transaction.BeneficiaryContactNoMain = form["Transaction_ContactNoMain_" + rowId].ToString();
  //                              transaction.BeneficiaryAddressMain = form["Transaction_AddressMain_" + rowId].ToString();
  //                              transaction.BeneficiaryBankName = form["Transaction_IBANEuropeBSBAustralia_" + rowId].ToString();
  //                              transaction.IBANEuropeBSBAustralia = form["Transaction_BeneficiaryBankCode_" + rowId].ToString();
  //                              transaction.BeneficiaryBankCountry = Convert.ToInt32(form["Transaction_BeneficiaryBankCountry_" + rowId]);
  //                              if (Convert.ToInt32(form["Transaction_BeneficiaryBankCountry_" + rowId]) == 48)
  //                              {
  //                                  transaction.BankCountryIfOthers = form["Transaction_OtherBankCountry_" + rowId].ToString();
  //                              }
  //                              transaction.BeneficiaryBankCountry = Convert.ToInt32(form["Transaction_BeneficiaryBankCountry_" + rowId]);
  //                              if (form["Transaction_BeneficiaryType_" + rowId].ToString() == "business")
  //                              {
  //                                  transaction.BeneficiaryCategoryOfBusiness = Convert.ToInt32(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]);
  //                                  if (Convert.ToInt32(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]) == 331)
  //                                  {
  //                                      transaction.BeneficiaryBusinessCategoryIfOthers = form["Transaction_OtherCategoryBusiness_" + rowId].ToString();
  //                                  }
  //                                  transaction.BeneficiaryCompanyContactNo = form["Transaction_BeneficiaryCompanyContact_" + rowId].ToString();
  //                                  transaction.BeneficiaryCompanyRegistrationNo = form["Transaction_BeneficiaryCompanyRegistration_" + rowId].ToString();
  //                                  transaction.BeneficiaryNationality = Convert.ToInt32(form["Transaction_BeneficiaryCategoryOfBusiness_" + rowId]);
  //                              }
  //                              else
  //                              {
  //                                  transaction.BeneficiaryNationality = Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]);
  //                                  if (Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]) == 201)
  //                                  {
  //                                      transaction.BeneficiaryNationalityIfOthers = form["Transaction_OtherNationality_" + rowId].ToString();
  //                                  }
  //                                  transaction.BeneficiaryCategoryOfBusiness = Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]);
  //                                  transaction.BeneficiaryCompanyContactNo = "";
  //                                  transaction.BeneficiaryCompanyRegistrationNo = "";
  //                              }
  //                              transaction.BeneficiaryFullName = form["Transaction_BeneficiaryName_" + rowId].ToString();
  //                              transaction.BeneficiaryPaymentDetails = form["Transaction_BeneficiaryPaymentDetails_" + rowId].ToString();
  //                              transaction.BeneficiaryPurposeOfPayment = Convert.ToInt32(form["Transaction_BeneficiaryPurposePayment_" + rowId]);
  //                              if (Convert.ToInt32(form["Transaction_BeneficiaryPurposePayment_" + rowId]) == 52)
  //                              {
  //                                  transaction.PurposeOfPaymentIfOthers = form["Transaction_OtherPurposePayment_" + rowId].ToString();
  //                              }
  //                              transaction.BeneficiarySourceOfPayment = Convert.ToInt32(form["Transaction_BeneficiarySourceFund_" + rowId]);
  //                              if (Convert.ToInt32(form["Transaction_BeneficiarySourceFund_" + rowId]) == 20)
  //                              {
  //                                  transaction.SourceOfPaymentIfOthers = form["Transaction_OtherSourceFund_" + rowId].ToString();
  //                              }
  //                              transaction.BeneficiaryType = form["Transaction_BeneficiaryType_" + rowId].ToString();
  //                              if (string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadSuporting_" + rowId]))
  //                              {
  //                                  transaction.BeneficiaryUploadSupportingFile = "";
  //                              }
  //                              else
  //                              {
  //                                  transaction.BeneficiaryUploadSupportingFile = form["Transaction_BeneficiaryUploadSuporting_" + rowId].ToString();
  //                              }
  //                              if (string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadIDPassport_" + rowId]))
  //                              {
  //                                  transaction.BeneficiaryUploadIDCopy = "";
  //                              }
  //                              else
  //                              {
  //                                  transaction.BeneficiaryUploadIDCopy = form["Transaction_BeneficiaryUploadIDPassport_" + rowId].ToString();
  //                              }

  //                              transaction.BeneficiaryUploadSupportingType = Convert.ToInt32(form["Transaction_BeneficiarySupportDocType_" + rowId]);
  //                              if (Convert.ToInt32(form["Transaction_BeneficiarySupportDocType_" + rowId]) == 11)
  //                              {
  //                                  transaction.UploadSupportingTypeIfOthers = form["Transaction_OtherSupportDocType_" + rowId].ToString();
  //                              }
  //                              transaction.PayCurrency = Convert.ToInt32(form["Transaction_PayCurrency_" + rowId]);
  //                              transaction.GetCurrency = Convert.ToInt32(form["Transaction_GetCurrency_" + rowId]);
  //                              transaction.Rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
  //                              transaction.Fee = Convert.ToDecimal(form["Transaction_Fee_" + rowId]);

  //                              if (!string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
  //                              {
  //                                  transaction.ChequeNo = form["Transaction_ChequeNo_" + rowId].ToString();
  //                              }
  //                              if (!string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
  //                              {
  //                                  transaction.BankTransferNo = form["Transaction_BankTransferNo_" + rowId].ToString();
  //                              }

  //                              bool result_transaction = _remittanceordersModel.Add(transaction);

  //                              if (result_transaction)
  //                              {
  //                                  if (!string.IsNullOrEmpty(transaction.BeneficiaryUploadSupportingFile))
  //                                  {
  //                                      string[] supportDocFile = transaction.BeneficiaryUploadSupportingFile.Split(',');

  //                                      foreach (string file in supportDocFile)
  //                                      {
  //                                          string sourceFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), file);
  //                                          string destinationFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["BeneficiarySupportDocumentsFolder"].ToString()), file);

  //                                          if (System.IO.File.Exists(sourceFile))
  //                                          {
  //                                              System.IO.File.Move(sourceFile, destinationFile);
  //                                          }
  //                                      }
  //                                  }
  //                                  if (!string.IsNullOrEmpty(transaction.BeneficiaryUploadIDCopy))
  //                                  {
  //                                      string[] supportDocFile = transaction.BeneficiaryUploadIDCopy.Split(',');

  //                                      foreach (string file in supportDocFile)
  //                                      {
  //                                          string sourceFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), file);
  //                                          string destinationFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["BeneficiaryUploadIDCopyFolder"].ToString()), file);

  //                                          if (System.IO.File.Exists(sourceFile))
  //                                          {
  //                                              System.IO.File.Move(sourceFile, destinationFile);
  //                                          }
  //                                      }
  //                                  }
  //                                  if (!add_transaction)
  //                                  {
  //                                      add_transaction = true;
  //                                  }
  //                              }
  //                          }

  //                          if (add_transaction)
  //                          {
  //                              userid = Convert.ToInt32(Session["UserId"]);
  //                              tableAffected = "SaleTransactions";
  //                              description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Created Sale Transactions [" + sales.MemoID + "]";

  //                              bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
  //                          }
  //                      }
  //                  }

  //                  TempData.Add("Result", "success|" + oldData.MemoID + " has been successfully updated!");

  //                  return RedirectToAction("Listing", module, new { @page = page });
  //              }
  //              else
  //              {
  //                  TempData.Add("Result", "danger|An error occured while saving sale record!");
  //              }
  //          }
  //          else
  //          {
  //              TempData.Add("Result", "danger|There is something wrong in the form!");
  //          }

  //          Dropdown[] customerDDL = CustomerDDL();
  //          ViewData["CustomerDropdown"] = new SelectList(customerDDL, "val", "name", sales.CustomerParticularId);
  //          Dropdown[] agentDDL = AgentDDL();
  //          ViewData["AgentDropdown"] = new SelectList(agentDDL, "val", "name", sales.AgentId);
  //          ViewData["CustomerContact"] = "";
  //          ViewData["CustomerAddress"] = "";
  //          if (customer != null)
  //          {
  //              string contact = "";
  //              string address = "";
  //              string shippingadress = "";

  //              if (customer.CustomerType == "Corporate & Trading Company")
  //              {
  //                  contact = customer.Company_TelNo;
  //                  if (!string.IsNullOrEmpty(customer.Company_BusinessAddress2))
  //                  {
  //                      address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_PostalCode;
  //                      if (!string.IsNullOrEmpty(customer.Company_BusinessAddress3))
  //                      {
  //                          address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_BusinessAddress3 + ", " + customer.Company_PostalCode;

  //                      }
  //                  }
  //                  else
  //                  {
  //                      address = customer.Company_BusinessAddress1 + ", " + customer.Company_PostalCode;
  //                  }

  //                  if (!string.IsNullOrEmpty(customer.Shipping_Address2))
  //                  {
  //                      shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_Address2 + ", " + customer.Shipping_PostalCode;

  //                      if (!string.IsNullOrEmpty(customer.Shipping_Address3))
  //                      {
  //                          shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_Address2 + ", " + customer.Shipping_Address3 + ", " + customer.Shipping_PostalCode;

  //                      }
  //                  }
  //                  else
  //                  {
  //                      shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_PostalCode;
  //                  }

  //              }
  //              else
  //              {
  //                  contact = customer.Natural_ContactNoM;
  //                  address = customer.Natural_PermanentAddress;
  //                  shippingadress = customer.Natural_MailingAddress + ", " + customer.Natural_MailingAddress2 + ", " + customer.Shipping_PostalCode;
  //              }

  //              ViewData["CustomerContact"] = contact;
  //              ViewData["CustomerAddress"] = address;
  //              ViewData["CustomerShippingAddress"] = shippingadress;
  //          }

  //          if (ViewData["CustomerShippingAddress"] == null)
  //          {
  //              ViewData["CustomerShippingAddress"] = "";
  //          }
  //          //Dropdown[] collectionTimeDDL = CollectionTimeDDL();
  //          //ViewData["CollectionTimeDropdown"] = new SelectList(collectionTimeDDL, "val", "name", sales.CollectionTime);

  //          ViewData["NonUrgentRadio"] = "";
  //          ViewData["UrgentRadio"] = "";
  //          if (sales.IsUrgent == 1)
  //          {
  //              ViewData["UrgentRadio"] = "checked";
  //          }
  //          else
  //          {
  //              ViewData["NonUrgentRadio"] = "checked";
  //          }
  //          ViewData["CostPrice"] = sales.CostPrice;
  //          ViewData["AgentRate"] = sales.AgentRate;
  //          ViewData["AgentFee"] = sales.AgentFee;
  //          IList<RemittanceOrderData> transactions = new List<RemittanceOrderData>();

  //          foreach (string key in transactionKeys)
  //          {
  //              RemittanceOrderData transactionData = new RemittanceOrderData();
  //              //transactionData.Denominations = new List<DenominationsData>();

  //              string rowId = key.Split('_')[2];
  //              string transactionID = form[key];
  //              string type = form["Transaction_Type_" + rowId].ToString();

  //              string productId = form["Transaction_PayCurrency_" + rowId].ToString();
  //              RemittanceProducts product = _remittanceproductsModel.GetSingle(Convert.ToInt32(productId));
  //              string currencyFormat = GetDecimalFormat(product.ProductDecimal);

  //              string getproductId = form["Transaction_GetCurrency_" + rowId].ToString();
  //              RemittanceProducts getproduct = _remittanceproductsModel.GetSingle(Convert.ToInt32(getproductId));
  //              string getcurrencyFormat = GetDecimalFormat(getproduct.ProductDecimal);

  //              Dropdown2[] currency = CurrencyDDL2("Remittance");
  //              var payCurrencyDDL = new SelectList(currency, "val", "name", dataGroupField: "group", productId);
  //              var getCurrencyDDL = new SelectList(currency, "val", "name", dataGroupField: "group", getproductId);

  //              string symbol = _remittanceproductsModel.GetSingle(Convert.ToInt32(productId)).ProductSymbol;
  //              string rate = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
  //              {
  //                  rate = form["Transaction_Rate_" + rowId].ToString();
  //              }

  //              string paymentModeVal = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_PayPaymentType_" + rowId]))
  //              {
  //                  paymentModeVal = form["Transaction_PayPaymentType_" + rowId].ToString();
  //              }
  //              Dropdown[] paymentMode = PaymentModeDDL(Convert.ToInt32(productId));
  //              SelectList paymentModeDDL = new SelectList(paymentMode, "val", "name", paymentModeVal);

  //              Dropdown[] getpaymentMode = new Dropdown[1];
  //              getpaymentMode[0] = new Dropdown { name = "Bank Transfer", val = "3" };
  //              SelectList getpaymentModeDDL = new SelectList(getpaymentMode, "val", "name");

  //              string disabledCheque = "disabled";
  //              string disabledBankTranfer = "disabled";
  //              string disabledDepositAcc = "disabled";
  //              string disabledOtherPurposePayment = "disabled";
  //              string disabledOtherCategoryBusiness = "disabled";
  //              string disabledOtherNationalities = "disabled";
  //              string disabledOtherSourceFund = "disabled";
  //              string disabledOtherSuppDocType = "disabled";
  //              string disabledOtherBankCountry = "disabled";
  //              if (paymentModeVal == "2")
  //              {
  //                  disabledCheque = "";
  //                  disabledDepositAcc = "";
  //              }
  //              else if (paymentModeVal == "3")
  //              {
  //                  disabledBankTranfer = "";
  //                  disabledDepositAcc = "";
  //              }

  //              string chequeNo = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
  //              {
  //                  chequeNo = form["Transaction_ChequeNo_" + rowId].ToString();
  //              }

  //              string depositAcc = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_DepositAccount_" + rowId]))
  //              {
  //                  depositAcc = form["Transaction_DepositAccount_" + rowId].ToString();
  //              }

  //              Dropdown[] paymentBankDDL = PayBankDDL();
  //              var depositAccDDL = new SelectList(paymentBankDDL, "val", "name", depositAcc);

  //              string bankTransferNo = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
  //              {
  //                  bankTransferNo = form["Transaction_BankTransferNo_" + rowId].ToString();
  //              }

  //              string amountPay = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_PayAmount_" + rowId]))
  //              {
  //                  amountPay = form["Transaction_PayAmount_" + rowId].ToString();
  //              }

  //              string amountGet = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_GetAmount_" + rowId]))
  //              {
  //                  amountGet = form["Transaction_GetAmount_" + rowId].ToString();
  //              }

  //              string transactionPayrate = "";
  //              if (!string.IsNullOrEmpty(form["payrate_" + rowId]))
  //              {
  //                  transactionPayrate = form["payrate_" + rowId].ToString();
  //              }

  //              string currentPayRate = "";
  //              if (!string.IsNullOrEmpty(form["payrate_" + rowId]))
  //              {
  //                  currentPayRate = form["payrate_" + rowId].ToString();
  //              }

  //              string transactionGetrate = "";
  //              if (!string.IsNullOrEmpty(form["getrate_" + rowId]))
  //              {
  //                  transactionGetrate = form["getrate_" + rowId].ToString();
  //              }

  //              string gettransactionFees = "";
  //              if (!string.IsNullOrEmpty(form["gettransactionFees_" + rowId]))
  //              {
  //                  gettransactionFees = form["gettransactionFees_" + rowId].ToString();
  //              }

  //              string transactionFees = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_Fee_" + rowId]))
  //              {
  //                  transactionFees = form["Transaction_Fee_" + rowId].ToString();
  //              }
  //              Dropdown[] beneficiaries = BeneficiariesDDL();
  //              Dropdown[] docsuppList = SupportDocTypeDDL();
  //              Dropdown[] countries = CountryDDL();
  //              Dropdown[] paymentList = PurposePaymentDDL(0);
  //              Dropdown[] fundList = SourceFundsDDL();
  //              Dropdown[] nationalities = NationalityDDL();
  //              Dropdown2[] BusinessCategoriesLists = BusinessCategoryDDL();
  //              ViewData["BeneficiaryDropdown"] = new SelectList(beneficiaries, "val", "name");

  //              string beneficiaryName = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryName_" + rowId]))
  //              {
  //                  beneficiaryName = form["Transaction_BeneficiaryName_" + rowId].ToString();
  //              }

  //              string beneficiaryBankAcc = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankAccount_" + rowId]))
  //              {
  //                  beneficiaryBankAcc = form["Transaction_BeneficiaryBankAccount_" + rowId].ToString();
  //              }

  //              string beneficiaryBankCode = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankCode_" + rowId]))
  //              {
  //                  beneficiaryBankCode = form["Transaction_BeneficiaryBankCode_" + rowId].ToString();
  //              }

  //              string beneficiaryBankCountry = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankCountry_" + rowId]))
  //              {
  //                  beneficiaryBankCountry = form["Transaction_BeneficiaryBankCountry_" + rowId].ToString();
  //              }
  //              string otherBankCountry = "";
  //              if (beneficiaryBankCountry == "48")
  //              {
  //                  if (!string.IsNullOrEmpty(form["Transaction_OtherBankCountry_" + rowId]))
  //                  {
  //                      otherBankCountry = form["Transaction_OtherBankCountry_" + rowId].ToString();
  //                  }
  //                  disabledOtherBankCountry = "";
  //              }
  //              var countriesDDL = new SelectList(countries, "val", "name", beneficiaryBankCountry);

  //              string beneficiaryAddress = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankAddress_" + rowId]))
  //              {
  //                  beneficiaryAddress = form["Transaction_BeneficiaryBankAddress_" + rowId].ToString();
  //              }
  //              string beneficiaryMainContact = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_ContactNoMain_" + rowId]))
  //              {
  //                  beneficiaryMainContact = form["Transaction_ContactNoMain_" + rowId].ToString();
  //              }

  //              string beneficiaryMainAddress = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_AddressMain_" + rowId]))
  //              {
  //                  beneficiaryMainAddress = form["Transaction_AddressMain_" + rowId].ToString();
  //              }

  //              string beneficiaryBankName = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankName_" + rowId]))
  //              {
  //                  beneficiaryBankName = form["Transaction_BeneficiaryBankName_" + rowId].ToString();
  //              }

  //              string IBANEuropeBSBAustralia = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_IBANEuropeBSBAustralia_" + rowId]))
  //              {
  //                  IBANEuropeBSBAustralia = form["Transaction_IBANEuropeBSBAustralia_" + rowId].ToString();
  //              }

  //              string beneficiaryType = "";
  //              ViewData["IndividualRadio_" + rowId] = "";
  //              ViewData["BusinessRadio_" + rowId] = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryType_" + rowId]))
  //              {
  //                  beneficiaryType = form["Transaction_BeneficiaryType_" + rowId].ToString();

  //                  if (beneficiaryType == "individual")
  //                  {
  //                      ViewData["IndividualRadio_" + rowId] = "checked";
  //                      paymentList = PurposePaymentDDL(0);
  //                  }
  //                  else if (beneficiaryType == "business")
  //                  {
  //                      ViewData["BusinessRadio_" + rowId] = "checked";
  //                      paymentList = PurposePaymentDDL(1);
  //                  }
  //              }

  //              string beneficiaryPurposePayment = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryPurposePayment_" + rowId]))
  //              {
  //                  beneficiaryPurposePayment = form["Transaction_BeneficiaryPurposePayment_" + rowId].ToString();
  //              }
  //              string otherPurposePayment = "";
  //              if (beneficiaryPurposePayment == "52")
  //              {
  //                  if (!string.IsNullOrEmpty(form["Transaction_OtherPurposePayment_" + rowId]))
  //                  {
  //                      otherPurposePayment = form["Transaction_OtherPurposePayment_" + rowId].ToString();
  //                  }
  //                  disabledOtherPurposePayment = "";
  //              }
  //              var paymentListDDL = new SelectList(paymentList, "val", "name", beneficiaryPurposePayment);

  //              string beneficiarySourceFund = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_BeneficiarySourceFund_" + rowId]))
  //              {
  //                  beneficiarySourceFund = form["Transaction_BeneficiarySourceFund_" + rowId].ToString();
  //              }
  //              string otherSourceFund = "";
  //              if (beneficiarySourceFund == "20")
  //              {
  //                  if (!string.IsNullOrEmpty(form["Transaction_OtherSourceFund_" + rowId]))
  //                  {
  //                      otherSourceFund = form["Transaction_OtherSourceFund_" + rowId].ToString();
  //                  }
  //                  disabledOtherSourceFund = "";
  //              }
  //              var fundListDDL = new SelectList(fundList, "val", "name", beneficiarySourceFund);

  //              string beneficiarySuppDocType = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_BeneficiarySupportDocType_" + rowId]))
  //              {
  //                  beneficiarySuppDocType = form["Transaction_BeneficiarySupportDocType_" + rowId].ToString();
  //              }
  //              string otherSuppDocType = "";
  //              if (beneficiarySuppDocType == "11")
  //              {
  //                  if (!string.IsNullOrEmpty(form["Transaction_OtherSupportDocType_" + rowId]))
  //                  {
  //                      otherSuppDocType = form["Transaction_OtherSupportDocType_" + rowId].ToString();
  //                  }
  //                  disabledOtherSuppDocType = "";
  //              }
  //              var suppDocDDL = new SelectList(docsuppList, "val", "name", beneficiarySuppDocType);

  //              string beneficiaryUploadSuporting = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadSuporting_" + rowId]))
  //              {
  //                  beneficiaryUploadSuporting = form["Transaction_BeneficiaryUploadSuporting_" + rowId].ToString();
  //              }

  //              string beneficiaryIDPassport = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadIDPassport_" + rowId]))
  //              {
  //                  beneficiaryUploadSuporting = form["Transaction_BeneficiaryUploadIDPassport_" + rowId].ToString();
  //              }

  //              string beneficiaryPaymentDetails = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryPaymentDetails_" + rowId]))
  //              {
  //                  beneficiaryPaymentDetails = form["Transaction_BeneficiaryPaymentDetails_" + rowId].ToString();
  //              }

  //              string beneficiaryNationality = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryNationality_" + rowId]))
  //              {
  //                  beneficiaryNationality = form["Transaction_BeneficiaryNationality_" + rowId].ToString();
  //              }
  //              string otherNationality = "";
  //              if (beneficiaryNationality == "201")
  //              {
  //                  if (!string.IsNullOrEmpty(form["Transaction_OtherNationality_" + rowId]))
  //                  {
  //                      otherNationality = form["Transaction_OtherNationality_" + rowId].ToString();
  //                  }
  //                  disabledOtherNationalities = "";
  //              }
  //              var nationalitiesDDL = new SelectList(nationalities, "val", "name", beneficiaryNationality);

  //              string beneficiaryCompanyRegistration = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryCompanyRegistration_" + rowId]))
  //              {
  //                  beneficiaryCompanyRegistration = form["Transaction_BeneficiaryCompanyRegistration_" + rowId].ToString();
  //              }

  //              string beneficiaryCategoryBusiness = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]))
  //              {
  //                  beneficiaryCategoryBusiness = form["Transaction_BeneficiaryCategoryBusiness_" + rowId].ToString();
  //              }
  //              string otherCategoryBusiness = "";
  //              if (beneficiaryCategoryBusiness == "331")
  //              {
  //                  if (!string.IsNullOrEmpty(form["Transaction_OtherCategoryBusiness_" + rowId]))
  //                  {
  //                      otherCategoryBusiness = form["Transaction_OtherCategoryBusiness_" + rowId].ToString();
  //                  }
  //                  disabledOtherCategoryBusiness = "";
  //              }
  //              var categoryBusinessDDL = new SelectList(BusinessCategoriesLists, "val", "name", dataGroupField: "group", beneficiaryCategoryBusiness);

  //              string beneficiaryCompanyContact = "";
  //              if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryCompanyContact_" + rowId]))
  //              {
  //                  beneficiaryCompanyContact = form["Transaction_BeneficiaryCompanyContact_" + rowId].ToString();
  //              }

  //              string totalCalculatedForeign = "0.00";
  //              string remainingForeign = "0.00";
  //              string totalOrderForeign = "0.00";

  //              transactionData.RowId = rowId.ToString();
  //              transactionData.transactionID = transactionID;
  //              transactionData.PayAmount = amountPay;
  //              transactionData.BankTransferNo = bankTransferNo;
  //              transactionData.ChequeNo = chequeNo;
  //              //transactionData.PayCurrency = currencyFormat;
  //              transactionData.payDecimalFormat = currencyFormat;
  //              transactionData.PayCurrencyDDL = payCurrencyDDL;
  //              transactionData.GetCurrencyDDL = getCurrencyDDL;
  //              transactionData.PayPaymentModeDDL = paymentModeDDL;
  //              transactionData.GetPaymentModeDDL = getpaymentModeDDL;
  //              transactionData.DepositAccountDDL = depositAccDDL;
  //              transactionData.countriesDDL = countriesDDL;
  //              transactionData.fundListDDL = fundListDDL;
  //              transactionData.nationalitiesDDL = nationalitiesDDL;
  //              transactionData.paymentListDDL = paymentListDDL;
  //              transactionData.suppDocDDL = suppDocDDL;
  //              transactionData.categoryBusinessDDL = categoryBusinessDDL;
  //              transactionData.PayDepositAccount = depositAcc;
  //              transactionData.DisabledDepositAccount = disabledDepositAcc;
  //              transactionData.PayPaymentType = paymentModeVal;
  //              transactionData.Rate = rate;
  //              transactionData.GetAmount = amountGet;
  //              //transactionData.GetCurrency = getcurrencyFormat;
  //              transactionData.getDecimalFormat = getcurrencyFormat;
  //              transactionData.GetPaymentType = chequeNo;
  //              transactionData.DisabledBankTransferNo = disabledBankTranfer;
  //              transactionData.DisabledChequeNo = disabledCheque;
  //              transactionData.transactionPayrate = transactionPayrate;
  //              transactionData.transactionGetrate = transactionGetrate;
  //              transactionData.gettransactionFees = gettransactionFees;
  //              transactionData.transactionFees = transactionFees;
  //              transactionData.BeneficiaryBankAccountNo = beneficiaryBankAcc;
  //              transactionData.BeneficiaryBankAddress = beneficiaryAddress;
  //              transactionData.BeneficiaryBankCode = beneficiaryBankCode;
  //              transactionData.BeneficiaryBankCountry = beneficiaryBankCountry;
  //              transactionData.BeneficiaryCategoryOfBusiness = beneficiaryCategoryBusiness;
  //              transactionData.BeneficiaryCompanyContactNo = beneficiaryCompanyContact;
  //              transactionData.BeneficiaryCompanyRegistrationNo = beneficiaryCompanyRegistration;
  //              transactionData.BeneficiaryFullName = beneficiaryName;
  //              transactionData.BeneficiaryNationality = beneficiaryNationality;
  //              transactionData.BeneficiaryPaymentDetails = beneficiaryPaymentDetails;
  //              transactionData.BeneficiaryPurposeOfPayment = beneficiaryPurposePayment;
  //              transactionData.BeneficiarySourceOfPayment = beneficiarySourceFund;
  //              transactionData.BeneficiaryType = beneficiaryType;
  //              transactionData.BankTransferNo = bankTransferNo;
  //              transactionData.BeneficiaryUploadSupportingFile = beneficiaryUploadSuporting;
  //              transactionData.BeneficiaryUploadSupportingType = beneficiarySuppDocType;
  //              transactionData.BeneficiaryContactNoMain = beneficiaryMainContact;
  //              transactionData.BeneficiaryAddressMain = beneficiaryMainAddress;
  //              transactionData.BeneficiaryBankName = beneficiaryBankName;
  //              transactionData.IBANEuropeBSBAustralia = IBANEuropeBSBAustralia;
  //              transactionData.BankCountryIfOthers = otherBankCountry;
  //              transactionData.disabledBankCountryIfOthers = disabledOtherBankCountry;
  //              transactionData.BeneficiaryNationalityIfOthers = otherNationality;
  //              transactionData.disabledBeneficiaryNationalityIfOthers = disabledOtherNationalities;
  //              transactionData.BeneficiaryBusinessCategoryIfOthers = otherCategoryBusiness;
  //              transactionData.disabledBeneficiaryBusinessCategoryIfOthers = disabledOtherCategoryBusiness;
  //              transactionData.PurposeOfPaymentIfOthers = otherPurposePayment;
  //              transactionData.disabledPurposeOfPaymentIfOthers = disabledOtherPurposePayment;
  //              transactionData.SourceOfPaymentIfOthers = otherSourceFund;
  //              transactionData.disabledSourceOfPaymentIfOthers = disabledOtherSourceFund;
  //              transactionData.UploadSupportingTypeIfOthers = otherSuppDocType;
  //              transactionData.disabledUploadSupportingTypeIfOthers = disabledOtherSuppDocType;
  //              transactionData.currentPayRate = currentPayRate;
  //              transactionData.BeneficiaryUploadIDCopy = beneficiaryIDPassport;

  //              transactions.Add(transactionData);
  //          }

  //          ViewData["SaleTransactionsData"] = transactions;

  //          Product sgd = _productsModel.FindCurrencyCode("SGD");

  //          ViewData["TotalForeign"] = totalForeign.ToString(GetRateFormat(8));
  //          ViewData["TotalLocal"] = totalLocal.ToString(GetDecimalFormat(sgd.Decimal));

  //          ViewData["Disabled"] = "";

  //          List<string> disabledStatus = new List<string>() { "Completed", "Pending GM Approval", "Pending GM Approval (Rejected)", "Cancelled", "Rejected", "Pending Delete GM Approval" };
  //          if (disabledStatus.Contains(oldData.Status) || !Session["UserRole"].ToString().Contains("Super Admin"))
  //          {
  //              ViewData["Disabled"] = "disabled";
  //          }

  //          ViewData["Sale"] = sales;
  //          ViewData["SaleId"] = id;
  //          ViewData["PendingApproval"] = "No";
  //          if (oldData.Status == "Pending GM Approval" || oldData.Status == "Pending Delete GM Approval")
  //          {
  //              ViewData["PendingApproval"] = "Yes";
  //          }
  //          //ViewData["SaleTransactionType"] = sales.TransactionType;
  //          ViewData["Module"] = module;

  //          ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
  //          return View();
  //      }

        //GET: SaleApproval
        public ActionResult SaleApproval(int id, string module = "RemittanceSale")
        {
            int page = 1;

            if (TempData["Page"] != null)
            {
                page = Convert.ToInt32(TempData.Peek("Page"));
                ViewData["Page"] = page;
                TempData.Keep("Page");
            }

            Remittances sales = _remittancesalesModel.GetSingle(id);

            if (sales != null)
            {

                //ViewData["PendingChequeLog"] = 0;
                //ViewData["PendingBankTransferLog"] = 0;

                //ViewData["PendingLocalCheque1Log"] = 0;
                //ViewData["PendingLocalCheque2Log"] = 0;
                //ViewData["PendingLocalCheque3Log"] = 0;
                //ViewData["PendingLocalBankTransferLog"] = 0;

                if (!((sales.Status.Contains("Pending Dealer") && Session["UserRole"].ToString().Contains("Dealer")) || (sales.Status.Contains("Pending Account") && Session["UserRole"].ToString().Contains("Finance")) || (sales.Status.Contains("Pending Customer") && Session["UserRole"].ToString().Contains("Dealer"))))
                {
                    return RedirectToAction("Edit", new { @id = id, @module = module });
                }
                //else
                //{
                //    if (sales.Status.Contains("Pending Delivery by") && sales.PendingDeliveryById != Convert.ToInt32(Session["UserId"]))
                //    {
                //        return RedirectToAction("Edit", new { @id = id, @module = module });
                //    }
                //}
                Dropdown[] customerDDL = CustomerDDL(sales.CustomerParticularId);
                ViewData["CustomerDropdown"] = new SelectList(customerDDL, "val", "name", sales.CustomerParticularId);
                CustomerParticular customer = sales.CustomerParticulars;
                ViewData["CustomerContact"] = "";
                ViewData["CustomerAddress"] = "";
                Dropdown[] agentDDL = AgentDDL();
                ViewData["AgentDropdown"] = new SelectList(agentDDL, "val", "name", sales.AgentId);
                ViewData["CreatedBy"] = "";
                using (var context = new DataAccess.GreatEastForex())
                {
                    var createdfrom = sales.CreatedFrom;
                    if (!string.IsNullOrEmpty(createdfrom))
                    {
                        if (createdfrom == "Admin")
                        {
                            string createbyName = context.Users.Where(e => e.ID == sales.CreatedBy).FirstOrDefault().Name;
                            ViewData["CreatedBy"] = createbyName;
                        }
                        else
                        {

                            var createby = context.CustomerParticulars.Where(e => e.ID == sales.CreatedBy).FirstOrDefault();
                            var createbyName = "";
                            if (!string.IsNullOrEmpty(createby.Surname) && !string.IsNullOrEmpty(createby.GivenName))
                            {
                                createbyName = createby.Surname + " " + createby.GivenName;
                            }
                            else
                            {
                                if (createby.CustomerType == "Corporate & Trading Company")
                                {

                                    createbyName = createby.Company_RegisteredName;
                                }
                                else
                                {
                                    createbyName = createby.Natural_Name;
                                }
                            }
                            ViewData["CreatedBy"] = createbyName;
                        }
                    }
                }
                if (customer != null)
                {
                    string contact = "";
                    string address = "";
                    string shippingadress = "";

                    if (customer.CustomerType == "Corporate & Trading Company")
                    {
                        contact = customer.Company_TelNo;
                        if (!string.IsNullOrEmpty(customer.Company_BusinessAddress2))
                        {
                            address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_PostalCode;
                            if (!string.IsNullOrEmpty(customer.Company_BusinessAddress3))
                            {
                                address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_BusinessAddress3 + ", " + customer.Company_PostalCode;

                            }
                        }
                        else
                        {
                            address = customer.Company_BusinessAddress1 + ", " + customer.Company_PostalCode;
                        }

                        if (!string.IsNullOrEmpty(customer.Shipping_Address2))
                        {
                            shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_Address2 + ", " + customer.Shipping_PostalCode;

                            if (!string.IsNullOrEmpty(customer.Shipping_Address3))
                            {
                                shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_Address2 + ", " + customer.Shipping_Address3 + ", " + customer.Shipping_PostalCode;

                            }
                        }
                        else
                        {
                            shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_PostalCode;
                        }

                    }
                    else
                    {
                        contact = customer.Natural_ContactNoM;
                        address = customer.Natural_PermanentAddress;
                        shippingadress = customer.Natural_MailingAddress + ", " + customer.Natural_MailingAddress2 + ", " + customer.Shipping_PostalCode;
                    }

                    ViewData["CustomerContact"] = contact;
                    ViewData["CustomerAddress"] = address;
                    ViewData["CustomerShippingAddress"] = shippingadress;
                }

                if (ViewData["CustomerShippingAddress"] == null)
                {
                    ViewData["CustomerShippingAddress"] = "";
                }


                //Dropdown[] collectionTimeDDL = CollectionTimeDDL();
                //ViewData["CollectionTimeDropdown"] = new SelectList(collectionTimeDDL, "val", "name", sales.CollectionTime);

                ViewData["NonUrgentRadio"] = "";
                ViewData["UrgentRadio"] = "";
                if (sales.IsUrgent == 1)
                {
                    ViewData["UrgentRadio"] = "checked";
                }
                else
                {
                    ViewData["NonUrgentRadio"] = "checked";
                }
                ViewData["CostPrice"] = sales.CostPrice;
                ViewData["AgentRate"] = sales.AgentRate;
                ViewData["AgentFee"] = sales.AgentFee;
                RemittanceProducts sgd = _remittanceproductsModel.FindCurrencyCode("SGD");
                string sgdFormat = GetDecimalFormat(sgd.ProductDecimal);
                string rateFormat = GetRateFormat(rateDP);


                IList<RemittanceOrderData> transactions = new List<RemittanceOrderData>();

                int rowId = 1;
                decimal totalForeign = 0;
                decimal totalLocal = 0;
                string payFormat = "";
                string paySymbol = "$";
                foreach (RemittanceOrders transaction in sales.RemittanceOders.OrderBy(e => e.ID))
                {
                    //string currencyFormat = GetDecimalFormat(transaction.Products.Decimal);

                    RemittanceOrderData transactionData = new RemittanceOrderData();
                    //transactionData.Denominations = new List<DenominationsData>();
                    string transactionID = transaction.TransactionID;
                    string type = "Remittance";
                    //string vesselName = transaction.VesselName;
                    string productId = transaction.PayCurrency.ToString();
                    RemittanceProducts product = _remittanceproductsModel.GetSingle(Convert.ToInt32(productId));
                    string currencyFormat = GetDecimalFormat(product.ProductDecimal);
                    payFormat = GetDecimalFormat(product.ProductDecimal);
                    paySymbol = product.ProductSymbol;
                    string getproductId = transaction.GetCurrency.ToString();
                    RemittanceProducts getproduct = _remittanceproductsModel.GetSingle(Convert.ToInt32(getproductId));
                    string getcurrencyFormat = GetDecimalFormat(getproduct.ProductDecimal);

                    Dropdown2[] currency = CurrencyDDL2("Remittance");
                    var payCurrencyDDL = new SelectList(currency, "val", "name", dataGroupField: "group", selectedValue: productId);
                    var getCurrencyDDL = new SelectList(currency, "val", "name", dataGroupField: "group", getproductId);

                    string symbol = _remittanceproductsModel.GetSingle(Convert.ToInt32(productId)).ProductSymbol;
                    string rate = transaction.Rate.ToString();

                    string paymentModeVal = transaction.PayPaymentType;
                    Dropdown[] paymentMode = PaymentModeDDL(Convert.ToInt32(productId));
                    SelectList paymentModeDDL = new SelectList(paymentMode, "val", "name", selectedValue: paymentModeVal);

                    Dropdown[] getpaymentMode = new Dropdown[1];
                    getpaymentMode[0] = new Dropdown { name = "Bank Transfer", val = "3" };
                    SelectList getpaymentModeDDL = new SelectList(getpaymentMode, "val", "name");

                    string disabledCheque = "disabled";
                    string disabledBankTranfer = "disabled";
                    string disabledDepositAcc = "disabled";
                    string disabledOtherPurposePayment = "disabled";
                    string disabledOtherCategoryBusiness = "disabled";
                    string disabledOtherNationalities = "disabled";
                    string disabledOtherSourceFund = "disabled";
                    string disabledOtherSuppDocType = "disabled";
                    string disabledOtherBankCountry = "disabled";
                    if (paymentModeVal == "2")
                    {
                        disabledCheque = "";
                        disabledDepositAcc = "";
                    }
                    else if (paymentModeVal == "3")
                    {
                        disabledBankTranfer = "";
                        disabledDepositAcc = "";
                    }

                    Dropdown[] paymentBankDDL = PayBankDDL();
                    var depositAccDDL = new SelectList(paymentBankDDL, "val", "name", selectedValue: transaction.PayDepositAccount);

                    Dropdown[] beneficiaries = BeneficiariesDDL();
                    Dropdown[] docsuppList = SupportDocTypeDDL();
                    Dropdown[] countries = CountryDDL();
                    Dropdown[] paymentList = PurposePaymentDDL(0);
                    Dropdown[] fundList = SourceFundsDDL();
                    Dropdown[] nationalities = NationalityDDL();
                    Dropdown2[] BusinessCategoriesLists = BusinessCategoryDDL();
                    ViewData["BeneficiaryDropdown"] = new SelectList(beneficiaries, "val", "name");

                    string currentPayrate = transaction.currentPayRate.ToString(GetDecimalFormat(rateDP));

                    string beneficiaryIDPassport = transaction.BeneficiaryUploadIDCopy;

                    string beneficiaryName = transaction.BeneficiaryFullName;

                    string beneficiaryBankAcc = transaction.BeneficiaryBankAccountNo;

                    string beneficiaryBankCode = transaction.BeneficiaryBankCode;

                    string beneficiaryBankCountry = transaction.BeneficiaryBankCountry.ToString();
                    string otherBankCountry = "";
                    if (beneficiaryBankCountry == "48")
                    {
                        if (!string.IsNullOrEmpty(transaction.BankCountryIfOthers))
                        {
                            otherBankCountry = transaction.BankCountryIfOthers.ToString();
                        }
                        disabledOtherBankCountry = "";
                    }
                    var countriesDDL = new SelectList(countries, "val", "name", beneficiaryBankCountry);

                    string beneficiaryAddress = transaction.BeneficiaryBankAddress;

                    string beneficiaryType = transaction.BeneficiaryType;
                    ViewData["IndividualRadio_" + rowId] = "";
                    ViewData["BusinessRadio_" + rowId] = "";
                    if (!string.IsNullOrEmpty(beneficiaryType))
                    {

                        if (beneficiaryType == "individual")
                        {
                            ViewData["IndividualRadio_" + rowId] = "checked";
                            paymentList = PurposePaymentDDL(0);
                        }
                        else if (beneficiaryType == "business")
                        {
                            ViewData["BusinessRadio_" + rowId] = "checked";
                            paymentList = PurposePaymentDDL(1);
                        }
                    }

                    string beneficiaryPurposePayment = transaction.BeneficiaryPurposeOfPayment.ToString();
                    string otherPurposePayment = "";
                    if (beneficiaryPurposePayment == "52")
                    {
                        if (!string.IsNullOrEmpty(transaction.PurposeOfPaymentIfOthers))
                        {
                            otherPurposePayment = transaction.PurposeOfPaymentIfOthers.ToString();
                        }
                        disabledOtherPurposePayment = "";
                    }
                    var paymentListDDL = new SelectList(paymentList, "val", "name", beneficiaryPurposePayment);

                    string beneficiarySourceFund = transaction.BeneficiarySourceOfPayment.ToString();
                    string otherSourceFund = "";
                    if (beneficiarySourceFund == "20")
                    {
                        if (!string.IsNullOrEmpty(transaction.SourceOfPaymentIfOthers))
                        {
                            otherSourceFund = transaction.SourceOfPaymentIfOthers.ToString();
                        }
                        disabledOtherSourceFund = "";
                    }
                    var fundListDDL = new SelectList(fundList, "val", "name", beneficiarySourceFund);

                    string beneficiarySuppDocType = transaction.BeneficiaryUploadSupportingType.ToString();
                    string otherSuppDocType = "";
                    if (beneficiarySuppDocType == "11")
                    {
                        if (!string.IsNullOrEmpty(transaction.UploadSupportingTypeIfOthers))
                        {
                            otherSuppDocType = transaction.UploadSupportingTypeIfOthers.ToString();
                        }
                        disabledOtherSuppDocType = "";
                    }
                    var suppDocDDL = new SelectList(docsuppList, "val", "name", beneficiarySuppDocType);

                    string beneficiaryUploadSuporting = transaction.BeneficiaryUploadSupportingFile;

                    string beneficiaryPaymentDetails = transaction.BeneficiaryPaymentDetails;
                    string beneficiaryContactNoMain = transaction.BeneficiaryContactNoMain;
                    string beneficiaryAddressMain = transaction.BeneficiaryAddressMain;
                    string beneficiaryBankName = transaction.BeneficiaryBankName;
                    string beneficiaryIBAN = transaction.IBANEuropeBSBAustralia;

                    string beneficiaryNationality = transaction.BeneficiaryNationality.ToString();
                    string otherNationality = "";
                    if (beneficiaryNationality == "201")
                    {
                        if (!string.IsNullOrEmpty(transaction.BeneficiaryNationalityIfOthers))
                        {
                            otherNationality = transaction.BeneficiaryNationalityIfOthers.ToString();
                        }
                        disabledOtherNationalities = "";
                    }
                    var nationalitiesDDL = new SelectList(nationalities, "val", "name", beneficiaryNationality);

                    string beneficiaryCompanyRegistration = transaction.BeneficiaryCompanyRegistrationNo;

                    string beneficiaryCategoryBusiness = transaction.BeneficiaryCategoryOfBusiness.ToString();
                    string otherCategoryBusiness = "";
                    if (beneficiaryCategoryBusiness == "331")
                    {
                        if (!string.IsNullOrEmpty(transaction.BeneficiaryBusinessCategoryIfOthers))
                        {
                            otherCategoryBusiness = transaction.BeneficiaryBusinessCategoryIfOthers.ToString();
                        }
                        disabledOtherCategoryBusiness = "";
                    }
                    var categoryBusinessDDL = new SelectList(BusinessCategoriesLists, "val", "name", dataGroupField: "group", beneficiaryCategoryBusiness);

                    string beneficiaryCompanyContact = transaction.BeneficiaryCompanyContactNo;

                    string totalCalculatedForeign = "0.00";
                    string remainingForeign = "0.00";
                    string totalOrderForeign = "0.00";
                    decimal? payRate = null;
                    decimal? getRate = null;
                    decimal? gettransactionFees = null;
                    string payDecimalformat = "";
                    string getDecimalformat = "";
                    using (var context = new DataAccess.GreatEastForex())
                    {
                        var getProduct = context.RemittanceProducts.Where(e => e.ID == transaction.GetCurrency).FirstOrDefault();
                        var payProduct = context.RemittanceProducts.Where(e => e.ID == transaction.PayCurrency).FirstOrDefault();
                        getDecimalformat = GetDecimalFormat(getProduct.ProductDecimal);
                        payDecimalformat = GetDecimalFormat(payProduct.ProductDecimal);
                        var convertpayrate = Convert.ToDecimal(payProduct.PayRate).ToString(payDecimalformat);
                        var convertgetrate = Convert.ToDecimal(getProduct.GetRate).ToString(getDecimalformat);
                        gettransactionFees = getProduct.TransactionFee;

                        if (payProduct.PayRate != null && payProduct.PayRate > 0)
                            payRate = Convert.ToDecimal(convertpayrate);
                        if (getProduct.GetRate != null && getProduct.GetRate > 0)
                            getRate = Convert.ToDecimal(convertgetrate);

                        var payCustomRemittanceRate = context.CustomerRemittanceProductCustomRates.Where(e => e.CustomerParticularId == sales.CustomerParticularId && e.RemittanceProductId == payProduct.ID).FirstOrDefault();
                        var getCustomRemittanceRate = context.CustomerRemittanceProductCustomRates.Where(e => e.CustomerParticularId == sales.CustomerParticularId && e.RemittanceProductId == getProduct.ID).FirstOrDefault();

                        var finalPayProductRate = payRate;
                        var finalGetProductRate = getRate;
                        if (payRate > 0)
                        {
                            if (payCustomRemittanceRate != null)
                            {
                                if (payCustomRemittanceRate.PayRateAdjustment != null && payCustomRemittanceRate.PayRateAdjustment > 0)
                                {
                                    var OriginalValue = finalPayProductRate;
                                    var InputValue = Convert.ToDecimal(payCustomRemittanceRate.PayRateAdjustment);
                                    finalPayProductRate = OriginalValue * (1 - InputValue);
                                }
                            }
                            else if (payProduct.BuyRateAdjustment != null && payProduct.BuyRateAdjustment != 0)
                            {
                                var OriginalValue = finalPayProductRate;
                                var InputValue = Convert.ToDecimal(payProduct.BuyRateAdjustment);
                                finalPayProductRate = OriginalValue * (1 - InputValue);
                            }
                        }
                        else
                        {
                            if (payProduct.AutomatedPayRate != null)
                            {
                                finalPayProductRate = Convert.ToDecimal(payProduct.AutomatedPayRate);
                                if (payCustomRemittanceRate != null)
                                {
                                    if (payCustomRemittanceRate.PayRateAdjustment != null && payCustomRemittanceRate.PayRateAdjustment > 0)
                                    {
                                        var OriginalValue = finalPayProductRate;
                                        var InputValue = Convert.ToDecimal(payCustomRemittanceRate.PayRateAdjustment);
                                        finalPayProductRate = OriginalValue * (1 - InputValue);
                                    }
                                }
                                else if (payProduct.BuyRateAdjustment != null && payProduct.BuyRateAdjustment != 0)
                                {
                                    var OriginalValue = finalPayProductRate;
                                    var InputValue = Convert.ToDecimal(payProduct.BuyRateAdjustment);
                                    finalPayProductRate = OriginalValue * (1 - InputValue);
                                }
                            }
                        }
                        if (getRate > 0)
                        {
                            if (getCustomRemittanceRate != null)
                            {
                                if (getCustomRemittanceRate.GetRateAdjustment != null && getCustomRemittanceRate.GetRateAdjustment > 0)
                                {
                                    var OriginalValue = finalGetProductRate;
                                    var InputValue = Convert.ToDecimal(getCustomRemittanceRate.GetRateAdjustment);
                                    finalGetProductRate = OriginalValue * (1 + InputValue);
                                }
                            }
                            else if (getProduct.SellRateAdjustment != null && getProduct.SellRateAdjustment != 0)
                            {
                                var OriginalValue = finalGetProductRate;
                                var InputValue = Convert.ToDecimal(getProduct.SellRateAdjustment);
                                finalGetProductRate = OriginalValue * (1 + InputValue);
                            }
                        }
                        else
                        {
                            if (getProduct.AutomatedGetRate != null)
                            {
                                finalGetProductRate = Convert.ToDecimal(getProduct.AutomatedGetRate);
                                if (getCustomRemittanceRate != null)
                                {
                                    if (getCustomRemittanceRate.GetRateAdjustment != null && getCustomRemittanceRate.GetRateAdjustment > 0)
                                    {
                                        var OriginalValue = finalGetProductRate;
                                        var InputValue = Convert.ToDecimal(getCustomRemittanceRate.GetRateAdjustment);
                                        finalGetProductRate = OriginalValue * (1 + InputValue);
                                    }
                                }
                                else if (getProduct.SellRateAdjustment != null && getProduct.SellRateAdjustment != 0)
                                {
                                    var OriginalValue = finalGetProductRate;
                                    var InputValue = Convert.ToDecimal(getProduct.SellRateAdjustment);
                                    finalGetProductRate = OriginalValue * (1 + InputValue);
                                }
                            }
                        }
                        payRate = finalPayProductRate;
                        getRate = finalGetProductRate;
                    }

                    transactionData.RowId = rowId.ToString();
                    transactionData.ID = transaction.ID;
                    transactionData.transactionID = transactionID;
                    transactionData.PayAmount = transaction.PayAmount.ToString();
                    transactionData.BankTransferNo = transaction.BankTransferNo;
                    transactionData.ChequeNo = transaction.ChequeNo;
                    //transactionData.PayCurrency = currencyFormat;
                    transactionData.payDecimalFormat = currencyFormat;
                    transactionData.PayCurrencyDDL = payCurrencyDDL;
                    transactionData.GetCurrencyDDL = getCurrencyDDL;
                    transactionData.PayPaymentModeDDL = paymentModeDDL;
                    transactionData.GetPaymentModeDDL = getpaymentModeDDL;
                    transactionData.DepositAccountDDL = depositAccDDL;
                    transactionData.countriesDDL = countriesDDL;
                    transactionData.fundListDDL = fundListDDL;
                    transactionData.nationalitiesDDL = nationalitiesDDL;
                    transactionData.paymentListDDL = paymentListDDL;
                    transactionData.suppDocDDL = suppDocDDL;
                    transactionData.categoryBusinessDDL = categoryBusinessDDL;
                    transactionData.PayDepositAccount = transaction.PayDepositAccount.ToString();
                    transactionData.DisabledDepositAccount = disabledDepositAcc;
                    transactionData.PayPaymentType = paymentModeVal;
                    transactionData.Rate = rate;
                    transactionData.GetAmount = transaction.GetAmount.ToString();
                    //transactionData.GetCurrency = getcurrencyFormat;
                    transactionData.getDecimalFormat = getcurrencyFormat;
                    transactionData.GetPaymentType = transaction.GetPaymentType;
                    transactionData.DisabledBankTransferNo = disabledBankTranfer;
                    transactionData.DisabledChequeNo = disabledCheque;
                    transactionData.transactionPayrate = Convert.ToDecimal(payRate).ToString(payDecimalformat);
                    transactionData.transactionGetrate = Convert.ToDecimal(getRate).ToString(getDecimalformat);
                    transactionData.gettransactionFees = gettransactionFees.ToString();
                    transactionData.transactionFees = transaction.Fee.ToString();
                    transactionData.payDecimalFormat = payDecimalformat;
                    transactionData.getDecimalFormat = getDecimalformat;
                    transactionData.BeneficiaryBankAccountNo = beneficiaryBankAcc;
                    transactionData.BeneficiaryBankAddress = beneficiaryAddress;
                    transactionData.BeneficiaryBankCode = beneficiaryBankCode;
                    transactionData.BeneficiaryBankCountry = beneficiaryBankCountry;
                    transactionData.BeneficiaryCategoryOfBusiness = beneficiaryCategoryBusiness;
                    transactionData.BeneficiaryCompanyContactNo = beneficiaryCompanyContact;
                    transactionData.BeneficiaryCompanyRegistrationNo = beneficiaryCompanyRegistration;
                    transactionData.BeneficiaryFullName = beneficiaryName;
                    transactionData.BeneficiaryNationality = beneficiaryNationality;
                    transactionData.BeneficiaryPaymentDetails = beneficiaryPaymentDetails;
                    transactionData.BeneficiaryPurposeOfPayment = beneficiaryPurposePayment;
                    transactionData.BeneficiarySourceOfPayment = beneficiarySourceFund;
                    transactionData.BeneficiaryType = beneficiaryType;
                    transactionData.BeneficiaryUploadSupportingFile = beneficiaryUploadSuporting;
                    transactionData.BeneficiaryUploadSupportingType = beneficiarySuppDocType;
                    transactionData.BeneficiaryContactNoMain = beneficiaryContactNoMain;
                    transactionData.BeneficiaryAddressMain = beneficiaryAddressMain;
                    transactionData.BeneficiaryBankName = beneficiaryBankName;
                    transactionData.IBANEuropeBSBAustralia = beneficiaryIBAN;
                    transactionData.BankCountryIfOthers = otherBankCountry;
                    transactionData.disabledBankCountryIfOthers = disabledOtherBankCountry;
                    transactionData.BeneficiaryNationalityIfOthers = otherNationality;
                    transactionData.disabledBeneficiaryNationalityIfOthers = disabledOtherNationalities;
                    transactionData.BeneficiaryBusinessCategoryIfOthers = otherCategoryBusiness;
                    transactionData.disabledBeneficiaryBusinessCategoryIfOthers = disabledOtherCategoryBusiness;
                    transactionData.PurposeOfPaymentIfOthers = otherPurposePayment;
                    transactionData.disabledPurposeOfPaymentIfOthers = disabledOtherPurposePayment;
                    transactionData.SourceOfPaymentIfOthers = otherSourceFund;
                    transactionData.disabledSourceOfPaymentIfOthers = disabledOtherSourceFund;
                    transactionData.UploadSupportingTypeIfOthers = otherSuppDocType;
                    transactionData.disabledUploadSupportingTypeIfOthers = disabledOtherSuppDocType;
                    transactionData.currentPayRate = currentPayrate;
                    transactionData.BeneficiaryUploadIDCopy = beneficiaryIDPassport;

                    transactions.Add(transactionData);

                    totalLocal += transaction.PayAmount;
                    totalForeign += transaction.GetAmount;
                    rowId++;
                }

                ViewData["SaleTransactionsData"] = transactions;

                ViewData["TotalForeign"] = totalForeign.ToString(GetRateFormat(8));
                ViewData["TotalLocal"] = totalLocal.ToString(payFormat);
                ViewData["PaySymbol"] = paySymbol;
                ViewData["Sale"] = sales;
                ViewData["SaleId"] = sales.ID;
                ViewData["PendingApproval"] = "No";
                if (sales.Status == "Pending GM Approval" || sales.Status == "Pending Delete GM Approval")
                {
                    ViewData["PendingApproval"] = "Yes";
                }
                ViewData["SaleTransactionType"] = "Remittance";
                ViewData["Module"] = module;

                ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
                return View();
            }
            else
            {
                TempData.Add("Result", "error|Memo ID not found!");
            }

            return RedirectToAction("Listing", module, new { @page = page });
        }

        //POST: SaleApproval
        [HttpPost]
        public ActionResult SaleApproval(int id, Remittances sales, FormCollection form, string module = "RemittanceSale", string SubmitType = "")
        {
            int page = 1;

            if (TempData["Page"] != null)
            {
                page = Convert.ToInt32(TempData["Page"]);
                ViewData["Page"] = page;
            }

            Remittances oldData = _remittancesalesModel.GetSingle(id);
            sales = oldData;

            //For rollback
            Remittances rollBack_Sale = new Remittances()
            {
                ID = oldData.ID,
                MemoID = oldData.MemoID,
                CustomerParticularId = oldData.CustomerParticularId,
                IssueDate = oldData.IssueDate,
                CreatedBy = oldData.CreatedBy,
                IsUrgent = oldData.IsUrgent,
                Remarks = oldData.Remarks,
                CustomerRemarks = oldData.CustomerRemarks,
                Status = oldData.Status,
                LastApprovalOn = oldData.LastApprovalOn,
                Address1 = oldData.Address1,
                Address2 = oldData.Address2,
                Address3 = oldData.Address3,
                AgentId = oldData.AgentId,
                CreatedOn = oldData.CreatedOn,
                CreatedFrom = oldData.CreatedFrom,
                CostPrice = oldData.CostPrice,
                AgentFee = oldData.AgentFee,
                AgentRate = oldData.AgentRate,
                ContactNo = oldData.ContactNo,
                CustomerParticulars = oldData.CustomerParticulars,
                RemittanceOders = oldData.RemittanceOders,
                ShippingAddress1 = oldData.ShippingAddress1,
                ShippingAddress2 = oldData.ShippingAddress2,
                ShippingAddress3 = oldData.ShippingAddress3,
                TotalGetAmount = oldData.TotalGetAmount,
                TotalPayAmount = oldData.TotalPayAmount,
                IsDeleted = oldData.IsDeleted,
                UpdatedOn = oldData.UpdatedOn

            };

            Dictionary<int, RemittanceOrders> rollBack_saleTransactions = new Dictionary<int, RemittanceOrders>();

            if (oldData.Status.Contains("Pending Account") || oldData.Status == "Pending Dealer")
            {
                #region Pending Accounts
                sales.ID = oldData.ID;
                sales.MemoID = oldData.MemoID;
                sales.CustomerParticularId = oldData.CustomerParticularId;
                sales.IssueDate = oldData.IssueDate;
                sales.CreatedBy = oldData.CreatedBy;
                sales.CustomerRemarks = oldData.CustomerRemarks;
                sales.LastApprovalOn = oldData.LastApprovalOn;

                foreach (string modelKey in ModelState.Keys)
                {
                    if (ModelState[modelKey].Errors.Count > 0)
                    {
                        ModelState[modelKey].Errors.Clear();
                    }
                }

                if (!string.IsNullOrEmpty(sales.Remarks))
                {
                    if (sales.Remarks.Length > 255)
                    {
                        ModelState.AddModelError("sales.Remarks", "Remarks cannot exceed 255 characters.");
                    }
                }

                if (!string.IsNullOrEmpty(form["sales.CostPrice"].ToString()))
                {
                    bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.CostPrice"].ToString());

                    if (!checkFormat)
                    {
                        ModelState.AddModelError("sales.CostPrice", "Cost Price is not valid.");
                    }
                    else
                    {
                        var split = form["sales.CostPrice"].ToString().Split('.');
                        if (split.Length > 1)
                        {
                            var getDecimalPoint = split[1].Length;
                            if (getDecimalPoint > 2)
                            {
                                ModelState.AddModelError("sales.CostPrice", "Cost Price only allow two decimal points.");
                            }
                        }
                    }
                }

                if (!string.IsNullOrEmpty(form["sales.AgentFee"].ToString()))
                {
                    bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.AgentFee"].ToString());

                    if (!checkFormat)
                    {
                        ModelState.AddModelError("sales.AgentFee", "Agent Fee is not valid.");
                    }
                    else
                    {
                        var split = form["sales.AgentFee"].ToString().Split('.');
                        if (split.Length > 1)
                        {
                            var getDecimalPoint = split[1].Length;
                            if (getDecimalPoint > 2)
                            {
                                ModelState.AddModelError("sales.AgentFee", "Agent Fee only allow two decimal points.");
                            }
                        }
                    }
                }

                if (!string.IsNullOrEmpty(form["sales.AgentRate"].ToString()))
                {
                    bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.AgentRate"].ToString());

                    if (!checkFormat)
                    {
                        ModelState.AddModelError("sales.AgentRate", "Agent Rate is not valid.");
                    }
                    else
                    {
                        var split = form["sales.AgentRate"].ToString().Split('.');
                        if (split.Length > 1)
                        {
                            var getDecimalPoint = split[1].Length;
                            if (getDecimalPoint > 12)
                            {
                                ModelState.AddModelError("sales.AgentRate", "Agent Rate only allow twelve decimal points.");
                            }
                        }
                    }
                }

                List<string> transactionKeys = form.AllKeys.Where(e => e.Contains("Transaction_ID_")).ToList();
                decimal totalGet = 0;
                decimal totalPay = 0;
                foreach (string key in transactionKeys)
                {
                    string rowId = key.Split('_')[2];

                    if (string.IsNullOrEmpty(form["Transaction_Type_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_Type_" + rowId, "Type is required!");
                    }

                    if (string.IsNullOrEmpty(form["Transaction_PayCurrency_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_PayCurrency_" + rowId, "Currency is required!");
                    }
                    else
                    {
                        RemittanceProducts currency = _remittanceproductsModel.GetSingle(Convert.ToInt32(form["Transaction_PayCurrency_" + rowId]));

                        if (currency == null)
                        {
                            ModelState.AddModelError("Transaction_PayCurrency_" + rowId, "Currency record not found!");
                        }
                    }

                    if (string.IsNullOrEmpty(form["Transaction_GetCurrency_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_GetCurrency_" + rowId, "Currency is required!");
                    }
                    else
                    {
                        RemittanceProducts currency = _remittanceproductsModel.GetSingle(Convert.ToInt32(form["Transaction_GetCurrency_" + rowId]));

                        if (currency == null)
                        {
                            ModelState.AddModelError("Transaction_GetCurrency_" + rowId, "Currency record not found!");
                        }
                    }

                    if (string.IsNullOrEmpty(form["Transaction_PayAmount_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_PayAmount_" + rowId, "Amount (Pay) is required!");
                    }
                    else
                    {
                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_PayAmount_" + rowId]);

                        if (!checkAmountLocalFormat)
                        {
                            ModelState.AddModelError("Transaction_PayAmount_" + rowId, "Amount (Pay) is not valid!");
                        }
                        else
                        {
                            totalPay += Convert.ToDecimal(form["Transaction_PayAmount_" + rowId]);
                        }
                    }

                    if (string.IsNullOrEmpty(form["Transaction_GetAmount_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_GetAmount_" + rowId, "Amount (Get) is required!");
                    }
                    else
                    {
                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_GetAmount_" + rowId]);

                        if (!checkAmountLocalFormat)
                        {
                            ModelState.AddModelError("Transaction_GetAmount_" + rowId, "Amount (Get) is not valid!");
                        }
                        else
                        {
                            RemittanceProducts getcurrency = _remittanceproductsModel.GetSingle(Convert.ToInt32(form["Transaction_GetCurrency_" + rowId]));
                            //if (getcurrency != null)
                            //{
                            //    var maxamount = getcurrency.MaxAmount;
                            //    if (maxamount < Convert.ToDecimal(form["Transaction_GetAmount_" + rowId]) && maxamount != 0)
                            //    {
                            //        ModelState.AddModelError("Transaction_GetAmount_" + rowId, "Amount (Get) exceeded max amount.");
                            //    }
                            //}
                            totalGet += Convert.ToDecimal(form["Transaction_GetAmount_" + rowId]);
                        }
                    }

                    if (string.IsNullOrEmpty(form["Transaction_PayPaymentType_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_PayPaymentType_" + rowId, "Payment Type is not valid!");
                    }
                    else
                    {
                        if (form["Transaction_PayPaymentType_" + rowId].ToString() == "2")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_ChequeNo_" + rowId, "Cheque No. is required!");
                            }
                            else
                            {
                                //if (sales.TransactionType == "Buy")
                                //{
                                //    ViewData["PendingChequeLog"] = 1;
                                //}
                            }
                            if (string.IsNullOrEmpty(form["Transaction_DepositAccount_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_DepositAccount_" + rowId, "Deposit Account is required!");
                            }
                        }
                        else if (form["Transaction_PayPaymentType_" + rowId].ToString() == "3")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_BankTransferNo_" + rowId, "Bank Transfer No. is required!");
                            }
                            else
                            {
                                //if (sales.TransactionType == "Buy")
                                //{
                                //    ViewData["PendingBankTransferLog"] = 1;
                                //}
                            }
                            if (string.IsNullOrEmpty(form["Transaction_DepositAccount_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_DepositAccount_" + rowId, "Deposit Account is required!");
                            }
                        }
                    }

                    if (string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is required!");
                    }
                    else
                    {
                        bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                        if (checkRateFormat)
                        {
                            //if (sales.CustomerParticularId > 0 && !string.IsNullOrEmpty(form["Transaction_PayCurrency_" + rowId]))
                            //{
                            //RemittanceProducts product = _remittanceproductsModel.GetSingle(Convert.ToInt32(form["Transaction_PayCurrency_" + rowId]));
                            //decimal buyRate = 0;
                            //decimal acceptable = product.AcceptableRange;

                            //if (acceptable > 0)
                            //{
                            //    //if (product.PayRate != null)
                            //    //{
                            //    //    buyRate = Convert.ToDecimal(product.PayRate);
                            //    //}
                            //    //else
                            //    //{
                            //    buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                            //    //}

                            //    //decimal upperLimit = buyRate * (1 + acceptable / 100);
                            //    //decimal lowerLimit = buyRate * (1 - acceptable / 100);
                            //    decimal rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);

                            //    if (rate > acceptable)
                            //    {
                            //        ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is out of acceptable range.");
                            //    }
                            //}
                            //}
                        }
                        else
                        {
                            ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is not valid!");
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_Fee_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_Fee_" + rowId, "Transaction fee is required!");
                    }
                    else
                    {
                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Fee_" + rowId]);

                        if (!checkAmountLocalFormat)
                        {
                            ModelState.AddModelError("Transaction_Fee_" + rowId, "Transaction Fee is not valid!");
                        }
                    }
                    bool beneficiaryForm = false;
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryName_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryName_" + rowId, "Full name is required!");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_BeneficiaryName_" + rowId].Length > 255)
                        {
                            ModelState.AddModelError("Transaction_BeneficiaryName_" + rowId, "Full name cannot more than 255 words!");
                            beneficiaryForm = true;
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryBankAccount_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryBankAccount_" + rowId, "Bank Account is required!");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_BeneficiaryBankAccount_" + rowId].Length > 100)
                        {
                            ModelState.AddModelError("Transaction_BeneficiaryBankAccount_" + rowId, "Bank Account cannot more than 100 words!");
                            beneficiaryForm = true;
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_ContactNoMain_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_ContactNoMain_" + rowId, "Contact No is required!");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_ContactNoMain_" + rowId].Length > 100)
                        {
                            ModelState.AddModelError("Transaction_ContactNoMain_" + rowId, "Contact No cannot more than 100 words!");
                            beneficiaryForm = true;
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_AddressMain_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_AddressMain_" + rowId, "Address is required!");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_AddressMain_" + rowId].Length > 255)
                        {
                            ModelState.AddModelError("Transaction_AddressMain_" + rowId, "Address cannot more than 255 words!");
                            beneficiaryForm = true;
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryBankName_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryBankName_" + rowId, "Bank Name is required!");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_BeneficiaryBankName_" + rowId].Length > 100)
                        {
                            ModelState.AddModelError("Transaction_BeneficiaryBankName_" + rowId, "Bank Name cannot more than 100 words!");
                            beneficiaryForm = true;
                        }
                    }
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankCode_" + rowId]))
                    {
                        if (form["Transaction_BeneficiaryBankCode_" + rowId].Length > 100)
                        {
                            ModelState.AddModelError("Transaction_BeneficiaryBankCode_" + rowId, "Bank code cannot more than 100 words!");
                            beneficiaryForm = true;
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryBankCountry_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryBankCountry_" + rowId, "Bank country is required!");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (Convert.ToInt32(form["Transaction_BeneficiaryBankCountry_" + rowId]) == 48)
                        {
                            if (string.IsNullOrEmpty(form["Transaction_OtherBankCountry_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_OtherBankCountry_" + rowId, "Other Bank country is required!");
                                beneficiaryForm = true;
                            }
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryBankAddress_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryBankAddress_" + rowId, "Bank address is required!");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_BeneficiaryBankAddress_" + rowId].Length > 255)
                        {
                            ModelState.AddModelError("Transaction_BeneficiaryBankAddress_" + rowId, "Bank address cannot more than 255 words!");
                            beneficiaryForm = true;
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryPurposePayment_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryPurposePayment_" + rowId, "Purpose of payment is required!");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (Convert.ToInt32(form["Transaction_BeneficiaryPurposePayment_" + rowId]) == 52)
                        {
                            if (string.IsNullOrEmpty(form["Transaction_OtherPurposePayment_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_OtherPurposePayment_" + rowId, "Other purpose of payment is required!");
                                beneficiaryForm = true;
                            }
                        }
                    }
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiarySupportDocType_" + rowId]))
                    {
                        if (form["Transaction_BeneficiarySupportDocType_" + rowId].ToString() != "0")
                        {
                            //if (string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadSuporting_" + rowId].ToString()))
                            //{
                            //    ModelState.AddModelError("Transaction_BeneficiaryUploadSuporting_" + rowId, "Upload Supporting is required!");
                            //    beneficiaryForm = true;
                            //}
                            if (Convert.ToInt32(form["Transaction_BeneficiarySupportDocType_" + rowId]) == 11)
                            {
                                if (string.IsNullOrEmpty(form["Transaction_OtherSupportDocType_" + rowId]))
                                {
                                    ModelState.AddModelError("Transaction_OtherSupportDocType_" + rowId, "Other upload supporting is required!");
                                    beneficiaryForm = true;
                                }
                            }
                        }

                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiarySourceFund_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiarySourceFund_" + rowId, "Source of funds is required!");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (Convert.ToInt32(form["Transaction_BeneficiarySourceFund_" + rowId]) == 20)
                        {
                            if (string.IsNullOrEmpty(form["Transaction_OtherSourceFund_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_OtherSourceFund_" + rowId, "Other source of fund is required!");
                                beneficiaryForm = true;
                            }
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryPaymentDetails_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryPaymentDetails_" + rowId, "Payment Details / Instructions is required!");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_BeneficiaryPaymentDetails_" + rowId].Length > 255)
                        {
                            ModelState.AddModelError("Transaction_BeneficiaryPaymentDetails_" + rowId, "Payment Details / Instructions cannot more than 255 words!");
                            beneficiaryForm = true;
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryType_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryType_" + rowId, "Beneficiary type is required!");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_BeneficiaryType_" + rowId].ToString() == "individual")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_BeneficiaryNationality_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_BeneficiaryNationality_" + rowId, "Nationality is required!");
                                beneficiaryForm = true;
                            }
                            else
                            {
                                if (Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]) == 201)
                                {
                                    if (string.IsNullOrEmpty(form["Transaction_OtherNationality_" + rowId]))
                                    {
                                        ModelState.AddModelError("Transaction_OtherNationality_" + rowId, "Other nationality is required!");
                                        beneficiaryForm = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (string.IsNullOrEmpty(form["Transaction_BeneficiaryCompanyRegistration_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_BeneficiaryCompanyRegistration_" + rowId, "Company registration no is required!");
                                beneficiaryForm = true;
                            }
                            else
                            {
                                if (form["Transaction_BeneficiaryCompanyRegistration_" + rowId].Length > 100)
                                {
                                    ModelState.AddModelError("Transaction_BeneficiaryCompanyRegistration_" + rowId, "Company registration no cannot more than 100 words!");
                                    beneficiaryForm = true;
                                }
                            }
                            if (string.IsNullOrEmpty(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_BeneficiaryCategoryBusiness_" + rowId, "Category of business is required!");
                                beneficiaryForm = true;
                            }
                            else
                            {
                                if (Convert.ToInt32(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]) == 331)
                                {
                                    if (string.IsNullOrEmpty(form["Transaction_OtherCategoryBusiness_" + rowId]))
                                    {
                                        ModelState.AddModelError("Transaction_OtherCategoryBusiness_" + rowId, "Other category of business is required!");
                                        beneficiaryForm = true;
                                    }
                                }
                            }
                            if (string.IsNullOrEmpty(form["Transaction_BeneficiaryCompanyContact_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_BeneficiaryCompanyContact_" + rowId, "Company contact no is required!");
                                beneficiaryForm = true;
                            }
                            else
                            {
                                if (form["Transaction_BeneficiaryCompanyContact_" + rowId].Length > 100)
                                {
                                    ModelState.AddModelError("Transaction_BeneficiaryCompanyContact_" + rowId, "Company contact no cannot more than 100 words!");
                                    beneficiaryForm = true;
                                }
                            }
                        }
                    }
                    if (beneficiaryForm)
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryForm_" + rowId, "Beneficiary Form is not valid!");
                    }

                }

                if (ModelState.IsValid)
                {
                    try
                    {
                        if (SubmitType != "SaveChanges")
                        {
                            if (oldData.Status == "Pending Dealer")
                            {
                                sales.Status = "Pending Accounts (Check Funds)";
                                sales.LastApprovalOn = DateTime.Now;
                                sales.UpdatedOn = DateTime.Now;
                            }
                            else if (oldData.Status == "Pending Accounts (Check Funds)")
                            {
                                sales.Status = "Pending Accounts (Check Transaction)";
                                sales.LastApprovalOn = DateTime.Now;
                                sales.UpdatedOn = DateTime.Now;
                            }
                            else if (oldData.Status == "Pending Accounts (Check Transaction)")
                            {
                                sales.Status = "Pending Customer";
                                sales.LastApprovalOn = DateTime.Now;
                                sales.UpdatedOn = DateTime.Now;
                            }
                        }
                        sales.Remarks = form["sales.Remarks"];
                        sales.CostPrice = Convert.ToDecimal(form["sales.CostPrice"]);
                        if (!string.IsNullOrEmpty(form["sales.AgentFee"]))
                        {
                            sales.AgentFee = Convert.ToDecimal(form["sales.AgentFee"]);
                        }
                        else
                        {
                            sales.AgentFee = 0;
                        }
                        if (!string.IsNullOrEmpty(form["sales.AgentFee"]))
                        {
                            sales.AgentRate = Convert.ToDecimal(form["sales.AgentRate"]);
                        }
                        else
                        {
                            sales.AgentRate = 0;
                        }

                        var agentId = 0;
                        if (!string.IsNullOrEmpty(form["AgentId"].ToString()))
                        {
                            agentId = Convert.ToInt32(form["AgentId"]);
                        }
                        sales.AgentId = agentId;
                        sales.TotalPayAmount = totalPay;
                        sales.TotalGetAmount = totalGet;
                        bool result = _remittancesalesModel.Update(sales.ID, sales);

                        if (result)
                        {
                            int userid = Convert.ToInt32(Session["UserId"]);
                            string tableAffected = "RemittanceSales";
                            string ActionType = "Approve";
                            string description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Approved Remittance Sale [" + sales.MemoID + "]";
                            string approvallog = "[" + Session["Username"].ToString() + "] Approved Remittance Sale [" + sales.MemoID + "] to status (" + sales.Status + ")";
                            if (SubmitType == "SaveChanges")
                            {
                                ActionType = "Update";
                                description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Updated Remittance Sale [" + sales.MemoID + "]";
                                approvallog = "[" + Session["Username"].ToString() + "] Updated Remittance Sale [" + sales.MemoID + "]";
                            }

                            bool sale_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);

                            if (sale_log)
                            {
                                //Add Approval History
                                bool approval_history = _approvalHistorysModel.Add("RemittanceSale", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), ActionType, approvallog);

                            }

                            //Update Transaction Payment Mode
                            bool hasUpdateTransaction = false;

                            foreach (string key in transactionKeys)
                            {
                                string rowId = key.Split('_')[2];

                                int transactionId = Convert.ToInt32(form["Transaction_TransactionId_" + rowId]);

                                RemittanceOrders oldTransaction = _remittanceordersModel.GetSingle(transactionId);

                                rollBack_saleTransactions.Add(oldTransaction.ID, new RemittanceOrders()
                                {
                                    ID = oldTransaction.ID,
                                    RemittanceId = oldTransaction.RemittanceId,
                                    TransactionID = oldTransaction.TransactionID,
                                    PayAmount = oldTransaction.PayAmount,
                                    GetAmount = oldTransaction.GetAmount,
                                    GetCurrency = oldTransaction.GetCurrency,
                                    PayCurrency = oldTransaction.PayCurrency,
                                    GetPaymentType = oldTransaction.GetPaymentType,
                                    PayPaymentType = oldTransaction.PayPaymentType,
                                    PayDepositAccount = oldTransaction.PayDepositAccount,
                                    ChequeNo = oldTransaction.ChequeNo,
                                    Fee = oldTransaction.Fee,
                                    Rate = oldTransaction.Rate,
                                    BeneficiaryBankAccountNo = oldTransaction.BeneficiaryBankAccountNo,
                                    BeneficiaryBankAddress = oldTransaction.BeneficiaryBankAddress,
                                    BankTransferNo = oldTransaction.BankTransferNo,
                                    BeneficiaryBankCountry = oldTransaction.BeneficiaryBankCountry,
                                    BeneficiaryCategoryOfBusiness = oldTransaction.BeneficiaryCategoryOfBusiness,
                                    BeneficiaryCompanyContactNo = oldTransaction.BeneficiaryCompanyContactNo,
                                    BeneficiaryCompanyRegistrationNo = oldTransaction.BeneficiaryCompanyRegistrationNo,
                                    BeneficiaryFullName = oldTransaction.BeneficiaryFullName,
                                    BeneficiaryNationality = oldTransaction.BeneficiaryNationality,
                                    BeneficiaryPurposeOfPayment = oldTransaction.BeneficiaryPurposeOfPayment,
                                    BeneficiaryPaymentDetails = oldTransaction.BeneficiaryPaymentDetails,
                                    BeneficiarySourceOfPayment = oldTransaction.BeneficiarySourceOfPayment,
                                    BeneficiaryType = oldTransaction.BeneficiaryType,
                                    BeneficiaryUploadSupportingFile = oldTransaction.BeneficiaryUploadSupportingFile,
                                    BeneficiaryUploadSupportingType = oldTransaction.BeneficiaryUploadSupportingType,
                                    BeneficiaryBankCode = oldTransaction.BeneficiaryBankCode,
                                    BeneficiaryContactNoMain = oldTransaction.BeneficiaryContactNoMain,
                                    BeneficiaryAddressMain = oldTransaction.BeneficiaryAddressMain,
                                    BeneficiaryBankName = oldTransaction.BeneficiaryBankName,
                                    IBANEuropeBSBAustralia = oldTransaction.IBANEuropeBSBAustralia,
                                    BankCountryIfOthers = oldTransaction.BankCountryIfOthers,
                                    BeneficiaryBusinessCategoryIfOthers = oldTransaction.BeneficiaryBusinessCategoryIfOthers,
                                    BeneficiaryNationalityIfOthers = oldTransaction.BeneficiaryNationalityIfOthers,
                                    PurposeOfPaymentIfOthers = oldTransaction.PurposeOfPaymentIfOthers,
                                    SourceOfPaymentIfOthers = oldTransaction.SourceOfPaymentIfOthers,
                                    UploadSupportingTypeIfOthers = oldTransaction.UploadSupportingTypeIfOthers,
                                    BeneficiaryUploadIDCopy = oldTransaction.BeneficiaryUploadIDCopy,
                                    currentPayRate = oldTransaction.currentPayRate
                                });
                                var getPayProduct = _remittanceproductsModel.GetSingle(Convert.ToInt32(form["Transaction_PayCurrency_" + rowId]));
                                if (getPayProduct != null)
                                {
                                    bool updateCurrentPayrate = false;
                                    if (oldTransaction.PayAmount != Convert.ToDecimal(form["Transaction_PayAmount_" + rowId].ToString()))
                                    {
                                        updateCurrentPayrate = true;
                                    }
                                    if (oldTransaction.GetAmount != Convert.ToDecimal(form["Transaction_GetAmount_" + rowId].ToString()))
                                    {
                                        updateCurrentPayrate = true;
                                    }
                                    if (oldTransaction.PayCurrency != Convert.ToInt32(form["Transaction_PayCurrency_" + rowId].ToString()))
                                    {
                                        updateCurrentPayrate = true;
                                    }
                                    if (oldTransaction.GetCurrency != Convert.ToInt32(form["Transaction_GetCurrency_" + rowId].ToString()))
                                    {
                                        updateCurrentPayrate = true;
                                    }
                                    if (oldTransaction.Rate != Convert.ToDecimal(form["Transaction_Rate_" + rowId].ToString()))
                                    {
                                        updateCurrentPayrate = true;
                                    }
                                    if (oldTransaction.Fee != Convert.ToDecimal(form["Transaction_Fee_" + rowId].ToString()))
                                    {
                                        updateCurrentPayrate = true;
                                    }

                                    if (updateCurrentPayrate)
                                    {
                                        if (getPayProduct.PayRate != null && getPayProduct.PayRate > 0)
                                        {
                                            oldTransaction.currentPayRate = getPayProduct.PayRate ?? 0;
                                        }
                                        else
                                        {
                                            if (getPayProduct.AutomatedPayRate != null && getPayProduct.AutomatedPayRate > 0)
                                                oldTransaction.currentPayRate = getPayProduct.AutomatedPayRate ?? 0;
                                        }
                                    }
                                }
                                //oldTransaction.currentPayRate = Convert.ToDecimal(form["payRate_" + rowId]);
                                oldTransaction.PayPaymentType = form["Transaction_PayPaymentType_" + rowId].ToString();
                                oldTransaction.PayAmount = Convert.ToDecimal(form["Transaction_PayAmount_" + rowId].ToString());
                                oldTransaction.GetAmount = Convert.ToDecimal(form["Transaction_GetAmount_" + rowId].ToString());
                                oldTransaction.PayCurrency = Convert.ToInt32(form["Transaction_PayCurrency_" + rowId].ToString());
                                oldTransaction.GetCurrency = Convert.ToInt32(form["Transaction_GetCurrency_" + rowId].ToString());
                                oldTransaction.Rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId].ToString());
                                oldTransaction.Fee = Convert.ToDecimal(form["Transaction_Fee_" + rowId].ToString());
                                oldTransaction.BeneficiaryBankAccountNo = form["Transaction_BeneficiaryBankAccount_" + rowId].ToString();
                                oldTransaction.BeneficiaryBankAddress = form["Transaction_BeneficiaryBankAddress_" + rowId].ToString();
                                oldTransaction.BeneficiaryBankCode = form["Transaction_BeneficiaryBankCode_" + rowId].ToString();
                                oldTransaction.BeneficiaryContactNoMain = form["Transaction_ContactNoMain_" + rowId].ToString();
                                oldTransaction.BeneficiaryAddressMain = form["Transaction_AddressMain_" + rowId].ToString();
                                oldTransaction.BeneficiaryBankName = form["Transaction_BeneficiaryBankName_" + rowId].ToString();
                                oldTransaction.IBANEuropeBSBAustralia = form["Transaction_IBANEuropeBSBAustralia_" + rowId].ToString();
                                oldTransaction.BeneficiaryBankCountry = Convert.ToInt32(form["Transaction_BeneficiaryBankCountry_" + rowId]);

                                if (Convert.ToInt32(form["Transaction_BeneficiaryBankCountry_" + rowId]) == 48)
                                {
                                    oldTransaction.BankCountryIfOthers = form["Transaction_OtherBankCountry_" + rowId].ToString();
                                }
                                if (form["Transaction_BeneficiaryType_" + rowId].ToString() == "business")
                                {
                                    oldTransaction.BeneficiaryCategoryOfBusiness = Convert.ToInt32(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]);
                                    if (Convert.ToInt32(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]) == 331)
                                    {
                                        oldTransaction.BeneficiaryBusinessCategoryIfOthers = form["Transaction_OtherCategoryBusiness_" + rowId].ToString();
                                    }
                                    oldTransaction.BeneficiaryCompanyContactNo = form["Transaction_BeneficiaryCompanyContact_" + rowId].ToString();
                                    oldTransaction.BeneficiaryCompanyRegistrationNo = form["Transaction_BeneficiaryCompanyRegistration_" + rowId].ToString();
                                    oldTransaction.BeneficiaryNationality = Convert.ToInt32(form["Transaction_BeneficiaryCategoryOfBusiness_" + rowId]);
                                }
                                else
                                {
                                    oldTransaction.BeneficiaryNationality = Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]);
                                    if (Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]) == 201)
                                    {
                                        oldTransaction.BeneficiaryNationalityIfOthers = form["Transaction_OtherNationality_" + rowId].ToString();
                                    }
                                    oldTransaction.BeneficiaryCategoryOfBusiness = Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]);
                                    oldTransaction.BeneficiaryCompanyContactNo = "";
                                    oldTransaction.BeneficiaryCompanyRegistrationNo = "";
                                }
                                oldTransaction.BeneficiaryFullName = form["Transaction_BeneficiaryName_" + rowId].ToString();
                                oldTransaction.BeneficiaryPaymentDetails = form["Transaction_BeneficiaryPaymentDetails_" + rowId].ToString();
                                oldTransaction.BeneficiaryPurposeOfPayment = Convert.ToInt32(form["Transaction_BeneficiaryPurposePayment_" + rowId]);
                                if (Convert.ToInt32(form["Transaction_BeneficiaryPurposePayment_" + rowId]) == 52)
                                {
                                    oldTransaction.PurposeOfPaymentIfOthers = form["Transaction_OtherPurposePayment_" + rowId].ToString();
                                }
                                oldTransaction.BeneficiarySourceOfPayment = Convert.ToInt32(form["Transaction_BeneficiarySourceFund_" + rowId]);
                                if (Convert.ToInt32(form["Transaction_BeneficiarySourceFund_" + rowId]) == 20)
                                {
                                    oldTransaction.SourceOfPaymentIfOthers = form["Transaction_OtherSourceFund_" + rowId].ToString();
                                }
                                oldTransaction.BeneficiaryType = form["Transaction_BeneficiaryType_" + rowId].ToString();
                                if (string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadSuporting_" + rowId]))
                                {
                                    oldTransaction.BeneficiaryUploadSupportingFile = "";
                                }
                                else
                                {
                                    oldTransaction.BeneficiaryUploadSupportingFile = form["Transaction_BeneficiaryUploadSuporting_" + rowId].ToString();
                                }
                                if (string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadIDPassport_" + rowId]))
                                {
                                    oldTransaction.BeneficiaryUploadIDCopy = "";
                                }
                                else
                                {
                                    oldTransaction.BeneficiaryUploadIDCopy = form["Transaction_BeneficiaryUploadIDPassport_" + rowId].ToString();
                                }
                                oldTransaction.BeneficiaryUploadSupportingType = Convert.ToInt32(form["Transaction_BeneficiarySupportDocType_" + rowId]);
                                if (Convert.ToInt32(form["Transaction_BeneficiarySupportDocType_" + rowId]) == 11)
                                {
                                    oldTransaction.UploadSupportingTypeIfOthers = form["Transaction_OtherSupportDocType_" + rowId].ToString();
                                }
                                if (oldTransaction.PayPaymentType == "1")
                                {
                                    oldTransaction.ChequeNo = null;
                                    oldTransaction.BankTransferNo = null;
                                    oldTransaction.PayDepositAccount = 0;
                                }
                                else if (oldTransaction.PayPaymentType == "2")
                                {
                                    oldTransaction.ChequeNo = form["Transaction_ChequeNo_" + rowId].ToString();
                                    oldTransaction.BankTransferNo = null;
                                    oldTransaction.PayDepositAccount = Convert.ToInt32(form["Transaction_DepositAccount_" + rowId]);
                                }
                                else if (oldTransaction.PayPaymentType == "3")
                                {
                                    oldTransaction.ChequeNo = null;
                                    oldTransaction.BankTransferNo = form["Transaction_BankTransferNo_" + rowId].ToString();
                                    oldTransaction.PayDepositAccount = Convert.ToInt32(form["Transaction_DepositAccount_" + rowId]);
                                }

                                bool transaction_update_result = _remittanceordersModel.Update(oldTransaction.ID, oldTransaction);

                                if (transaction_update_result)
                                {
                                    if (!string.IsNullOrEmpty(oldTransaction.BeneficiaryUploadSupportingFile))
                                    {
                                        string[] supportDocFile = oldTransaction.BeneficiaryUploadSupportingFile.Split(',');

                                        foreach (string file in supportDocFile)
                                        {
                                            string sourceFile = "";
                                            string destinationFile = "";
                                            if (sales.CreatedFrom == "Admin")
                                            {
                                                sourceFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), file);
                                                destinationFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["BeneficiarySupportDocumentsFolder"].ToString()), file);
                                            }
                                            else
                                            {
                                                sourceFile = ConfigurationManager.AppSettings["SharedNetworkTempFolder"].ToString() + file;//Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["SharedNetworkTempFolder"].ToString()), file);
                                                destinationFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["BeneficiarySupportDocumentsFolder"].ToString()), file);
                                            }

                                            if (!string.IsNullOrEmpty(sourceFile) && !string.IsNullOrEmpty(destinationFile))
                                            {
                                                if (System.IO.File.Exists(sourceFile))
                                                {
                                                    System.IO.File.Move(sourceFile, destinationFile);
                                                }
                                            }
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(oldTransaction.BeneficiaryUploadIDCopy))
                                    {
                                        string[] supportDocFile = oldTransaction.BeneficiaryUploadIDCopy.Split(',');

                                        foreach (string file in supportDocFile)
                                        {
                                            string sourceFile = "";
                                            string destinationFile = "";
                                            if (sales.CreatedFrom == "Admin")
                                            {
                                                sourceFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), file);
                                                destinationFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["BeneficiaryUploadIDCopyFolder"].ToString()), file);
                                            }
                                            else
                                            {
                                                sourceFile = ConfigurationManager.AppSettings["SharedNetworkTempFolder"].ToString() + file;//Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["SharedNetworkTempFolder"].ToString()), file);
                                                destinationFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["BeneficiaryUploadIDCopyFolder"].ToString()), file);
                                            }

                                            if (!string.IsNullOrEmpty(sourceFile) && !string.IsNullOrEmpty(destinationFile))
                                            {
                                                if (System.IO.File.Exists(sourceFile))
                                                {
                                                    System.IO.File.Move(sourceFile, destinationFile);
                                                }
                                            }
                                        }
                                    }
                                    if (!hasUpdateTransaction)
                                    {
                                        hasUpdateTransaction = true;
                                    }
                                }

                            }

                            if (hasUpdateTransaction)
                            {
                                userid = Convert.ToInt32(Session["UserId"]);
                                tableAffected = "RemittanceOrders";
                                description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Approved Remittance Order [" + sales.MemoID + "]";

                                if (SubmitType == "SaveChanges")
                                {
                                    description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Updated Remittance Order [" + sales.MemoID + "]";
                                }


                                bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                            }

                            if (SubmitType != "SaveChanges")
                            {
                                TempData.Add("Result", "success|" + sales.MemoID + " has been successfully approved!");
                            }
                            else
                            {
                                TempData.Add("Result", "success|" + sales.MemoID + " has been successfully updated!");
                            }

                            return RedirectToAction("Listing", module, new { @page = page });
                        }
                        else
                        {
                            TempData.Add("Result", "danger|An error occured while approving sale record!");
                        }
                    }
                    catch (DbUpdateException e)
                    {
                        if (e.ToString().Contains("was deadlocked on lock resources with another process and has been chosen as the deadlock victim"))
                        {
                            //Roll back sale
                            _remittancesalesModel.Update(rollBack_Sale.ID, rollBack_Sale);

                            //Role back Transactions
                            foreach (int key in rollBack_saleTransactions.Keys)
                            {
                                _remittanceordersModel.Update(key, rollBack_saleTransactions[key]);
                            }

                            TempData.Add("Result", "danger|An error occured while saving sale record! Please submit again!");
                        }
                        else
                        {
                            throw;
                        }
                    }
                    catch (Exception e)
                    {
                        //Roll back sale
                        _remittancesalesModel.Update(rollBack_Sale.ID, rollBack_Sale);

                        //Role back Transactions
                        foreach (int key in rollBack_saleTransactions.Keys)
                        {
                            _remittanceordersModel.Update(key, rollBack_saleTransactions[key]);
                        }

                        TempData.Add("Result", "danger|An error occured while saving sale record! " + e.Message + "!");
                    }
                }
                else
                {
                    TempData.Add("Result", "danger|There is something wrong in the form!");
                }
                Dropdown[] customerDDL = CustomerDDL(sales.CustomerParticularId);
                ViewData["CustomerDropdown"] = new SelectList(customerDDL, "val", "name", sales.CustomerParticularId);
                CustomerParticular customer = sales.CustomerParticulars;
                ViewData["CustomerContact"] = "";
                ViewData["CustomerAddress"] = "";
                Dropdown[] agentDDL = AgentDDL();
                ViewData["AgentDropdown"] = new SelectList(agentDDL, "val", "name", sales.AgentId);
                ViewData["CreatedBy"] = "";
                using (var context = new DataAccess.GreatEastForex())
                {
                    var createdfrom = sales.CreatedFrom;
                    if (!string.IsNullOrEmpty(createdfrom))
                    {
                        if (createdfrom == "Admin")
                        {
                            string createbyName = context.Users.Where(e => e.ID == sales.CreatedBy).FirstOrDefault().Name;
                            ViewData["CreatedBy"] = createbyName;
                        }
                        else
                        {

                            var createby = context.CustomerParticulars.Where(e => e.ID == sales.CreatedBy).FirstOrDefault();
                            var createbyName = "";
                            if (!string.IsNullOrEmpty(createby.Surname) && !string.IsNullOrEmpty(createby.GivenName))
                            {
                                createbyName = createby.Surname + " " + createby.GivenName;
                            }
                            else
                            {
                                if (createby.CustomerType == "Corporate & Trading Company")
                                {

                                    createbyName = createby.Company_RegisteredName;
                                }
                                else
                                {
                                    createbyName = createby.Natural_Name;
                                }
                            }
                            ViewData["CreatedBy"] = createbyName;
                        }
                    }
                }
                if (customer != null)
                {
                    string contact = "";
                    string address = "";
                    string shippingadress = "";

                    if (customer.CustomerType == "Corporate & Trading Company")
                    {
                        contact = customer.Company_TelNo;
                        if (!string.IsNullOrEmpty(customer.Company_BusinessAddress2))
                        {
                            address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_PostalCode;
                            if (!string.IsNullOrEmpty(customer.Company_BusinessAddress3))
                            {
                                address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_BusinessAddress3 + ", " + customer.Company_PostalCode;

                            }
                        }
                        else
                        {
                            address = customer.Company_BusinessAddress1 + ", " + customer.Company_PostalCode;
                        }

                        if (!string.IsNullOrEmpty(customer.Shipping_Address2))
                        {
                            shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_Address2 + ", " + customer.Shipping_PostalCode;

                            if (!string.IsNullOrEmpty(customer.Shipping_Address3))
                            {
                                shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_Address2 + ", " + customer.Shipping_Address3 + ", " + customer.Shipping_PostalCode;

                            }
                        }
                        else
                        {
                            shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_PostalCode;
                        }

                    }
                    else
                    {
                        contact = customer.Natural_ContactNoM;
                        address = customer.Natural_PermanentAddress;
                        shippingadress = customer.Natural_MailingAddress + ", " + customer.Natural_MailingAddress2 + ", " + customer.Shipping_PostalCode;
                    }

                    ViewData["CustomerContact"] = contact;
                    ViewData["CustomerAddress"] = address;
                    ViewData["CustomerShippingAddress"] = shippingadress;
                }

                if (ViewData["CustomerShippingAddress"] == null)
                {
                    ViewData["CustomerShippingAddress"] = "";
                }


                //Dropdown[] collectionTimeDDL = CollectionTimeDDL();
                //ViewData["CollectionTimeDropdown"] = new SelectList(collectionTimeDDL, "val", "name", sales.CollectionTime);

                ViewData["NonUrgentRadio"] = "";
                ViewData["UrgentRadio"] = "";
                if (sales.IsUrgent == 1)
                {
                    ViewData["UrgentRadio"] = "checked";
                }
                else
                {
                    ViewData["NonUrgentRadio"] = "checked";
                }
                ViewData["CostPrice"] = sales.CostPrice;
                ViewData["AgentRate"] = sales.AgentRate;
                ViewData["AgentFee"] = sales.AgentFee;
                RemittanceProducts sgd = _remittanceproductsModel.FindCurrencyCode("SGD");
                string sgdFormat = GetDecimalFormat(sgd.ProductDecimal);
                string rateFormat = GetRateFormat(rateDP);

                IList<RemittanceOrderData> transactions = new List<RemittanceOrderData>();

                int _rowId = 1;

                decimal totalForeign = 0;
                decimal totalLocal = 0;
                string paySymbol = "$";
                string payFormat = "";
                int payDecimal = 1;
                foreach (string key in transactionKeys)
                {
                    RemittanceOrderData transactionData = new RemittanceOrderData();
                    //transactionData.Denominations = new List<DenominationsData>();

                    string rowId = key.Split('_')[2];
                    //rowId = rowId.ToString().PadLeft(3, '0');
                    string transactionID = form["Transaction_ID_" + rowId].ToString();
                    string roid = form["Transaction_TransactionId_" + rowId].ToString();
                    string type = form["Transaction_Type_" + rowId].ToString();
                    //string payPaymentType = "";
                    //if (!string.IsNullOrEmpty(form["Transaction_PayPaymentType_" + rowId]))
                    //{
                    //    payPaymentType = form["Transaction_PayPaymentType_" + rowId].ToString();
                    //}

                    string productId = form["Transaction_PayCurrency_" + rowId].ToString();
                    RemittanceProducts product = _remittanceproductsModel.GetSingle(Convert.ToInt32(productId));
                    string currencyFormat = GetDecimalFormat(product.ProductDecimal);
                    paySymbol = product.ProductSymbol;
                    payFormat = GetDecimalFormat(product.ProductDecimal);
                    string getproductId = form["Transaction_GetCurrency_" + rowId].ToString();
                    RemittanceProducts getproduct = _remittanceproductsModel.GetSingle(Convert.ToInt32(getproductId));
                    string getcurrencyFormat = GetDecimalFormat(getproduct.ProductDecimal);

                    Dropdown2[] currency = CurrencyDDL2("Remittance");
                    var payCurrencyDDL = new SelectList(currency, "val", "name", dataGroupField: "group", productId);
                    var getCurrencyDDL = new SelectList(currency, "val", "name", dataGroupField: "group", getproductId);

                    string symbol = _remittanceproductsModel.GetSingle(Convert.ToInt32(productId)).ProductSymbol;
                    string rate = "";
                    if (!string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                    {
                        rate = form["Transaction_Rate_" + rowId].ToString();
                    }

                    string paymentModeVal = "";
                    if (!string.IsNullOrEmpty(form["Transaction_PayPaymentType_" + rowId]))
                    {
                        paymentModeVal = form["Transaction_PayPaymentType_" + rowId].ToString();
                    }
                    Dropdown[] paymentMode = PaymentModeDDL(Convert.ToInt32(productId));
                    SelectList paymentModeDDL = new SelectList(paymentMode, "val", "name", paymentModeVal);

                    Dropdown[] getpaymentMode = new Dropdown[1];
                    getpaymentMode[0] = new Dropdown { name = "Bank Transfer", val = "3" };
                    SelectList getpaymentModeDDL = new SelectList(getpaymentMode, "val", "name");

                    string disabledCheque = "disabled";
                    string disabledBankTranfer = "disabled";
                    string disabledDepositAcc = "disabled";
                    string disabledOtherPurposePayment = "disabled";
                    string disabledOtherCategoryBusiness = "disabled";
                    string disabledOtherNationalities = "disabled";
                    string disabledOtherSourceFund = "disabled";
                    string disabledOtherSuppDocType = "disabled";
                    string disabledOtherBankCountry = "disabled";
                    if (paymentModeVal == "2")
                    {
                        disabledCheque = "";
                        disabledDepositAcc = "";
                    }
                    else if (paymentModeVal == "3")
                    {
                        disabledBankTranfer = "";
                        disabledDepositAcc = "";
                    }

                    string chequeNo = "";
                    if (!string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
                    {
                        chequeNo = form["Transaction_ChequeNo_" + rowId].ToString();
                    }

                    string depositAcc = "";
                    if (!string.IsNullOrEmpty(form["Transaction_DepositAccount_" + rowId]))
                    {
                        depositAcc = form["Transaction_DepositAccount_" + rowId].ToString();
                    }

                    Dropdown[] paymentBankDDL = PayBankDDL();
                    var depositAccDDL = new SelectList(paymentBankDDL, "val", "name", depositAcc);

                    string bankTransferNo = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
                    {
                        bankTransferNo = form["Transaction_BankTransferNo_" + rowId].ToString();
                    }

                    string amountPay = "";
                    if (!string.IsNullOrEmpty(form["Transaction_PayAmount_" + rowId]))
                    {
                        amountPay = form["Transaction_PayAmount_" + rowId].ToString();
                    }

                    string amountGet = "";
                    if (!string.IsNullOrEmpty(form["Transaction_GetAmount_" + rowId]))
                    {
                        amountGet = form["Transaction_GetAmount_" + rowId].ToString();
                    }

                    string transactionPayrate = "";
                    if (!string.IsNullOrEmpty(form["payrate_" + rowId]))
                    {
                        transactionPayrate = form["payrate_" + rowId].ToString();
                    }

                    string transactionCurrentPayrate = "";
                    if (product != null)
                    {
                        if (product.PayRate != null && product.PayRate > 0)
                        {
                            transactionCurrentPayrate = product.PayRate.ToString();

                        }
                        else
                        {
                            if (product.AutomatedPayRate != null && product.AutomatedPayRate > 0)
                                transactionCurrentPayrate = product.AutomatedPayRate.ToString();
                        }
                    }

                    string transactionGetrate = "";
                    if (!string.IsNullOrEmpty(form["getrate_" + rowId]))
                    {
                        transactionGetrate = form["getrate_" + rowId].ToString();
                    }

                    string gettransactionFees = "";
                    if (!string.IsNullOrEmpty(form["gettransactionFees_" + rowId]))
                    {
                        gettransactionFees = form["gettransactionFees_" + rowId].ToString();
                    }

                    string transactionFees = "";
                    if (!string.IsNullOrEmpty(form["Transaction_Fee_" + rowId]))
                    {
                        transactionFees = form["Transaction_Fee_" + rowId].ToString();
                    }

                    string payDecimalFormat = "";
                    if (!string.IsNullOrEmpty(form["payDecimalFormat_" + rowId]))
                    {
                        payDecimalFormat = form["payDecimalFormat_" + rowId].ToString();
                    }

                    string getDecimalFormat = "";
                    if (!string.IsNullOrEmpty(form["getDecimalFormat_" + rowId]))
                    {
                        getDecimalFormat = form["getDecimalFormat_" + rowId].ToString();
                    }

                    Dropdown[] beneficiaries = BeneficiariesDDL();
                    Dropdown[] docsuppList = SupportDocTypeDDL();
                    Dropdown[] countries = CountryDDL();
                    Dropdown[] paymentList = PurposePaymentDDL(0);
                    Dropdown[] fundList = SourceFundsDDL();
                    Dropdown[] nationalities = NationalityDDL();
                    Dropdown2[] BusinessCategoriesLists = BusinessCategoryDDL();
                    ViewData["BeneficiaryDropdown"] = new SelectList(beneficiaries, "val", "name");

                    string beneficiaryName = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryName_" + rowId]))
                    {
                        beneficiaryName = form["Transaction_BeneficiaryName_" + rowId].ToString();
                    }

                    string beneficiaryBankAcc = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankAccount_" + rowId]))
                    {
                        beneficiaryBankAcc = form["Transaction_BeneficiaryBankAccount_" + rowId].ToString();
                    }

                    string beneficiaryBankCode = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankCode_" + rowId]))
                    {
                        beneficiaryBankCode = form["Transaction_BeneficiaryBankCode_" + rowId].ToString();
                    }

                    string beneficiaryBankCountry = "";
                    string otherBankCountry = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankCountry_" + rowId]))
                    {
                        beneficiaryBankCountry = form["Transaction_BeneficiaryBankCountry_" + rowId].ToString();
                        if (Convert.ToInt32(form["Transaction_BeneficiaryBankCountry_" + rowId]) == 48)
                        {
                            disabledOtherBankCountry = "";
                            otherBankCountry = form["Transaction_OtherBankCountry_" + rowId].ToString();
                        }
                    }
                    var countriesDDL = new SelectList(countries, "val", "name", beneficiaryBankCountry);

                    string beneficiaryAddress = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankAddress_" + rowId]))
                    {
                        beneficiaryAddress = form["Transaction_BeneficiaryBankAddress_" + rowId].ToString();
                    }
                    string beneficiaryMainContact = "";
                    if (!string.IsNullOrEmpty(form["Transaction_ContactNoMain_" + rowId]))
                    {
                        beneficiaryMainContact = form["Transaction_ContactNoMain_" + rowId].ToString();
                    }

                    string beneficiaryMainAddress = "";
                    if (!string.IsNullOrEmpty(form["Transaction_AddressMain_" + rowId]))
                    {
                        beneficiaryMainAddress = form["Transaction_AddressMain_" + rowId].ToString();
                    }

                    string beneficiaryBankName = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankName_" + rowId]))
                    {
                        beneficiaryBankName = form["Transaction_BeneficiaryBankName_" + rowId].ToString();
                    }

                    string IBANEuropeBSBAustralia = "";
                    if (!string.IsNullOrEmpty(form["Transaction_IBANEuropeBSBAustralia_" + rowId]))
                    {
                        IBANEuropeBSBAustralia = form["Transaction_IBANEuropeBSBAustralia_" + rowId].ToString();
                    }
                    string beneficiaryType = "";
                    ViewData["IndividualRadio_" + rowId] = "";
                    ViewData["BusinessRadio_" + rowId] = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryType_" + rowId]))
                    {
                        beneficiaryType = form["Transaction_BeneficiaryType_" + rowId].ToString();

                        if (beneficiaryType == "individual")
                        {
                            ViewData["IndividualRadio_" + rowId] = "checked";
                            paymentList = PurposePaymentDDL(0);
                        }
                        else if (beneficiaryType == "business")
                        {
                            ViewData["BusinessRadio_" + rowId] = "checked";
                            paymentList = PurposePaymentDDL(1);
                        }
                    }

                    string beneficiaryPurposePayment = "";
                    string otherPurposePayment = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryPurposePayment_" + rowId]))
                    {
                        beneficiaryPurposePayment = form["Transaction_BeneficiaryPurposePayment_" + rowId].ToString();
                        if (Convert.ToInt32(form["Transaction_BeneficiaryPurposePayment_" + rowId]) == 52)
                        {
                            disabledOtherPurposePayment = "";
                            otherPurposePayment = form["Transaction_OtherPurposePayment_" + rowId].ToString();
                        }
                    }
                    var paymentListDDL = new SelectList(paymentList, "val", "name", beneficiaryPurposePayment);

                    string beneficiarySourceFund = "";
                    string otherSourceFund = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiarySourceFund_" + rowId]))
                    {
                        beneficiarySourceFund = form["Transaction_BeneficiarySourceFund_" + rowId].ToString();
                        if (Convert.ToInt32(form["Transaction_BeneficiarySourceFund_" + rowId]) == 20)
                        {
                            disabledOtherCategoryBusiness = "";
                            otherSourceFund = form["Transaction_OtherSourceFund_" + rowId].ToString();
                        }
                    }
                    var fundListDDL = new SelectList(fundList, "val", "name", beneficiarySourceFund);

                    string beneficiarySuppDocType = "";
                    string otherSuppDocType = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiarySupportDocType_" + rowId]))
                    {
                        beneficiarySuppDocType = form["Transaction_BeneficiarySupportDocType_" + rowId].ToString();
                        if (Convert.ToInt32(form["Transaction_BeneficiarySupportDocType_" + rowId]) == 11)
                        {
                            disabledOtherSuppDocType = "";
                            otherSuppDocType = form["Transaction_OtherSupportDocType_" + rowId].ToString();
                        }
                    }
                    var suppDocDDL = new SelectList(docsuppList, "val", "name", beneficiarySuppDocType);

                    string beneficiaryUploadSuporting = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadSuporting_" + rowId]))
                    {
                        beneficiaryUploadSuporting = form["Transaction_BeneficiaryUploadSuporting_" + rowId].ToString();
                    }

                    string beneficiaryIDPassport = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadIDPassport_" + rowId]))
                    {
                        beneficiaryIDPassport = form["Transaction_BeneficiaryUploadIDPassport_" + rowId].ToString();
                    }

                    string beneficiaryPaymentDetails = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryPaymentDetails_" + rowId]))
                    {
                        beneficiaryPaymentDetails = form["Transaction_BeneficiaryPaymentDetails_" + rowId].ToString();
                    }

                    string beneficiaryNationality = "";
                    string otherNationality = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryNationality_" + rowId]))
                    {
                        beneficiaryNationality = form["Transaction_BeneficiaryNationality_" + rowId].ToString();
                        if (Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]) == 201)
                        {
                            disabledOtherNationalities = "";
                            otherNationality = form["Transaction_OtherNationality_" + rowId].ToString();
                        }
                    }
                    var nationalitiesDDL = new SelectList(nationalities, "val", "name", beneficiaryNationality);

                    string beneficiaryCompanyRegistration = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryCompanyRegistration_" + rowId]))
                    {
                        beneficiaryCompanyRegistration = form["Transaction_BeneficiaryCompanyRegistration_" + rowId].ToString();
                    }

                    string beneficiaryCategoryBusiness = "";
                    string otherCategoryBusiness = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]))
                    {
                        beneficiaryCategoryBusiness = form["Transaction_BeneficiaryCategoryBusiness_" + rowId].ToString();
                        if (Convert.ToInt32(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]) == 331)
                        {
                            disabledOtherCategoryBusiness = "";
                            otherCategoryBusiness = form["Transaction_OtherCategoryBusiness_" + rowId].ToString();
                        }
                    }
                    var categoryBusinessDDL = new SelectList(BusinessCategoriesLists, "val", "name", dataGroupField: "group", beneficiaryCategoryBusiness);

                    string beneficiaryCompanyContact = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryCompanyContact_" + rowId]))
                    {
                        beneficiaryCompanyContact = form["Transaction_BeneficiaryCompanyContact_" + rowId].ToString();
                    }


                    string totalCalculatedForeign = "0.00";
                    string remainingForeign = "0.00";
                    string totalOrderForeign = "0.00";

                    transactionData.RowId = rowId.ToString();
                    transactionData.ID = Convert.ToInt32(roid);
                    transactionData.transactionID = transactionID;
                    transactionData.PayAmount = amountPay;
                    transactionData.BankTransferNo = bankTransferNo;
                    transactionData.ChequeNo = chequeNo;
                    //transactionData.PayCurrency = currencyFormat;
                    transactionData.payDecimalFormat = currencyFormat;
                    transactionData.PayCurrencyDDL = payCurrencyDDL;
                    transactionData.GetCurrencyDDL = getCurrencyDDL;
                    transactionData.PayPaymentModeDDL = paymentModeDDL;
                    transactionData.GetPaymentModeDDL = getpaymentModeDDL;
                    transactionData.DepositAccountDDL = depositAccDDL;
                    transactionData.countriesDDL = countriesDDL;
                    transactionData.fundListDDL = fundListDDL;
                    transactionData.nationalitiesDDL = nationalitiesDDL;
                    transactionData.paymentListDDL = paymentListDDL;
                    transactionData.suppDocDDL = suppDocDDL;
                    transactionData.categoryBusinessDDL = categoryBusinessDDL;
                    transactionData.PayDepositAccount = depositAcc;
                    transactionData.DisabledDepositAccount = disabledDepositAcc;
                    transactionData.PayPaymentType = paymentModeVal;
                    transactionData.Rate = rate;
                    transactionData.GetAmount = amountGet;
                    //transactionData.GetCurrency = getcurrencyFormat;
                    transactionData.getDecimalFormat = getcurrencyFormat;
                    transactionData.GetPaymentType = chequeNo;
                    transactionData.DisabledBankTransferNo = disabledBankTranfer;
                    transactionData.DisabledChequeNo = disabledCheque;
                    transactionData.transactionPayrate = transactionPayrate;
                    transactionData.transactionGetrate = transactionGetrate;
                    transactionData.gettransactionFees = gettransactionFees;
                    transactionData.transactionFees = transactionFees;
                    transactionData.BeneficiaryBankAccountNo = beneficiaryBankAcc;
                    transactionData.BeneficiaryBankAddress = beneficiaryAddress;
                    transactionData.BeneficiaryBankCode = beneficiaryBankCode;
                    transactionData.BeneficiaryBankCountry = beneficiaryBankCountry;
                    transactionData.BeneficiaryCategoryOfBusiness = beneficiaryCategoryBusiness;
                    transactionData.BeneficiaryCompanyContactNo = beneficiaryCompanyContact;
                    transactionData.BeneficiaryCompanyRegistrationNo = beneficiaryCompanyRegistration;
                    transactionData.BeneficiaryFullName = beneficiaryName;
                    transactionData.BeneficiaryNationality = beneficiaryNationality;
                    transactionData.BeneficiaryPaymentDetails = beneficiaryPaymentDetails;
                    transactionData.BeneficiaryPurposeOfPayment = beneficiaryPurposePayment;
                    transactionData.BeneficiarySourceOfPayment = beneficiarySourceFund;
                    transactionData.BeneficiaryType = beneficiaryType;
                    transactionData.BankTransferNo = bankTransferNo;
                    transactionData.BeneficiaryUploadSupportingFile = beneficiaryUploadSuporting;
                    transactionData.BeneficiaryUploadSupportingType = beneficiarySuppDocType;
                    transactionData.BeneficiaryContactNoMain = beneficiaryMainContact;
                    transactionData.BeneficiaryAddressMain = beneficiaryMainAddress;
                    transactionData.BeneficiaryBankName = beneficiaryBankName;
                    transactionData.IBANEuropeBSBAustralia = IBANEuropeBSBAustralia;
                    transactionData.BankCountryIfOthers = otherBankCountry;
                    transactionData.disabledBankCountryIfOthers = disabledOtherBankCountry;
                    transactionData.BeneficiaryNationalityIfOthers = otherNationality;
                    transactionData.disabledBeneficiaryNationalityIfOthers = disabledOtherNationalities;
                    transactionData.BeneficiaryBusinessCategoryIfOthers = otherCategoryBusiness;
                    transactionData.disabledBeneficiaryBusinessCategoryIfOthers = disabledOtherCategoryBusiness;
                    transactionData.PurposeOfPaymentIfOthers = otherPurposePayment;
                    transactionData.disabledPurposeOfPaymentIfOthers = disabledOtherPurposePayment;
                    transactionData.SourceOfPaymentIfOthers = otherSourceFund;
                    transactionData.disabledSourceOfPaymentIfOthers = disabledOtherSourceFund;
                    transactionData.UploadSupportingTypeIfOthers = otherSuppDocType;
                    transactionData.disabledUploadSupportingTypeIfOthers = disabledOtherSuppDocType;
                    transactionData.BeneficiaryUploadIDCopy = beneficiaryIDPassport;
                    transactionData.currentPayRate = transactionCurrentPayrate;

                    transactions.Add(transactionData);
                }

                ViewData["SaleTransactionsData"] = transactions;

                ViewData["TotalForeign"] = totalForeign.ToString(GetRateFormat(8));
                ViewData["TotalLocal"] = totalLocal.ToString(payFormat);
                ViewData["PaySymbol"] = paySymbol;
                ViewData["Sale"] = sales;
                ViewData["SaleId"] = sales.ID;
                ViewData["PendingApproval"] = "No";
                if (sales.Status == "Pending GM Approval" || sales.Status == "Pending Delete GM Approval")
                {
                    ViewData["PendingApproval"] = "Yes";
                }
                ViewData["SaleTransactionType"] = "Remittance";
                ViewData["Module"] = module;

                ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
                return View();
                #endregion
            }
            else if (oldData.Status == "Pending Customer")
            {
                #region Pending Customer

                foreach (string modelKey in ModelState.Keys)
                {
                    if (ModelState[modelKey].Errors.Count > 0)
                    {
                        ModelState[modelKey].Errors.Clear();
                    }
                }

                if (!string.IsNullOrEmpty(sales.Remarks))
                {
                    if (sales.Remarks.Length > 255)
                    {
                        ModelState.AddModelError("sales.Remarks", "Remarks cannot exceed 255 characters.");
                    }
                }

                if (!string.IsNullOrEmpty(form["sales.CostPrice"].ToString()))
                {
                    bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.CostPrice"].ToString());

                    if (!checkFormat)
                    {
                        ModelState.AddModelError("sales.CostPrice", "Cost Price is not valid.");
                    }
                    else
                    {
                        var split = form["sales.CostPrice"].ToString().Split('.');
                        if (split.Length > 1)
                        {
                            var getDecimalPoint = split[1].Length;
                            if (getDecimalPoint > 2)
                            {
                                ModelState.AddModelError("sales.CostPrice", "Cost Price only allow two decimal points.");
                            }
                        }
                    }
                }

                if (!string.IsNullOrEmpty(form["sales.AgentFee"].ToString()))
                {
                    bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.AgentFee"].ToString());

                    if (!checkFormat)
                    {
                        ModelState.AddModelError("sales.AgentFee", "Agent Fee is not valid.");
                    }
                    else
                    {
                        var split = form["sales.AgentFee"].ToString().Split('.');
                        if (split.Length > 1)
                        {
                            var getDecimalPoint = split[1].Length;
                            if (getDecimalPoint > 2)
                            {
                                ModelState.AddModelError("sales.AgentFee", "Agent Fee only allow two decimal points.");
                            }
                        }
                    }
                }

                if (!string.IsNullOrEmpty(form["sales.AgentRate"].ToString()))
                {
                    bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.AgentRate"].ToString());

                    if (!checkFormat)
                    {
                        ModelState.AddModelError("sales.AgentRate", "Agent Rate is not valid.");
                    }
                    else
                    {
                        var split = form["sales.AgentRate"].ToString().Split('.');
                        if (split.Length > 1)
                        {
                            var getDecimalPoint = split[1].Length;
                            if (getDecimalPoint > 12)
                            {
                                ModelState.AddModelError("sales.AgentRate", "Agent Rate only allow twelve decimal points.");
                            }
                        }
                    }
                }

                sales.ID = oldData.ID;
                sales.MemoID = oldData.MemoID;
                sales.CustomerParticularId = oldData.CustomerParticularId;
                sales.IssueDate = oldData.IssueDate;
                sales.CreatedBy = oldData.CreatedBy;
                sales.IsUrgent = oldData.IsUrgent;
                sales.CustomerRemarks = oldData.CustomerRemarks;
                sales.Status = oldData.Status;
                sales.RemittanceOders = oldData.RemittanceOders;
                sales.Address1 = oldData.Address1;
                sales.Address2 = oldData.Address2;
                sales.Address3 = oldData.Address3;
                sales.ContactNo = oldData.ContactNo;
                sales.CreatedFrom = oldData.CreatedFrom;
                sales.CreatedOn = oldData.CreatedOn;
                sales.IsDeleted = oldData.IsDeleted;
                sales.LastApprovalOn = oldData.LastApprovalOn;
                sales.TotalGetAmount = oldData.TotalGetAmount;
                sales.TotalPayAmount = oldData.TotalPayAmount;
                sales.ShippingAddress1 = oldData.ShippingAddress1;
                sales.ShippingAddress2 = oldData.ShippingAddress2;
                sales.ShippingAddress3 = oldData.ShippingAddress3;
                sales.UpdatedOn = oldData.UpdatedOn;

                List<string> transactionKeys = form.AllKeys.Where(e => e.Contains("Transaction_ID_")).ToList();
                decimal totalGet = 0;
                decimal totalPay = 0;
                foreach (string key in transactionKeys)
                {
                    string rowId = key.Split('_')[2];

                    if (string.IsNullOrEmpty(form["Transaction_Type_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_Type_" + rowId, "Type is required!");
                    }

                    if (string.IsNullOrEmpty(form["Transaction_PayCurrency_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_PayCurrency_" + rowId, "Currency is required!");
                    }
                    else
                    {
                        RemittanceProducts currency = _remittanceproductsModel.GetSingle(Convert.ToInt32(form["Transaction_PayCurrency_" + rowId]));

                        if (currency == null)
                        {
                            ModelState.AddModelError("Transaction_PayCurrency_" + rowId, "Currency record not found!");
                        }
                    }

                    if (string.IsNullOrEmpty(form["Transaction_GetCurrency_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_GetCurrency_" + rowId, "Currency is required!");
                    }
                    else
                    {
                        RemittanceProducts currency = _remittanceproductsModel.GetSingle(Convert.ToInt32(form["Transaction_GetCurrency_" + rowId]));

                        if (currency == null)
                        {
                            ModelState.AddModelError("Transaction_GetCurrency_" + rowId, "Currency record not found!");
                        }
                    }

                    if (string.IsNullOrEmpty(form["Transaction_PayAmount_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_PayAmount_" + rowId, "Amount (Pay) is required!");
                    }
                    else
                    {
                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_PayAmount_" + rowId]);

                        if (!checkAmountLocalFormat)
                        {
                            ModelState.AddModelError("Transaction_PayAmount_" + rowId, "Amount (Pay) is not valid!");
                        }
                        else
                        {
                            totalPay += Convert.ToDecimal(form["Transaction_PayAmount_" + rowId]);
                        }
                    }

                    if (string.IsNullOrEmpty(form["Transaction_GetAmount_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_GetAmount_" + rowId, "Amount (Get) is required!");
                    }
                    else
                    {
                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_GetAmount_" + rowId]);

                        if (!checkAmountLocalFormat)
                        {
                            ModelState.AddModelError("Transaction_GetAmount_" + rowId, "Amount (Get) is not valid!");
                        }
                        else
                        {
                            totalGet += Convert.ToDecimal(form["Transaction_GetAmount_" + rowId]);
                        }
                    }

                    if (string.IsNullOrEmpty(form["Transaction_PayPaymentType_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_PayPaymentType_" + rowId, "Payment Type is not valid!");
                    }
                    else
                    {
                        if (form["Transaction_PayPaymentType_" + rowId].ToString() == "2")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_ChequeNo_" + rowId, "Cheque No. is required!");
                            }
                            else
                            {
                                //if (sales.TransactionType == "Buy")
                                //{
                                //    ViewData["PendingChequeLog"] = 1;
                                //}
                            }
                            if (string.IsNullOrEmpty(form["Transaction_DepositAccount_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_DepositAccount_" + rowId, "Deposit Account is required!");
                            }
                        }
                        else if (form["Transaction_PayPaymentType_" + rowId].ToString() == "3")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_BankTransferNo_" + rowId, "Bank Transfer No. is required!");
                            }
                            else
                            {
                                //if (sales.TransactionType == "Buy")
                                //{
                                //    ViewData["PendingBankTransferLog"] = 1;
                                //}
                            }
                            if (string.IsNullOrEmpty(form["Transaction_DepositAccount_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_DepositAccount_" + rowId, "Deposit Account is required!");
                            }
                        }
                    }

                    if (string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is required!");
                    }
                    else
                    {
                        bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                        if (checkRateFormat)
                        {
                            //if (sales.CustomerParticularId > 0 && !string.IsNullOrEmpty(form["Transaction_PayCurrency_" + rowId]))
                            //{
                            //    RemittanceProducts product = _remittanceproductsModel.GetSingle(Convert.ToInt32(form["Transaction_PayCurrency_" + rowId]));
                            //    decimal buyRate = 0;
                            //    decimal acceptable = product.AcceptableRange;

                            //    if (acceptable > 0)
                            //    {
                            //        if (product.PayRate != null)
                            //        {
                            //            buyRate = Convert.ToDecimal(product.PayRate);
                            //        }
                            //        else
                            //        {
                            //            buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                            //        }

                            //        decimal upperLimit = buyRate * (1 + acceptable / 100);
                            //        decimal lowerLimit = buyRate * (1 - acceptable / 100);
                            //        decimal rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);

                            //        if (rate < lowerLimit || rate > upperLimit)
                            //        {
                            //            ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is out of acceptable range!");
                            //        }
                            //    }
                            //}
                        }
                        else
                        {
                            ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is not valid!");
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_Fee_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_Fee_" + rowId, "Transaction fee is required!");
                    }
                    else
                    {
                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Fee_" + rowId]);

                        if (!checkAmountLocalFormat)
                        {
                            ModelState.AddModelError("Transaction_Fee_" + rowId, "Transaction Fee is not valid!");
                        }
                    }
                    bool beneficiaryForm = false;
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryName_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryName_" + rowId, "Full name is required!");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_BeneficiaryName_" + rowId].Length > 255)
                        {
                            ModelState.AddModelError("Transaction_BeneficiaryName_" + rowId, "Full name cannot more than 255 words!");
                            beneficiaryForm = true;
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryBankAccount_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryBankAccount_" + rowId, "Bank Account is required!");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_BeneficiaryBankAccount_" + rowId].Length > 100)
                        {
                            ModelState.AddModelError("Transaction_BeneficiaryBankAccount_" + rowId, "Bank Account cannot more than 100 words!");
                            beneficiaryForm = true;
                        }
                    }
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankCode_" + rowId]))
                    {
                        if (form["Transaction_BeneficiaryBankCode_" + rowId].Length > 100)
                        {
                            ModelState.AddModelError("Transaction_BeneficiaryBankCode_" + rowId, "Bank code cannot more than 100 words!");
                            beneficiaryForm = true;
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_ContactNoMain_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_ContactNoMain_" + rowId, "Contact No is required!");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_ContactNoMain_" + rowId].Length > 100)
                        {
                            ModelState.AddModelError("Transaction_ContactNoMain_" + rowId, "Contact No cannot more than 100 words!");
                            beneficiaryForm = true;
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_AddressMain_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_AddressMain_" + rowId, "Address is required!");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_AddressMain_" + rowId].Length > 255)
                        {
                            ModelState.AddModelError("Transaction_AddressMain_" + rowId, "Address cannot more than 255 words!");
                            beneficiaryForm = true;
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryBankName_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryBankName_" + rowId, "Bank Name is required!");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_BeneficiaryBankName_" + rowId].Length > 100)
                        {
                            ModelState.AddModelError("Transaction_BeneficiaryBankName_" + rowId, "Bank Name cannot more than 100 words!");
                            beneficiaryForm = true;
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryBankCountry_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryBankCountry_" + rowId, "Bank country is required!");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (Convert.ToInt32(form["Transaction_BeneficiaryBankCountry_" + rowId]) == 48)
                        {
                            if (string.IsNullOrEmpty(form["Transaction_OtherBankCountry_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_OtherBankCountry_" + rowId, "Other Bank country is required!");
                                beneficiaryForm = true;
                            }
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryBankAddress_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryBankAddress_" + rowId, "Bank address is required!");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_BeneficiaryBankAddress_" + rowId].Length > 255)
                        {
                            ModelState.AddModelError("Transaction_BeneficiaryBankAddress_" + rowId, "Bank address cannot more than 255 words!");
                            beneficiaryForm = true;
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryPurposePayment_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryPurposePayment_" + rowId, "Purpose of payment is required!");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (Convert.ToInt32(form["Transaction_BeneficiaryPurposePayment_" + rowId]) == 52)
                        {
                            if (string.IsNullOrEmpty(form["Transaction_OtherPurposePayment_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_OtherPurposePayment_" + rowId, "Other purpose of payment is required!");
                                beneficiaryForm = true;
                            }
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiarySourceFund_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiarySourceFund_" + rowId, "Source of funds is required!");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (Convert.ToInt32(form["Transaction_BeneficiarySourceFund_" + rowId]) == 20)
                        {
                            if (string.IsNullOrEmpty(form["Transaction_OtherSourceFund_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_OtherSourceFund_" + rowId, "Other source of fund is required!");
                                beneficiaryForm = true;
                            }
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryPaymentDetails_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryPaymentDetails_" + rowId, "Payment Details / Instructions is required!");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_BeneficiaryPaymentDetails_" + rowId].Length > 255)
                        {
                            ModelState.AddModelError("Transaction_BeneficiaryPaymentDetails_" + rowId, "Payment Details / Instructions cannot more than 255 words!");
                            beneficiaryForm = true;
                        }
                    }
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiarySupportDocType_" + rowId]))
                    {
                        if (form["Transaction_BeneficiarySupportDocType_" + rowId].ToString() != "0")
                        {
                            //if (string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadSuporting_" + rowId].ToString()))
                            //{
                            //    ModelState.AddModelError("Transaction_BeneficiaryUploadSuporting_" + rowId, "Upload Supporting is required!");
                            //    beneficiaryForm = true;
                            //}
                        }
                        if (Convert.ToInt32(form["Transaction_BeneficiarySupportDocType_" + rowId]) == 11)
                        {
                            if (string.IsNullOrEmpty(form["Transaction_OtherSupportDocType_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_OtherSupportDocType_" + rowId, "Other upload supporting is required!");
                                beneficiaryForm = true;
                            }
                        }
                    }
                    if (string.IsNullOrEmpty(form["Transaction_BeneficiaryType_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryType_" + rowId, "Beneficiary type is required!");
                        beneficiaryForm = true;
                    }
                    else
                    {
                        if (form["Transaction_BeneficiaryType_" + rowId].ToString() == "individual")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_BeneficiaryNationality_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_BeneficiaryNationality_" + rowId, "Nationality is required!");
                                beneficiaryForm = true;
                            }
                            else
                            {
                                if (Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]) == 201)
                                {
                                    if (string.IsNullOrEmpty(form["Transaction_OtherNationality_" + rowId]))
                                    {
                                        ModelState.AddModelError("Transaction_OtherNationality_" + rowId, "Other nationality is required!");
                                        beneficiaryForm = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (string.IsNullOrEmpty(form["Transaction_BeneficiaryCompanyRegistration_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_BeneficiaryCompanyRegistration_" + rowId, "Company registration no is required!");
                                beneficiaryForm = true;
                            }
                            else
                            {
                                if (form["Transaction_BeneficiaryCompanyRegistration_" + rowId].Length > 100)
                                {
                                    ModelState.AddModelError("Transaction_BeneficiaryCompanyRegistration_" + rowId, "Company registration no cannot more than 100 words!");
                                    beneficiaryForm = true;
                                }
                            }
                            if (string.IsNullOrEmpty(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_BeneficiaryCategoryBusiness_" + rowId, "Category of business is required!");
                                beneficiaryForm = true;
                            }
                            else
                            {
                                if (Convert.ToInt32(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]) == 331)
                                {
                                    if (string.IsNullOrEmpty(form["Transaction_OtherCategoryBusiness_" + rowId]))
                                    {
                                        ModelState.AddModelError("Transaction_OtherCategoryBusiness_" + rowId, "Other category of business is required!");
                                        beneficiaryForm = true;
                                    }
                                }
                            }
                            if (string.IsNullOrEmpty(form["Transaction_BeneficiaryCompanyContact_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_BeneficiaryCompanyContact_" + rowId, "Company contact no is required!");
                                beneficiaryForm = true;
                            }
                            else
                            {
                                if (form["Transaction_BeneficiaryCompanyContact_" + rowId].Length > 100)
                                {
                                    ModelState.AddModelError("Transaction_BeneficiaryCompanyContact_" + rowId, "Company contact no cannot more than 100 words!");
                                    beneficiaryForm = true;
                                }
                            }
                        }
                    }
                    if (beneficiaryForm)
                    {
                        ModelState.AddModelError("Transaction_BeneficiaryForm_" + rowId, "Beneficiary Form is not valid!");
                    }


                }

                if (ModelState.IsValid)
                {
                    try
                    {
                        //if (sales.TransactionType == "Buy" || sales.TransactionType == "Sell")
                        //{
                        //    sales.LocalPaymentMode = form["sales.LocalPaymentMode"].ToString();
                        //}

                        if (SubmitType != "SaveChanges")
                        {
                            sales.Status = "Completed";
                            sales.LastApprovalOn = DateTime.Now;
                            sales.UpdatedOn = DateTime.Now;
                        }
                        sales.Remarks = form["sales.Remarks"];
                        sales.CostPrice = Convert.ToDecimal(form["sales.CostPrice"]);
                        if (!string.IsNullOrEmpty(form["sales.AgentFee"]))
                        {
                            sales.AgentFee = Convert.ToDecimal(form["sales.AgentFee"]);
                        }
                        else
                        {
                            sales.AgentFee = 0;
                        }
                        if (!string.IsNullOrEmpty(form["sales.AgentFee"]))
                        {
                            sales.AgentRate = Convert.ToDecimal(form["sales.AgentRate"]);
                        }
                        else
                        {
                            sales.AgentRate = 0;
                        }
                        var agentId = 0;
                        if (!string.IsNullOrEmpty(form["AgentId"].ToString()))
                        {
                            agentId = Convert.ToInt32(form["AgentId"]);
                        }
                        sales.AgentId = agentId;
                        sales.TotalPayAmount = totalPay;
                        sales.TotalGetAmount = totalGet;
                        bool result = _remittancesalesModel.Update(sales.ID, sales);

                        if (result)
                        {
                            //Update Transaction Payment Mode
                            bool hasUpdateTransaction = false;

                            bool add_productInventory = false;
                            bool deduct_productInventory = false;

                            bool add_inventory = false;
                            bool deduct_inventory = false;

                            foreach (string key in transactionKeys)
                            {
                                string rowId = key.Split('_')[2];

                                int transactionId = Convert.ToInt32(form["Transaction_TransactionId_" + rowId]);

                                RemittanceOrders oldTransaction = _remittanceordersModel.GetSingle(transactionId);

                                rollBack_saleTransactions.Add(oldTransaction.ID, new RemittanceOrders()
                                {
                                    ID = oldTransaction.ID,
                                    RemittanceId = oldTransaction.RemittanceId,
                                    PayAmount = oldTransaction.PayAmount,
                                    GetAmount = oldTransaction.GetAmount,
                                    GetCurrency = oldTransaction.GetCurrency,
                                    PayCurrency = oldTransaction.PayCurrency,
                                    GetPaymentType = oldTransaction.GetPaymentType,
                                    PayPaymentType = oldTransaction.PayPaymentType,
                                    PayDepositAccount = oldTransaction.PayDepositAccount,
                                    ChequeNo = oldTransaction.ChequeNo,
                                    Fee = oldTransaction.Fee,
                                    Rate = oldTransaction.Rate,
                                    BeneficiaryBankAccountNo = oldTransaction.BeneficiaryBankAccountNo,
                                    BeneficiaryBankAddress = oldTransaction.BeneficiaryBankAddress,
                                    BankTransferNo = oldTransaction.BankTransferNo,
                                    BeneficiaryBankCountry = oldTransaction.BeneficiaryBankCountry,
                                    BeneficiaryCategoryOfBusiness = oldTransaction.BeneficiaryCategoryOfBusiness,
                                    BeneficiaryCompanyContactNo = oldTransaction.BeneficiaryCompanyContactNo,
                                    BeneficiaryCompanyRegistrationNo = oldTransaction.BeneficiaryCompanyRegistrationNo,
                                    BeneficiaryFullName = oldTransaction.BankTransferNo,
                                    BeneficiaryNationality = oldTransaction.BeneficiaryNationality,
                                    BeneficiaryPurposeOfPayment = oldTransaction.BeneficiaryPurposeOfPayment,
                                    BeneficiaryPaymentDetails = oldTransaction.BeneficiaryPaymentDetails,
                                    BeneficiarySourceOfPayment = oldTransaction.BeneficiarySourceOfPayment,
                                    BeneficiaryType = oldTransaction.BeneficiaryType,
                                    BeneficiaryUploadSupportingFile = oldTransaction.BeneficiaryUploadSupportingFile,
                                    BeneficiaryUploadSupportingType = oldTransaction.BeneficiaryUploadSupportingType,
                                    BeneficiaryBankCode = oldTransaction.BeneficiaryBankCode,
                                    BeneficiaryContactNoMain = oldTransaction.BeneficiaryContactNoMain,
                                    BeneficiaryAddressMain = oldTransaction.BeneficiaryAddressMain,
                                    BeneficiaryBankName = oldTransaction.BeneficiaryBankName,
                                    IBANEuropeBSBAustralia = oldTransaction.IBANEuropeBSBAustralia,
                                    BankCountryIfOthers = oldTransaction.BankCountryIfOthers,
                                    BeneficiaryBusinessCategoryIfOthers = oldTransaction.BeneficiaryBusinessCategoryIfOthers,
                                    BeneficiaryNationalityIfOthers = oldTransaction.BeneficiaryNationalityIfOthers,
                                    PurposeOfPaymentIfOthers = oldTransaction.PurposeOfPaymentIfOthers,
                                    SourceOfPaymentIfOthers = oldTransaction.SourceOfPaymentIfOthers,
                                    UploadSupportingTypeIfOthers = oldTransaction.UploadSupportingTypeIfOthers,
                                    BeneficiaryUploadIDCopy = oldTransaction.BeneficiaryUploadIDCopy,
                                    currentPayRate = oldTransaction.currentPayRate
                                });
                                var getPayProduct = _remittanceproductsModel.GetSingle(Convert.ToInt32(form["Transaction_PayCurrency_" + rowId]));
                                if (getPayProduct != null)
                                {
                                    bool updateCurrentPayrate = false;
                                    if (oldTransaction.PayAmount != Convert.ToDecimal(form["Transaction_PayAmount_" + rowId].ToString()))
                                    {
                                        updateCurrentPayrate = true;
                                    }
                                    if (oldTransaction.GetAmount != Convert.ToDecimal(form["Transaction_GetAmount_" + rowId].ToString()))
                                    {
                                        updateCurrentPayrate = true;
                                    }
                                    if (oldTransaction.PayCurrency != Convert.ToInt32(form["Transaction_PayCurrency_" + rowId].ToString()))
                                    {
                                        updateCurrentPayrate = true;
                                    }
                                    if (oldTransaction.GetCurrency != Convert.ToInt32(form["Transaction_GetCurrency_" + rowId].ToString()))
                                    {
                                        updateCurrentPayrate = true;
                                    }
                                    if (oldTransaction.Rate != Convert.ToDecimal(form["Transaction_Rate_" + rowId].ToString()))
                                    {
                                        updateCurrentPayrate = true;
                                    }
                                    if (oldTransaction.Fee != Convert.ToDecimal(form["Transaction_Fee_" + rowId].ToString()))
                                    {
                                        updateCurrentPayrate = true;
                                    }

                                    if (updateCurrentPayrate)
                                    {
                                        if (getPayProduct.PayRate != null && getPayProduct.PayRate > 0)
                                        {
                                            oldTransaction.currentPayRate = getPayProduct.PayRate ?? 0;
                                        }
                                        else
                                        {
                                            if (getPayProduct.AutomatedPayRate != null && getPayProduct.AutomatedPayRate > 0)
                                                oldTransaction.currentPayRate = getPayProduct.AutomatedPayRate ?? 0;
                                        }
                                    }
                                }
                                //oldTransaction.currentPayRate = Convert.ToDecimal(form["payRate_" + rowId]);
                                oldTransaction.PayPaymentType = form["Transaction_PayPaymentType_" + rowId].ToString();
                                oldTransaction.PayAmount = Convert.ToDecimal(form["Transaction_PayAmount_" + rowId].ToString());
                                oldTransaction.GetAmount = Convert.ToDecimal(form["Transaction_GetAmount_" + rowId].ToString());
                                oldTransaction.PayCurrency = Convert.ToInt32(form["Transaction_PayCurrency_" + rowId].ToString());
                                oldTransaction.GetCurrency = Convert.ToInt32(form["Transaction_GetCurrency_" + rowId].ToString());
                                oldTransaction.Rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId].ToString());
                                oldTransaction.Fee = Convert.ToDecimal(form["Transaction_Fee_" + rowId].ToString());
                                oldTransaction.BeneficiaryBankAccountNo = form["Transaction_BeneficiaryBankAccount_" + rowId].ToString();
                                oldTransaction.BeneficiaryBankAddress = form["Transaction_BeneficiaryBankAddress_" + rowId].ToString();
                                oldTransaction.BeneficiaryBankCode = form["Transaction_BeneficiaryBankCode_" + rowId].ToString();
                                oldTransaction.BeneficiaryContactNoMain = form["Transaction_ContactNoMain_" + rowId].ToString();
                                oldTransaction.BeneficiaryAddressMain = form["Transaction_AddressMain_" + rowId].ToString();
                                oldTransaction.BeneficiaryBankName = form["Transaction_BeneficiaryBankName_" + rowId].ToString();
                                oldTransaction.IBANEuropeBSBAustralia = form["Transaction_IBANEuropeBSBAustralia_" + rowId].ToString();
                                oldTransaction.BeneficiaryBankCountry = Convert.ToInt32(form["Transaction_BeneficiaryBankCountry_" + rowId]);

                                if (Convert.ToInt32(form["Transaction_BeneficiaryBankCountry_" + rowId]) == 48)
                                {
                                    oldTransaction.BankCountryIfOthers = form["Transaction_OtherBankCountry_" + rowId].ToString();
                                }
                                if (form["Transaction_BeneficiaryType_" + rowId].ToString() == "business")
                                {
                                    oldTransaction.BeneficiaryCategoryOfBusiness = Convert.ToInt32(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]);
                                    if (Convert.ToInt32(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]) == 331)
                                    {
                                        oldTransaction.BeneficiaryBusinessCategoryIfOthers = form["Transaction_OtherCategoryBusiness_" + rowId].ToString();
                                    }
                                    oldTransaction.BeneficiaryCompanyContactNo = form["Transaction_BeneficiaryCompanyContact_" + rowId].ToString();
                                    oldTransaction.BeneficiaryCompanyRegistrationNo = form["Transaction_BeneficiaryCompanyRegistration_" + rowId].ToString();
                                    oldTransaction.BeneficiaryNationality = Convert.ToInt32(form["Transaction_BeneficiaryCategoryOfBusiness_" + rowId]);
                                }
                                else
                                {
                                    oldTransaction.BeneficiaryNationality = Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]);
                                    if (Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]) == 201)
                                    {
                                        oldTransaction.BeneficiaryNationalityIfOthers = form["Transaction_OtherNationality_" + rowId].ToString();
                                    }
                                    oldTransaction.BeneficiaryCategoryOfBusiness = Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]);
                                    oldTransaction.BeneficiaryCompanyContactNo = "";
                                    oldTransaction.BeneficiaryCompanyRegistrationNo = "";
                                }
                                oldTransaction.BeneficiaryFullName = form["Transaction_BeneficiaryName_" + rowId].ToString();
                                oldTransaction.BeneficiaryPaymentDetails = form["Transaction_BeneficiaryPaymentDetails_" + rowId].ToString();
                                oldTransaction.BeneficiaryPurposeOfPayment = Convert.ToInt32(form["Transaction_BeneficiaryPurposePayment_" + rowId]);
                                if (Convert.ToInt32(form["Transaction_BeneficiaryPurposePayment_" + rowId]) == 52)
                                {
                                    oldTransaction.PurposeOfPaymentIfOthers = form["Transaction_OtherPurposePayment_" + rowId].ToString();
                                }
                                oldTransaction.BeneficiarySourceOfPayment = Convert.ToInt32(form["Transaction_BeneficiarySourceFund_" + rowId]);
                                if (Convert.ToInt32(form["Transaction_BeneficiarySourceFund_" + rowId]) == 20)
                                {
                                    oldTransaction.SourceOfPaymentIfOthers = form["Transaction_OtherSourceFund_" + rowId].ToString();
                                }
                                oldTransaction.BeneficiaryType = form["Transaction_BeneficiaryType_" + rowId].ToString();
                                if (string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadSuporting_" + rowId]))
                                {
                                    oldTransaction.BeneficiaryUploadSupportingFile = "";
                                }
                                else
                                {
                                    oldTransaction.BeneficiaryUploadSupportingFile = form["Transaction_BeneficiaryUploadSuporting_" + rowId].ToString();
                                }
                                if (string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadIDPassport_" + rowId]))
                                {
                                    oldTransaction.BeneficiaryUploadIDCopy = "";
                                }
                                else
                                {
                                    oldTransaction.BeneficiaryUploadIDCopy = form["Transaction_BeneficiaryUploadIDPassport_" + rowId].ToString();
                                }
                                oldTransaction.BeneficiaryUploadSupportingType = Convert.ToInt32(form["Transaction_BeneficiarySupportDocType_" + rowId]);
                                if (Convert.ToInt32(form["Transaction_BeneficiarySupportDocType_" + rowId]) == 11)
                                {
                                    oldTransaction.UploadSupportingTypeIfOthers = form["Transaction_OtherSupportDocType_" + rowId].ToString();
                                }
                                oldTransaction.PayPaymentType = form["Transaction_PayPaymentType_" + rowId].ToString();
                                if (oldTransaction.PayPaymentType == "1")
                                {
                                    oldTransaction.ChequeNo = null;
                                    oldTransaction.BankTransferNo = null;
                                }
                                else if (oldTransaction.PayPaymentType == "2")
                                {
                                    oldTransaction.ChequeNo = form["Transaction_ChequeNo_" + rowId].ToString();
                                    oldTransaction.BankTransferNo = null;
                                }
                                else if (oldTransaction.PayPaymentType == "3")
                                {
                                    oldTransaction.ChequeNo = null;
                                    oldTransaction.BankTransferNo = form["Transaction_BankTransferNo_" + rowId].ToString();
                                }

                                bool transaction_update_result = _remittanceordersModel.Update(oldTransaction.ID, oldTransaction);

                                if (transaction_update_result)
                                {
                                    if (!string.IsNullOrEmpty(oldTransaction.BeneficiaryUploadSupportingFile))
                                    {
                                        string[] supportDocFile = oldTransaction.BeneficiaryUploadSupportingFile.Split(',');

                                        foreach (string file in supportDocFile)
                                        {
                                            string sourceFile = "";
                                            string destinationFile = "";
                                            if (sales.CreatedFrom == "Admin")
                                            {
                                                sourceFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), file);
                                                destinationFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["BeneficiarySupportDocumentsFolder"].ToString()), file);
                                            }
                                            else
                                            {
                                                sourceFile = ConfigurationManager.AppSettings["SharedNetworkTempFolder"].ToString() + file;//Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["SharedNetworkTempFolder"].ToString()), file);
                                                destinationFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["BeneficiarySupportDocumentsFolder"].ToString()), file);
                                            }

                                            if (!string.IsNullOrEmpty(sourceFile) && !string.IsNullOrEmpty(destinationFile))
                                            {
                                                if (System.IO.File.Exists(sourceFile))
                                                {
                                                    System.IO.File.Move(sourceFile, destinationFile);
                                                }
                                            }
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(oldTransaction.BeneficiaryUploadIDCopy))
                                    {
                                        string[] supportDocFile = oldTransaction.BeneficiaryUploadIDCopy.Split(',');

                                        foreach (string file in supportDocFile)
                                        {
                                            string sourceFile = "";
                                            string destinationFile = "";
                                            if (sales.CreatedFrom == "Admin")
                                            {
                                                sourceFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), file);
                                                destinationFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["BeneficiaryUploadIDCopyFolder"].ToString()), file);
                                            }
                                            else
                                            {
                                                sourceFile = ConfigurationManager.AppSettings["SharedNetworkTempFolder"].ToString() + file;//Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["SharedNetworkTempFolder"].ToString()), file);
                                                destinationFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["BeneficiaryUploadIDCopyFolder"].ToString()), file);
                                            }

                                            if (!string.IsNullOrEmpty(sourceFile) && !string.IsNullOrEmpty(destinationFile))
                                            {
                                                if (System.IO.File.Exists(sourceFile))
                                                {
                                                    System.IO.File.Move(sourceFile, destinationFile);
                                                }
                                            }
                                        }
                                    }
                                    if (!hasUpdateTransaction)
                                    {
                                        hasUpdateTransaction = true;
                                    }
                                }
                            }

                            int userid = Convert.ToInt32(Session["UserId"]);
                            string tableAffected = "RemittanceSales";
                            string description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Approved Remittance Sale [" + sales.MemoID + "]";
                            string ActionType = "Approve";
                            string approvallog = "[" + Session["Username"].ToString() + "] Approved Remittance Sale [" + sales.MemoID + "] to status (" + sales.Status + ")";

                            if (SubmitType == "SaveChanges")
                            {
                                ActionType = "Update";
                                approvallog = "[" + Session["Username"].ToString() + "] Updated Remittance Sale [" + sales.MemoID + "]";
                                description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Updated Remittance Sale [" + sales.MemoID + "]";
                            }

                            bool sale_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);

                            if (sale_log)
                            {
                                //Add Approval History
                                bool approval_history = _approvalHistorysModel.Add("RemittanceSale", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), ActionType, approvallog);

                                //if (sales.TransactionType == "Buy")
                                //{
                                //    //Check the hidden Value
                                //    if (ViewData["PendingChequeLog"].ToString() == "1")
                                //    {
                                //        bool chequelog = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque (Transaction Row) [" + sales.MemoID + "]");
                                //    }

                                //    //Check the hidden Value
                                //    if (ViewData["PendingBankTransferLog"].ToString() == "1")
                                //    {
                                //        bool banktransferlog = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Bank Transfer (Transaction Row) [" + sales.MemoID + "]");
                                //    }
                                //}

                                //if (sales.TransactionType == "Sell")
                                //{
                                //    //Check the hidden Value
                                //    if (ViewData["PendingLocalCheque1Log"].ToString() == "1")
                                //    {
                                //        bool localcheque1log = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque 1 (Local Payment) [" + sales.MemoID + "]");
                                //    }

                                //    //Check the hidden Value
                                //    if (ViewData["PendingLocalCheque2Log"].ToString() == "1")
                                //    {
                                //        bool localcheque2log = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque 2 (Local Payment) [" + sales.MemoID + "]");
                                //    }

                                //    //Check the hidden Value
                                //    if (ViewData["PendingLocalCheque3Log"].ToString() == "1")
                                //    {
                                //        bool localcheque3log = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque 3 (Local Payment) [" + sales.MemoID + "]");
                                //    }

                                //    //Check the hidden Value
                                //    if (ViewData["PendingLocalBankTransferLog"].ToString() == "1")
                                //    {
                                //        bool localbanktransferlog = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Bank Transfer (Local Payment) [" + sales.MemoID + "]");
                                //    }
                                //}

                            }

                            if (hasUpdateTransaction)
                            {
                                userid = Convert.ToInt32(Session["UserId"]);
                                tableAffected = "RemittanceOrders";
                                description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Approved Remittance Order [" + sales.MemoID + "]";

                                if (SubmitType == "SaveChanges")
                                {
                                    description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Updated Remittance Order [" + sales.MemoID + "]";
                                }

                                bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                            }

                            if (SubmitType != "SaveChanges")
                            {
                                TempData.Add("Result", "success|" + sales.MemoID + " has been successfully approved!");
                            }
                            else
                            {
                                TempData.Add("Result", "success|" + sales.MemoID + " has been successfully updated!");
                            }

                            return RedirectToAction("Listing", module, new { @page = page });
                        }
                        else
                        {
                            if (SubmitType != "SaveChanges")
                            {
                                TempData.Add("Result", "danger|An error occured while approving sale record!");
                            }
                            else
                            {
                                TempData.Add("Result", "danger|An error occured while updating sale record!");
                            }
                        }
                    }
                    catch (DbUpdateException e)
                    {
                        if (e.ToString().Contains("was deadlocked on lock resources with another process and has been chosen as the deadlock victim"))
                        {
                            //Roll back sale
                            _remittancesalesModel.Update(rollBack_Sale.ID, rollBack_Sale);

                            //Role back Transactions
                            foreach (int key in rollBack_saleTransactions.Keys)
                            {
                                _remittanceordersModel.Update(key, rollBack_saleTransactions[key]);
                            }

                            TempData.Add("Result", "danger|An error occured while saving sale record! Please submit again!");
                        }
                        else
                        {
                            throw;
                        }
                    }
                    catch (Exception e)
                    {
                        //Roll back sale
                        _remittancesalesModel.Update(rollBack_Sale.ID, rollBack_Sale);

                        //Role back Transactions
                        foreach (int key in rollBack_saleTransactions.Keys)
                        {
                            _remittanceordersModel.Update(key, rollBack_saleTransactions[key]);
                        }

                        TempData.Add("Result", "danger|An error occured while saving sale record! " + e.Message + "!");
                    }
                }
                else
                {
                    TempData.Add("Result", "danger|There is something wrong in the form!");
                }
                Dropdown[] customerDDL = CustomerDDL(sales.CustomerParticularId);
                ViewData["CustomerDropdown"] = new SelectList(customerDDL, "val", "name", sales.CustomerParticularId);
                CustomerParticular customer = sales.CustomerParticulars;
                ViewData["CustomerContact"] = "";
                ViewData["CustomerAddress"] = "";
                Dropdown[] agentDDL = AgentDDL();
                ViewData["AgentDropdown"] = new SelectList(agentDDL, "val", "name", sales.AgentId);
                ViewData["CreatedBy"] = "";
                using (var context = new DataAccess.GreatEastForex())
                {
                    var createdfrom = sales.CreatedFrom;
                    if (!string.IsNullOrEmpty(createdfrom))
                    {
                        if (createdfrom == "Admin")
                        {
                            string createbyName = context.Users.Where(e => e.ID == sales.CreatedBy).FirstOrDefault().Name;
                            ViewData["CreatedBy"] = createbyName;
                        }
                        else
                        {

                            var createby = context.CustomerParticulars.Where(e => e.ID == sales.CreatedBy).FirstOrDefault();
                            var createbyName = "";
                            if (!string.IsNullOrEmpty(createby.Surname) && !string.IsNullOrEmpty(createby.GivenName))
                            {
                                createbyName = createby.Surname + " " + createby.GivenName;
                            }
                            else
                            {
                                if (createby.CustomerType == "Corporate & Trading Company")
                                {

                                    createbyName = createby.Company_RegisteredName;
                                }
                                else
                                {
                                    createbyName = createby.Natural_Name;
                                }
                            }
                            ViewData["CreatedBy"] = createbyName;
                        }
                    }
                }
                if (customer != null)
                {
                    string contact = "";
                    string address = "";
                    string shippingadress = "";

                    if (customer.CustomerType == "Corporate & Trading Company")
                    {
                        contact = customer.Company_TelNo;
                        if (!string.IsNullOrEmpty(customer.Company_BusinessAddress2))
                        {
                            address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_PostalCode;
                            if (!string.IsNullOrEmpty(customer.Company_BusinessAddress3))
                            {
                                address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_BusinessAddress3 + ", " + customer.Company_PostalCode;

                            }
                        }
                        else
                        {
                            address = customer.Company_BusinessAddress1 + ", " + customer.Company_PostalCode;
                        }

                        if (!string.IsNullOrEmpty(customer.Shipping_Address2))
                        {
                            shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_Address2 + ", " + customer.Shipping_PostalCode;

                            if (!string.IsNullOrEmpty(customer.Shipping_Address3))
                            {
                                shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_Address2 + ", " + customer.Shipping_Address3 + ", " + customer.Shipping_PostalCode;

                            }
                        }
                        else
                        {
                            shippingadress = customer.Shipping_Address1 + ", " + customer.Shipping_PostalCode;
                        }

                    }
                    else
                    {
                        contact = customer.Natural_ContactNoM;
                        address = customer.Natural_PermanentAddress;
                        shippingadress = customer.Natural_MailingAddress + ", " + customer.Natural_MailingAddress2 + ", " + customer.Shipping_PostalCode;
                    }

                    ViewData["CustomerContact"] = contact;
                    ViewData["CustomerAddress"] = address;
                    ViewData["CustomerShippingAddress"] = shippingadress;
                }

                if (ViewData["CustomerShippingAddress"] == null)
                {
                    ViewData["CustomerShippingAddress"] = "";
                }


                //Dropdown[] collectionTimeDDL = CollectionTimeDDL();
                //ViewData["CollectionTimeDropdown"] = new SelectList(collectionTimeDDL, "val", "name", sales.CollectionTime);

                ViewData["NonUrgentRadio"] = "";
                ViewData["UrgentRadio"] = "";
                if (sales.IsUrgent == 1)
                {
                    ViewData["UrgentRadio"] = "checked";
                }
                else
                {
                    ViewData["NonUrgentRadio"] = "checked";
                }
                ViewData["CostPrice"] = sales.CostPrice;
                ViewData["AgentRate"] = sales.AgentRate;
                ViewData["AgentFee"] = sales.AgentFee;
                RemittanceProducts sgd = _remittanceproductsModel.FindCurrencyCode("SGD");
                string sgdFormat = GetDecimalFormat(sgd.ProductDecimal);
                string rateFormat = GetRateFormat(rateDP);

                IList<RemittanceOrderData> transactions = new List<RemittanceOrderData>();

                int _rowId = 1;

                decimal totalLocal = 0;
                decimal totalForeign = 0;

                string paySymbol = "$";
                int payDecimal = 1;
                foreach (string key in transactionKeys)
                {
                    RemittanceOrderData transactionData = new RemittanceOrderData();
                    //transactionData.Denominations = new List<DenominationsData>();

                    string rowId = key.Split('_')[2];
                    //rowId = rowId.ToString().PadLeft(3, '0');
                    string transactionID = form["Transaction_ID_" + rowId].ToString();
                    string roid = form["Transaction_TransactionId_" + rowId].ToString();
                    string type = form["Transaction_Type_" + rowId].ToString();
                    //string payPaymentType = "";
                    //if (!string.IsNullOrEmpty(form["Transaction_PayPaymentType_" + rowId]))
                    //{
                    //    payPaymentType = form["Transaction_PayPaymentType_" + rowId].ToString();
                    //}

                    string productId = form["Transaction_PayCurrency_" + rowId].ToString();
                    RemittanceProducts product = _remittanceproductsModel.GetSingle(Convert.ToInt32(productId));
                    string currencyFormat = GetDecimalFormat(product.ProductDecimal);

                    string getproductId = form["Transaction_GetCurrency_" + rowId].ToString();
                    RemittanceProducts getproduct = _remittanceproductsModel.GetSingle(Convert.ToInt32(getproductId));
                    string getcurrencyFormat = GetDecimalFormat(getproduct.ProductDecimal);

                    Dropdown2[] currency = CurrencyDDL2("Remittance");
                    var payCurrencyDDL = new SelectList(currency, "val", "name", dataGroupField: "group", productId);
                    var getCurrencyDDL = new SelectList(currency, "val", "name", dataGroupField: "group", getproductId);

                    string symbol = _remittanceproductsModel.GetSingle(Convert.ToInt32(productId)).ProductSymbol;
                    string rate = "";
                    if (!string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                    {
                        rate = form["Transaction_Rate_" + rowId].ToString();
                    }
                    //int unit = Convert.ToInt32(form["Transaction_Unit_" + rowId].ToString().Replace(",", ""));

                    //string encashmentRate = "";
                    //if (!string.IsNullOrEmpty(form["Transaction_EncashmentRate_" + rowId]))
                    //{
                    //    encashmentRate = form["Transaction_EncashmentRate_" + rowId].ToString();
                    //}

                    //string crossRate = "";
                    //if (!string.IsNullOrEmpty(form["Transaction_CrossRate_" + rowId]))
                    //{
                    //    crossRate = form["Transaction_CrossRate_" + rowId].ToString();
                    //}

                    string paymentModeVal = "";
                    if (!string.IsNullOrEmpty(form["Transaction_PayPaymentType_" + rowId]))
                    {
                        paymentModeVal = form["Transaction_PayPaymentType_" + rowId].ToString();
                    }
                    Dropdown[] paymentMode = PaymentModeDDL(Convert.ToInt32(productId));
                    SelectList paymentModeDDL = new SelectList(paymentMode, "val", "name", paymentModeVal);

                    //string getpaymentModeVal = "";
                    //if (!string.IsNullOrEmpty(form["Transaction_GetPaymentType_" + rowId]))
                    //{
                    //    getpaymentModeVal = form["Transaction_GetPaymentType_" + rowId].ToString();
                    //}
                    //Dropdown[] getpaymentModeDDL = new Dropdown[1];
                    //getpaymentModeDDL[0] = new Dropdown { name = "Bank Transfer", val = "Bank Transfer" };
                    Dropdown[] getpaymentMode = new Dropdown[1];
                    getpaymentMode[0] = new Dropdown { name = "Bank Transfer", val = "3" };
                    SelectList getpaymentModeDDL = new SelectList(getpaymentMode, "val", "name");

                    string disabledCheque = "disabled";
                    string disabledBankTranfer = "disabled";
                    string disabledDepositAcc = "disabled";
                    string disabledOtherPurposePayment = "disabled";
                    string disabledOtherCategoryBusiness = "disabled";
                    string disabledOtherNationalities = "disabled";
                    string disabledOtherSourceFund = "disabled";
                    string disabledOtherSuppDocType = "disabled";
                    string disabledOtherBankCountry = "disabled";
                    if (paymentModeVal == "2")
                    {
                        disabledCheque = "";
                        disabledDepositAcc = "";
                    }
                    else if (paymentModeVal == "3")
                    {
                        disabledBankTranfer = "";
                        disabledDepositAcc = "";
                    }

                    string chequeNo = "";
                    if (!string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
                    {
                        chequeNo = form["Transaction_ChequeNo_" + rowId].ToString();
                    }

                    string depositAcc = "";
                    if (!string.IsNullOrEmpty(form["Transaction_DepositAccount_" + rowId]))
                    {
                        depositAcc = form["Transaction_DepositAccount_" + rowId].ToString();
                    }

                    Dropdown[] paymentBankDDL = PayBankDDL();
                    var depositAccDDL = new SelectList(paymentBankDDL, "val", "name", depositAcc);

                    string bankTransferNo = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
                    {
                        bankTransferNo = form["Transaction_BankTransferNo_" + rowId].ToString();
                    }

                    string amountPay = "";
                    if (!string.IsNullOrEmpty(form["Transaction_PayAmount_" + rowId]))
                    {
                        amountPay = form["Transaction_PayAmount_" + rowId].ToString();
                    }

                    string amountGet = "";
                    if (!string.IsNullOrEmpty(form["Transaction_GetAmount_" + rowId]))
                    {
                        amountGet = form["Transaction_GetAmount_" + rowId].ToString();
                    }

                    string transactionPayrate = "";
                    if (!string.IsNullOrEmpty(form["payrate_" + rowId]))
                    {
                        transactionPayrate = form["payrate_" + rowId].ToString();
                    }

                    string transactionCurrentPayrate = "";
                    if (product != null)
                    {
                        if (product.PayRate != null && product.PayRate > 0)
                        {
                            transactionCurrentPayrate = product.PayRate.ToString();

                        }
                        else
                        {
                            if (product.AutomatedPayRate != null && product.AutomatedPayRate > 0)
                                transactionCurrentPayrate = product.AutomatedPayRate.ToString();
                        }
                    }

                    string transactionGetrate = "";
                    if (!string.IsNullOrEmpty(form["getrate_" + rowId]))
                    {
                        transactionGetrate = form["getrate_" + rowId].ToString();
                    }

                    string gettransactionFees = "";
                    if (!string.IsNullOrEmpty(form["gettransactionFees_" + rowId]))
                    {
                        gettransactionFees = form["gettransactionFees_" + rowId].ToString();
                    }

                    string transactionFees = "";
                    if (!string.IsNullOrEmpty(form["Transaction_Fee_" + rowId]))
                    {
                        transactionFees = form["Transaction_Fee_" + rowId].ToString();
                    }
                    Dropdown[] beneficiaries = BeneficiariesDDL();
                    Dropdown[] docsuppList = SupportDocTypeDDL();
                    Dropdown[] countries = CountryDDL();
                    Dropdown[] paymentList = PurposePaymentDDL(0);
                    Dropdown[] fundList = SourceFundsDDL();
                    Dropdown[] nationalities = NationalityDDL();
                    Dropdown2[] BusinessCategoriesLists = BusinessCategoryDDL();
                    ViewData["BeneficiaryDropdown"] = new SelectList(beneficiaries, "val", "name");

                    string beneficiaryName = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryName_" + rowId]))
                    {
                        beneficiaryName = form["Transaction_BeneficiaryName_" + rowId].ToString();
                    }

                    string beneficiaryBankAcc = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankAccount_" + rowId]))
                    {
                        beneficiaryBankAcc = form["Transaction_BeneficiaryBankAccount_" + rowId].ToString();
                    }

                    string beneficiaryBankCode = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankCode_" + rowId]))
                    {
                        beneficiaryBankCode = form["Transaction_BeneficiaryBankCode_" + rowId].ToString();
                    }

                    string beneficiaryBankCountry = "";
                    string otherBankCountry = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankCountry_" + rowId]))
                    {
                        beneficiaryBankCountry = form["Transaction_BeneficiaryBankCountry_" + rowId].ToString();
                        if (Convert.ToInt32(form["Transaction_BeneficiaryBankCountry_" + rowId]) == 48)
                        {
                            disabledOtherBankCountry = "";
                            otherBankCountry = form["Transaction_OtherBankCountry_" + rowId].ToString();
                        }
                    }
                    var countriesDDL = new SelectList(countries, "val", "name", beneficiaryBankCountry);

                    string beneficiaryAddress = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankAddress_" + rowId]))
                    {
                        beneficiaryAddress = form["Transaction_BeneficiaryBankAddress_" + rowId].ToString();
                    }
                    string beneficiaryMainContact = "";
                    if (!string.IsNullOrEmpty(form["Transaction_ContactNoMain_" + rowId]))
                    {
                        beneficiaryMainContact = form["Transaction_ContactNoMain_" + rowId].ToString();
                    }

                    string beneficiaryMainAddress = "";
                    if (!string.IsNullOrEmpty(form["Transaction_AddressMain_" + rowId]))
                    {
                        beneficiaryMainAddress = form["Transaction_AddressMain_" + rowId].ToString();
                    }

                    string beneficiaryBankName = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryBankName_" + rowId]))
                    {
                        beneficiaryBankName = form["Transaction_BeneficiaryBankName_" + rowId].ToString();
                    }

                    string IBANEuropeBSBAustralia = "";
                    if (!string.IsNullOrEmpty(form["Transaction_IBANEuropeBSBAustralia_" + rowId]))
                    {
                        IBANEuropeBSBAustralia = form["Transaction_IBANEuropeBSBAustralia_" + rowId].ToString();
                    }
                    string beneficiaryType = "";
                    ViewData["IndividualRadio_" + rowId] = "";
                    ViewData["BusinessRadio_" + rowId] = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryType_" + rowId]))
                    {
                        beneficiaryType = form["Transaction_BeneficiaryType_" + rowId].ToString();

                        if (beneficiaryType == "individual")
                        {
                            ViewData["IndividualRadio_" + rowId] = "checked";
                            paymentList = PurposePaymentDDL(0);
                        }
                        else if (beneficiaryType == "business")
                        {
                            ViewData["BusinessRadio_" + rowId] = "checked";
                            paymentList = PurposePaymentDDL(1);
                        }
                    }

                    string beneficiaryPurposePayment = "";
                    string otherPurposePayment = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryPurposePayment_" + rowId]))
                    {
                        beneficiaryPurposePayment = form["Transaction_BeneficiaryPurposePayment_" + rowId].ToString();
                        if (Convert.ToInt32(form["Transaction_BeneficiaryPurposePayment_" + rowId]) == 52)
                        {
                            disabledOtherPurposePayment = "";
                            otherPurposePayment = form["Transaction_OtherPurposePayment_" + rowId].ToString();
                        }
                    }
                    var paymentListDDL = new SelectList(paymentList, "val", "name", beneficiaryPurposePayment);

                    string beneficiarySourceFund = "";
                    string otherSourceFund = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiarySourceFund_" + rowId]))
                    {
                        beneficiarySourceFund = form["Transaction_BeneficiarySourceFund_" + rowId].ToString();
                        if (Convert.ToInt32(form["Transaction_BeneficiarySourceFund_" + rowId]) == 20)
                        {
                            disabledOtherCategoryBusiness = "";
                            otherSourceFund = form["Transaction_OtherSourceFund_" + rowId].ToString();
                        }
                    }
                    var fundListDDL = new SelectList(fundList, "val", "name", beneficiarySourceFund);

                    string beneficiarySuppDocType = "";
                    string otherSuppDocType = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiarySupportDocType_" + rowId]))
                    {
                        beneficiarySuppDocType = form["Transaction_BeneficiarySupportDocType_" + rowId].ToString();
                        if (Convert.ToInt32(form["Transaction_BeneficiarySupportDocType_" + rowId]) == 11)
                        {
                            disabledOtherSuppDocType = "";
                            otherSuppDocType = form["Transaction_OtherSupportDocType_" + rowId].ToString();
                        }
                    }
                    var suppDocDDL = new SelectList(docsuppList, "val", "name", beneficiarySuppDocType);

                    string beneficiaryUploadSuporting = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadSuporting_" + rowId]))
                    {
                        beneficiaryUploadSuporting = form["Transaction_BeneficiaryUploadSuporting_" + rowId].ToString();
                    }

                    string beneficiaryIDPassport = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryUploadIDPassport_" + rowId]))
                    {
                        beneficiaryIDPassport = form["Transaction_BeneficiaryUploadIDPassport_" + rowId].ToString();
                    }

                    string beneficiaryPaymentDetails = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryPaymentDetails_" + rowId]))
                    {
                        beneficiaryPaymentDetails = form["Transaction_BeneficiaryPaymentDetails_" + rowId].ToString();
                    }

                    string beneficiaryNationality = "";
                    string otherNationality = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryNationality_" + rowId]))
                    {
                        beneficiaryNationality = form["Transaction_BeneficiaryNationality_" + rowId].ToString();
                        if (Convert.ToInt32(form["Transaction_BeneficiaryNationality_" + rowId]) == 201)
                        {
                            disabledOtherNationalities = "";
                            otherNationality = form["Transaction_OtherNationality_" + rowId].ToString();
                        }
                    }
                    var nationalitiesDDL = new SelectList(nationalities, "val", "name", beneficiaryNationality);

                    string beneficiaryCompanyRegistration = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryCompanyRegistration_" + rowId]))
                    {
                        beneficiaryCompanyRegistration = form["Transaction_BeneficiaryCompanyRegistration_" + rowId].ToString();
                    }

                    string beneficiaryCategoryBusiness = "";
                    string otherCategoryBusiness = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]))
                    {
                        beneficiaryCategoryBusiness = form["Transaction_BeneficiaryCategoryBusiness_" + rowId].ToString();
                        if (Convert.ToInt32(form["Transaction_BeneficiaryCategoryBusiness_" + rowId]) == 331)
                        {
                            disabledOtherCategoryBusiness = "";
                            otherCategoryBusiness = form["Transaction_OtherCategoryBusiness_" + rowId].ToString();
                        }
                    }
                    var categoryBusinessDDL = new SelectList(BusinessCategoriesLists, "val", "name", dataGroupField: "group", beneficiaryCategoryBusiness);

                    string beneficiaryCompanyContact = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BeneficiaryCompanyContact_" + rowId]))
                    {
                        beneficiaryCompanyContact = form["Transaction_BeneficiaryCompanyContact_" + rowId].ToString();
                    }

                    string totalCalculatedForeign = "0.00";
                    string remainingForeign = "0.00";
                    string totalOrderForeign = "0.00";

                    transactionData.RowId = rowId.ToString();
                    transactionData.ID = Convert.ToInt32(roid);
                    transactionData.transactionID = transactionID;
                    transactionData.PayAmount = amountPay;
                    transactionData.BankTransferNo = bankTransferNo;
                    transactionData.ChequeNo = chequeNo;
                    //transactionData.PayCurrency = currencyFormat;
                    transactionData.payDecimalFormat = currencyFormat;
                    transactionData.PayCurrencyDDL = payCurrencyDDL;
                    transactionData.GetCurrencyDDL = getCurrencyDDL;
                    transactionData.PayPaymentModeDDL = paymentModeDDL;
                    transactionData.GetPaymentModeDDL = getpaymentModeDDL;
                    transactionData.DepositAccountDDL = depositAccDDL;
                    transactionData.countriesDDL = countriesDDL;
                    transactionData.fundListDDL = fundListDDL;
                    transactionData.nationalitiesDDL = nationalitiesDDL;
                    transactionData.paymentListDDL = paymentListDDL;
                    transactionData.suppDocDDL = suppDocDDL;
                    transactionData.categoryBusinessDDL = categoryBusinessDDL;
                    transactionData.PayDepositAccount = depositAcc;
                    transactionData.DisabledDepositAccount = disabledDepositAcc;
                    transactionData.PayPaymentType = paymentModeVal;
                    transactionData.Rate = rate;
                    transactionData.GetAmount = amountGet;
                    //transactionData.GetCurrency = getcurrencyFormat;
                    transactionData.getDecimalFormat = getcurrencyFormat;
                    transactionData.GetPaymentType = chequeNo;
                    transactionData.DisabledBankTransferNo = disabledBankTranfer;
                    transactionData.DisabledChequeNo = disabledCheque;
                    transactionData.transactionPayrate = transactionPayrate;
                    transactionData.transactionGetrate = transactionGetrate;
                    transactionData.gettransactionFees = gettransactionFees;
                    transactionData.transactionFees = transactionFees;
                    transactionData.BeneficiaryBankAccountNo = beneficiaryBankAcc;
                    transactionData.BeneficiaryBankAddress = beneficiaryAddress;
                    transactionData.BeneficiaryBankCode = beneficiaryBankCode;
                    transactionData.BeneficiaryBankCountry = beneficiaryBankCountry;
                    transactionData.BeneficiaryCategoryOfBusiness = beneficiaryCategoryBusiness;
                    transactionData.BeneficiaryCompanyContactNo = beneficiaryCompanyContact;
                    transactionData.BeneficiaryCompanyRegistrationNo = beneficiaryCompanyRegistration;
                    transactionData.BeneficiaryFullName = beneficiaryName;
                    transactionData.BeneficiaryNationality = beneficiaryNationality;
                    transactionData.BeneficiaryPaymentDetails = beneficiaryPaymentDetails;
                    transactionData.BeneficiaryPurposeOfPayment = beneficiaryPurposePayment;
                    transactionData.BeneficiarySourceOfPayment = beneficiarySourceFund;
                    transactionData.BeneficiaryType = beneficiaryType;
                    transactionData.BankTransferNo = bankTransferNo;
                    transactionData.BeneficiaryUploadSupportingFile = beneficiaryUploadSuporting;
                    transactionData.BeneficiaryUploadSupportingType = beneficiarySuppDocType;
                    transactionData.BeneficiaryContactNoMain = beneficiaryMainContact;
                    transactionData.BeneficiaryAddressMain = beneficiaryMainAddress;
                    transactionData.BeneficiaryBankName = beneficiaryBankName;
                    transactionData.IBANEuropeBSBAustralia = IBANEuropeBSBAustralia;
                    transactionData.BankCountryIfOthers = otherBankCountry;
                    transactionData.disabledBankCountryIfOthers = disabledOtherBankCountry;
                    transactionData.BeneficiaryNationalityIfOthers = otherNationality;
                    transactionData.disabledBeneficiaryNationalityIfOthers = disabledOtherNationalities;
                    transactionData.BeneficiaryBusinessCategoryIfOthers = otherCategoryBusiness;
                    transactionData.disabledBeneficiaryBusinessCategoryIfOthers = disabledOtherCategoryBusiness;
                    transactionData.PurposeOfPaymentIfOthers = otherPurposePayment;
                    transactionData.disabledPurposeOfPaymentIfOthers = disabledOtherPurposePayment;
                    transactionData.SourceOfPaymentIfOthers = otherSourceFund;
                    transactionData.disabledSourceOfPaymentIfOthers = disabledOtherSourceFund;
                    transactionData.UploadSupportingTypeIfOthers = otherSuppDocType;
                    transactionData.disabledUploadSupportingTypeIfOthers = disabledOtherSuppDocType;
                    transactionData.BeneficiaryUploadIDCopy = beneficiaryIDPassport;
                    transactionData.currentPayRate = transactionCurrentPayrate;

                    transactions.Add(transactionData);
                }

                ViewData["SaleTransactionsData"] = transactions;

                ViewData["TotalForeign"] = totalForeign.ToString(GetRateFormat(8));
                ViewData["TotalLocal"] = totalLocal.ToString(sgdFormat);

                ViewData["Sale"] = sales;
                ViewData["SaleId"] = sales.ID;
                ViewData["PendingApproval"] = "No";
                ViewData["PaySymbol"] = paySymbol;
                if (sales.Status == "Pending GM Approval" || sales.Status == "Pending Delete GM Approval")
                {
                    ViewData["PendingApproval"] = "Yes";
                }
                ViewData["SaleTransactionType"] = "Remittance";
                ViewData["Module"] = module;

                ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
                return View();
                #endregion
            }
            else
            {
                return RedirectToAction("Edit", new { @id = id, @module = module });
            }
        }

        //POST: GetCustomerDetail
        [HttpPost]
        public string GetCustomerDetail(int cid)
        {
            string result = "";

            try
            {
                CustomerParticular customerParticulars = _customerParticularsModel.GetSingle(cid);

                if (customerParticulars != null)
                {
                    string contact = "";
                    string address = "";
                    string shipping = "";
                    string remarks = "";

                    if (customerParticulars.CustomerType == "Corporate & Trading Company")
                    {
                        contact = customerParticulars.Company_TelNo;
                        if (!string.IsNullOrEmpty(customerParticulars.Company_BusinessAddress2))
                        {
                            address = customerParticulars.Company_BusinessAddress1 + ", " + customerParticulars.Company_BusinessAddress2 + ", " + customerParticulars.Company_PostalCode;
                        }
                        else
                        {
                            address = customerParticulars.Company_BusinessAddress1 + ", " + customerParticulars.Company_PostalCode;
                        }

                        if (!string.IsNullOrEmpty(customerParticulars.Shipping_Address2))
                        {
                            shipping = customerParticulars.Shipping_Address1 + ", " + customerParticulars.Shipping_Address2 + ", " + customerParticulars.Shipping_Address3 + ", " + customerParticulars.Shipping_PostalCode;
                        }
                        else
                        {
                            shipping = customerParticulars.Shipping_Address1 + ", " + customerParticulars.Shipping_PostalCode;
                        }

                    }
                    else
                    {
                        contact = customerParticulars.Natural_ContactNoM;
                        if (!string.IsNullOrEmpty(customerParticulars.Natural_PermanentAddress2))
                        {
                            address = customerParticulars.Natural_PermanentAddress + ", " + customerParticulars.Natural_PermanentAddress2 + ", " + customerParticulars.Natural_PermanentAddress3 + ", " + customerParticulars.Natural_PermanentPostalCode;
                        }
                        else
                        {
                            address = customerParticulars.Natural_PermanentAddress + ", " + customerParticulars.Natural_PermanentPostalCode;
                        }
                        if (!string.IsNullOrEmpty(customerParticulars.Natural_MailingAddress2))
                        {
                            shipping = customerParticulars.Natural_MailingAddress + ", " + customerParticulars.Natural_MailingAddress2 + ", " + customerParticulars.Natural_MailingAddress3 + ", " + customerParticulars.Mailing_PostalCode;
                        }
                        else
                        {
                            shipping = customerParticulars.Natural_MailingAddress + ", " + customerParticulars.Mailing_PostalCode;
                        }
                    }

                    remarks = customerParticulars.Others[0].SalesRemarks;

                    if (!string.IsNullOrEmpty(remarks))
                    {
                        remarks = remarks.Replace("\r", "\\r").Replace("\n", "\\n");
                    }

                    result = "{\"Result\":true,\"CustomerContact\":\"" + contact + "\",\"CustomerAddress\":\"" + address + "\",\"CustomerRemarks\":\"" + remarks + "\",\"CustomerShippingAddress\":\"" + shipping + "\"}";
                }
                else
                {
                    result = "{\"Result\":false,\"ErrorMessage\":\"Customer record not found!\"}";
                }
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: GetAgentDetail
        [HttpPost]
        public string GetAgentDetail(int id)
        {
            string result = "";

            try
            {
                Agents agent = _agentsModel.GetSingle(id);

                if (agent != null)
                {

                    result = "{\"Result\":true,\"Agent\":\"" + agent + "\"}";
                }
                else
                {
                    result = "{\"Result\":false,\"ErrorMessage\":\"Customer record not found!\"}";
                }
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: GetBeneficiaryDetail
        [HttpPost]
        public ActionResult GetBeneficiaryDetail(int id)
        {
			GetBeneficiaryCLass result = new GetBeneficiaryCLass();

			try
            {
                Beneficiaries beneficiaries = _beneficiaryModel.GetSingle(id);

                if (beneficiaries != null)
                {
					result.Result = true;
					result.BeneficiaryFullName = beneficiaries.BeneficiaryFullName;
					result.BeneficiaryNationality = beneficiaries.BeneficiaryNationality;
					result.BankAccountNo = beneficiaries.BankAccountNo;
					result.BankAddress = beneficiaries.BankAddress;
					result.BankCode = beneficiaries.BankCode;
					result.BankCountry = beneficiaries.BankCountry;
					result.BankType = beneficiaries.BankType;
					result.BeneficiaryBusinessCategory = beneficiaries.BeneficiaryBusinessCategory;
					result.BeneficiaryCompanyRegistrationNo = beneficiaries.BeneficiaryCompanyRegistrationNo;
					result.BeneficiaryContactNo = beneficiaries.BeneficiaryContactNo;
					result.PaymentDetails = beneficiaries.PaymentDetails.Trim();
					result.PurposeOfPayment = beneficiaries.PurposeOfPayment;
					result.BeneficiaryContactNoMain = beneficiaries.BeneficiaryContactNoMain;
					result.BeneficiaryAddressMain = beneficiaries.BeneficiaryAddressMain;
					result.BeneficiaryBankName = beneficiaries.BeneficiaryBankName;
					result.IBANEuropeBSBAustralia = beneficiaries.IBANEuropeBSBAustralia;
					result.BeneficiaryBankCountryOthers = beneficiaries.BankCountryIfOthers;
					result.BeneficiaryBusinessCategoryIfOthers = beneficiaries.BeneficiaryBusinessCategoryIfOthers;
					result.BeneficiaryNationalityIfOthers = beneficiaries.BeneficiaryNationalityIfOthers;
					result.BeneficiaryPurposeOfPaymentIfOthers = beneficiaries.PurposeOfPaymentIfOthers;
					result.BeneficiarySourceOfPaymentIfOthers = beneficiaries.SourceOfPaymentIfOthers;
					result.SourceOfPayment = beneficiaries.SourceOfPayment;
					result.Type = beneficiaries.Type;

					//result = "{\"Result\":true,\"BeneficiaryFullName\":\"" + beneficiaries.BeneficiaryFullName + "\",\"BeneficiaryNationality\":\"" + beneficiaries.BeneficiaryNationality + "\",\"BankAccountNo\":\"" + beneficiaries.BankAccountNo +
					//"\",\"BankAddress\":\"" + beneficiaries.BankAddress + "\",\"BankCode\":\"" + beneficiaries.BankCode + "\",\"BankCountry\":\"" + beneficiaries.BankCountry + "\",\"BankType\":\"" + beneficiaries.BankType +
					//"\",\"BeneficiaryBusinessCategory\":\"" + beneficiaries.BeneficiaryBusinessCategory + "\",\"BeneficiaryCompanyRegistrationNo\":\"" + beneficiaries.BeneficiaryCompanyRegistrationNo +
					//"\",\"BeneficiaryContactNo\":\"" + beneficiaries.BeneficiaryContactNo + "\",\"BeneficiaryContactNo\":\"" + beneficiaries.BeneficiaryContactNo +
					//"\",\"PaymentDetails\":\"" + beneficiaries.PaymentDetails.Trim() + "\",\"PurposeOfPayment\":\"" + beneficiaries.PurposeOfPayment +
					//"\",\"BeneficiaryContactNoMain\":\"" + beneficiaries.BeneficiaryContactNoMain + "\",\"BeneficiaryAddressMain\":\"" + beneficiaries.BeneficiaryAddressMain +
					//"\",\"BeneficiaryBankName\":\"" + beneficiaries.BeneficiaryBankName + "\",\"IBANEuropeBSBAustralia\":\"" + beneficiaries.IBANEuropeBSBAustralia +
					//"\",\"BeneficiaryBankCountryOthers\":\"" + beneficiaries.BankCountryIfOthers + "\",\"BeneficiaryBusinessCategoryIfOthers\":\"" + beneficiaries.BeneficiaryBusinessCategoryIfOthers +
					//"\",\"BeneficiaryNationalityIfOthers\":\"" + beneficiaries.BeneficiaryNationalityIfOthers + "\",\"BeneficiaryPurposeOfPaymentIfOthers\":\"" + beneficiaries.PurposeOfPaymentIfOthers +
					//"\",\"BeneficiarySourceOfPaymentIfOthers\":\"" + beneficiaries.SourceOfPaymentIfOthers +
					//"\",\"SourceOfPayment\":\"" + beneficiaries.SourceOfPayment + "\",\"Type\":\"" + beneficiaries.Type + "\"}";

				}
                else
                {
					result.Result = false;
					result.ErrorMessage = "Beneficiary record not found!";

					//result = "{\"Result\":false,\"ErrorMessage\":\"Beneficiary record not found!\"}";
                }
            }
            catch (Exception e)
            {
				result.Result = false;
				result.ErrorMessage = e.Message;
				//result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

			//return result;
			return Json(result, JsonRequestBehavior.AllowGet);
		}

        //POST: AddNewTransaction
        [HttpPost]
        public string AddNewTransaction(int cid, string type, int rowId, string paycurrency)
        {
            string result = "";

            try
            {
                #region Remittance Transaction Type
                ViewData["RowId"] = rowId;
                ViewData["TransactionID"] = rowId.ToString().PadLeft(3, '0');

                Dropdown2[] paycurrencyDDL = CurrencyDDL2("Remittance", "pay");
                Dropdown2[] getcurrencyDDL = CurrencyDDL2("Remittance", "get");

                if (rowId > 1)
                {
                    var getFirstPayCurrency = paycurrency;

                    ViewData["PayCurrencyDropdown"] = new SelectList(paycurrencyDDL, "val", "name", dataGroupField: "group", getFirstPayCurrency, disabledValues: "disabled");
                }
                else
                {
                    ViewData["PayCurrencyDropdown"] = new SelectList(paycurrencyDDL, "val", "name", dataGroupField: "group", "");
                }
                ViewData["GetCurrencyDropdown"] = new SelectList(getcurrencyDDL, "val", "name", dataGroupField: "group", "");

                int pid = Convert.ToInt32(paycurrencyDDL[0].val);
                int gid = Convert.ToInt32(getcurrencyDDL[0].val);
                RemittanceProducts products = _remittanceproductsModel.GetSingle(pid);
                RemittanceProducts gproducts = _remittanceproductsModel.GetSingle(gid);

                ViewData["PaySymbol_" + rowId] = products.ProductSymbol;
                ViewData["GetSymbol_" + rowId] = gproducts.ProductSymbol;

                var payCustomRemittanceRate = new CustomerRemittanceProductCustomRate();
                using (var context = new DataAccess.GreatEastForex())
                {
                    var payProductID = pid;
                    if (rowId > 1)
                        payProductID = Convert.ToInt32(paycurrency);
                    var remittanceCustomRate = context.CustomerRemittanceProductCustomRates.Where(e => e.CustomerParticularId == cid && e.RemittanceProductId == payProductID).FirstOrDefault();
                    payCustomRemittanceRate = remittanceCustomRate;
                }
                if (products.PayRate != null)
                {
                    var finalRate = products.PayRate;
                    if (payCustomRemittanceRate != null)
                    {
                        if (payCustomRemittanceRate.PayRateAdjustment != null && payCustomRemittanceRate.PayRateAdjustment > 0)
                        {
                            var OriginalValue = finalRate;
                            var InputValue = payCustomRemittanceRate.PayRateAdjustment;
                            finalRate = OriginalValue * (1 - InputValue);
                        }
                    }
                    else if (products.BuyRateAdjustment != null && products.BuyRateAdjustment != 0)
                    {
                        var OriginalValue = finalRate;
                        var InputValue = products.BuyRateAdjustment;
                        finalRate = OriginalValue * (1 - InputValue);
                    }
                    ViewData["TransactionRate"] = Convert.ToDecimal(finalRate).ToString(GetRateFormat(rateDP));
                }
                else
                {
                    var finalRate = products.AutomatedPayRate;
                    if (payCustomRemittanceRate != null)
                    {
                        if (payCustomRemittanceRate.PayRateAdjustment != null && payCustomRemittanceRate.PayRateAdjustment > 0)
                        {
                            var OriginalValue = finalRate;
                            var InputValue = payCustomRemittanceRate.PayRateAdjustment;
                            finalRate = OriginalValue * (1 - InputValue);
                        }
                    }
                    else if (products.BuyRateAdjustment != null && products.BuyRateAdjustment != 0)
                    {
                        var OriginalValue = finalRate;
                        var InputValue = products.BuyRateAdjustment;
                        finalRate = OriginalValue * (1 - InputValue);
                    }
                    ViewData["TransactionRate"] = Convert.ToDecimal(finalRate).ToString(GetRateFormat(rateDP));
                }
                ViewData["PayDecimalFormat"] = GetDecimalFormat(products.ProductDecimal);
                ViewData["GetDecimalFormat"] = GetDecimalFormat(gproducts.ProductDecimal);
                //if (gproducts.GetRate != null)
                //{
                //    ViewData["TransactionGetRate"] = Convert.ToDecimal(gproducts.GetRate).ToString(GetRateFormat(rateDP));
                //}
                //else
                //{
                //    ViewData["TransactionGetRate"] = "0"; //Get from internet rate
                //}

                //ViewData["ProductUnit"] = products.Unit;

                Dropdown[] paymentModeDDL = PaymentModeDDL(pid);
                Dropdown[] getpaymentModeDDL = new Dropdown[1];
                getpaymentModeDDL[0] = new Dropdown { name = "Bank Transfer", val = "3" };

                ViewData["PaymentModeDropdown"] = new SelectList(paymentModeDDL, "val", "name");
                ViewData["GetPaymentModeDropdown"] = new SelectList(getpaymentModeDDL, "val", "name");

                Dropdown[] paymentBankDDL = PayBankDDL();
                ViewData["DepositAccountDropdown"] = new SelectList(paymentBankDDL, "val", "name");

                bool disableChequeNo = true;
                bool disableBankTransferNo = true;
                bool disableDepositAccount = true;

                if (paymentModeDDL.FirstOrDefault().val == "2")
                {
                    disableChequeNo = false;
                    disableDepositAccount = false;
                }
                else if (paymentModeDDL.FirstOrDefault().val == "3")
                {
                    disableBankTransferNo = false;
                    disableDepositAccount = false;
                }

                ViewData["DisableChequeNo"] = disableChequeNo;
                ViewData["DisableBankTransferNo"] = disableBankTransferNo;
                ViewData["DisableDepositAccount"] = disableDepositAccount;
                Dropdown[] beneficiaries = BeneficiariesDDL();
                Dropdown[] docsuppList = SupportDocTypeDDL();
                Dropdown[] countries = CountryDDL();
                Dropdown[] paymentList = PurposePaymentDDL(0);
                Dropdown[] fundList = SourceFundsDDL();
                Dropdown[] nationalities = NationalityDDL();
                Dropdown2[] BusinessCategoriesLists = BusinessCategoryDDL();
                ViewData["BeneficiaryDropdown"] = new SelectList(beneficiaries, "val", "name");
                ViewData["SupportDocTypeDropdown"] = new SelectList(docsuppList, "val", "name");
                ViewData["CountriesDropdown"] = new SelectList(countries, "val", "name");
                ViewData["PurposePaymentDropdown"] = new SelectList(paymentList, "val", "name");
                ViewData["SourceFundDropdown"] = new SelectList(fundList, "val", "name");
                ViewData["NationalitiesDropdown"] = new SelectList(nationalities, "val", "name");
                ViewData["Transaction_BeneficiaryBusinessCategoriesLists"] = new SelectList(BusinessCategoriesLists, "val", "name", dataGroupField: "group", "");
                ViewData["Transaction_BeneficiaryName"] = "";
                ViewData["Transaction_BeneficiaryBankAccount"] = "";
                ViewData["Transaction_BeneficiaryPaymentDetails"] = "";
                ViewData["Transaction_BeneficiaryBankCode"] = "";
                ViewData["Transaction_BeneficiaryBankAddress"] = "";
                ViewData["Transaction_BeneficiaryCompanyRegistration"] = "";
                ViewData["Transaction_BeneficiaryUploadSuporting"] = "";
                ViewData["Transaction_BeneficiaryUploadIDPassport"] = "";
                ViewData["Transaction_BeneficiaryCompanyContact"] = "";
                ViewData["Transaction_BeneficiaryContactNoMain"] = "";
                ViewData["Transaction_BeneficiaryAddressMain"] = "";
                ViewData["Transaction_BeneficiaryBankName"] = "";
                ViewData["Transaction_IBANEuropeBSBAustralia"] = "";

                ViewData["BusinessRadio_" + rowId] = "";
                ViewData["IndividualRadio_" + rowId] = "checked";
                string view = "";

                using (var sw = new StringWriter())
                {
                    var viewResult = ViewEngines.Engines.FindPartialView(ControllerContext, "TransactionTypeBuy");
                    var viewContext = new ViewContext(ControllerContext, viewResult.View, ViewData, TempData, sw);
                    viewResult.View.Render(viewContext, sw);
                    viewResult.ViewEngine.ReleaseView(ControllerContext, viewResult.View);
                    view = sw.GetStringBuilder().ToString();
                }

                view = JsonConvert.SerializeObject(view);

                result = "{\"Result\":\"true\",\"View\":" + view + "}";
                #endregion

                //else
                //{
                //    result = "{\"Result\":false,\"ErrorMessage\":\"Invalid Transaction Type!\"}";
                //}
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: CurrencyChange
        [HttpPost]
        public string CurrencyChange(int rowId, string type, FormCollection form, int cid = 0, string pairedCurrency = null)
        {
            string result = "";

            try
            {
                Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                if (currencyChanged != null)
                {
                    Product sgd = _productsModel.FindCurrencyCode("SGD");

                    if (type == "Buy" || type == "Sell")
                    {
                        #region Buy/Sell Transaction Type
                        List<string[]> modelErrors = new List<string[]>();

                        string symbol = currencyChanged.Symbol;
                        string amountForeign_str = form["Transaction_AmountForeign_" + rowId];
                        decimal rate = 0;
                        if (currencyChanged.BuyRate != null && type == "Buy")
                        {
                            rate = Convert.ToDecimal(currencyChanged.BuyRate);
                        }
                        else if (currencyChanged.SellRate != null && type == "Sell")
                        {
                            rate = Convert.ToDecimal(currencyChanged.SellRate);
                        }
                        int unit = currencyChanged.Unit;
                        decimal amountLocal = 0;

                        string[] paymentModes = currencyChanged.PaymentModeAllowed.Split(',');
                        string paymentModesDDL = "<select>";
                        foreach (string paymentMode in paymentModes)
                        {
                            paymentModesDDL += "<option value='" + paymentMode + "'>" + paymentMode + "</option>";
                        }
                        paymentModesDDL += "</select>";

                        string disableChequeNo = "true";
                        string disableBankTransferNo = "true";

                        if (paymentModes.FirstOrDefault() == "2")
                        {
                            disableChequeNo = "false";
                        }
                        else if (paymentModes.FirstOrDefault() == "3")
                        {
                            disableBankTransferNo = "false";
                        }

                        decimal totalForeign = 0;
                        decimal totalLocal = 0;

                        if (!string.IsNullOrEmpty(amountForeign_str))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str);

                            if (checkAmountForeignFormat)

                            {
                                amountForeign_str = Convert.ToDecimal(amountForeign_str).ToString(GetDecimalFormat(currencyChanged.Decimal));

                                decimal amountForeign = Convert.ToDecimal(amountForeign_str);
                                amountLocal = Convert.ToDecimal(amountForeign) * rate / unit; // Transaction Calculation Formula

                                totalForeign += amountForeign;
                                totalLocal += amountLocal;
                            }
                            else
                            {
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeign_str) });
                            }
                        }
                        else
                        {
                            //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "" });
                        }

                        //Calculate Total Amount
                        List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + rowId).ToList();

                        foreach (string key in amountForeignKeys)
                        {
                            string rid = key.Split('_')[2];

                            string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                            if (!string.IsNullOrEmpty(amountForeign_str1))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                if (checkAmountForeignFormat)
                                {
                                    totalForeign += Convert.ToDecimal(amountForeign_str1);
                                }
                            }

                            string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                            if (!string.IsNullOrEmpty(amountLocal_str))
                            {
                                bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                if (checkAmountLocalFormat)
                                {
                                    totalLocal += Convert.ToDecimal(amountLocal_str);
                                }
                            }
                        }

                        if (modelErrors.Count == 0)
                        {
                            result = "{\"IsValid\":true,";
                        }
                        else
                        {
                            result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                        }

                        result += "\"Result\":true,"
                            + "\"Symbol\":\"" + symbol + "\","
                            + "\"Rate\":\"" + rate.ToString(GetRateFormat(rateDP)) + "\","
                            + "\"Unit\":\"" + unit.ToString(GetDecimalFormat(0)) + "\","
                            + "\"AmountForeign\":\"" + amountForeign_str + "\","
                            + "\"AmountLocal\":\"" + amountLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                            + "\"PaymentModesDDL\":\"" + paymentModesDDL + "\","
                            + "\"DisableChequeNo\":" + disableChequeNo + ","
                            + "\"DisableBankTransferNo\":" + disableBankTransferNo + ","
                            + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                            + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                        #endregion
                    }
                    else if (type == "Encashment")
                    {
                        #region Encashment Transaction Type
                        string transactionType = form["Transaction_Type_" + rowId];

                        if (transactionType == "Sell")
                        {
                            List<string[]> modelErrors = new List<string[]>();

                            //Sell Type
                            string symbolSell = currencyChanged.Symbol;
                            string amountForeignSell_str = form["Transaction_AmountForeign_" + rowId];
                            decimal rateSell = 0;
                            if (currencyChanged.SellRate != null)
                            {
                                rateSell = Convert.ToDecimal(currencyChanged.SellRate);
                            }

                            decimal encashmentRateSell = currencyChanged.EncashmentRate;
                            CustomerCustomRate customRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);
                            if (customRate != null)
                            {
                                encashmentRateSell = customRate.EncashmentRate.Value;
                            }

                            int unitSell = currencyChanged.Unit;
                            decimal amountLocalSell = 0;

                            string[] paymentModesSell = currencyChanged.PaymentModeAllowed.Split(',');
                            string paymentModesDDLSell = "<select>";
                            foreach (string paymentMode in paymentModesSell)
                            {
                                paymentModesDDLSell += "<option value='" + paymentMode + "'>" + paymentMode + "</option>";
                            }
                            paymentModesDDLSell += "</select>";

                            string disableChequeNoSell = "true";
                            string disableBankTransferNoSell = "true";

                            if (paymentModesSell.FirstOrDefault() == "2")
                            {
                                disableChequeNoSell = "false";
                            }
                            else if (paymentModesSell.FirstOrDefault() == "3")
                            {
                                disableBankTransferNoSell = "false";
                            }

                            decimal amountForeignBuy = 0;
                            decimal rateBuy = 0;
                            decimal amountLocalBuy = 0;

                            decimal totalForeign = 0;
                            decimal totalLocal = 0;

                            if (!string.IsNullOrEmpty(amountForeignSell_str))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignSell_str);

                                if (checkAmountForeignFormat)
                                {
                                    amountForeignSell_str = Convert.ToDecimal(amountForeignSell_str).ToString(GetDecimalFormat(currencyChanged.Decimal));
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignSell_str) });
                                }
                            }
                            else
                            {
                                //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "" });
                            }

                            //Buy Type
                            string searchString = currencyChanged.CurrencyCode;
                            string closestString = SearchClosestString(searchString, pairedCurrency);

                            Product buyCurrency = _productsModel.FindCurrencyCode(closestString);

                            string symbolbuy = buyCurrency.Symbol;

                            int unitBuy = buyCurrency.Unit;

                            string[] paymentModesBuy = buyCurrency.PaymentModeAllowed.Split(',');
                            string paymentModesDDLBuy = "<select>";
                            foreach (string paymentMode in paymentModesBuy)
                            {
                                paymentModesDDLBuy += "<option value='" + paymentMode + "'>" + paymentMode + "</option>";
                            }
                            paymentModesDDLBuy += "</select>";

                            string disableChequeNoBuy = "true";
                            string disableBankTransferNoBuy = "true";

                            if (paymentModesBuy.FirstOrDefault() == "2")
                            {
                                disableChequeNoBuy = "false";
                            }
                            else if (paymentModesBuy.FirstOrDefault() == "3")
                            {
                                disableBankTransferNoBuy = "false";
                            }

                            //Calculate Total Amount
                            List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + rowId).ToList();

                            foreach (string key in amountForeignKeys)
                            {
                                string rid = key.Split('_')[2];

                                string transactionType1 = form["Transaction_Type_" + rid];

                                if (transactionType1 == "Sell")
                                {
                                    string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                                    if (!string.IsNullOrEmpty(amountForeign_str1))
                                    {
                                        bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                        if (checkAmountForeignFormat)
                                        {
                                            totalForeign += Convert.ToDecimal(amountForeign_str1);
                                        }
                                    }

                                    string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                                    if (!string.IsNullOrEmpty(amountLocal_str))
                                    {
                                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                        if (checkAmountLocalFormat)
                                        {
                                            totalLocal += Convert.ToDecimal(amountLocal_str);
                                        }
                                    }
                                }
                            }

                            if (modelErrors.Count == 0)
                            {
                                amountLocalSell = Convert.ToDecimal((Convert.ToDecimal(amountForeignSell_str) * rateSell / currencyChanged.Unit).ToString(GetDecimalFormat(currencyChanged.Decimal)));// Transaction Calculation Formula

                                amountForeignBuy = Convert.ToDecimal((Convert.ToDecimal(amountForeignSell_str) * encashmentRateSell).ToString(GetDecimalFormat(buyCurrency.Decimal)));// Transaction Calculation Formula

                                if (amountForeignBuy != 0)
                                {
                                    rateBuy = amountLocalSell / amountForeignBuy;// Transaction Calculation Formula
                                }

                                amountLocalBuy = amountLocalSell;

                                totalForeign += Convert.ToDecimal(amountForeignSell_str);
                                totalLocal += amountLocalSell;

                                result = "{\"IsValid\":true,";
                            }
                            else
                            {
                                result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                            }

                            result += "\"Result\":true,"
                                + "\"RowChanged\":\"Sell\","
                                + "\"RowIdSell\":" + rowId + ","
                                + "\"SymbolSell\":\"" + symbolSell + "\","
                                + "\"AmountForeignSell\":\"" + amountForeignSell_str + "\","
                                + "\"RateSell\":\"" + rateSell.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"EncashmentRateSell\":\"" + encashmentRateSell.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"UnitSell\":\"" + unitSell.ToString(GetDecimalFormat(0)) + "\","
                                + "\"AmountLocalSell\":\"" + amountLocalSell.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                                + "\"PaymentModesDDLSell\":\"" + paymentModesDDLSell + "\","
                                + "\"DisableChequeNoSell\":" + disableChequeNoSell + ","
                                + "\"DisableBankTransferNoSell\":" + disableBankTransferNoSell + ","
                                + "\"RowIdBuy\":" + (rowId + 1) + ","
                                + "\"CurrencyIdBuy\":" + buyCurrency.ID + ","
                                + "\"CurrencyCodeBuy\":\"" + buyCurrency.CurrencyCode + "\","
                                + "\"SymbolBuy\":\"" + buyCurrency.Symbol + "\","
                                + "\"AmountForeignBuy\":\"" + amountForeignBuy.ToString(GetDecimalFormat(buyCurrency.Decimal)) + "\","
                                + "\"RateBuy\":\"" + rateBuy.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"UnitBuy\":\"" + unitBuy.ToString(GetDecimalFormat(0)) + "\","
                                + "\"AmountLocalBuy\":\"" + amountLocalBuy.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                                + "\"PaymentModesDDLBuy\":\"" + paymentModesDDLBuy + "\","
                                + "\"DisableChequeNoBuy\":" + disableChequeNoBuy + ","
                                + "\"DisableBankTransferNoBuy\":" + disableBankTransferNoBuy + ","
                                + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                                + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                        }
                        else
                        {
                            //Sell Type
                            List<string[]> modelErrors = new List<string[]>();

                            int rowIdSell = rowId - 1;

                            Product sellCurrency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowIdSell]));

                            string amountForeignSell_str = form["Transaction_AmountForeign_" + rowIdSell];
                            if (!string.IsNullOrEmpty(amountForeignSell_str))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignSell_str);

                                if (checkAmountForeignFormat)
                                {
                                    amountForeignSell_str = Convert.ToDecimal(amountForeignSell_str).ToString(GetDecimalFormat(sellCurrency.Decimal));
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignSell_str) });
                                }
                            }
                            else
                            {
                                //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "" });
                            }

                            string rateSell_str = form["Transaction_Rate_" + rowIdSell];
                            if (!string.IsNullOrEmpty(rateSell_str))
                            {
                                bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rateSell_str);

                                if (checkRateFormat)
                                {
                                    if (sellCurrency.AcceptableRange > 0)
                                    {
                                        decimal upperLimit = Convert.ToDecimal(sellCurrency.SellRate) * (1 + sellCurrency.AcceptableRange / 100);
                                        decimal lowerLimit = Convert.ToDecimal(sellCurrency.SellRate) * (1 - sellCurrency.AcceptableRange / 100);
                                        decimal rate = Convert.ToDecimal(rateSell_str);

                                        if (rate < lowerLimit || rate > upperLimit)
                                        {
                                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rateSell_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                        }
                                    }

                                    rateSell_str = Convert.ToDecimal(rateSell_str).ToString(GetRateFormat(rateDP));
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, String.Format("'{0}' is not a valid Rate!", rateSell_str) });
                                }
                            }
                            else
                            {
                                modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, "Rate is required!" });
                            }

                            string encashmentRateSell_str = form["Transaction_EncashmentRate_" + rowIdSell];
                            if (!string.IsNullOrEmpty(encashmentRateSell_str))
                            {
                                bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(encashmentRateSell_str);

                                if (checkRateFormat)
                                {
                                    encashmentRateSell_str = Convert.ToDecimal(encashmentRateSell_str).ToString(GetRateFormat(rateDP));
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowIdSell, String.Format("'{0}' is not a valid Encashment Rate!", encashmentRateSell_str) });
                                }
                            }
                            else
                            {
                                modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowIdSell, "Encashment Rate is required!" });
                            }

                            //Buy Type
                            string symbolbuy = currencyChanged.Symbol;

                            int unitBuy = currencyChanged.Unit;

                            string[] paymentModesBuy = currencyChanged.PaymentModeAllowed.Split(',');
                            string paymentModesDDLBuy = "<select>";
                            foreach (string paymentMode in paymentModesBuy)
                            {
                                paymentModesDDLBuy += "<option value='" + paymentMode + "'>" + paymentMode + "</option>";
                            }
                            paymentModesDDLBuy += "</select>";

                            string disableChequeNoBuy = "true";
                            string disableBankTransferNoBuy = "true";

                            if (paymentModesBuy.FirstOrDefault() == "2")
                            {
                                disableChequeNoBuy = "false";
                            }
                            else if (paymentModesBuy.FirstOrDefault() == "3")
                            {
                                disableBankTransferNoBuy = "false";
                            }

                            decimal amountLocalSell = 0;
                            decimal amountForeignBuy = 0;
                            decimal rateBuy = 0;
                            decimal amountLocalBuy = 0;

                            decimal totalForeign = 0;
                            decimal totalLocal = 0;

                            if (modelErrors.Count == 0)
                            {
                                amountLocalSell = Convert.ToDecimal((Convert.ToDecimal(amountForeignSell_str) * Convert.ToDecimal(rateSell_str) / sellCurrency.Unit).ToString(GetDecimalFormat(sgd.Decimal)));

                                amountForeignBuy = Convert.ToDecimal((Convert.ToDecimal(amountForeignSell_str) * Convert.ToDecimal(encashmentRateSell_str)).ToString(GetDecimalFormat(currencyChanged.Decimal)));

                                if (amountForeignBuy != 0)
                                {
                                    rateBuy = amountLocalSell / amountForeignBuy;
                                }

                                amountLocalBuy = amountLocalSell;

                                totalForeign += Convert.ToDecimal(amountForeignSell_str);
                                totalLocal += amountLocalSell;

                                result = "{\"IsValid\":true,";
                            }
                            else
                            {
                                result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                            }

                            //Calculate Total Amount
                            List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + rowIdSell).ToList();

                            foreach (string key in amountForeignKeys)
                            {
                                string rid = key.Split('_')[2];

                                string transactionType1 = form["Transaction_Type_" + rid];

                                if (transactionType1 == "Sell")
                                {
                                    string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                                    if (!string.IsNullOrEmpty(amountForeign_str1))
                                    {
                                        bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                        if (checkAmountForeignFormat)
                                        {
                                            totalForeign += Convert.ToDecimal(amountForeign_str1);
                                        }
                                    }

                                    string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                                    if (!string.IsNullOrEmpty(amountLocal_str))
                                    {
                                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                        if (checkAmountLocalFormat)
                                        {
                                            totalLocal += Convert.ToDecimal(amountLocal_str);
                                        }
                                    }
                                }
                            }

                            result += "\"Result\":true,"
                                + "\"RowChanged\":\"Buy\","
                                + "\"RowIdSell\":" + rowIdSell + ","
                                + "\"AmountForeignSell\":\"" + amountForeignSell_str + "\","
                                + "\"RateSell\":\"" + rateSell_str + "\","
                                + "\"EncashmentRateSell\":\"" + encashmentRateSell_str + "\","
                                + "\"AmountLocalSell\":\"" + amountLocalSell.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                                + "\"RowIdBuy\":" + rowId + ","
                                + "\"SymbolBuy\":\"" + currencyChanged.Symbol + "\","
                                + "\"AmountForeignBuy\":\"" + amountForeignBuy.ToString(GetDecimalFormat(currencyChanged.Decimal)) + "\","
                                + "\"RateBuy\":\"" + rateBuy.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"UnitBuy\":\"" + unitBuy.ToString(GetDecimalFormat(0)) + "\","
                                + "\"AmountLocalBuy\":\"" + amountLocalBuy.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                                + "\"PaymentModesDDLBuy\":\"" + paymentModesDDLBuy + "\","
                                + "\"DisableChequeNoBuy\":" + disableChequeNoBuy + ","
                                + "\"DisableBankTransferNoBuy\":" + disableBankTransferNoBuy + ","
                                + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                                + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                        }
                        #endregion
                    }
                    else if (type == "Swap")
                    {
                        #region Swap Transaction Type
                        string transactionType = form["Transaction_Type_" + rowId];

                        if (transactionType == "Buy")
                        {
                            List<string[]> modelErrors = new List<string[]>();

                            //Buy Type
                            string symbolBuy = currencyChanged.Symbol;
                            string amountForeignBuy_str = form["Transaction_AmountForeign_" + rowId];
                            decimal rateBuy = 0;
                            if (currencyChanged.BuyRate != null)
                            {
                                rateBuy = Convert.ToDecimal(currencyChanged.BuyRate);
                            }

                            decimal encashmentRateBuy = currencyChanged.EncashmentRate;
                            CustomerCustomRate customRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);
                            if (customRate != null)
                            {
                                encashmentRateBuy = customRate.EncashmentRate.Value;
                            }

                            int unitBuy = currencyChanged.Unit;
                            decimal amountLocalBuy = 0;

                            string[] paymentModesBuy = currencyChanged.PaymentModeAllowed.Split(',');
                            string paymentModesDDLBuy = "<select>";
                            foreach (string paymentMode in paymentModesBuy)
                            {
                                paymentModesDDLBuy += "<option value='" + paymentMode + "'>" + paymentMode + "</option>";
                            }
                            paymentModesDDLBuy += "</select>";

                            string disableChequeNoBuy = "true";
                            string disableBankTransferNoBuy = "true";

                            if (paymentModesBuy.FirstOrDefault() == "2")
                            {
                                disableChequeNoBuy = "false";
                            }
                            else if (paymentModesBuy.FirstOrDefault() == "3")
                            {
                                disableBankTransferNoBuy = "false";
                            }

                            if (!string.IsNullOrEmpty(amountForeignBuy_str))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignBuy_str);

                                if (checkAmountForeignFormat)
                                {
                                    amountForeignBuy_str = Convert.ToDecimal(amountForeignBuy_str).ToString(GetDecimalFormat(currencyChanged.Decimal));
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignBuy_str) });
                                }
                            }
                            else
                            {
                                //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "" });
                            }

                            //Sell Type
                            string searchString = currencyChanged.CurrencyCode;
                            string closestString = SearchClosestString(searchString, pairedCurrency);

                            Product sellCurrency = _productsModel.FindCurrencyCode(closestString);

                            string symbolSell = sellCurrency.Symbol;

                            int unitSell = sellCurrency.Unit;

                            string[] paymentModesSell = sellCurrency.PaymentModeAllowed.Split(',');
                            string paymentModesDDLSell = "<select>";
                            foreach (string paymentMode in paymentModesSell)
                            {
                                paymentModesDDLSell += "<option value='" + paymentMode + "'>" + paymentMode + "</option>";
                            }
                            paymentModesDDLSell += "</select>";

                            string disableChequeNoSell = "true";
                            string disableBankTransferNoSell = "true";

                            if (paymentModesSell.FirstOrDefault() == "2")
                            {
                                disableChequeNoSell = "false";
                            }
                            else if (paymentModesSell.FirstOrDefault() == "3")
                            {
                                disableBankTransferNoSell = "false";
                            }

                            decimal amountForeignSell = 0;
                            decimal rateSell = 0;
                            decimal amountLocalSell = 0;

                            decimal totalForeign = 0;
                            decimal totalLocal = 0;

                            if (modelErrors.Count == 0)
                            {
                                amountLocalBuy = Convert.ToDecimal((Convert.ToDecimal(amountForeignBuy_str) * rateBuy / currencyChanged.Unit).ToString(GetDecimalFormat(currencyChanged.Decimal)));// Transaction Calculation Formula

                                amountForeignSell = Convert.ToDecimal((Convert.ToDecimal(amountForeignBuy_str) * encashmentRateBuy).ToString(GetDecimalFormat(sellCurrency.Decimal)));// Transaction Calculation Formula

                                if (amountForeignSell != 0)
                                {
                                    rateSell = amountLocalBuy / amountForeignSell;// Transaction Calculation Formula
                                }

                                amountLocalSell = amountLocalBuy;

                                totalForeign += amountForeignSell;
                                totalLocal += amountLocalSell;

                                result = "{\"IsValid\":true,";
                            }
                            else
                            {
                                result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                            }

                            //Calculate Total Amount
                            List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + (rowId + 1)).ToList();

                            foreach (string key in amountForeignKeys)
                            {
                                string rid = key.Split('_')[2];

                                string transactionType1 = form["Transaction_Type_" + rid];

                                if (transactionType1 == "Sell")
                                {
                                    string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                                    if (!string.IsNullOrEmpty(amountForeign_str1))
                                    {
                                        bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                        if (checkAmountForeignFormat)
                                        {
                                            totalForeign += Convert.ToDecimal(amountForeign_str1);
                                        }
                                    }

                                    string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                                    if (!string.IsNullOrEmpty(amountLocal_str))
                                    {
                                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                        if (checkAmountLocalFormat)
                                        {
                                            totalLocal += Convert.ToDecimal(amountLocal_str);
                                        }
                                    }
                                }
                            }

                            result += "\"Result\":true,"
                                + "\"RowChanged\":\"Buy\","
                                + "\"RowIdBuy\":" + rowId + ","
                                + "\"SymbolBuy\":\"" + symbolBuy + "\","
                                + "\"AmountForeignBuy\":\"" + amountForeignBuy_str + "\","
                                + "\"RateBuy\":\"" + rateBuy.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"EncashmentRateBuy\":\"" + encashmentRateBuy.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"UnitBuy\":\"" + unitBuy.ToString(GetDecimalFormat(0)) + "\","
                                + "\"AmountLocalBuy\":\"" + amountLocalBuy.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                                + "\"PaymentModesDDLBuy\":\"" + paymentModesDDLBuy + "\","
                                + "\"DisableChequeNoBuy\":" + disableChequeNoBuy + ","
                                + "\"DisableBankTransferNoBuy\":" + disableBankTransferNoBuy + ","
                                + "\"RowIdSell\":" + (rowId + 1) + ","
                                + "\"CurrencyIdSell\":" + sellCurrency.ID + ","
                                + "\"CurrencyCodeSell\":\"" + sellCurrency.CurrencyCode + "\","
                                + "\"SymbolSell\":\"" + sellCurrency.Symbol + "\","
                                + "\"AmountForeignSell\":\"" + amountForeignSell.ToString(GetDecimalFormat(sellCurrency.Decimal)) + "\","
                                + "\"RateSell\":\"" + rateSell.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"UnitSell\":\"" + unitSell.ToString(GetDecimalFormat(0)) + "\","
                                + "\"AmountLocalSell\":\"" + amountLocalSell.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                                + "\"PaymentModesDDLSell\":\"" + paymentModesDDLSell + "\","
                                + "\"DisableChequeNoSell\":" + disableChequeNoSell + ","
                                + "\"DisableBankTransferNoSell\":" + disableBankTransferNoSell + ","
                                + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                                + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                        }
                        else
                        {
                            List<string[]> modelErrors = new List<string[]>();

                            //Buy Type
                            int rowIdBuy = rowId - 1;

                            Product buyCurrency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowIdBuy]));

                            string amountForeignBuy_str = form["Transaction_AmountForeign_" + rowIdBuy];
                            if (!string.IsNullOrEmpty(amountForeignBuy_str))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignBuy_str);

                                if (checkAmountForeignFormat)
                                {
                                    amountForeignBuy_str = Convert.ToDecimal(amountForeignBuy_str).ToString(GetDecimalFormat(currencyChanged.Decimal));
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignBuy_str) });
                                }
                            }
                            else
                            {
                                //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, "Amount (Foreign) is required!" });
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, "" });
                            }

                            string rateBuy_str = form["Transaction_Rate_" + rowIdBuy];
                            if (!string.IsNullOrEmpty(rateBuy_str))
                            {
                                bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rateBuy_str);

                                if (checkRateFormat)
                                {
                                    if (buyCurrency.AcceptableRange > 0)
                                    {
                                        decimal upperLimit = Convert.ToDecimal(buyCurrency.SellRate) * (1 + buyCurrency.AcceptableRange / 100);
                                        decimal lowerLimit = Convert.ToDecimal(buyCurrency.SellRate) * (1 - buyCurrency.AcceptableRange / 100);
                                        decimal rate = Convert.ToDecimal(rateBuy_str);

                                        if (rate < lowerLimit || rate > upperLimit)
                                        {
                                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdBuy, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rateBuy_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                        }
                                    }

                                    rateBuy_str = Convert.ToDecimal(rateBuy_str).ToString(GetRateFormat(rateDP));
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdBuy, String.Format("'{0}' is not a valid Rate!", rateBuy_str) });
                                }
                            }
                            else
                            {
                                modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdBuy, "Rate is required!" });
                            }

                            string encashmentRateBuy_str = form["Transaction_EncashmentRate_" + rowIdBuy];
                            if (!string.IsNullOrEmpty(encashmentRateBuy_str))
                            {
                                bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(encashmentRateBuy_str);

                                if (checkRateFormat)
                                {
                                    encashmentRateBuy_str = Convert.ToDecimal(encashmentRateBuy_str).ToString(GetRateFormat(rateDP));
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowIdBuy, String.Format("'{0}' is not a valid Encashment Rate!", encashmentRateBuy_str) });
                                }
                            }
                            else
                            {
                                modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowIdBuy, "Encashment Rate is required!" });
                            }

                            //Sell Type
                            string symbolSell = currencyChanged.Symbol;

                            int unitSell = currencyChanged.Unit;

                            string[] paymentModesSell = currencyChanged.PaymentModeAllowed.Split(',');
                            string paymentModesDDLSell = "<select>";
                            foreach (string paymentMode in paymentModesSell)
                            {
                                paymentModesDDLSell += "<option value='" + paymentMode + "'>" + paymentMode + "</option>";
                            }
                            paymentModesDDLSell += "</select>";

                            string disableChequeNoSell = "true";
                            string disableBankTransferNoSell = "true";

                            if (paymentModesSell.FirstOrDefault() == "2")
                            {
                                disableChequeNoSell = "false";
                            }
                            else if (paymentModesSell.FirstOrDefault() == "3")
                            {
                                disableBankTransferNoSell = "false";
                            }

                            decimal amountLocalBuy = 0;
                            decimal amountForeignSell = 0;
                            decimal rateSell = 0;
                            decimal amountLocalSell = 0;

                            decimal totalForeign = 0;
                            decimal totalLocal = 0;

                            if (modelErrors.Count == 0)
                            {
                                amountLocalBuy = Convert.ToDecimal((Convert.ToDecimal(amountForeignBuy_str) * Convert.ToDecimal(rateBuy_str) / buyCurrency.Unit).ToString(GetDecimalFormat(buyCurrency.Decimal)));

                                amountForeignSell = Convert.ToDecimal((Convert.ToDecimal(amountForeignBuy_str) * Convert.ToDecimal(encashmentRateBuy_str)).ToString(GetDecimalFormat(currencyChanged.Decimal)));

                                if (amountForeignSell != 0)
                                {
                                    rateSell = amountLocalBuy / amountForeignSell;
                                }

                                amountLocalSell = amountLocalBuy;

                                totalForeign += amountForeignSell;
                                totalLocal += amountLocalSell;

                                result = "{\"IsValid\":true,";
                            }
                            else
                            {
                                result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                            }

                            //Calculate Total Amount
                            List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + rowId).ToList();

                            foreach (string key in amountForeignKeys)
                            {
                                string rid = key.Split('_')[2];

                                string transactionType1 = form["Transaction_Type_" + rid];

                                if (transactionType1 == "Sell")
                                {
                                    string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                                    if (!string.IsNullOrEmpty(amountForeign_str1))
                                    {
                                        bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                        if (checkAmountForeignFormat)
                                        {
                                            totalForeign += Convert.ToDecimal(amountForeign_str1);
                                        }
                                    }

                                    string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                                    if (!string.IsNullOrEmpty(amountLocal_str))
                                    {
                                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                        if (checkAmountLocalFormat)
                                        {
                                            totalLocal += Convert.ToDecimal(amountLocal_str);
                                        }
                                    }
                                }
                            }

                            result += "\"Result\":true,"
                                + "\"RowChanged\":\"Sell\","
                                + "\"RowIdBuy\":" + rowId + ","
                                + "\"AmountForeignBuy\":\"" + amountForeignBuy_str + "\","
                                + "\"RateBuy\":\"" + rateBuy_str + "\","
                                + "\"EncashmentRateBuy\":\"" + encashmentRateBuy_str + "\","
                                + "\"AmountLocalBuy\":\"" + amountLocalBuy.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                                + "\"RowIdSell\":" + rowId + ","
                                + "\"SymbolSell\":\"" + currencyChanged.Symbol + "\","
                                + "\"AmountForeignSell\":\"" + amountForeignSell.ToString(GetDecimalFormat(currencyChanged.Decimal)) + "\","
                                + "\"UnitSell\":\"" + unitSell.ToString(GetDecimalFormat(0)) + "\","
                                + "\"PaymentModesDDLSell\":\"" + paymentModesDDLSell + "\","
                                + "\"DisableChequeNoSell\":" + disableChequeNoSell + ","
                                + "\"DisableBankTransferNoSell\":" + disableBankTransferNoSell + ","
                                + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                                + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                        }
                        #endregion
                    }
                    else if (type == "CrossCurrency")
                    {
                        #region Cross Currency Transaction Type
                        string transactionType = form["Transaction_Type_" + rowId];

                        if (transactionType == "Sell")
                        {
                            List<string[]> modelErrors = new List<string[]>();

                            //Sell Type
                            int rowIdSell = rowId;
                            string symbolSell = currencyChanged.Symbol;

                            string amountForeignSell_str = form["Transaction_AmountForeign_" + rowId];
                            if (!string.IsNullOrEmpty(amountForeignSell_str))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignSell_str);

                                if (checkAmountForeignFormat)
                                {
                                    amountForeignSell_str = Convert.ToDecimal(amountForeignSell_str).ToString(GetDecimalFormat(currencyChanged.Decimal));
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignSell_str) });
                                }
                            }
                            else
                            {
                                //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "" });
                            }

                            decimal rateSell = 0;
                            if (currencyChanged.SellRate != null)
                            {
                                rateSell = Convert.ToDecimal(currencyChanged.SellRate);
                            }

                            int unitSell = currencyChanged.Unit;

                            string[] paymentModesSell = currencyChanged.PaymentModeAllowed.Split(',');
                            string paymentModesDDLSell = "<select>";
                            foreach (string paymentMode in paymentModesSell)
                            {
                                paymentModesDDLSell += "<option value='" + paymentMode + "'>" + paymentMode + "</option>";
                            }
                            paymentModesDDLSell += "</select>";

                            string disableChequeNoSell = "true";
                            string disableBankTransferNoSell = "true";

                            if (paymentModesSell.FirstOrDefault() == "2")
                            {
                                disableChequeNoSell = "false";
                            }
                            else if (paymentModesSell.FirstOrDefault() == "3")
                            {
                                disableBankTransferNoSell = "false";
                            }

                            //Buy Type
                            int rowIdBuy = ++rowId;

                            Product buyCurrency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowIdBuy]));

                            string amountForeignBuy_str = form["Transaction_AmountForeign_" + rowIdBuy];
                            if (!string.IsNullOrEmpty(amountForeignBuy_str))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignBuy_str);

                                if (checkAmountForeignFormat)
                                {
                                    amountForeignBuy_str = Convert.ToDecimal(amountForeignBuy_str).ToString(GetDecimalFormat(buyCurrency.Decimal));
                                }
                                else
                                {
                                    //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignBuy_str) });
                                    modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, "" });
                                }
                            }
                            else
                            {
                                //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, "Amount (Foreign) is required!" });
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, "" });
                            }

                            decimal crossRateSell = 0;
                            decimal amountLocalSell = 0;
                            decimal rateBuy = 0;
                            decimal amountLocalBuy = 0;

                            decimal totalForeign = 0;
                            decimal totalLocal = 0;

                            if (modelErrors.Count == 0)
                            {
                                decimal actualRateSell = rateSell / unitSell;

                                amountLocalSell = Convert.ToDecimal((Convert.ToDecimal(amountForeignSell_str) * actualRateSell).ToString(GetDecimalFormat(sgd.Decimal)));// Transaction Calculation Formula

                                if (Convert.ToDecimal(amountForeignBuy_str) != 0)
                                {
                                    rateBuy = Convert.ToDecimal((amountLocalSell / Convert.ToDecimal(amountForeignBuy_str)).ToString(GetRateFormat(rateDP)));// Transaction Calculation Formula
                                }

                                amountLocalBuy = amountLocalSell;

                                if (rateBuy != 0)
                                {
                                    crossRateSell = Convert.ToDecimal((actualRateSell / rateBuy).ToString(GetRateFormat(rateDP)));// Transaction Calculation Formula
                                }

                                totalForeign += Convert.ToDecimal(amountForeignSell_str);
                                totalLocal += amountLocalSell;

                                result = "{\"IsValid\":true,";
                            }
                            else
                            {
                                result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                            }

                            result += "\"Result\":true,"
                                + "\"RowChanged\":\"Sell\","
                                + "\"RowIdSell\":" + rowIdSell + ","
                                + "\"SymbolSell\":\"" + symbolSell + "\","
                                + "\"AmountForeignSell\":\"" + amountForeignSell_str + "\","
                                + "\"RateSell\":\"" + rateSell.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"CrossRateSell\":\"" + crossRateSell.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"UnitSell\":\"" + unitSell.ToString(GetDecimalFormat(0)) + "\","
                                + "\"AmountLocalSell\":\"" + amountLocalSell.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                                + "\"PaymentModesDDLSell\":\"" + paymentModesDDLSell + "\","
                                + "\"DisableChequeNoSell\":" + disableChequeNoSell + ","
                                + "\"DisableBankTransferNoSell\":" + disableBankTransferNoSell + ","
                                + "\"RowIdBuy\":" + rowIdBuy + ","
                                + "\"CurrencyIdBuy\":" + buyCurrency.ID + ","
                                + "\"CurrencyCodeBuy\":\"" + buyCurrency.CurrencyCode + "\","
                                + "\"AmountForeignBuy\":\"" + amountForeignBuy_str + "\","
                                + "\"RateBuy\":\"" + rateBuy.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"AmountLocalBuy\":\"" + amountLocalBuy.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                                + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                                + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                        }
                        else
                        {
                            List<string[]> modelErrors = new List<string[]>();

                            //Sell Type
                            int rowIdSell = rowId - 1;

                            Product sellCurrency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowIdSell]));

                            string amountForeignSell_str = form["Transaction_AmountForeign_" + rowIdSell];
                            if (!string.IsNullOrEmpty(amountForeignSell_str))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignSell_str);

                                if (checkAmountForeignFormat)
                                {
                                    amountForeignSell_str = Convert.ToDecimal(amountForeignSell_str).ToString(GetDecimalFormat(sellCurrency.Decimal));
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdSell, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignSell_str) });
                                }
                            }
                            else
                            {
                                //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdSell, "Amount (Foreign) is required!" });
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdSell, "" });
                            }

                            string rateSell_str = form["Transaction_Rate_" + rowIdSell];

                            if (!string.IsNullOrEmpty(rateSell_str))
                            {
                                bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rateSell_str);

                                if (checkRateFormat)
                                {
                                    if (currencyChanged.AcceptableRange > 0)
                                    {
                                        decimal upperLimit = Convert.ToDecimal(currencyChanged.BuyRate) * (1 + currencyChanged.AcceptableRange / 100);
                                        decimal lowerLimit = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - currencyChanged.AcceptableRange / 100);
                                        decimal rate = Convert.ToDecimal(rateSell_str);

                                        if (rate < lowerLimit || rate > upperLimit)
                                        {
                                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rateSell_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                        }
                                        else
                                        {
                                            rateSell_str = Convert.ToDecimal(rateSell_str).ToString(GetRateFormat(rateDP));
                                        }
                                    }
                                    else
                                    {
                                        rateSell_str = Convert.ToDecimal(rateSell_str).ToString(GetRateFormat(rateDP));
                                    }
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, String.Format("'{0}' is not a valid Rate!", rateSell_str) });
                                }
                            }
                            else
                            {
                                modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, "Rate is required!" });
                            }

                            //Buy Type
                            int rowIdBuy = rowId;

                            string amountForeignBuy_str = form["Transaction_AmountForeign_" + rowIdBuy];
                            if (!string.IsNullOrEmpty(amountForeignBuy_str))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignBuy_str);

                                if (checkAmountForeignFormat)
                                {
                                    amountForeignBuy_str = Convert.ToDecimal(amountForeignBuy_str).ToString(GetDecimalFormat(currencyChanged.Decimal));
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignBuy_str) });
                                }
                            }
                            else
                            {
                                //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, "Amount (Foreign) is required!" });
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, "" });
                            }

                            string[] paymentModesBuy = currencyChanged.PaymentModeAllowed.Split(',');
                            string paymentModesDDLBuy = "<select>";
                            foreach (string paymentMode in paymentModesBuy)
                            {
                                paymentModesDDLBuy += "<option value='" + paymentMode + "'>" + paymentMode + "</option>";
                            }
                            paymentModesDDLBuy += "</select>";

                            string disableChequeNoBuy = "true";
                            string disableBankTransferNoBuy = "true";

                            if (paymentModesBuy.FirstOrDefault() == "2")
                            {
                                disableChequeNoBuy = "false";
                            }
                            else if (paymentModesBuy.FirstOrDefault() == "3")
                            {
                                disableBankTransferNoBuy = "false";
                            }

                            decimal crossRateSell = 0;
                            decimal amountLocalSell = 0;
                            decimal rateBuy = 0;
                            decimal amountLocalBuy = 0;

                            decimal totalForeign = 0;
                            decimal totalLocal = 0;

                            if (modelErrors.Count == 0)
                            {
                                decimal rateSell = Convert.ToDecimal(rateSell_str) / sellCurrency.Unit;

                                amountLocalSell = Convert.ToDecimal((Convert.ToDecimal(amountForeignSell_str) * rateSell).ToString(GetDecimalFormat(sgd.Decimal)));

                                if (Convert.ToDecimal(amountForeignBuy_str) != 0)
                                {
                                    rateBuy = Convert.ToDecimal((amountLocalSell / Convert.ToDecimal(amountForeignBuy_str)).ToString(GetRateFormat(rateDP)));
                                }

                                amountLocalBuy = amountLocalSell;

                                if (rateBuy != 0)
                                {
                                    crossRateSell = Convert.ToDecimal((rateSell / rateBuy).ToString(GetRateFormat(rateDP)));
                                }

                                //if (crossRateSell != 0)
                                //{
                                //    crossRateSell = Convert.ToDecimal((sellCurrency.Unit / crossRateSell).ToString(GetRateFormat(rateDP)));
                                //}

                                totalForeign += Convert.ToDecimal(amountForeignSell_str);
                                totalLocal += amountLocalSell;

                                result = "{\"IsValid\":true,";
                            }
                            else
                            {
                                result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                            }

                            result += "\"Result\":true,"
                                + "\"RowChanged\":\"Buy\","
                                + "\"RowIdSell\":" + rowIdSell + ","
                                + "\"AmountForeignSell\":\"" + amountForeignSell_str + "\","
                                + "\"RateSell\":\"" + rateSell_str + "\","
                                + "\"CrossRateSell\":\"" + crossRateSell.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"AmountLocalSell\":\"" + amountLocalSell.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                                + "\"RowIdBuy\":" + rowIdBuy + ","
                                + "\"SymbolBuy\":\"" + currencyChanged.Symbol + "\","
                                + "\"AmountForeignBuy\":\"" + amountForeignBuy_str + "\","
                                + "\"RateBuy\":\"" + rateBuy.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"UnitBuy\":" + currencyChanged.Unit + ","
                                + "\"AmountLocalBuy\":\"" + amountLocalBuy.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                                + "\"PaymentModesDDLBuy\":\"" + paymentModesDDLBuy + "\","
                                + "\"DisableChequeNoBuy\":" + disableChequeNoBuy + ","
                                + "\"DisableBankTransferNoBuy\":" + disableBankTransferNoBuy + ","
                                + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                                + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                        }
                        #endregion
                    }
                }
                else
                {
                    result = "{\"Result\":false,\"ErrorMessage\":\"Currency record not found!\"}";
                }
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: AmountForeignChange
        [HttpPost]
        public string AmountForeignChange(int rowId, string type, FormCollection form)
        {
            string result = "";

            try
            {
                var paycurrency = Convert.ToInt32(form["Transaction_PayCurrency_" + rowId]);
                var PayDecimal = _remittanceproductsModel.GetSingle(paycurrency).ProductDecimal;
                decimal totalPay = 0;
                decimal totalGet = 0;
                //Calculate Total Amount
                List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_PayAmount_")).ToList();

                foreach (string key in amountForeignKeys)
                {
                    string rid = key.Split('_')[2];

                    string amountForeign_str1 = form["Transaction_PayAmount_" + rid];

                    if (!string.IsNullOrEmpty(amountForeign_str1))
                    {
                        bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                        if (checkAmountForeignFormat)
                        {
                            totalPay += Convert.ToDecimal(amountForeign_str1);
                        }
                    }

                    string amountLocal_str = form["Transaction_GetAmount_" + rid];

                    if (!string.IsNullOrEmpty(amountLocal_str))
                    {
                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                        if (checkAmountLocalFormat)
                        {
                            totalGet += Convert.ToDecimal(amountLocal_str);
                        }
                    }
                }

                result = "{\"Result\":true,"
                    + "\"TotalAmountPay\":\"" + totalPay.ToString(GetDecimalFormat(PayDecimal)) + "\","
                    + "\"TotalAmountGet\":\"" + totalGet.ToString(GetDecimalFormat(8)) + "\"}";


            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: ChangePayCurrencySelectValue
        [HttpPost]
        public JsonResult ChangePayCurrencySelectValue(int rowId, string type, FormCollection form)
        {
            string result = "";
            List<ChangePayCurrency> list = new List<ChangePayCurrency>();
            var model = new ChangePayCurrency();

            try
            {
                var firstpaycurrency = Convert.ToInt32(form["Transaction_PayCurrency_" + 1]);
                //Calculate Total Amount
                List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_PayCurrency_")).ToList();

                foreach (string key in amountForeignKeys)
                {
                    string rid = key.Split('_')[2];
                    int getCurrency = Convert.ToInt32(form["Transaction_GetCurrency_" + rid]);
                    var payProduct = _remittanceproductsModel.GetSingle(firstpaycurrency);
                    Dropdown[] paymentMode = PaymentModeDDL(Convert.ToInt32(firstpaycurrency));
                    var disabledPayType = "Cash";
                    if (paymentMode.FirstOrDefault().val == "2")
                    {
                        disabledPayType = "Cheque";
                    }
                    else if (paymentMode.FirstOrDefault().val == "3")
                    {
                        disabledPayType = "BankTransfer";
                    }
                    SelectList paymentModeDDL = new SelectList(paymentMode, "val", "name");
                    Dropdown2[] currency = CurrencyDDL2("Remittance");
                    var payCurrencyDDL = new SelectList(currency, "val", "name", dataGroupField: "group", firstpaycurrency);
                    if (Convert.ToInt32(rid) > 1)
                    {
                        model = new ChangePayCurrency()
                        {
                            RowID = rid,
                            PayCurrencyValue = firstpaycurrency,
                            GetCurrencyValue = getCurrency,
                            PayPaymentModeDDL = paymentModeDDL,
                            PaySymbol = payProduct.ProductSymbol,
                            PayDecimalFormat = GetDecimalFormat(payProduct.ProductDecimal),
                            PayRate = payProduct.PayRate.ToString(),
                            PaytransactionFees = payProduct.TransactionFee.ToString(),
                            PayCurrencyDDL = payCurrencyDDL,
                            DisabledPayType = disabledPayType
                        };
                    }
                    else
                    {
                        model = new ChangePayCurrency()
                        {
                            RowID = rid,
                            PayCurrencyValue = firstpaycurrency,
                            GetCurrencyValue = getCurrency,
                            PayPaymentModeDDL = paymentModeDDL,
                            PaySymbol = payProduct.ProductSymbol,
                            PayDecimalFormat = GetDecimalFormat(payProduct.ProductDecimal),
                            PayRate = payProduct.PayRate.ToString(),
                            PaytransactionFees = payProduct.TransactionFee.ToString(),
                            PayCurrencyDDL = payCurrencyDDL
                        };
                    }
                    list.Add(model);
                }
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return Json(list);
        }

        //POST: RateChange
        [HttpPost]
        public string RateChange(int rowId, string type, FormCollection form)
        {
            string result = "";

            try
            {
                if (type == "Buy" || type == "Sell")
                {
                    #region Buy/Sell Transaction Type
                    List<string[]> modelErrors = new List<string[]>();

                    Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                    string rate_str = form["Transaction_Rate_" + rowId];

                    if (!string.IsNullOrEmpty(rate_str))
                    {
                        bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rate_str);

                        if (!checkRateFormat)
                        {
                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is not a valid Rate!", rate_str) });
                        }
                        else
                        {
                            if (currencyChanged.AcceptableRange > 0)
                            {
                                decimal upperLimit = Convert.ToDecimal(currencyChanged.BuyRate) * (1 + currencyChanged.AcceptableRange / 100);
                                decimal lowerLimit = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - currencyChanged.AcceptableRange / 100);
                                decimal rate = Convert.ToDecimal(rate_str);

                                if (rate < lowerLimit || rate > upperLimit)
                                {
                                    modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rate_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                }
                            }
                            else
                            {
                                rate_str = Convert.ToDecimal(rate_str).ToString(GetRateFormat(rateDP));
                            }
                        }
                    }
                    else
                    {
                        modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, "Rate is required!" });
                    }

                    string amountForeign_str = form["Transaction_AmountForeign_" + rowId];

                    if (!string.IsNullOrEmpty(amountForeign_str))
                    {
                        bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str);

                        if (!checkAmountForeignFormat)
                        {
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeign_str) });
                        }
                    }
                    else
                    {
                        //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                        modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "" });
                    }

                    Product sgd = _productsModel.FindCurrencyCode("SGD");

                    decimal amountLocal = 0;

                    decimal totalForeign = 0;
                    decimal totalLocal = 0;

                    if (modelErrors.Count == 0)
                    {
                        amountLocal = Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(rate_str) / currencyChanged.Unit;// Transaction Calculation Formula

                        totalForeign += Convert.ToDecimal(amountForeign_str);
                        totalLocal += amountLocal;

                        result = "{\"IsValid\":true,";
                    }
                    else
                    {
                        result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                    }

                    //Calculate Total Amount
                    List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + rowId).ToList();

                    foreach (string key in amountForeignKeys)
                    {
                        string rid = key.Split('_')[2];

                        string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                        if (!string.IsNullOrEmpty(amountForeign_str1))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                            if (checkAmountForeignFormat)
                            {
                                totalForeign += Convert.ToDecimal(amountForeign_str1);
                            }
                        }

                        string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                        if (!string.IsNullOrEmpty(amountLocal_str))
                        {
                            bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                            if (checkAmountLocalFormat)
                            {
                                totalLocal += Convert.ToDecimal(amountLocal_str);
                            }
                        }
                    }

                    result += "\"Result\":true,"
                        + "\"Rate\":\"" + rate_str + "\","
                        + "\"AmountLocal\":\"" + amountLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                        + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                        + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                    #endregion
                }
                else if (type == "Encashment")
                {
                    #region Encashment Transaction Type
                    string transactionType = form["Transaction_Type_" + rowId];

                    if (transactionType == "Sell")
                    {
                        Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                        List<string[]> modelErrors = new List<string[]>();

                        string amountForeign_str = form["Transaction_AmountForeign_" + rowId];

                        if (!string.IsNullOrEmpty(amountForeign_str))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str);

                            if (!checkAmountForeignFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeign_str) });
                            }
                        }
                        else
                        {
                            //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "" });
                        }

                        string rate_str = form["Transaction_Rate_" + rowId];

                        if (!string.IsNullOrEmpty(rate_str))
                        {
                            bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rate_str);

                            if (!checkRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is not a valid Rate!", rate_str) });
                            }
                            else
                            {
                                if (currencyChanged.AcceptableRange > 0)
                                {
                                    decimal upperLimit = Convert.ToDecimal(currencyChanged.BuyRate) * (1 + currencyChanged.AcceptableRange / 100);
                                    decimal lowerLimit = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - currencyChanged.AcceptableRange / 100);
                                    decimal rate = Convert.ToDecimal(rate_str);

                                    if (rate < lowerLimit || rate > upperLimit)
                                    {
                                        modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rate_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                    }
                                }
                                else
                                {
                                    rate_str = Convert.ToDecimal(rate_str).ToString(GetRateFormat(rateDP));
                                }
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, "Rate is required!" });
                        }

                        string encashmentRate_str = form["Transaction_EncashmentRate_" + rowId];

                        if (!string.IsNullOrEmpty(encashmentRate_str))
                        {
                            bool checkEncashmentRateFormat = FormValidationHelper.NonNegativeAmountValidation(encashmentRate_str);

                            if (!checkEncashmentRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowId, String.Format("'{0}' is not a valid Rate!", encashmentRate_str) });
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowId, "Encashment Rate is required!" });
                        }

                        Product sgd = _productsModel.FindCurrencyCode("SGD");

                        decimal amountLocalSell = 0;
                        decimal amountForeignBuy = 0;
                        decimal rateBuy = 0;
                        decimal amountLocalBuy = 0;

                        decimal totalForeign = 0;
                        decimal totalLocal = 0;

                        if (modelErrors.Count == 0)
                        {
                            amountLocalSell = Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(rate_str) / currencyChanged.Unit;// Transaction Calculation Formula

                            amountForeignBuy = Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(encashmentRate_str);// Transaction Calculation Formula

                            if (amountForeignBuy != 0)
                            {
                                rateBuy = amountLocalSell / amountForeignBuy;// Transaction Calculation Formula
                            }

                            amountLocalBuy = amountLocalSell;

                            totalForeign += Convert.ToDecimal(amountForeign_str);
                            totalLocal += amountLocalSell;

                            result = "{\"IsValid\":true,";
                        }
                        else
                        {
                            result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                        }

                        //Calculate Total Amount
                        List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + rowId).ToList();

                        foreach (string key in amountForeignKeys)
                        {
                            string rid = key.Split('_')[2];

                            string transactionType1 = form["Transaction_Type_" + rid];

                            if (transactionType1 == "Sell")
                            {
                                string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                                if (!string.IsNullOrEmpty(amountForeign_str1))
                                {
                                    bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                    if (checkAmountForeignFormat)
                                    {
                                        totalForeign += Convert.ToDecimal(amountForeign_str1);
                                    }
                                }

                                string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                                if (!string.IsNullOrEmpty(amountLocal_str))
                                {
                                    bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                    if (checkAmountLocalFormat)
                                    {
                                        totalLocal += Convert.ToDecimal(amountLocal_str);
                                    }
                                }
                            }
                        }

                        rowId++;

                        Product buyCurrency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                        //amountLocalBuy = amountLocalBuy / buyCurrency.Unit;

                        result += "\"Result\":true,"
                            + "\"Rate\":\"" + rate_str + "\","
                            + "\"AmountLocal\":\"" + amountLocalSell.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                            + "\"RowIdBuy\":" + rowId + ","
                            + "\"AmountForeignBuy\":\"" + amountForeignBuy.ToString(GetDecimalFormat(buyCurrency.Decimal)) + "\","
                            + "\"RateBuy\":\"" + rateBuy.ToString(GetRateFormat(rateDP)) + "\","
                            + "\"AmountLocalBuy\":\"" + amountLocalBuy.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                            + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                            + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                    }
                    else
                    {
                        result = "{\"Result\":false,\"ErrorMessage\":\"Rate can only be changed for Sell Type!\"}";
                    }
                    #endregion
                }
                else if (type == "Swap")
                {
                    #region Swap Transaction Type
                    string transactionType = form["Transaction_Type_" + rowId];

                    if (transactionType == "Buy")
                    {
                        Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                        List<string[]> modelErrors = new List<string[]>();

                        string amountForeign_str = form["Transaction_AmountForeign_" + rowId];

                        if (!string.IsNullOrEmpty(amountForeign_str))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str);

                            if (!checkAmountForeignFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeign_str) });
                            }
                        }
                        else
                        {
                            //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "" });
                        }

                        string rate_str = form["Transaction_Rate_" + rowId];

                        if (!string.IsNullOrEmpty(rate_str))
                        {
                            bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rate_str);

                            if (!checkRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is not a valid Rate!", rate_str) });
                            }
                            else
                            {
                                if (currencyChanged.AcceptableRange > 0)
                                {
                                    decimal upperLimit = Convert.ToDecimal(currencyChanged.BuyRate) * (1 + currencyChanged.AcceptableRange / 100);
                                    decimal lowerLimit = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - currencyChanged.AcceptableRange / 100);
                                    decimal rate = Convert.ToDecimal(rate_str);

                                    if (rate < lowerLimit || rate > upperLimit)
                                    {
                                        modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rate_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                    }
                                }
                                else
                                {
                                    rate_str = Convert.ToDecimal(rate_str).ToString(GetRateFormat(rateDP));
                                }
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, "Rate is required!" });
                        }

                        string encashmentRate_str = form["Transaction_EncashmentRate_" + rowId];

                        if (!string.IsNullOrEmpty(encashmentRate_str))
                        {
                            bool checkEncashmentRateFormat = FormValidationHelper.NonNegativeAmountValidation(encashmentRate_str);

                            if (!checkEncashmentRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowId, String.Format("'{0}' is not a valid Rate!", encashmentRate_str) });
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowId, "Encashment Rate is required!" });
                        }

                        Product sgd = _productsModel.FindCurrencyCode("SGD");

                        decimal amountLocalBuy = 0;
                        decimal amountForeignSell = 0;
                        decimal rateSell = 0;
                        decimal amountLocalSell = 0;

                        decimal totalForeign = 0;
                        decimal totalLocal = 0;

                        if (modelErrors.Count == 0)
                        {
                            amountLocalBuy = Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(rate_str) / currencyChanged.Unit;// Transaction Calculation Formula

                            amountForeignSell = Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(encashmentRate_str);// Transaction Calculation Formula

                            if (amountForeignSell != 0)
                            {
                                rateSell = amountLocalBuy / amountForeignSell;// Transaction Calculation Formula
                            }

                            amountLocalSell = amountLocalBuy;

                            totalForeign += amountForeignSell;
                            totalLocal += amountLocalSell;

                            result = "{\"IsValid\":true,";
                        }
                        else
                        {
                            result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                        }

                        //Calculate Total Amount
                        List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + (rowId + 1)).ToList();

                        foreach (string key in amountForeignKeys)
                        {
                            string rid = key.Split('_')[2];

                            string transactionType1 = form["Transaction_Type_" + rid];

                            if (transactionType1 == "Sell")
                            {
                                string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                                if (!string.IsNullOrEmpty(amountForeign_str1))
                                {
                                    bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                    if (checkAmountForeignFormat)
                                    {
                                        totalForeign += Convert.ToDecimal(amountForeign_str1);
                                    }
                                }

                                string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                                if (!string.IsNullOrEmpty(amountLocal_str))
                                {
                                    bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                    if (checkAmountLocalFormat)
                                    {
                                        totalLocal += Convert.ToDecimal(amountLocal_str);
                                    }
                                }
                            }
                        }

                        rowId++;

                        Product sellCurrency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                        //amountLocalBuy = amountLocalBuy / buyCurrency.Unit;

                        result += "\"Result\":true,"
                            + "\"Rate\":\"" + rate_str + "\","
                            + "\"AmountLocal\":\"" + amountLocalBuy.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                            + "\"RowIdSell\":" + rowId + ","
                            + "\"AmountForeignSell\":\"" + amountForeignSell.ToString(GetDecimalFormat(sellCurrency.Decimal)) + "\","
                            + "\"RateSell\":\"" + rateSell.ToString(GetRateFormat(rateDP)) + "\","
                            + "\"AmountLocalSell\":\"" + amountLocalSell.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                            + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                            + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                    }
                    else
                    {
                        result = "{\"Result\":false,\"ErrorMessage\":\"Rate can only be changed for Buy Type!\"}";
                    }
                    #endregion
                }
                else if (type == "CrossCurrency")
                {
                    #region Cross Currency Transaction Type
                    string transactionType = form["Transaction_Type_" + rowId];

                    Product sgd = _productsModel.FindCurrencyCode("SGD");
                    Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                    if (transactionType == "Sell")
                    {
                        List<string[]> modelErrors = new List<string[]>();

                        //Sell Type
                        int rowIdSell = rowId;

                        string amountForeignSell_str = form["Transaction_AmountForeign_" + rowIdSell];
                        if (!string.IsNullOrEmpty(amountForeignSell_str))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignSell_str);

                            if (checkAmountForeignFormat)
                            {
                                amountForeignSell_str = Convert.ToDecimal(amountForeignSell_str).ToString(GetDecimalFormat(currencyChanged.Decimal));
                            }
                            else
                            {
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdSell, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignSell_str) });
                            }
                        }
                        else
                        {
                            //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdSell, "Amount (Foreign) is required!" });
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdSell, "" });
                        }

                        string rateSell_str = form["Transaction_Rate_" + rowIdSell];

                        if (!string.IsNullOrEmpty(rateSell_str))
                        {
                            bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rateSell_str);

                            if (!checkRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, String.Format("'{0}' is not a valid Rate!", rateSell_str) });
                            }
                            else
                            {
                                if (currencyChanged.AcceptableRange > 0)
                                {
                                    decimal upperLimit = Convert.ToDecimal(currencyChanged.BuyRate) * (1 + currencyChanged.AcceptableRange / 100);
                                    decimal lowerLimit = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - currencyChanged.AcceptableRange / 100);
                                    decimal rate = Convert.ToDecimal(rateSell_str);

                                    if (rate < lowerLimit || rate > upperLimit)
                                    {
                                        modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rateSell_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                    }
                                    else
                                    {
                                        rateSell_str = Convert.ToDecimal(rateSell_str).ToString(GetRateFormat(rateDP));
                                    }
                                }
                                else
                                {
                                    rateSell_str = Convert.ToDecimal(rateSell_str).ToString(GetRateFormat(rateDP));
                                }
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, "Rate is required!" });
                        }

                        //Buy Type
                        int rowIdBuy = ++rowId;

                        Product buyCurrency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowIdBuy]));

                        string amountForeignBuy_str = form["Transaction_AmountForeign_" + rowIdBuy];
                        if (!string.IsNullOrEmpty(amountForeignBuy_str))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignBuy_str);

                            if (checkAmountForeignFormat)
                            {
                                amountForeignBuy_str = Convert.ToDecimal(amountForeignBuy_str).ToString(GetDecimalFormat(buyCurrency.Decimal));
                            }
                            else
                            {
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignBuy_str) });
                            }
                        }
                        else
                        {
                            //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, "Amount (Foreign) is required!" });
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, "" });
                        }

                        decimal crossRateSell = 0;
                        decimal amountLocalSell = 0;
                        decimal rateBuy = 0;
                        decimal amountLocalBuy = 0;

                        decimal totalForeign = 0;
                        decimal totalLocal = 0;

                        if (modelErrors.Count == 0)
                        {
                            decimal rateSell = Convert.ToDecimal(rateSell_str) / currencyChanged.Unit;

                            amountLocalSell = Convert.ToDecimal((Convert.ToDecimal(amountForeignSell_str) * rateSell).ToString(GetDecimalFormat(sgd.Decimal)));// Transaction Calculation Formula

                            if (Convert.ToDecimal(amountForeignBuy_str) != 0)
                            {
                                rateBuy = Convert.ToDecimal((amountLocalSell / Convert.ToDecimal(amountForeignBuy_str)).ToString(GetRateFormat(rateDP)));// Transaction Calculation Formula
                            }

                            amountLocalBuy = amountLocalSell;

                            if (rateBuy != 0)
                            {
                                crossRateSell = Convert.ToDecimal((rateSell / rateBuy).ToString(GetRateFormat(rateDP)));// Transaction Calculation Formula
                            }

                            totalForeign += Convert.ToDecimal(amountForeignSell_str);
                            totalLocal += amountLocalSell;

                            result = "{\"IsValid\":true,";
                        }
                        else
                        {
                            result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                        }

                        //Calculate Total Amount
                        List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + rowIdSell).ToList();

                        foreach (string key in amountForeignKeys)
                        {
                            string rid = key.Split('_')[2];

                            string transactionType1 = form["Transaction_Type_" + rid];

                            if (transactionType1 == "Sell")
                            {
                                string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                                if (!string.IsNullOrEmpty(amountForeign_str1))
                                {
                                    bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                    if (checkAmountForeignFormat)
                                    {
                                        totalForeign += Convert.ToDecimal(amountForeign_str1);
                                    }
                                }

                                string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                                if (!string.IsNullOrEmpty(amountLocal_str))
                                {
                                    bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                    if (checkAmountLocalFormat)
                                    {
                                        totalLocal += Convert.ToDecimal(amountLocal_str);
                                    }
                                }
                            }
                        }

                        result += "\"Result\":true,"
                            + "\"RowChanged\":\"Sell\","
                            + "\"RowIdSell\":" + rowIdSell + ","
                            + "\"AmountForeign\":\"" + amountForeignSell_str + "\","
                            + "\"AmountLocal\":\"" + amountLocalSell.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                            + "\"Rate\":\"" + rateSell_str + "\","
                            + "\"CrossRateSell\":\"" + crossRateSell.ToString(GetRateFormat(rateDP)) + "\","
                            + "\"RowIdBuy\":" + rowIdBuy + ","
                            + "\"AmountForeignBuy\":\"" + amountForeignBuy_str + "\","
                            + "\"RateBuy\":\"" + rateBuy.ToString(GetRateFormat(rateDP)) + "\","
                            + "\"AmountLocalBuy\":\"" + amountLocalBuy.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                            + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                            + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                    }
                    else
                    {
                        result = "{\"Result\":false,\"ErrorMessage\":\"Rate can only be changed for Sell Type!\"}";
                    }
                    #endregion
                }
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: EncashmentRateChange
        [HttpPost]
        public string EncashmentRateChange(int rowId, string type, FormCollection form)
        {
            string result = "";

            try
            {
                if (type == "Encashment")
                {
                    #region Encashment Transaction Type
                    string transactionType = form["Transaction_Type_" + rowId];

                    if (transactionType == "Sell")
                    {
                        Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                        List<string[]> modelErrors = new List<string[]>();

                        string amountForeign_str = form["Transaction_AmountForeign_" + rowId];

                        if (!string.IsNullOrEmpty(amountForeign_str))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str);

                            if (!checkAmountForeignFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeign_str) });
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                        }

                        string rate_str = form["Transaction_Rate_" + rowId];

                        if (!string.IsNullOrEmpty(rate_str))
                        {
                            bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rate_str);

                            if (!checkRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is not a valid Rate!", rate_str) });
                            }
                            else
                            {
                                if (currencyChanged.AcceptableRange > 0)
                                {
                                    decimal upperLimit = Convert.ToDecimal(currencyChanged.BuyRate) * (1 + currencyChanged.AcceptableRange / 100);
                                    decimal lowerLimit = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - currencyChanged.AcceptableRange / 100);
                                    decimal rate = Convert.ToDecimal(rate_str);

                                    if (rate < lowerLimit || rate > upperLimit)
                                    {
                                        modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rate_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                    }
                                }
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, "Rate is required!" });
                        }

                        string encashmentRate_str = form["Transaction_EncashmentRate_" + rowId];

                        if (!string.IsNullOrEmpty(encashmentRate_str))
                        {
                            bool checkEncashmentRateFormat = FormValidationHelper.NonNegativeAmountValidation(encashmentRate_str);

                            if (!checkEncashmentRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowId, String.Format("'{0}' is not a valid Encashment Rate!", encashmentRate_str) });
                            }
                            else
                            {
                                encashmentRate_str = Convert.ToDecimal(encashmentRate_str).ToString(GetRateFormat(rateDP));
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowId, "Encashment Rate is required!" });
                        }

                        Product sgd = _productsModel.FindCurrencyCode("SGD");

                        decimal amountLocalSell = 0;
                        decimal amountForeignBuy = 0;
                        decimal rateBuy = 0;
                        decimal amountLocalBuy = 0;

                        if (modelErrors.Count == 0)
                        {
                            amountLocalSell = Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(rate_str) / currencyChanged.Unit;// Transaction Calculation Formula

                            amountForeignBuy = Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(encashmentRate_str);// Transaction Calculation Formula

                            if (amountForeignBuy != 0)
                            {
                                rateBuy = amountLocalSell / amountForeignBuy;// Transaction Calculation Formula
                            }

                            amountLocalBuy = amountLocalSell;

                            result = "{\"IsValid\":true,";
                        }
                        else
                        {
                            result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                        }

                        rowId++;

                        Product buyCurrency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                        result += "\"Result\":true,"
                            + "\"EncashmentRate\":\"" + encashmentRate_str + "\","
                            + "\"RowIdBuy\":" + rowId + ","
                            + "\"AmountForeignBuy\":\"" + amountForeignBuy.ToString(GetDecimalFormat(buyCurrency.Decimal)) + "\","
                            + "\"RateBuy\":\"" + rateBuy.ToString(GetRateFormat(rateDP)) + "\"}";
                    }
                    else
                    {
                        result = "{\"Result\":false,\"ErrorMessage\":\"Encashment Rate can only be changed for Sell Type!\"}";
                    }
                    #endregion
                }
                else if (type == "Swap")
                {
                    #region Swap Transaction Type
                    string transactionType = form["Transaction_Type_" + rowId];

                    if (transactionType == "Buy")
                    {
                        Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                        List<string[]> modelErrors = new List<string[]>();

                        string amountForeign_str = form["Transaction_AmountForeign_" + rowId];

                        if (!string.IsNullOrEmpty(amountForeign_str))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str);

                            if (!checkAmountForeignFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeign_str) });
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                        }

                        string rate_str = form["Transaction_Rate_" + rowId];

                        if (!string.IsNullOrEmpty(rate_str))
                        {
                            bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rate_str);

                            if (!checkRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is not a valid Rate!", rate_str) });
                            }
                            else
                            {
                                if (currencyChanged.AcceptableRange > 0)
                                {
                                    decimal upperLimit = Convert.ToDecimal(currencyChanged.BuyRate) * (1 + currencyChanged.AcceptableRange / 100);
                                    decimal lowerLimit = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - currencyChanged.AcceptableRange / 100);
                                    decimal rate = Convert.ToDecimal(rate_str);

                                    if (rate < lowerLimit || rate > upperLimit)
                                    {
                                        modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rate_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                    }
                                }
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, "Rate is required!" });
                        }

                        string encashmentRate_str = form["Transaction_EncashmentRate_" + rowId];

                        if (!string.IsNullOrEmpty(encashmentRate_str))
                        {
                            bool checkEncashmentRateFormat = FormValidationHelper.NonNegativeAmountValidation(encashmentRate_str);

                            if (!checkEncashmentRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowId, String.Format("'{0}' is not a valid Encashment Rate!", encashmentRate_str) });
                            }
                            else
                            {
                                encashmentRate_str = Convert.ToDecimal(encashmentRate_str).ToString(GetRateFormat(rateDP));
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowId, "Encashment Rate is required!" });
                        }

                        Product sgd = _productsModel.FindCurrencyCode("SGD");

                        decimal amountLocalBuy = 0;
                        decimal amountForeignSell = 0;
                        decimal rateSell = 0;
                        decimal amountLocalSell = 0;

                        decimal totalForeign = 0;
                        decimal totalLocal = 0;

                        if (modelErrors.Count == 0)
                        {
                            amountLocalBuy = Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(rate_str) / currencyChanged.Unit;// Transaction Calculation Formula

                            amountForeignSell = Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(encashmentRate_str);// Transaction Calculation Formula

                            if (amountForeignSell != 0)
                            {
                                rateSell = amountLocalBuy / amountForeignSell;// Transaction Calculation Formula
                            }

                            amountLocalSell = amountLocalBuy;

                            totalForeign += amountForeignSell;
                            totalLocal += amountLocalSell;

                            result = "{\"IsValid\":true,";
                        }
                        else
                        {
                            result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                        }

                        //Calculate Total Amount
                        List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + (rowId + 1)).ToList();

                        foreach (string key in amountForeignKeys)
                        {
                            string rid = key.Split('_')[2];

                            string transactionType1 = form["Transaction_Type_" + rid];

                            if (transactionType1 == "Sell")
                            {
                                string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                                if (!string.IsNullOrEmpty(amountForeign_str1))
                                {
                                    bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                    if (checkAmountForeignFormat)
                                    {
                                        totalForeign += Convert.ToDecimal(amountForeign_str1);
                                    }
                                }

                                string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                                if (!string.IsNullOrEmpty(amountLocal_str))
                                {
                                    bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                    if (checkAmountLocalFormat)
                                    {
                                        totalLocal += Convert.ToDecimal(amountLocal_str);
                                    }
                                }
                            }
                        }

                        rowId++;

                        Product sellCurrency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                        result += "\"Result\":true,"
                            + "\"EncashmentRate\":\"" + encashmentRate_str + "\","
                            + "\"RowIdSell\":" + rowId + ","
                            + "\"AmountForeignSell\":\"" + amountForeignSell.ToString(GetDecimalFormat(sellCurrency.Decimal)) + "\","
                            + "\"RateSell\":\"" + rateSell.ToString(GetRateFormat(rateDP)) + "\","
                            + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                            + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                    }
                    else
                    {
                        result = "{\"Result\":false,\"ErrorMessage\":\"Encashment Rate can only be changed for Buy Type!\"}";
                    }
                    #endregion Swap Transaction Type
                }
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: CrossRateChange
        [HttpPost]
        public string CrossRateChange(int rowId, FormCollection form)
        {
            string result = "";

            try
            {
                string transactionType = form["Transaction_Type_" + rowId];

                if (transactionType == "Sell")
                {
                    //Sell Type
                    List<string[]> modelErrors = new List<string[]>();

                    string crossRate_str = form["Transaction_CrossRate_" + rowId];
                    if (!string.IsNullOrEmpty(crossRate_str))
                    {
                        bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(crossRate_str);

                        if (checkRateFormat)
                        {
                            crossRate_str = Convert.ToDecimal(crossRate_str).ToString(GetRateFormat(rateDP));
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_CrossRate_" + rowId, "'" + crossRate_str + "' is not a valid Cross Rate!" });
                        }
                    }
                    else
                    {
                        modelErrors.Add(new string[] { "Transaction_CrossRate_" + rowId, "Cross Rate is required!" });
                    }

                    if (modelErrors.Count == 0)
                    {
                        result = "{\"IsValid\":true,";
                    }
                    else
                    {
                        result = "{\"IsValid\":true,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                    }

                    result += "\"Result\":true,"
                        + "\"CrossRate\":\"" + crossRate_str + "\"}";
                }
                else
                {
                    result = "{\"Result\":false,\"ErrorMessage\":\"Cross Rate can only be changed for Sell Type!\"}";
                }
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: OpenDenomination
        [HttpPost]
        public string OpenDenomination(int pid, int rowId, string amountForeign)
        {
            string result = "";

            try
            {
                if (!string.IsNullOrEmpty(amountForeign))
                {
                    bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign);

                    if (checkAmountForeignFormat)
                    {
                        Product product = _productsModel.GetSingle(pid);
                        ViewData["ProductDenomination"] = product.ProductDenominations.OrderByDescending(e => e.DenominationValue).ToList();

                        ViewData["RowId"] = rowId;

                        string view = "";

                        using (var sw = new StringWriter())
                        {
                            var viewResult = ViewEngines.Engines.FindPartialView(ControllerContext, "OpenDenomination");
                            var viewContext = new ViewContext(ControllerContext, viewResult.View, ViewData, TempData, sw);
                            viewResult.View.Render(viewContext, sw);
                            viewResult.ViewEngine.ReleaseView(ControllerContext, viewResult.View);
                            view = sw.GetStringBuilder().ToString();
                        }

                        view = JsonConvert.SerializeObject(view);

                        result = "{\"Result\":\"true\",\"ModalTitle\":\"Denomination - " + product.CurrencyCode + "\",\"ColumnName\":\"AMT (" + product.CurrencyCode + ")\",\"View\":" + view + "}";
                    }
                    else
                    {
                        result = "{\"Result\":false,\"ErrorMessage\":\"'" + amountForeign + "' is not a valid Amount (Foreign)!\"}";
                    }
                }
                else
                {
                    result = "{\"Result\":false,\"ErrorMessage\":\"Amount (Foreign) is required!\"}";
                }
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: PiecesChange
        [HttpPost]
        public string PiecesChange(int rowId, int rowId2, FormCollection form)
        {
            string result = "";

            try
            {
                List<string[]> modelErrors = new List<string[]>();

                string pieces = form["Denomination_Value_Pieces_" + rowId + "_" + rowId2];

                if (!string.IsNullOrEmpty(pieces))
                {
                    bool checkPiecesFormat = FormValidationHelper.NonNegativeAmountValidation(pieces);

                    if (checkPiecesFormat)
                    {
                        pieces = Convert.ToDecimal(pieces).ToString(GetDecimalFormat(0));
                    }
                    else
                    {
                        modelErrors.Add(new string[] { "Denomination_Value_Pieces_" + rowId + "_" + rowId2, "'" + pieces + "' is not a valid Pieces!" });
                    }
                }
                else
                {
                    modelErrors.Add(new string[] { "Denomination_Value_Pieces_" + rowId + "_" + rowId2, "Pieces is required!" });
                }

                Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));
                string currencyChangedFormat = GetDecimalFormat(currencyChanged.Decimal);

                decimal amountForeign = 0;

                decimal totalOrder = 0;
                decimal totalCalculated = 0;
                decimal totalRemaining = 0;

                if (modelErrors.Count == 0)
                {
                    int pcs = Convert.ToInt32(pieces.Replace(",", ""));
                    int deno = Convert.ToInt32(form["Denomination_Value_" + rowId + "_" + rowId2]);

                    amountForeign = pcs * deno;

                    totalCalculated += amountForeign;

                    result = "{\"IsValid\":true,";
                }
                else
                {
                    result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                }

                //Calculate total order, total remaining, total calculated
                string amountForeign_str = form["Transaction_AmountForeign_" + rowId];

                if (!string.IsNullOrEmpty(amountForeign_str))
                {
                    bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str);

                    if (checkAmountForeignFormat)
                    {
                        totalOrder = Convert.ToDecimal(amountForeign_str);
                    }
                }

                List<string> denoKeys = form.AllKeys.Where(e => e.Contains("Denomination_Value_AmountForeign_" + rowId + "_") && e != "Denomination_Value_AmountForeign_" + rowId + "_" + rowId2).ToList();

                foreach (string key in denoKeys)
                {
                    bool checkDenoAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(form[key]);

                    if (checkDenoAmountForeignFormat)
                    {
                        totalCalculated += Convert.ToDecimal(form[key]);
                    }
                }

                totalRemaining = totalOrder - totalCalculated;

                result += "\"Result\":true,"
                    + "\"Pieces\":\"" + pieces + "\","
                    + "\"DenoAmountForeign\":\"" + amountForeign.ToString(currencyChangedFormat) + "\","
                    + "\"DenoTotalCalculated\":\"" + totalCalculated.ToString(currencyChangedFormat) + "\","
                    + "\"DenoTotalRemaining\":\"" + totalRemaining.ToString(currencyChangedFormat) + "\","
                    + "\"DenoTotalOrder\":\"" + totalOrder.ToString(currencyChangedFormat) + "\"}";
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: CoinsChange
        [HttpPost]
        public string CoinsChange(int rowId, int rowId2, FormCollection form)
        {
            string result = "";

            try
            {
                List<string[]> modelErrors = new List<string[]>();

                Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));
                string currencyChangedFormat = GetDecimalFormat(currencyChanged.Decimal);

                string denoAmountForeign_str = form["Denomination_Value_AmountForeign_" + rowId + "_" + rowId2];

                if (!string.IsNullOrEmpty(denoAmountForeign_str))
                {
                    bool checkDenoAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(denoAmountForeign_str);

                    if (checkDenoAmountForeignFormat)
                    {
                        denoAmountForeign_str = Convert.ToDecimal(denoAmountForeign_str).ToString(currencyChangedFormat);
                    }
                    else
                    {
                        modelErrors.Add(new string[] { "Denomination_Value_AmountForeign_" + rowId + "_" + rowId2, "'" + denoAmountForeign_str + "' is not a valid AMT (" + currencyChanged.CurrencyCode + ")!" });
                    }
                }
                else
                {
                    modelErrors.Add(new string[] { "Denomination_Value_AmountForeign_" + rowId + "_" + rowId2, "AMT (" + currencyChanged.CurrencyCode + ") is required!" });
                }

                decimal totalOrder = 0;
                decimal totalCalculated = 0;
                decimal totalRemaining = 0;

                if (modelErrors.Count == 0)
                {
                    decimal amountForeign = Convert.ToDecimal(denoAmountForeign_str);

                    totalCalculated += amountForeign;

                    result = "{\"IsValid\":true,";
                }
                else
                {
                    result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                }

                //Calculate total order, total remaining, total calculated
                string amountForeign_str = form["Transaction_AmountForeign_" + rowId];

                if (!string.IsNullOrEmpty(amountForeign_str))
                {
                    bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str);

                    if (checkAmountForeignFormat)
                    {
                        totalOrder = Convert.ToDecimal(amountForeign_str);
                    }
                }

                List<string> denoKeys = form.AllKeys.Where(e => e.Contains("Denomination_Value_AmountForeign_" + rowId + "_") && e != "Denomination_Value_AmountForeign_" + rowId + "_" + rowId2).ToList();

                foreach (string key in denoKeys)
                {
                    bool checkDenoAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(form[key]);

                    if (checkDenoAmountForeignFormat)
                    {
                        totalCalculated += Convert.ToDecimal(form[key]);
                    }
                }

                totalRemaining = totalOrder - totalCalculated;

                result += "\"Result\":true,"
                    + "\"DenoAmountForeign\":\"" + denoAmountForeign_str + "\","
                    + "\"DenoTotalCalculated\":\"" + totalCalculated.ToString(currencyChangedFormat) + "\","
                    + "\"DenoTotalRemaining\":\"" + totalRemaining.ToString(currencyChangedFormat) + "\","
                    + "\"DenoTotalOrder\":\"" + totalOrder.ToString(currencyChangedFormat) + "\"}";
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: RemoveTransaction
        [HttpPost]
        public string RemoveTransaction(string type, FormCollection form)
        {
            string result = "";

            try
            {
                Product sgd = _productsModel.FindCurrencyCode("SGD");

                decimal totalForeign = 0;
                decimal totalLocal = 0;

                List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_PayAmount_")).ToList();
                var payDecimal = 1;
                var getDecimal = 1;

                //Calculate Total Amount
                foreach (string key in amountForeignKeys)
                {
                    string rid = key.Split('_')[2];

                    string amountForeign_str1 = form["Transaction_GetAmount_" + rid];
                    getDecimal = Convert.ToInt32(form["Transaction_GetCurrency_" + rid]);

                    if (!string.IsNullOrEmpty(amountForeign_str1))
                    {
                        bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                        if (checkAmountForeignFormat)
                        {
                            totalForeign += Convert.ToDecimal(amountForeign_str1);
                        }
                    }

                    string amountLocal_str = form["Transaction_PayAmount_" + rid];
                    payDecimal = Convert.ToInt32(form["Transaction_PayCurrency_" + rid]);

                    if (!string.IsNullOrEmpty(amountLocal_str))
                    {
                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                        if (checkAmountLocalFormat)
                        {
                            totalLocal += Convert.ToDecimal(amountLocal_str);
                        }
                    }
                }


                result += "{\"Result\":true,"
                        + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                        + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(payDecimal)) + "\"}";
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: ValidateAmount
        [HttpPost]
        public string ValidateAmount(string amount, int dp = 2)
        {
            string result = "";

            try
            {
                if (!string.IsNullOrEmpty(amount))
                {
                    bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(amount);

                    if (checkFormat)
                    {
                        amount = Convert.ToDecimal(amount).ToString(GetDecimalFormat(dp));

                        result = "{\"Result\":true,\"Amount\":\"" + amount + "\"}";
                    }
                    else
                    {
                        result = "{\"Result\":false,\"ErrorMessage\":\"'" + amount + "' is not a valid Amount!\"}";
                    }
                }
                else
                {
                    result = "{\"Result\":false,\"ErrorMessage\":\"Amount is required!\"}";
                }
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: ValidateAmount
        [HttpPost]
        public string ValidateAmount2(string amount, bool allowedNegative, int dp = 2)
        {
            string result = "";

            try
            {
                if (!string.IsNullOrEmpty(amount))
                {
                    bool checkFormat = allowedNegative ? FormValidationHelper.AmountValidation(amount) : FormValidationHelper.NonNegativeAmountValidation(amount);

                    if (checkFormat)
                    {
                        amount = Convert.ToDecimal(amount).ToString(GetDecimalFormat(dp));

                        result = "{\"Result\":true,\"Amount\":\"" + amount + "\"}";
                    }
                    else
                    {
                        result = "{\"Result\":false,\"ErrorMessage\":\"'" + amount + "' is not a valid Amount!\"}";
                    }
                }
                else
                {
                    result = "{\"Result\":false,\"ErrorMessage\":\"Amount is required!\"}";
                }
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        public string GetDecimalFormat(int dp)
        {
            string format = "#,##0";

            switch (dp)
            {
                case 1:
                    format += ".0";
                    break;
                case 2:
                    format += ".00";
                    break;
                case 3:
                    format += ".000";
                    break;
                case 4:
                    format += ".0000";
                    break;
                case 5:
                    format += ".00000";
                    break;
                case 6:
                    format += ".000000";
                    break;
                case 7:
                    format += ".0000000";
                    break;
                case 8:
                    format += ".00000000";
                    break;
                case 9:
                    format += ".000000000";
                    break;
                case 10:
                    format += ".0000000000";
                    break;
                case 11:
                    format += ".00000000000";
                    break;
                case 12:
                    format += ".000000000000";
                    break;
                default:
                    break;
            }

            return format;
        }

        public string GetRateFormat(int dp)
        {
            string format = "#,##0";

            switch (dp)
            {
                case 1:
                    format += ".#";
                    break;
                case 2:
                    format += ".##";
                    break;
                case 3:
                    format += ".###";
                    break;
                case 4:
                    format += ".####";
                    break;
                case 5:
                    format += ".#####";
                    break;
                case 6:
                    format += ".######";
                    break;
                case 7:
                    format += ".#######";
                    break;
                case 8:
                    format += ".########";
                    break;
                case 9:
                    format += ".#########";
                    break;
                case 10:
                    format += ".##########";
                    break;
                case 11:
                    format += ".###########";
                    break;
                case 12:
                    format += ".############";
                    break;
                default:
                    break;
            }

            return format;
        }

        //GET: SearchClosestString
        public string SearchClosestString(string searchString, string options)
        {
            string closest = "";
            List<string> list = options.Split(',').ToList();//convert string to list
            list.Add(searchString);//add searchString into list
            list = list.OrderBy(e => e).ToList();//sort list by ascending order
            int index = list.FindIndex(e => e == searchString);//get the index where searchString located
            if (index == 0)//if searchString is the first element of list, closest is the next element
            {
                closest = list[1];
            }
            else if (index == list.Count - 1)//if searchString is the last element of list, closest is previous element
            {
                closest = list[index - 1];
            }
            else//if searchString is in the middle of list
            {
                string up = list[index - 1];//get the previous element
                string down = list[index + 1];//get the next element

                for (int count = 0; count < searchString.Length - 1 && count < up.Length && count < down.Length; count++)//loop through all letters in searchString
                {
                    if (up[count] == searchString[count] && down[count] != searchString[count]) //first letter of searchString equal to first letter of previous element, but not equal to first letter of next element
                    {
                        closest = up;
                        break;
                    }
                    else if (up[count] != searchString[count] && down[count] == searchString[count])//first letter of searchString equal to first letter of next element, but not equal to first letter of previous element
                    {
                        closest = down;
                        break;
                    }
                    else if (up[count] != searchString[count] && down[count] != searchString[count])//if both first letter not equal
                    {
                        int upDist = searchString[count] - up[count];//get the distance from first letter of previous element
                        int downDist = down[count] - searchString[count];//get the distance from first letter of next element

                        if (upDist < downDist)
                        {
                            closest = up;
                            break;
                        }
                        else if (downDist < upDist)
                        {
                            closest = down;
                            break;
                        }
                    }
                }
            }

            if (string.IsNullOrEmpty(closest))
            {
                closest = list[index + 1];
            }

            return closest;
        }

        //POST: ApproveSale
        [HttpPost]
        [RedirectingActionForUpdate]
        public ActionResult ApproveSale(int id, FormCollection form)
        {
            int page = 1;

            if (TempData["Page"] != null)
            {
                page = Convert.ToInt32(TempData["Page"]);
                ViewData["Page"] = page;
            }

            string remarks = form["sales.Remarks"].Trim();

            Sale oldData = _salesModel.GetSingle(id);

            if (oldData != null)
            {
                if (oldData.Status == "Pending GM Approval")
                {
                    oldData.Status = "Pending Accounts";
                    if (!string.IsNullOrEmpty(form["sales.Remarks"]))
                    {
                        oldData.Remarks = form["sales.Remarks"].Trim();
                    }
                    oldData.LastApprovalOn = DateTime.Now;

                    bool result = _salesModel.Update(id, oldData);

                    if (result)
                    {
                        int userid = Convert.ToInt32(Session["UserId"]);
                        string tableAffected = "RemittanceSales";
                        string description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Approved Remittance Sale";

                        bool sale_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);

                        if (sale_log)
                        {
                            //Add Approval History
                            bool approval_history = _approvalHistorysModel.Add("Sale", oldData.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Approve", "[" + Session["Username"].ToString() + "] Approved Remittance Sale");
                        }

                        TempData.Add("Result", "success|" + oldData.MemoID + " has been successfully approved!");
                    }
                    else
                    {
                        TempData.Add("Result", "danger|An error occured while approving sale record!");
                    }
                }
                else if (oldData.Status == "Pending Delete GM Approval")
                {
                    return RedirectToAction("Delete", new { @id = oldData.ID });
                }
                else
                {
                    TempData.Add("Result", "error|" + oldData.MemoID + " no need approval!");
                }
            }
            else
            {
                TempData.Add("Result", "error|Memo ID not found!");
            }

            return RedirectToAction("Listing", new { @page = page });
        }

        //GET: Delete
        [RedirectingActionForDelete]
        public ActionResult Delete(int id)
        {
            int page = 1;

            if (TempData["Page"] != null)
            {
                page = Convert.ToInt32(TempData["Page"]);
                ViewData["Page"] = page;
            }

            Remittances sales = _remittancesalesModel.GetSingle(id);

            if (sales != null)
            {
                if (sales.Status == "Pending Accounts" || sales.Status == "Pending Packing" || sales.Status == "Pending Assign Delivery")
                {
                    bool result = _remittancesalesModel.Delete(id);

                    if (result)
                    {
                        int userid = Convert.ToInt32(Session["UserId"]);
                        string tableAffected = "RemittanceSales";
                        string description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Deleted Remittance Sale [" + sales.MemoID + "]";

                        bool sale_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);

                        TempData.Add("Result", "success|" + sales.MemoID + " has been successfully deleted!");
                    }
                    else
                    {
                        TempData.Add("Result", "danger|An error occured while deleting sale record!");
                    }
                }
                else if (sales.Status == "Completed")
                {
                    if (Session["UserRole"].ToString().Contains("Super Admin") || Session["UserRole"].ToString().Contains("General Manager"))
                    {
                        bool isDeletable = true;

                        //if (sales.TransactionType != "Sell" && sales.Status == "Completed")
                        //{
                        //    List<SaleTransaction> filteredTransactions = sales.SaleTransactions.Where(e => e.TransactionType == "Buy").ToList();

                        //    foreach (SaleTransaction transaction in filteredTransactions)
                        //    {
                        //        EndDayTrade trade = _endDayTradesModel.GetProductCurrentTrade(transaction.CurrencyId, sales.LastApprovalOn);

                        //        if (trade != null)
                        //        {
                        //            EndDayTrade futureTrade = _endDayTradesModel.GetProductFutureTrade(transaction.CurrencyId, trade.CurrentActivationTime);

                        //            if (futureTrade != null)
                        //            {
                        //                isDeletable = false;
                        //            }
                        //        }
                        //    }
                        //}

                        if (isDeletable)
                        {
                            sales.Status = "Cancelled";

                            bool result = _remittancesalesModel.Update(sales.ID, sales);

                            if (result)
                            {
                                int userid = Convert.ToInt32(Session["UserId"]);
                                string tableAffected = "RemittanceSales";
                                string description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Approved Pending Delete Remittance Sale [" + sales.MemoID + "]";

                                bool sale_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);

                                if (sale_log)
                                {
                                    //Add Approval History
                                    bool approval_history = _approvalHistorysModel.Add("RemittanceSale", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Approve Cancel", description);
                                }

                                //Update Each Related Parts
                                //#region Return amounts to Product
                                //bool add_productInventory = false;
                                //bool deduct_productInventory = false;

                                //bool add_inventory = false;
                                //bool deduct_inventory = false;

                                //Dictionary<string, decimal> transactAmount = new Dictionary<string, decimal>();

                                //foreach (RemittanceOrders transaction in sales.RemittanceOders)
                                //{
                                //    if (transaction.TransactionType == "Buy")
                                //    {
                                //        Product addProducts = _productsModel.GetSingle(transaction.CurrencyId);
                                //        addProducts.ProductInventories[0].TotalInAccount -= transaction.AmountForeign;
                                //        if (transactAmount.ContainsKey(addProducts.CurrencyCode))
                                //        {
                                //            transactAmount[addProducts.CurrencyCode] -= transaction.AmountForeign;
                                //        }
                                //        else
                                //        {
                                //            transactAmount.Add(addProducts.CurrencyCode, transaction.AmountForeign * -1);
                                //        }
                                //        bool result_addProductInventory = _productInventoriesModel.Update(addProducts.ProductInventories[0].ID, addProducts.ProductInventories[0]);

                                //        if (result_addProductInventory)
                                //        {
                                //            Inventory inventory = new Inventory();
                                //            inventory.ProductId = addProducts.ID;
                                //            inventory.Type = "Deduct";
                                //            inventory.Amount = transaction.AmountForeign;
                                //            inventory.Description = "Deleted Sale Transaction [MemoID: " + sales.MemoID + "]";
                                //            bool result_inventory = _inventoriesModel.Add(inventory);

                                //            if (result_inventory)
                                //            {
                                //                if (!add_inventory)
                                //                {
                                //                    add_inventory = true;
                                //                }
                                //            }

                                //            if (!add_productInventory)
                                //            {
                                //                add_productInventory = true;
                                //            }
                                //        }

                                //        Product deductProducts = _productsModel.FindCurrencyCode("SGD");
                                //        deductProducts.ProductInventories[0].TotalInAccount += transaction.AmountLocal;
                                //        if (transactAmount.ContainsKey(deductProducts.CurrencyCode))
                                //        {
                                //            transactAmount[deductProducts.CurrencyCode] += transaction.AmountLocal;
                                //        }
                                //        else
                                //        {
                                //            transactAmount.Add(deductProducts.CurrencyCode, transaction.AmountLocal);
                                //        }
                                //        bool result_deductProductInventory = _productInventoriesModel.Update(deductProducts.ProductInventories[0].ID, deductProducts.ProductInventories[0]);

                                //        if (result_deductProductInventory)
                                //        {
                                //            Inventory inventory = new Inventory();
                                //            inventory.ProductId = deductProducts.ID;
                                //            inventory.Type = "Add";
                                //            inventory.Amount = transaction.AmountLocal;
                                //            inventory.Description = "Deleted Sale Transaction [MemoID: " + sales.MemoID + "]";
                                //            bool result_inventory = _inventoriesModel.Add(inventory);

                                //            if (result_inventory)
                                //            {
                                //                if (!deduct_inventory)
                                //                {
                                //                    deduct_inventory = true;
                                //                }
                                //            }

                                //            if (!deduct_productInventory)
                                //            {
                                //                deduct_productInventory = true;
                                //            }
                                //        }
                                //    }
                                //    else
                                //    {
                                //        Product deductProducts = _productsModel.GetSingle(transaction.CurrencyId);
                                //        deductProducts.ProductInventories[0].TotalInAccount += transaction.AmountForeign;
                                //        if (transactAmount.ContainsKey(deductProducts.CurrencyCode))
                                //        {
                                //            transactAmount[deductProducts.CurrencyCode] += transaction.AmountForeign;
                                //        }
                                //        else
                                //        {
                                //            transactAmount.Add(deductProducts.CurrencyCode, transaction.AmountForeign);
                                //        }
                                //        bool result_deductProductInventory = _productInventoriesModel.Update(deductProducts.ProductInventories[0].ID, deductProducts.ProductInventories[0]);

                                //        if (result_deductProductInventory)
                                //        {
                                //            Inventory inventory = new Inventory();
                                //            inventory.ProductId = deductProducts.ID;
                                //            inventory.Type = "Add";
                                //            inventory.Amount = transaction.AmountForeign;
                                //            inventory.Description = "Deleted Sale Transaction [MemoID: " + sales.MemoID + "]";
                                //            bool result_inventory = _inventoriesModel.Add(inventory);

                                //            if (result_inventory)
                                //            {
                                //                if (!deduct_inventory)
                                //                {
                                //                    deduct_inventory = true;
                                //                }
                                //            }

                                //            if (!deduct_productInventory)
                                //            {
                                //                deduct_productInventory = true;
                                //            }
                                //        }

                                //        Product addProducts = _productsModel.FindCurrencyCode("SGD");
                                //        addProducts.ProductInventories[0].TotalInAccount -= transaction.AmountLocal;
                                //        if (transactAmount.ContainsKey(addProducts.CurrencyCode))
                                //        {
                                //            transactAmount[addProducts.CurrencyCode] -= transaction.AmountLocal;
                                //        }
                                //        else
                                //        {
                                //            transactAmount.Add(addProducts.CurrencyCode, transaction.AmountLocal * -1);
                                //        }
                                //        bool result_addProductInventory = _productInventoriesModel.Update(addProducts.ProductInventories[0].ID, addProducts.ProductInventories[0]);

                                //        if (result_addProductInventory)
                                //        {
                                //            Inventory inventory = new Inventory();
                                //            inventory.ProductId = addProducts.ID;
                                //            inventory.Type = "Deduct";
                                //            inventory.Amount = transaction.AmountLocal;
                                //            inventory.Description = "Deleted Sale Transaction [MemoID: " + sales.MemoID + "]";
                                //            bool result_inventory = _inventoriesModel.Add(inventory);

                                //            if (result_inventory)
                                //            {
                                //                if (!add_inventory)
                                //                {
                                //                    add_inventory = true;
                                //                }
                                //            }

                                //            if (!add_productInventory)
                                //            {
                                //                add_productInventory = true;
                                //            }
                                //        }
                                //    }
                                //}
                                //#endregion

                                //#region Update End of Day Trade
                                //bool hasDeleteEndDayTradeTransactions = false;
                                //bool hasUpdateTrade = false;

                                //List<EndDayTradeTransaction> endDayTradeTransactions = _endDayTradeTransactionsModel.GetAll(sales.SaleTransactions.Select(e => e.ID).ToList(), sales.LastApprovalOn);

                                //if (endDayTradeTransactions.Count > 0)
                                //{
                                //    List<EndDayTrade> endDayTrades = endDayTradeTransactions.Select(e => e.EndDayTrade).Distinct().ToList();

                                //    //Delete existing records
                                //    foreach (EndDayTradeTransaction tradeTransaction in endDayTradeTransactions)
                                //    {
                                //        bool endDayTradeTransactions_delete = _endDayTradeTransactionsModel.Delete(tradeTransaction.ID);

                                //        if (endDayTradeTransactions_delete)
                                //        {
                                //            hasDeleteEndDayTradeTransactions = true;
                                //        }
                                //    }

                                //    //Recalculate End of Day Trades
                                //    if (hasDeleteEndDayTradeTransactions)
                                //    {
                                //        //Dictionary<int, decimal[]> currentClosings = new Dictionary<int, decimal[]>();

                                //        foreach (EndDayTrade trade in endDayTrades)
                                //        {
                                //            decimal totalAmountForeign = 0;
                                //            decimal totalAmountLocal = 0;
                                //            List<string> desciptions = new List<string>();

                                //            List<EndDayTradeTransaction> tradeTransactions = _endDayTradeTransactionsModel.GetAll(trade.ID);

                                //            string amountForeignFormat = GetDecimalFormat(trade.Products.Decimal);
                                //            string sgdFormat = GetDecimalFormat(sgdDp);

                                //            foreach (EndDayTradeTransaction transaction in tradeTransactions)
                                //            {
                                //                totalAmountForeign += transaction.AmountForeign;
                                //                totalAmountLocal += transaction.AmountLocal;
                                //                desciptions.Add(String.Format("{0}-{1}:{2}:{3}:{4}:{5}", transaction.SaleTransaction.Sales.MemoID, transaction.SaleTransaction.TransactionID, transaction.SaleTransaction.Products.Symbol + transaction.AmountForeign.ToString(amountForeignFormat), transaction.SaleTransaction.Rate.ToString(GetRateFormat(rateDP)), transaction.SaleTransaction.EncashmentRate != null ? Convert.ToDecimal(transaction.SaleTransaction.EncashmentRate).ToString(GetRateFormat(rateDP)) : "-", "SGD" + (transaction.AmountLocal * trade.Products.Unit).ToString(sgdFormat)));
                                //            }

                                //            EndDayTrade previousTrade = _endDayTradesModel.GetProductPreviousTrade(trade.CurrencyId, trade.LastActivationTime);

                                //            decimal openingBankAmount = trade.OpeningBankAmount;
                                //            decimal openingCashAmount = trade.OpeningCashAmount;
                                //            decimal openingForeignCurrencyBal = trade.OpeningForeignCurrencyBalance;
                                //            decimal openingAveragePurchaseCost = trade.OpeningAveragePurchaseCost;
                                //            decimal openingBalanceAtAveragePurchase = trade.OpeningBalanceAtAveragePurchase;
                                //            decimal openingProfitAmount = trade.OpeningProfitAmount;
                                //            decimal closingBankAmount = trade.ClosingBankAmount;
                                //            decimal closingCashAmount = trade.ClosingCashAmount;
                                //            decimal closingForeignCurrencyBal = trade.ClosingForeignCurrencyBalance;
                                //            decimal closingAveragePurchaseCost = trade.ClosingAveragePurchaseCost;
                                //            decimal closingBalanceAtAveragePurchase = trade.ClosingBalanceAtAveragePurchase;
                                //            decimal closingProfitAmount = trade.ClosingProfitAmount;
                                //            List<string> transactionDescription = new List<string>();

                                //            decimal foreignCurrencyBal = trade.ClosingForeignCurrencyBalance;
                                //            decimal averageRate = trade.ClosingAveragePurchaseCost;
                                //            decimal closingBal = trade.ClosingBalanceAtAveragePurchase;

                                //            if (transactAmount.ContainsKey(trade.Products.CurrencyCode))
                                //            {
                                //                foreignCurrencyBal += transactAmount[trade.Products.CurrencyCode];
                                //            }

                                //            if (previousTrade == null)
                                //            {
                                //                if (transactAmount.ContainsKey("SGD"))
                                //                {
                                //                    openingBankAmount += transactAmount["SGD"];
                                //                    openingCashAmount += transactAmount["SGD"];
                                //                }

                                //                if (transactAmount.ContainsKey(trade.Products.CurrencyCode))
                                //                {
                                //                    openingForeignCurrencyBal += transactAmount[trade.Products.CurrencyCode];
                                //                }

                                //                if (totalAmountForeign != 0)
                                //                {
                                //                    averageRate = totalAmountLocal / totalAmountForeign;
                                //                }

                                //                closingBal = foreignCurrencyBal * averageRate;

                                //                openingAveragePurchaseCost = averageRate;
                                //                openingBalanceAtAveragePurchase = closingBal;
                                //            }

                                //            if (transactAmount.ContainsKey("SGD"))
                                //            {
                                //                closingBankAmount += transactAmount["SGD"];
                                //                closingCashAmount += transactAmount["SGD"];
                                //            }

                                //            if (transactAmount.ContainsKey(trade.Products.CurrencyCode))
                                //            {
                                //                closingForeignCurrencyBal += transactAmount[trade.Products.CurrencyCode];
                                //            }

                                //            closingAveragePurchaseCost = averageRate;
                                //            closingBalanceAtAveragePurchase = closingBal;
                                //            closingProfitAmount = (openingForeignCurrencyBal * trade.CurrentSGDBuyRate) + closingBankAmount + closingCashAmount - foreignCurrencyBal * trade.CurrentSGDBuyRate - closingBal * trade.CurrentSGDBuyRate;

                                //            trade.OpeningBankAmount = openingBankAmount;
                                //            trade.OpeningCashAmount = openingCashAmount;
                                //            trade.OpeningForeignCurrencyBalance = openingForeignCurrencyBal;
                                //            trade.OpeningAveragePurchaseCost = openingAveragePurchaseCost;
                                //            trade.OpeningBalanceAtAveragePurchase = openingBalanceAtAveragePurchase;
                                //            trade.OpeningProfitAmount = openingProfitAmount;
                                //            trade.ClosingBankAmount = closingBankAmount;
                                //            trade.ClosingCashAmount = closingCashAmount;
                                //            trade.ClosingForeignCurrencyBalance = closingForeignCurrencyBal;
                                //            trade.ClosingAveragePurchaseCost = closingAveragePurchaseCost;
                                //            trade.ClosingBalanceAtAveragePurchase = closingBalanceAtAveragePurchase;
                                //            trade.ClosingProfitAmount = closingProfitAmount;
                                //            trade.Description = String.Join("|", desciptions);

                                //            bool trade_update = _endDayTradesModel.Update(trade.ID, trade);

                                //            if (trade_update)
                                //            {
                                //                hasUpdateTrade = true;

                                //                //Record for closings, to update the next opening if any
                                //                //currentClosings.Add(
                                //                //    trade.CurrencyId,
                                //                //    new decimal[7]
                                //                //    {
                                //                //        Convert.ToDecimal(trade.CurrentActivationTime.ToString("yyyyMMddHHmmss.fffffff")),
                                //                //        trade.ClosingBankAmount,
                                //                //        trade.ClosingCashAmount,
                                //                //        trade.ClosingForeignCurrencyBalance,
                                //                //        trade.ClosingAveragePurchaseCost,
                                //                //        trade.ClosingBalanceAtAveragePurchase,
                                //                //        trade.ClosingProfitAmount
                                //                //    });
                                //            }
                                //        }

                                //        //Update next end day trade if any
                                //        //foreach (KeyValuePair<int, decimal[]> key in currentClosings)
                                //        //{
                                //        //    int currencyId = key.Key;
                                //        //    DateTime currentActivation = Convert.ToDateTime(String.Format("{0}/{1}/{2} {3}:{4}:{5}", key.Value[0].ToString().Substring(0, 4), key.Value[0].ToString().Substring(4, 2), key.Value[0].ToString().Substring(6, 2), key.Value[0].ToString().Substring(8, 2), key.Value[0].ToString().Substring(10)));

                                //        //    EndDayTrade nextTrade = _endDayTradesModel.GetProductNextTrade(currencyId, currentActivation);

                                //        //    while (nextTrade != null)
                                //        //    {

                                //        //        currentActivation = nextTrade.CurrentActivationTime;

                                //        //        nextTrade = _endDayTradesModel.GetProductNextTrade(currencyId, currentActivation);
                                //        //    }
                                //        //}
                                //    }
                                //}
                                //#endregion

                                //if (add_productInventory)
                                //{
                                //    userid = Convert.ToInt32(Session["UserId"]);
                                //    tableAffected = "ProductInventories";
                                //    description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Added Product Inventories [" + sales.MemoID + "]";

                                //    bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                //}

                                //if (add_inventory)
                                //{
                                //    userid = Convert.ToInt32(Session["UserId"]);
                                //    tableAffected = "Inventories";
                                //    description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Added Inventories [" + sales.MemoID + "]";

                                //    bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                //}

                                //if (deduct_productInventory)
                                //{
                                //    userid = Convert.ToInt32(Session["UserId"]);
                                //    tableAffected = "ProductInventories";
                                //    description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Deducted Product Inventories [" + sales.MemoID + "]";

                                //    bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                //}

                                //if (deduct_inventory)
                                //{
                                //    userid = Convert.ToInt32(Session["UserId"]);
                                //    tableAffected = "Inventories";
                                //    description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Deducted Inventories [" + sales.MemoID + "]";

                                //    bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                //}

                                //if (hasDeleteEndDayTradeTransactions)
                                //{
                                //    userid = Convert.ToInt32(Session["UserId"]);
                                //    tableAffected = "EndDayTradeTransactions";
                                //    description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Deleted End Day Trade Transactions [" + sales.MemoID + "]";

                                //    bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                //}

                                //if (hasUpdateTrade)
                                //{
                                //    userid = Convert.ToInt32(Session["UserId"]);
                                //    tableAffected = "EndDayTrade";
                                //    description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Updated End Day Trades [" + sales.MemoID + "]";

                                //    bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                //}

                                TempData.Add("Result", "success|" + sales.MemoID + " has been successfully deleted!");
                            }
                            else
                            {
                                TempData.Add("Result", "danger|An error occured while deleting sale record!");
                            }
                        }
                        else
                        {
                            TempData.Add("Result", "danger|Unable to delete! " + sales.MemoID + " is not the last End of Day Trade!");
                        }
                    }
                    else if (Session["UserRole"].ToString().Contains("Finance") || Session["UserRole"].ToString().Contains("Dealer"))
                    {
                        bool result = _salesModel.UpdateDeleteStatus(sales.ID, "Pending Delete GM Approval", Convert.ToInt32(Session["UserId"]));

                        if (result)
                        {
                            int userid = Convert.ToInt32(Session["UserId"]);
                            string tableAffected = "RemittanceSales";
                            string description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Pending Delete Remittance Sales [" + sales.MemoID + "]";

                            bool log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);

                            TempData.Add("Result", "success|" + sales.MemoID + " has been sent to GM for deletion approval!");
                        }
                        else
                        {
                            TempData.Add("Result", "danger|An error occured while deleting sale record!");
                        }
                    }
                    else
                    {
                        TempData.Add("Result", "danger|You have no access to delete sale record!");
                    }
                }
                else
                {
                    TempData.Add("Result", "error|Cannot delete sale at the moment!");
                }
            }
            else
            {
                TempData.Add("Result", "error|Memo ID not found!");
            }

            return RedirectToAction("Listing", new { @page = page });
        }

        //GET: GenerateMemo
        public ViewAsPdf GenerateMemo(int id, string mode = "RemittanceSales", bool allCopy = true, bool saveFile = false)
        {
            Remittances sales = _remittancesalesModel.GetSingle(id);
            sales.RemittanceOders = sales.RemittanceOders.OrderBy(e => e.ID).ToList();

            string prefixBarcode = _settingsModel.GetCodeValue("PREFIX_BARCODE");
            string barcode = GenerateBarcode(prefixBarcode + sales.MemoID);
            string token = EncryptionHelper.GenerateRandomAlphaNumeric(8);

            string header = WriteMemoHeaderHTML(barcode, token);
            int getPayDecimal = 2;
            string getPayCurrencyCode = "SGD";
            ViewData["MemoMode"] = mode;
            ViewData["AllCopy"] = allCopy;

            #region Sell/Buy/Swap
            List<RemittanceOrders> buyTransactions = sales.RemittanceOders.ToList();
            List<MemoRemittanceCurrencyTable> buyMemos = new List<MemoRemittanceCurrencyTable>();

            int buyRowCount = 1;

            decimal? buyMemoTotal = null;

            foreach (RemittanceOrders transaction in buyTransactions)
            {
                string paymentMode = transaction.PayPaymentType;

                if (paymentMode == "2" && !string.IsNullOrEmpty(transaction.ChequeNo))
                {
                    paymentMode += " (" + transaction.ChequeNo + ")";
                }
                else if (paymentMode == "3" && !string.IsNullOrEmpty(transaction.BankTransferNo))
                {
                    paymentMode += " (" + transaction.BankTransferNo + ")";
                }

                buyMemos.Add(new MemoRemittanceCurrencyTable()
                {
                    RowId = buyRowCount,
                    Currency = transaction.GetCurrencyDecimal.CurrencyCode,
                    Rate = transaction.Rate.ToString(GetRateFormat(rateDP)),
                    Amount = FormValidationHelper.AmountFormatter(transaction.GetAmount, transaction.GetCurrencyDecimal.ProductDecimal),
                    PaymentMode = paymentMode,
                    TotalAmount = FormValidationHelper.AmountFormatter(transaction.PayAmount, transaction.PayCurrencyDecimal.ProductDecimal),
                    BeneficiaryName = transaction.BeneficiaryFullName
                });

                buyMemoTotal = Convert.ToDecimal(buyMemoTotal) + transaction.PayAmount;
                getPayDecimal = transaction.PayCurrencyDecimal.ProductDecimal;
                getPayCurrencyCode = transaction.PayCurrencyDecimal.CurrencyCode;
                buyRowCount++;
            }

            if (buyTransactions.Count > 0 && buyTransactions.Count < 5)
            {
                for (int i = buyTransactions.Count; i < 5; i++)
                {
                    buyMemos.Add(new MemoRemittanceCurrencyTable()
                    {
                        RowId = i + 1,
                        Currency = "",
                        Rate = "",
                        Amount = "",
                        PaymentMode = "",
                        TotalAmount = "",
                        BeneficiaryName = ""
                    });
                }
            }

            ViewData["BuyMemo"] = buyMemos;
            ViewData["PayCurrency"] = getPayCurrencyCode;
            ViewData["BuyMemoTotal"] = "";
            if (buyMemoTotal != null)
            {
                ViewData["BuyMemoTotal"] = getPayCurrencyCode + " " + FormValidationHelper.AmountFormatter(Convert.ToDecimal(buyMemoTotal), getPayDecimal);
            }

            ViewData["Sale"] = sales;

            //string header = Server.MapPath("~/Views/Sale/MemoPDFHeader.html");
            string footer = Server.MapPath("~/Views/RemittanceSale/MemoPDFFooter.html");
            string customSwitch = string.Format("--header-html \"{0}\" --footer-html \"{1}\"", header, footer);
            string fileName = sales.MemoID + "-memo-" + DateTime.Now.ToString("yyMMddHHmmss") + ".pdf";

            if (saveFile)
            {
                string path = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["EmailReceiptFolder"].ToString()), fileName);

                return new Rotativa.ViewAsPdf("MemoPDF")
                {
                    FileName = fileName,
                    PageSize = Rotativa.Options.Size.A4,
                    CustomSwitches = customSwitch,
                    SaveOnServerPath = path
                };
            }
            else
            {
                return new Rotativa.ViewAsPdf("MemoPDF")
                {
                    FileName = fileName,
                    PageSize = Rotativa.Options.Size.A4,
                    CustomSwitches = customSwitch
                };
            }
            #endregion
        }

        //GET: GenerateMemo
        public ViewAsPdf GenerateRemittanceReceipt(int id, string mode = "RemittanceSales", bool allCopy = true, bool saveFile = false)
        {
            Remittances sales = _remittancesalesModel.GetSingle(id);
            sales.RemittanceOders = sales.RemittanceOders.OrderBy(e => e.ID).ToList();

            string prefixBarcode = _settingsModel.GetCodeValue("PREFIX_BARCODE");
            string barcode = GenerateBarcode(prefixBarcode + sales.MemoID);
            string token = EncryptionHelper.GenerateRandomAlphaNumeric(8);

            string header = WriteMemoHeaderHTML(barcode, token);
            int getPayDecimal = 2;
            string getPayCurrencyCode = "SGD";
            ViewData["MemoMode"] = mode;
            ViewData["AllCopy"] = allCopy;
            List<PayBankLists> payDepositaccount = new List<PayBankLists>();
            using (var context = new DataAccess.GreatEastForex())
            {
                var getPaybank = context.PayBankLists.Where(e => e.IsDeleted == 0).ToList();
                payDepositaccount.AddRange(getPaybank);
            }
            #region Sell/Buy/Swap
            List<RemittanceOrders> buyTransactions = sales.RemittanceOders.ToList();
            List<MemoRemittanceCurrencyTable> buyMemos = new List<MemoRemittanceCurrencyTable>();

            int buyRowCount = 1;

            decimal? buyMemoTotal = null;

            foreach (RemittanceOrders transaction in buyTransactions)
            {
                string paymentMode = transaction.PayPaymentType;

                if (paymentMode == "2" && !string.IsNullOrEmpty(transaction.ChequeNo))
                {
                    paymentMode += " (" + transaction.ChequeNo + ")";
                }
                else if (paymentMode == "3" && !string.IsNullOrEmpty(transaction.BankTransferNo))
                {
                    paymentMode += " (" + transaction.BankTransferNo + ")";
                }

                buyMemos.Add(new MemoRemittanceCurrencyTable()
                {
                    RowId = buyRowCount,
                    Currency = transaction.GetCurrencyDecimal.CurrencyCode,
                    Rate = transaction.Rate.ToString(GetRateFormat(rateDP)),
                    Amount = FormValidationHelper.AmountFormatter(transaction.GetAmount, transaction.GetCurrencyDecimal.ProductDecimal),
                    PaymentMode = paymentMode,
                    TotalAmount = FormValidationHelper.AmountFormatter(transaction.PayAmount, transaction.PayCurrencyDecimal.ProductDecimal),
                    BeneficiaryName = transaction.BeneficiaryFullName
                });

                buyMemoTotal = Convert.ToDecimal(buyMemoTotal) + transaction.PayAmount;
                getPayDecimal = transaction.PayCurrencyDecimal.ProductDecimal;
                getPayCurrencyCode = transaction.PayCurrencyDecimal.CurrencyCode;
                buyRowCount++;
            }

            if (buyTransactions.Count > 0 && buyTransactions.Count < 5)
            {
                for (int i = buyTransactions.Count; i < 5; i++)
                {
                    buyMemos.Add(new MemoRemittanceCurrencyTable()
                    {
                        RowId = i + 1,
                        Currency = "",
                        Rate = "",
                        Amount = "",
                        PaymentMode = "",
                        TotalAmount = "",
                        BeneficiaryName = ""
                    });
                }
            }

            ViewData["BuyMemo"] = buyMemos;
            ViewData["PayCurrency"] = getPayCurrencyCode;
            ViewData["BuyMemoTotal"] = "";
            if (buyMemoTotal != null)
            {
                ViewData["BuyMemoTotal"] = getPayCurrencyCode + " " + FormValidationHelper.AmountFormatter(Convert.ToDecimal(buyMemoTotal), getPayDecimal);
            }

            ViewData["Sale"] = sales;
            ViewData["DepositAccountList"] = payDepositaccount;

            //string header = Server.MapPath("~/Views/Sale/MemoPDFHeader.html");
            string footer = Server.MapPath("~/Views/RemittanceSale/RemittanceReceiptPDFFooter.html");
            string customSwitch = string.Format("--header-html \"{0}\" --footer-html \"{1}\"", header, footer);
            string fileName = sales.MemoID + "-remittance-receipt-" + DateTime.Now.ToString("yyMMddHHmmss") + ".pdf";

            if (saveFile)
            {
                string path = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["RemittanceReceiptFolder"].ToString()), fileName);

                return new Rotativa.ViewAsPdf("RemittanceReceiptPDF")
                {
                    FileName = fileName,
                    PageSize = Rotativa.Options.Size.A4,
                    CustomSwitches = customSwitch,
                    SaveOnServerPath = path
                };
            }
            else
            {
                return new Rotativa.ViewAsPdf("RemittanceReceiptPDF")
                {
                    FileName = fileName,
                    PageSize = Rotativa.Options.Size.A4,
                    CustomSwitches = customSwitch
                };
            }
            #endregion
        }

        //GET: GenerateMemo
        public ViewAsPdf GenerateAgentForm(int id, string mode = "RemittanceSales", bool allCopy = true, bool saveFile = false)
        {
            Remittances sales = _remittancesalesModel.GetSingle(id);
            List<Countries> countries = new List<Countries>();
            List<PaymentLists> paymentLists = new List<PaymentLists>();
            List<FundLists> fundLists = new List<FundLists>();
            List<RemittanceProducts> remittanceProductsLists = new List<RemittanceProducts>();

            using (var context = new DataAccess.GreatEastForex())
            {
                var getAllCountry = context.Countries.Where(e => e.IsDeleted == 0);
                countries.AddRange(getAllCountry);
                var getAllpaymentLists = context.PaymentLists.Where(e => e.IsDeleted == 0);
                paymentLists.AddRange(getAllpaymentLists);
                var getAllfundLists = context.FundLists.Where(e => e.IsDeleted == 0);
                fundLists.AddRange(getAllfundLists);
                var getAllRemittanceProducts = context.RemittanceProducts.Where(e => e.IsDeleted == "N");
                remittanceProductsLists.AddRange(getAllRemittanceProducts);
            }
            sales.RemittanceOders = sales.RemittanceOders.OrderBy(e => e.ID).ToList();

            string prefixBarcode = _settingsModel.GetCodeValue("PREFIX_BARCODE");
            string barcode = GenerateBarcode(prefixBarcode + sales.MemoID);
            string token = EncryptionHelper.GenerateRandomAlphaNumeric(8);

            string header = WriteMemoHeaderHTML(barcode, token);
            int getPayDecimal = 2;
            string getPayCurrencyCode = "SGD";
            ViewData["MemoMode"] = mode;
            ViewData["AllCopy"] = allCopy;

            #region Sell/Buy/Swap
            List<RemittanceOrders> buyTransactions = sales.RemittanceOders.ToList();
            List<MemoRemittanceCurrencyTable> buyMemos = new List<MemoRemittanceCurrencyTable>();

            int buyRowCount = 1;

            decimal? buyMemoTotal = null;

            foreach (RemittanceOrders transaction in buyTransactions)
            {
                string paymentMode = transaction.PayPaymentType;

                if (paymentMode == "2" && !string.IsNullOrEmpty(transaction.ChequeNo))
                {
                    paymentMode += " (" + transaction.ChequeNo + ")";
                }
                else if (paymentMode == "3" && !string.IsNullOrEmpty(transaction.BankTransferNo))
                {
                    paymentMode += " (" + transaction.BankTransferNo + ")";
                }

                buyMemos.Add(new MemoRemittanceCurrencyTable()
                {
                    RowId = buyRowCount,
                    Currency = transaction.GetCurrencyDecimal.CurrencyCode,
                    Rate = transaction.Rate.ToString(GetRateFormat(rateDP)),
                    Amount = FormValidationHelper.AmountFormatter(transaction.GetAmount, transaction.GetCurrencyDecimal.ProductDecimal),
                    PaymentMode = paymentMode,
                    TotalAmount = FormValidationHelper.AmountFormatter(transaction.PayAmount, transaction.PayCurrencyDecimal.ProductDecimal),
                    BeneficiaryName = transaction.BeneficiaryFullName
                });

                buyMemoTotal = Convert.ToDecimal(buyMemoTotal) + transaction.PayAmount;
                getPayDecimal = transaction.PayCurrencyDecimal.ProductDecimal;
                getPayCurrencyCode = transaction.PayCurrencyDecimal.CurrencyCode;
                buyRowCount++;
            }

            if (buyTransactions.Count > 0 && buyTransactions.Count < 5)
            {
                for (int i = buyTransactions.Count; i < 5; i++)
                {
                    buyMemos.Add(new MemoRemittanceCurrencyTable()
                    {
                        RowId = i + 1,
                        Currency = "",
                        Rate = "",
                        Amount = "",
                        PaymentMode = "",
                        TotalAmount = "",
                        BeneficiaryName = ""
                    });
                }
            }

            ViewData["BuyMemo"] = buyMemos;
            ViewData["PayCurrency"] = getPayCurrencyCode;
            ViewData["BuyMemoTotal"] = "";
            if (buyMemoTotal != null)
            {
                ViewData["BuyMemoTotal"] = getPayCurrencyCode + " " + FormValidationHelper.AmountFormatter(Convert.ToDecimal(buyMemoTotal), getPayDecimal);
            }

            ViewData["Sale"] = sales;
            ViewData["Countries"] = countries;
            ViewData["PurposeList"] = paymentLists;
            ViewData["SourceFundList"] = fundLists;
            ViewData["RemittanceProductsLists"] = remittanceProductsLists;

            //string header = Server.MapPath("~/Views/Sale/MemoPDFHeader.html");
            string footer = Server.MapPath("~/Views/RemittanceSale/AgentFormPDFFooter.html");
            string customSwitch = string.Format("--header-html \"{0}\" --footer-html \"{1}\"", header, footer);
            string fileName = sales.MemoID + "-agent-form-" + DateTime.Now.ToString("yyMMddHHmmss") + ".pdf";

            if (saveFile)
            {
                string path = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["AgentFormFolder"].ToString()), fileName);

                return new Rotativa.ViewAsPdf("AgentFormPDF")
                {
                    FileName = fileName,
                    PageSize = Rotativa.Options.Size.A4,
                    //CustomSwitches = customSwitch,
                    SaveOnServerPath = path
                };
            }
            else
            {
                return new Rotativa.ViewAsPdf("AgentFormPDF")
                {
                    FileName = fileName,
                    PageSize = Rotativa.Options.Size.A4
                    //CustomSwitches = customSwitch
                };
            }
            #endregion
        }

        //GET: GenerateConfirmationEmail
        public ViewAsPdf GenerateConfirmationEmail(int id, bool saveFile = false, bool GenerateConfirmation = false)
        {
            Remittances sales = _remittancesalesModel.GetSingle(id);
            sales.RemittanceOders = sales.RemittanceOders.OrderBy(e => e.ID).ToList();
            string token = EncryptionHelper.GenerateRandomAlphaNumeric(8);

            string header = WriteMemoHeaderHTML(null, token, false);

            #region Sell/Buy/Swap
            List<RemittanceOrders> buyTransactions = sales.RemittanceOders.ToList();
            List<MemoRemittanceCurrencyTable> buyMemos = new List<MemoRemittanceCurrencyTable>();

            int buyRowCount = 1;

            decimal? buyMemoTotal = null;
            int getPayDecimal = 2;
            string getPayCurrencyCode = "SGD";
            foreach (RemittanceOrders transaction in buyTransactions)
            {
                string paymentMode = transaction.PayPaymentType;

                if (paymentMode == "2" && !string.IsNullOrEmpty(transaction.ChequeNo))
                {
                    paymentMode += " (" + transaction.ChequeNo + ")";
                }
                else if (paymentMode == "3" && !string.IsNullOrEmpty(transaction.BankTransferNo))
                {
                    paymentMode += " (" + transaction.BankTransferNo + ")";
                }

                buyMemos.Add(new MemoRemittanceCurrencyTable()
                {
                    RowId = buyRowCount,
                    Currency = transaction.GetCurrencyDecimal.CurrencyCode,
                    Rate = transaction.Rate.ToString(GetRateFormat(rateDP)),
                    Amount = FormValidationHelper.AmountFormatter(transaction.GetAmount, transaction.GetCurrencyDecimal.ProductDecimal),
                    PaymentMode = paymentMode,
                    TotalAmount = FormValidationHelper.AmountFormatter(transaction.PayAmount, transaction.PayCurrencyDecimal.ProductDecimal)
                });

                buyMemoTotal = Convert.ToDecimal(buyMemoTotal) + transaction.PayAmount;
                getPayDecimal = transaction.PayCurrencyDecimal.ProductDecimal;
                getPayCurrencyCode = transaction.PayCurrencyDecimal.CurrencyCode;
                buyRowCount++;
            }

            if (buyTransactions.Count > 0 && buyTransactions.Count < 5)
            {
                for (int i = buyTransactions.Count; i < 5; i++)
                {
                    buyMemos.Add(new MemoRemittanceCurrencyTable()
                    {
                        RowId = i + 1,
                        Currency = "",
                        Rate = "",
                        Amount = "",
                        PaymentMode = "",
                        TotalAmount = ""
                    });
                }
            }

            ViewData["BuyMemo"] = buyMemos;
            ViewData["PayCurrency"] = getPayCurrencyCode;
            ViewData["BuyMemoTotal"] = "";
            if (buyMemoTotal != null)
            {
                ViewData["BuyMemoTotal"] = getPayCurrencyCode + " " + FormValidationHelper.AmountFormatter(Convert.ToDecimal(buyMemoTotal), sgdDp);
            }

            ViewData["Sale"] = sales;

            //string header = Server.MapPath("~/Views/Sale/MemoPDFHeader.html");
            string customSwitch = string.Format("--header-html \"{0}\"", header);
            string fileName = sales.MemoID + "-confirmation-" + DateTime.Now.ToString("yyMMddHHmmss") + ".pdf";

            if (saveFile)
            {
                string path = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["EmailConfirmationFolder"].ToString()), fileName);

                return new Rotativa.ViewAsPdf("ConfirmationPDF")
                {
                    FileName = fileName,
                    PageSize = Rotativa.Options.Size.A4,
                    CustomSwitches = customSwitch,
                    SaveOnServerPath = path
                };
            }
            else if (GenerateConfirmation)
            {
                return new Rotativa.ViewAsPdf("ConfirmationPDF")
                {
                    PageSize = Rotativa.Options.Size.A4
                };
            }
            else
            {
                return new Rotativa.ViewAsPdf("ConfirmationPDF")
                {
                    FileName = fileName,
                    PageSize = Rotativa.Options.Size.A4,
                    CustomSwitches = customSwitch
                };
            }
            #endregion

        }

        public ViewAsPdf GenerateCrownExchangeForm(int id, string mode = "RemittanceSales", bool allCopy = true, bool saveFile = false)
        {
            Remittances sales = _remittancesalesModel.GetSingle(id);
            List<Countries> countries = new List<Countries>();
            List<PaymentLists> paymentLists = new List<PaymentLists>();
            List<FundLists> fundLists = new List<FundLists>();

            using (var context = new DataAccess.GreatEastForex())
            {
                var getAllCountry = context.Countries.Where(e => e.IsDeleted == 0);
                countries.AddRange(getAllCountry);
                var getAllpaymentLists = context.PaymentLists.Where(e => e.IsDeleted == 0);
                paymentLists.AddRange(getAllpaymentLists);
                var getAllfundLists = context.FundLists.Where(e => e.IsDeleted == 0);
                fundLists.AddRange(getAllfundLists);
            }
            sales.RemittanceOders = sales.RemittanceOders.OrderBy(e => e.ID).ToList();

            string prefixBarcode = _settingsModel.GetCodeValue("PREFIX_BARCODE");
            string barcode = GenerateBarcode(prefixBarcode + sales.MemoID);
            string token = EncryptionHelper.GenerateRandomAlphaNumeric(8);

            //string header = WriteMemoHeaderHTML(barcode, token);
            int getPayDecimal = 2;
            string getPayCurrencyCode = "SGD";
            ViewData["MemoMode"] = mode;
            ViewData["AllCopy"] = allCopy;

            #region Sell/Buy/Swap
            List<RemittanceOrders> buyTransactions = sales.RemittanceOders.ToList();
            List<MemoRemittanceCurrencyTable> buyMemos = new List<MemoRemittanceCurrencyTable>();

            int buyRowCount = 1;

            decimal? buyMemoTotal = null;

            foreach (RemittanceOrders transaction in buyTransactions)
            {
                string paymentMode = transaction.PayPaymentType;

                if (paymentMode == "2" && !string.IsNullOrEmpty(transaction.ChequeNo))
                {
                    paymentMode += " (" + transaction.ChequeNo + ")";
                }
                else if (paymentMode == "3" && !string.IsNullOrEmpty(transaction.BankTransferNo))
                {
                    paymentMode += " (" + transaction.BankTransferNo + ")";
                }

                buyMemos.Add(new MemoRemittanceCurrencyTable()
                {
                    RowId = buyRowCount,
                    Currency = transaction.GetCurrencyDecimal.CurrencyCode,
                    Rate = transaction.Rate.ToString(GetRateFormat(rateDP)),
                    Amount = FormValidationHelper.AmountFormatter(transaction.GetAmount, transaction.GetCurrencyDecimal.ProductDecimal),
                    PaymentMode = paymentMode,
                    TotalAmount = FormValidationHelper.AmountFormatter(transaction.PayAmount, transaction.PayCurrencyDecimal.ProductDecimal),
                    BeneficiaryName = transaction.BeneficiaryFullName
                });

                buyMemoTotal = Convert.ToDecimal(buyMemoTotal) + transaction.PayAmount;
                getPayDecimal = transaction.PayCurrencyDecimal.ProductDecimal;
                getPayCurrencyCode = transaction.PayCurrencyDecimal.CurrencyCode;
                buyRowCount++;
            }

            if (buyTransactions.Count > 0 && buyTransactions.Count < 5)
            {
                for (int i = buyTransactions.Count; i < 5; i++)
                {
                    buyMemos.Add(new MemoRemittanceCurrencyTable()
                    {
                        RowId = i + 1,
                        Currency = "",
                        Rate = "",
                        Amount = "",
                        PaymentMode = "",
                        TotalAmount = "",
                        BeneficiaryName = ""
                    });
                }
            }

            ViewData["BuyMemo"] = buyMemos;
            ViewData["PayCurrency"] = getPayCurrencyCode;
            ViewData["BuyMemoTotal"] = "";
            if (buyMemoTotal != null)
            {
                ViewData["BuyMemoTotal"] = getPayCurrencyCode + " " + FormValidationHelper.AmountFormatter(Convert.ToDecimal(buyMemoTotal), getPayDecimal);
            }

            ViewData["Sale"] = sales;
            ViewData["Countries"] = countries;
            ViewData["PurposeList"] = paymentLists;
            ViewData["SourceFundList"] = fundLists;

            string header = Server.MapPath("~/Views/RemittanceSale/CrownExchangeAgentFormHeader.html");
            string footer = Server.MapPath("~/Views/RemittanceSale/CrownExchangeAgentFormFooter.html");
            string customSwitch = string.Format("--header-html \"{0}\" --footer-html \"{1}\"", header, footer);
            string fileName = sales.MemoID + "-crown-exchange-agent-form-" + DateTime.Now.ToString("yyMMddHHmmss") + ".pdf";

            if (saveFile)
            {
                string path = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["CrownExchangeFormFolder"].ToString()), fileName);

                return new Rotativa.ViewAsPdf("CrownExchangeAgentForm")
                {
                    FileName = fileName,
                    PageSize = Rotativa.Options.Size.A4,
                    CustomSwitches = customSwitch,
                    SaveOnServerPath = path
                };
            }
            else
            {
                return new Rotativa.ViewAsPdf("CrownExchangeAgentForm")
                {
                    FileName = fileName,
                    PageSize = Rotativa.Options.Size.A4,
                    CustomSwitches = customSwitch
                };
            }
            #endregion
        }

        //public ViewAsPdf GenerateInternationalRemittanceForm(int id, string mode = "RemittanceSales", bool allCopy = true, bool saveFile = false)
        //{
        //    Remittances sales = _remittancesalesModel.GetSingle(id);
        //    List<Countries> countries = new List<Countries>();
        //    List<PaymentLists> paymentLists = new List<PaymentLists>();
        //    List<FundLists> fundLists = new List<FundLists>();

        //    using (var context = new DataAccess.GreatEastForex())
        //    {
        //        var getAllCountry = context.Countries.Where(e => e.IsDeleted == 0);
        //        countries.AddRange(getAllCountry);
        //        var getAllpaymentLists = context.PaymentLists.Where(e => e.IsDeleted == 0);
        //        paymentLists.AddRange(getAllpaymentLists);
        //        var getAllfundLists = context.FundLists.Where(e => e.IsDeleted == 0);
        //        fundLists.AddRange(getAllfundLists);
        //    }
        //    sales.RemittanceOders = sales.RemittanceOders.OrderBy(e => e.ID).ToList();

        //    string prefixBarcode = _settingsModel.GetCodeValue("PREFIX_BARCODE");
        //    string barcode = GenerateBarcode(prefixBarcode + sales.MemoID);
        //    string token = EncryptionHelper.GenerateRandomAlphaNumeric(8);

        //    //string header = WriteMemoHeaderHTML(barcode, token);
        //    int getPayDecimal = 2;
        //    string getPayCurrencyCode = "SGD";
        //    ViewData["MemoMode"] = mode;
        //    ViewData["AllCopy"] = allCopy;

        //    #region Sell/Buy/Swap
        //    List<RemittanceOrders> buyTransactions = sales.RemittanceOders.ToList();
        //    List<MemoRemittanceCurrencyTable> buyMemos = new List<MemoRemittanceCurrencyTable>();

        //    int buyRowCount = 1;

        //    decimal? buyMemoTotal = null;

        //    foreach (RemittanceOrders transaction in buyTransactions)
        //    {
        //        string paymentMode = transaction.PayPaymentType;

        //        if (paymentMode == "2" && !string.IsNullOrEmpty(transaction.ChequeNo))
        //        {
        //            paymentMode += " (" + transaction.ChequeNo + ")";
        //        }
        //        else if (paymentMode == "3" && !string.IsNullOrEmpty(transaction.BankTransferNo))
        //        {
        //            paymentMode += " (" + transaction.BankTransferNo + ")";
        //        }

        //        buyMemos.Add(new MemoRemittanceCurrencyTable()
        //        {
        //            RowId = buyRowCount,
        //            Currency = transaction.GetCurrencyDecimal.CurrencyCode,
        //            Rate = transaction.Rate.ToString(GetRateFormat(rateDP)),
        //            Amount = FormValidationHelper.AmountFormatter(transaction.GetAmount, transaction.GetCurrencyDecimal.ProductDecimal),
        //            PaymentMode = paymentMode,
        //            TotalAmount = FormValidationHelper.AmountFormatter(transaction.PayAmount, transaction.PayCurrencyDecimal.ProductDecimal),
        //            BeneficiaryName = transaction.BeneficiaryFullName
        //        });

        //        buyMemoTotal = Convert.ToDecimal(buyMemoTotal) + transaction.PayAmount;
        //        getPayDecimal = transaction.PayCurrencyDecimal.ProductDecimal;
        //        getPayCurrencyCode = transaction.PayCurrencyDecimal.CurrencyCode;
        //        buyRowCount++;
        //    }

        //    if (buyTransactions.Count > 0 && buyTransactions.Count < 5)
        //    {
        //        for (int i = buyTransactions.Count; i < 5; i++)
        //        {
        //            buyMemos.Add(new MemoRemittanceCurrencyTable()
        //            {
        //                RowId = i + 1,
        //                Currency = "",
        //                Rate = "",
        //                Amount = "",
        //                PaymentMode = "",
        //                TotalAmount = "",
        //                BeneficiaryName = ""
        //            });
        //        }
        //    }

        //    ViewData["BuyMemo"] = buyMemos;
        //    ViewData["PayCurrency"] = getPayCurrencyCode;
        //    ViewData["BuyMemoTotal"] = "";
        //    if (buyMemoTotal != null)
        //    {
        //        ViewData["BuyMemoTotal"] = getPayCurrencyCode + " " + FormValidationHelper.AmountFormatter(Convert.ToDecimal(buyMemoTotal), getPayDecimal);
        //    }

        //    ViewData["Sale"] = sales;
        //    ViewData["Countries"] = countries;
        //    ViewData["PurposeList"] = paymentLists;
        //    ViewData["SourceFundList"] = fundLists;

        //    string header = Server.MapPath("~/Views/RemittanceSale/InternationalRemittanceAgentFormHeader.html");
        //    string footer = Server.MapPath("~/Views/RemittanceSale/InternationalRemittanceAgentFormFooter.html");
        //    string customSwitch = string.Format("--header-html \"{0}\" --footer-html \"{1}\"", header, footer);
        //    string fileName = sales.MemoID + "-international-remittance-agent-form-" + DateTime.Now.ToString("yyMMddHHmmss") + ".pdf";

        //    if (saveFile)
        //    {
        //        string path = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["InternationalRemittanceFormFolder"].ToString()), fileName);

        //        return new Rotativa.ViewAsPdf("InternationalRemittanceAgentFormPDF")
        //        {
        //            FileName = fileName,
        //            PageSize = Rotativa.Options.Size.A4,
        //            CustomSwitches = customSwitch,
        //            SaveOnServerPath = path
        //        };
        //    }
        //    else
        //    {
        //        return new Rotativa.ViewAsPdf("InternationalRemittanceAgentFormPDF")
        //        {
        //            FileName = fileName,
        //            PageSize = Rotativa.Options.Size.A4,
        //            CustomSwitches = customSwitch
        //        };
        //    }
        //    #endregion
        //}


        //Write Memo Header Html
        public string WriteMemoHeaderHTML(string barcode, string token, bool requireBarcode = true)
        {
            string memoHeaderPath = Server.MapPath("~/FileUploads/MemoHeader/MemoPDFHeader_" + token + ".html");
            List<string> content = new List<string>();

            content.Add("<!DOCTYPE html>");
            content.Add("<html>");
            content.Add("<head>");
            content.Add("    <title></title>");
            content.Add("    <style type=\"text/css\">");
            content.Add("        body {");
            content.Add("            font-family: Calibri;");
            content.Add("            font-size: 11px;");
            content.Add("            width: 100%;");
            content.Add("            padding-top: 10px;");
            content.Add("        }");
            content.Add("        strong {");
            content.Add("            font-weight: bold;");
            content.Add("        }");
            content.Add("        table {");
            content.Add("            width: 100%;");
            content.Add("        }");
            content.Add("    </style>");
            content.Add("</head>");
            content.Add("<body>");
            content.Add("    <table>");
            content.Add("        <tr>");
            content.Add("            <td style=\"width: 210px;\"><img src=\"../../Content/images/gefx_logo-blue.png\" style=\"width: 210px;margin-top:-40px;\" /></td>");
            //content.Add("            <td><strong style=\"font-size: 26px;\">Great East Forex</strong></td>");
            if (requireBarcode)
            {
                string barcodePath = "../../FileUploads/Barcode/" + barcode;

                content.Add("            <td style=\"text-align: right;\"><img src=\"" + barcodePath + "\" style=\"margin-right: -30px;\" /></td>");
            }
            else
            {
                content.Add("            <td style=\"text-align: right;\"> </td>");
            }
            content.Add("        </tr>");
            content.Add("    </table>");
            content.Add("</body>");
            content.Add("</html>");

            System.IO.File.WriteAllLines(memoHeaderPath, content);

            return memoHeaderPath;
        }

        //Generate Barcode: Return file name
        public string GenerateBarcode(string data)
        {
            //Read in the parameters
            int imageWidth = Convert.ToInt32(ConfigurationManager.AppSettings["BarcodeWidth"]);
            int imageHeight = Convert.ToInt32(ConfigurationManager.AppSettings["BarcodeHeight"]);
            bool bIncludeLabel = Convert.ToBoolean(ConfigurationManager.AppSettings["BarcodeLabel"]);

            Barcode barcode = new Barcode();
            barcode.Width = imageWidth;
            barcode.Height = imageHeight;
            barcode.IncludeLabel = bIncludeLabel;
            TYPE type = BarcodeLib.TYPE.UNSPECIFIED;
            string barcodeType = ConfigurationManager.AppSettings["BarcodeType"].ToString();
            switch (barcodeType)
            {
                case "UPC-A": type = BarcodeLib.TYPE.UPCA; break;
                case "UPC-E": type = BarcodeLib.TYPE.UPCE; break;
                case "UPC 2 Digit Ext": type = BarcodeLib.TYPE.UPC_SUPPLEMENTAL_2DIGIT; break;
                case "UPC 5 Digit Ext": type = BarcodeLib.TYPE.UPC_SUPPLEMENTAL_5DIGIT; break;
                case "EAN-13": type = BarcodeLib.TYPE.EAN13; break;
                case "JAN-13": type = BarcodeLib.TYPE.JAN13; break;
                case "EAN-8": type = BarcodeLib.TYPE.EAN8; break;
                case "ITF-14": type = BarcodeLib.TYPE.ITF14; break;
                case "Codabar": type = BarcodeLib.TYPE.Codabar; break;
                case "PostNet": type = BarcodeLib.TYPE.PostNet; break;
                case "Bookland-ISBN": type = BarcodeLib.TYPE.BOOKLAND; break;
                case "Code 11": type = BarcodeLib.TYPE.CODE11; break;
                case "Code 39": type = BarcodeLib.TYPE.CODE39; break;
                case "Code 39 Extended": type = BarcodeLib.TYPE.CODE39Extended; break;
                case "Code 93": type = BarcodeLib.TYPE.CODE93; break;
                case "LOGMARS": type = BarcodeLib.TYPE.LOGMARS; break;
                case "MSI": type = BarcodeLib.TYPE.MSI_Mod10; break;
                case "Interleaved 2 of 5": type = BarcodeLib.TYPE.Interleaved2of5; break;
                case "Standard 2 of 5": type = BarcodeLib.TYPE.Standard2of5; break;
                case "Code 128": type = BarcodeLib.TYPE.CODE128; break;
                case "Code 128-A": type = BarcodeLib.TYPE.CODE128A; break;
                case "Code 128-B": type = BarcodeLib.TYPE.CODE128B; break;
                case "Code 128-C": type = BarcodeLib.TYPE.CODE128C; break;
                case "Telepen": type = BarcodeLib.TYPE.TELEPEN; break;
                case "FIM (Facing Identification Mark)": type = BarcodeLib.TYPE.FIM; break;
                case "Pharmacode": type = BarcodeLib.TYPE.PHARMACODE; break;
                default: break;
            }
            SaveTypes saveType = SaveTypes.UNSPECIFIED;
            string strImageFormat = ConfigurationManager.AppSettings["BarcodeFileType"].ToString();
            switch (strImageFormat)
            {
                case "jpg": saveType = SaveTypes.JPG; break;
                case "jpeg": saveType = SaveTypes.JPG; break;
                case "png": saveType = SaveTypes.PNG; break;
                default: break;
            }

            barcode.Encode(type, data);

            data += "_" + DateTime.Now.ToString("yyMMddHHmmss") + "." + strImageFormat;

            string filePath = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["BarcodeFolder"].ToString()), data);
            barcode.SaveImage(filePath, saveType);

            return data;
        }

        //GET: GenerateSealingCert
        public ActionResult GenerateSealingCert(int id)
        {
            Sale sales = _salesModel.GetSingle(id);

            if (sales.TransactionType != "Buy")
            {
                sales.SaleTransactions = sales.SaleTransactions.Where(e => e.TransactionType == "Sell").ToList();
            }

            ViewData["Date"] = Convert.ToDateTime(sales.CollectionDate).ToString("dd/MM/yyyy");
            ViewData["CustomerRequested"] = "";
            if (sales.CustomerParticulars.CustomerType == "Corporate & Trading Company")
            {
                ViewData["CustomerRequested"] = sales.CustomerParticulars.Company_RegisteredName;
            }
            else
            {
                ViewData["CustomerRequested"] = sales.CustomerParticulars.Natural_Name;
            }
            ViewData["CompanyCode"] = sales.CustomerParticulars.CustomerCode;

            //if (sales.TransactionType == "Encashment")
            //{
            //    ViewData["SaleTransaction"] = sales.SaleTransactions.Where(e => e.TransactionType == "Sell").ToList();
            //}
            //else
            //{
            //    ViewData["SaleTransaction"] = sales.SaleTransactions;
            //}

            ViewData["SaleTransaction"] = sales.SaleTransactions;

            Dictionary<int, IList<ProductDenomination>> transactionsWithNoDenomination = new Dictionary<int, IList<ProductDenomination>>();

            foreach (SaleTransaction transaction in sales.SaleTransactions.OrderBy(e => e.ID))
            {
                if (transaction.SaleTransactionDenominations.Count == 0)
                {
                    IList<ProductDenomination> productDenominations = _productDenominationsModel.GetProductDenomination(transaction.CurrencyId);

                    transactionsWithNoDenomination.Add(transaction.ID, productDenominations.OrderByDescending(e => e.DenominationValue).ToList());
                }
            }

            ViewData["TransactionsWithNoDenomination"] = transactionsWithNoDenomination;

            //return View("SealingCertPDF");
            return new Rotativa.ViewAsPdf("SealingCertPDF")
            {
                FileName = sales.MemoID + "-sealing-cert-" + DateTime.Now.ToString("yyMMddHHmmss") + ".pdf",
                PageSize = Rotativa.Options.Size.A6,
                PageMargins = new Rotativa.Options.Margins(4, 4, 4, 4),
                PageWidth = 105,
                PageHeight = 148,
                //CustomSwitches = "--disable-smart-shrinking",
                PageOrientation = Rotativa.Options.Orientation.Portrait
            };
        }

        //GET: SendEmail
        public ActionResult SendEmail(int id)
        {
            Remittances sales = _remittancesalesModel.GetSingle(id);
            ViewData["SaleId"] = id;
            ViewData["MemoID"] = sales.MemoID;
            ViewData["To"] = "";
            if (sales.CustomerParticulars.CustomerType == "Corporate & Trading Company")
            {
                if (!string.IsNullOrEmpty(sales.CustomerParticulars.Company_Email))
                {
                    ViewData["To"] = sales.CustomerParticulars.Company_Email;
                    //ViewData["To"] = "kianchi@thedottsolutions.com";
                }
            }
            else
            {
                if (!string.IsNullOrEmpty(sales.CustomerParticulars.Natural_Email))
                {
                    ViewData["To"] = sales.CustomerParticulars.Natural_Email;
                    //ViewData["To"] = "kianchi@thedottsolutions.com";
                }
            }

            ViewData["Subject"] = "Transaction Receipt ID: " + sales.MemoID;

            return View();
        }

        //POST: SendEmail
        [HttpPost]
        public ActionResult SendEmail(int id, FormCollection form)
        {
            List<string[]> modelErrors = new List<string[]>();

            string updateResult = "";

            if (string.IsNullOrEmpty(form["To"]))
            {
                string[] error = new string[2];
                error[0] = "To";
                error[1] = "To is required!";
                modelErrors.Add(error);
            }
            else
            {
                bool checkEmail = FormValidationHelper.EmailValidation(form["To"].ToString());

                if (!checkEmail)
                {
                    string[] error = new string[2];
                    error[0] = "To";
                    error[1] = "To is not a valid email!";
                    modelErrors.Add(error);
                }
            }

            if (!string.IsNullOrEmpty(form["Cc"]))
            {
                bool checkEmail = FormValidationHelper.EmailValidation(form["Cc"].ToString());

                if (!checkEmail)
                {
                    string[] error = new string[2];
                    error[0] = "Cc";
                    error[1] = "Cc is not a valid email!";
                    modelErrors.Add(error);
                }
            }

            if (!string.IsNullOrEmpty(form["Bcc"]))
            {
                bool checkEmail = FormValidationHelper.EmailValidation(form["Bcc"].ToString());

                if (!checkEmail)
                {
                    string[] error = new string[2];
                    error[0] = "Bcc";
                    error[1] = "Bcc is not a valid email!";
                    modelErrors.Add(error);
                }
            }

            if (modelErrors.Count == 0)
            {
                Remittances sales = _remittancesalesModel.GetSingle(id);

                if (sales != null)
                {
                    var attachment = GenerateRemittanceReceipt(id, "Customer", false, true);
                    string fileName = attachment.FileName;
                    byte[] pdf = attachment.BuildPdf(ControllerContext);
                    int userid = Convert.ToInt32(Session["UserId"]);

                    string subject = form["Subject"].ToString();
                    string body = System.IO.File.ReadAllText(Server.MapPath("~/Templates/Memo.html"));
                    string customerName = "";
                    if (sales.CustomerParticulars.CustomerType == "Corporate & Trading Company")
                    {
                        customerName = sales.CustomerParticulars.Company_RegisteredName;
                    }
                    else
                    {
                        customerName = sales.CustomerParticulars.Natural_Name;
                    }
                    ListDictionary replacements = new ListDictionary();
                    replacements.Add("<%Name%>", customerName);
                    replacements.Add("<%MemoID%>", sales.MemoID);
                    replacements.Add("<%EmailType%>", "Receipt");
                    replacements.Add("<%Message%>", form["Message"].ToString());
                    replacements.Add("<%AcknowledgeMessage%>", "");
                    string recipient = form["To"].ToString();
                    string cc = form["Cc"].ToString();
                    string bcc = form["Bcc"].ToString();

                    bool sent = EmailHelper.sendEmail(subject, body, replacements, recipient, cc, bcc, pdf, fileName, Convert.ToInt32(Session["UserId"]), "Email Receipt", sales.ID);

                    if (sent)
                    {
                        updateResult = "{\"result\":\"success\", \"msg\":\"Remittance Sale Memo has been sent to " + customerName.Replace("\"", "\\\"") + "!\"}";

                        bool approval_history = _approvalHistorysModel.Add("RemittanceSale", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Sent Email", "Remittance Sale Memo has been sent to " + customerName);

                    }
                    else
                    {
                        updateResult = "{\"result\":\"error\", \"msg\":\"Failed to send Sale Memo!\"}";
                    }
                }
                else
                {
                    updateResult = "{\"result\":\"error\", \"msg\":\"Memo ID not found!\"}";
                }
            }
            else
            {
                string msg = "";

                foreach (string[] error in modelErrors)
                {
                    msg += "{\"id\":\"" + error[0] + "\",\"error\":\"" + error[1] + "\"},";
                }

                updateResult = "{\"result\":\"form-error\", \"msg\":[" + msg.Substring(0, msg.Length - 1) + "]}";
            }

            return Json(updateResult);
        }

        //GET: SendConfirmationEmail
        public ActionResult SendConfirmationEmail(int id)
        {
            Remittances sales = _remittancesalesModel.GetSingle(id);
            ViewData["SaleId"] = id;
            ViewData["MemoID"] = sales.MemoID;
            ViewData["To"] = "";
            if (sales.CustomerParticulars.CustomerType == "Corporate & Trading Company")
            {
                if (!string.IsNullOrEmpty(sales.CustomerParticulars.Company_Email))
                {
                    ViewData["To"] = sales.CustomerParticulars.Company_Email;
                    //ViewData["To"] = "kianchi@theodttsolutions.com";
                }
            }
            else
            {
                if (!string.IsNullOrEmpty(sales.CustomerParticulars.Natural_Email))
                {
                    ViewData["To"] = sales.CustomerParticulars.Natural_Email;
                    //ViewData["To"] = "kianchi@theodttsolutions.com";
                }
            }

            ViewData["Subject"] = "Transaction Confirmation ID: " + sales.MemoID;

            return View();
        }

        //POST: SendConfirmationEmail
        [HttpPost]
        public ActionResult SendConfirmationEmail(int id, FormCollection form)
        {
            List<string[]> modelErrors = new List<string[]>();

            string updateResult = "";

            if (string.IsNullOrEmpty(form["ConfirmationTo"]))
            {
                string[] error = new string[2];
                error[0] = "ConfirmationTo";
                error[1] = "To is required!";
                modelErrors.Add(error);
            }
            else
            {
                bool checkEmail = FormValidationHelper.EmailValidation(form["ConfirmationTo"].ToString());

                if (!checkEmail)
                {
                    string[] error = new string[2];
                    error[0] = "ConfirmationTo";
                    error[1] = "To is not a valid email!";
                    modelErrors.Add(error);
                }
            }

            if (!string.IsNullOrEmpty(form["ConfirmationCc"]))
            {
                bool checkEmail = FormValidationHelper.EmailValidation(form["ConfirmationCc"].ToString());

                if (!checkEmail)
                {
                    string[] error = new string[2];
                    error[0] = "ConfirmationCc";
                    error[1] = "Cc is not a valid email!";
                    modelErrors.Add(error);
                }
            }

            if (!string.IsNullOrEmpty(form["ConfirmationBcc"]))
            {
                bool checkEmail = FormValidationHelper.EmailValidation(form["ConfirmationBcc"].ToString());

                if (!checkEmail)
                {
                    string[] error = new string[2];
                    error[0] = "ConfirmationBcc";
                    error[1] = "Bcc is not a valid email!";
                    modelErrors.Add(error);
                }
            }

            if (modelErrors.Count == 0)
            {
                Remittances sales = _remittancesalesModel.GetSingle(id);

                if (sales != null)
                {
                    var attachment = GenerateConfirmationEmail(id, true);
                    string fileName = attachment.FileName;
                    byte[] pdf = attachment.BuildPdf(ControllerContext);
                    int userid = Convert.ToInt32(Session["UserId"]);

                    string subject = form["ConfirmationSubject"].ToString();
                    string body = System.IO.File.ReadAllText(Server.MapPath("~/Templates/Memo.html"));
                    string customerName = "";
                    if (sales.CustomerParticulars.CustomerType == "Corporate & Trading Company")
                    {
                        customerName = sales.CustomerParticulars.Company_RegisteredName;
                    }
                    else
                    {
                        customerName = sales.CustomerParticulars.Natural_Name;
                    }
                    ListDictionary replacements = new ListDictionary();
                    replacements.Add("<%Name%>", customerName);
                    replacements.Add("<%MemoID%>", sales.MemoID);
                    replacements.Add("<%EmailType%>", "Confirmation");
                    replacements.Add("<%Message%>", form["ConfirmationMessage"].ToString());
                    replacements.Add("<%AcknowledgeMessage%>", "<p><strong>Please kindly acknowledge to confirm.</strong></p>");
                    string recipient = form["ConfirmationTo"].ToString();
                    string cc = form["ConfirmationCc"].ToString();
                    string bcc = form["ConfirmationBcc"].ToString();

                    bool sent = EmailHelper.sendEmail(subject, body, replacements, recipient, cc, bcc, pdf, fileName, Convert.ToInt32(Session["UserId"]), "Email Confirmation", sales.ID);

                    if (sent)
                    {
                        updateResult = "{\"result\":\"success\", \"msg\":\"Remittance Sale Memo has been sent to " + customerName.Replace("\"", "\\\"") + "!\"}";

                        bool approval_history = _approvalHistorysModel.Add("RemittanceSale", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Confirm Received", "Remittance Sale Memo has been sent to " + customerName);
                    }
                    else
                    {
                        updateResult = "{\"result\":\"error\", \"msg\":\"Failed to send Sale Memo!\"}";
                    }
                }
                else
                {
                    updateResult = "{\"result\":\"error\", \"msg\":\"Memo ID not found!\"}";
                }
            }
            else
            {
                string msg = "";

                foreach (string[] error in modelErrors)
                {
                    msg += "{\"id\":\"" + error[0] + "\",\"error\":\"" + error[1] + "\"},";
                }

                updateResult = "{\"result\":\"form-error\", \"msg\":[" + msg.Substring(0, msg.Length - 1) + "]}";
            }

            return Json(updateResult);
        }

        //GET: SummaryIndex
        public ActionResult SummaryIndex()
        {
            if (TempData["SearchStatus"] != null)
            {
                TempData.Remove("SearchStatus");
            }

            return RedirectToAction("Summary");
        }

        //GET: Summary
        [RedirectingActionSaleSummary]
        public ActionResult Summary(int page = 1, string searchStatus = "Pending")
        {
            IList<Sale> todaySales = _salesModel.GetTodaySales();
            decimal totalPendingBuy = 0;
            decimal totalBuy = 0;
            decimal totalPendingSell = 0;
            decimal totalSell = 0;

            foreach (Sale sale in todaySales)
            {
                foreach (SaleTransaction transaction in sale.SaleTransactions)
                {
                    if (transaction.TransactionType == "Buy")
                    {
                        if (sale.Status.Contains("Pending"))
                        {
                            totalPendingBuy += transaction.AmountLocal;
                        }
                        totalBuy += transaction.AmountLocal;
                    }
                    else
                    {
                        if (sale.Status.Contains("Pending"))
                        {
                            totalPendingSell += transaction.AmountLocal;
                        }
                        totalSell += transaction.AmountLocal;
                    }
                }
            }

            string[] weeklyDates = GetWeeklyDates();

            IList<Sale> weeklySales = _salesModel.GetWeeklySales(weeklyDates[0], weeklyDates[1]);
            decimal totalWeeklyTransaction = 0;
            decimal totalWeeklyBuy = 0;
            decimal totalWeeklySell = 0;

            foreach (Sale sale in weeklySales)
            {
                foreach (SaleTransaction transaction in sale.SaleTransactions)
                {
                    totalWeeklyTransaction += transaction.AmountLocal;

                    if (transaction.TransactionType == "Buy")
                    {
                        totalWeeklyBuy += transaction.AmountLocal;
                    }
                    else
                    {
                        totalWeeklySell += transaction.AmountLocal;
                    }
                }
            }

            int pageSize = Convert.ToInt32(ConfigurationManager.AppSettings["PageSize"]);

            TempData["Page"] = page;
            ViewData["Page"] = page;

            TempData["PageSize"] = pageSize;
            ViewData["PageSize"] = pageSize;

            ViewData["SearchKeyword"] = "";

            ViewData["SearchStatus"] = searchStatus;
            TempData["SearchStatus"] = searchStatus;

            ViewData["AllPendingActive"] = "";
            ViewData["PendingAssignDeliveryActive"] = "";
            ViewData["PendingDeliveryActive"] = "";

            if (searchStatus == "Pending Assign Delivery")
            {
                ViewData["PendingAssignDeliveryActive"] = "active";
                ViewData["CurrentStatus"] = "Today's Pending Assign Delivery Only";
            }
            else if (searchStatus == "Pending Delivery")
            {
                ViewData["PendingDeliveryActive"] = "active";
                ViewData["CurrentStatus"] = "Today's Pending Delivery Only";
            }
            else
            {
                ViewData["AllPendingActive"] = "active";
                ViewData["CurrentStatus"] = "Today's Pending";
            }

            string today = DateTime.Now.ToString("dd/MM/yyyy");

            IPagedList<Sale> sales = _salesModel.GetPaged(ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString(), page, pageSize, today);
            ViewData["Sale"] = sales;

            string sgdFormat = GetDecimalFormat(sgdDp);
            string rateFormat = GetRateFormat(rateDP);

            ViewData["TodayTotalBuy"] = totalBuy.ToString(sgdFormat);
            ViewData["TodayTotalPendingBuy"] = totalPendingBuy.ToString(sgdFormat);
            ViewData["TodayTotalSell"] = totalSell.ToString(sgdFormat);
            ViewData["TodayTotalPendingSell"] = totalPendingSell.ToString(sgdFormat);

            ViewData["WeeklyTotalTransaction"] = totalWeeklyTransaction.ToString(sgdFormat);
            ViewData["WeeklyTotalBuy"] = totalWeeklyBuy.ToString(sgdFormat);
            ViewData["WeeklyTotalSell"] = totalWeeklySell.ToString(sgdFormat);

            ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
            return View();
        }

        //GET: ViewSaleDetail
        public ActionResult ViewSaleDetail(int id)
        {
            Sale sales = _salesModel.GetSingle(id);
            ViewData["Sale"] = sales;

            return View();
        }

        public void GenerateMSBOrderForm(int id)
        {
            string companyName = _settingsModel.GetCodeValue("COMPANY_NAME").ToUpper();
            string exportDate = DateTime.Now.ToString("dd-MM-yyyy");

            using (ExcelPackage pck = new ExcelPackage())
            {
                //Create Worksheet
                ExcelWorksheet saleWS = pck.Workbook.Worksheets.Add("BENEFICIARY INFO");

                //set header rows
                saleWS.Cells["A1:B1"].Merge = true;
                saleWS.Cells[1, 1].Style.Font.Bold = true;
                saleWS.Cells[1, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[1, 1].Value = "MSB ORDER FORM";

                saleWS.Cells["A3:B3"].Merge = true;
                saleWS.Cells[3, 1].Style.Font.Bold = true;
                saleWS.Cells[3, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[3, 1].Value = "DATE: ";

                saleWS.Cells["F2:J2"].Merge = true;
                //saleWS.Cells[2, 5].Style.Font.Bold = false;
                saleWS.Cells[2, 6].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[2, 6].Value = "Please note that all transactions placed with ONEPIP are governed by the terms & conditions published on ONEPIP's corporate website (http://onepip.net/termsandcondition).";

                saleWS.Cells["A4:B4"].Merge = true;
                saleWS.Cells[4, 1].Style.Font.Bold = true;
                saleWS.Cells[4, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[4, 1].Value = "COMPANY NAME: ";

                saleWS.Cells["F3:J3"].Merge = true;
                //saleWS.Cells[2, 5].Style.Font.Bold = false;
                saleWS.Cells[3, 6].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[3, 6].Value = "所有与壹萬點的交易均受壹萬點通用条款及条件的约束。详情请参阅壹萬點官方网站 http://onepip.net/termsandcondition。";

                saleWS.Cells["F4:J4"].Merge = true;
                saleWS.Cells[4, 6].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                saleWS.Cells[4, 6].Style.Font.Bold = true;
                saleWS.Cells[4, 6].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[4, 6].Value = "Note: For TWD, please include Sender name under Purpose of payment";

                saleWS.Cells["A5:B5"].Merge = true;
                saleWS.Cells[5, 1].Style.Font.Bold = true;
                saleWS.Cells[5, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[5, 1].Value = "AUTHORISED PERSON: ";

                saleWS.Cells["F5:J5"].Merge = true;
                saleWS.Cells[5, 6].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                saleWS.Cells[5, 6].Style.Font.Bold = true;
                saleWS.Cells[5, 6].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[5, 6].Value = "Note: Sender information is mandatory for MYR, PHP, IDR & THB. Please fill up on the following tab based on the sender type.";

                //set first row name
                saleWS.Cells["A7:C7"].Merge = true;
                saleWS.Cells[7, 1].Style.Font.Bold = true;
                saleWS.Cells[7, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[7, 1].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[7, 1].Value = "REMITTANCE DETAILS";
                saleWS.Cells[8, 1].Style.Font.Bold = true;
                saleWS.Cells[8, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[8, 1].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[8, 1].Value = "YOUR REFERENCE NO.";
                saleWS.Cells[8, 2].Style.Font.Bold = true;
                saleWS.Cells[8, 2].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[8, 2].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[8, 2].Value = "REMITING CURRENCY";
                saleWS.Cells[8, 3].Style.Font.Bold = true;
                saleWS.Cells[8, 3].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[8, 3].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[8, 3].Value = "REMITING AMOUNT";

                saleWS.Cells["D7:K7"].Merge = true;
                saleWS.Cells[7, 4].Style.Font.Bold = true;
                saleWS.Cells[7, 4].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[7, 4].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[7, 4].Value = "BENEFICIARY DETAILS *ONLY APPLICABLE FOR CORPORATE BENEFICIARY";
                saleWS.Cells[8, 4].Style.Font.Bold = true;
                saleWS.Cells[8, 4].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[8, 4].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[8, 4].Value = "NAME";
                saleWS.Cells[8, 5].Style.Font.Bold = true;
                saleWS.Cells[8, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[8, 5].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[8, 5].Value = "NATIONALITY (MYR, PHP, IDR & THB)";
                saleWS.Cells[8, 6].Style.Font.Bold = true;
                saleWS.Cells[8, 6].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[8, 6].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[8, 6].Value = "ID NO. (TWD)";
                saleWS.Cells[8, 7].Style.Font.Bold = true;
                saleWS.Cells[8, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[8, 7].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[8, 7].Value = "RESIDENTIAL ADDRESS";
                saleWS.Cells[8, 8].Style.Font.Bold = true;
                saleWS.Cells[8, 8].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[8, 8].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[8, 8].Value = "CONTACT NUMBER (TWD, MYR *, PHP *, IDR * , THB *)";
                saleWS.Cells[8, 9].Style.Font.Bold = true;
                saleWS.Cells[8, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[8, 9].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[8, 9].Value = "STAFF IN CHARGE (TWD*)";
                saleWS.Cells[8, 10].Style.Font.Bold = true;
                saleWS.Cells[8, 10].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[8, 10].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[8, 10].Value = "COMPANY REG NO. (TWD, MYR, PHP, IDR & THB)";
                saleWS.Cells[8, 11].Style.Font.Bold = true;
                saleWS.Cells[8, 11].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[8, 11].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[8, 11].Value = "BUSINESS ENTITY TYPE";

                saleWS.Cells["L7:O7"].Merge = true;
                saleWS.Cells[7, 12].Style.Font.Bold = true;
                saleWS.Cells[7, 12].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[7, 12].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[7, 12].Value = "BANK DETAILS";
                saleWS.Cells[8, 12].Style.Font.Bold = true;
                saleWS.Cells[8, 12].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[8, 12].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[8, 12].Value = "ACCOUNT NUMBER / IBAN";
                saleWS.Cells[8, 13].Style.Font.Bold = true;
                saleWS.Cells[8, 13].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[8, 13].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[8, 13].Value = "BANK NAME";
                saleWS.Cells[8, 14].Style.Font.Bold = true;
                saleWS.Cells[8, 14].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[8, 14].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[8, 14].Value = "BANK CODE / SWIFT CODE";
                saleWS.Cells[8, 15].Style.Font.Bold = true;
                saleWS.Cells[8, 15].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[8, 15].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[8, 15].Value = "BANK ADDRESS";

                saleWS.Cells["P7:R7"].Merge = true;
                saleWS.Cells[7, 16].Style.Font.Bold = true;
                saleWS.Cells[7, 16].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[7, 16].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[7, 16].Value = "ADDITIONAL INFORMATION";
                saleWS.Cells[8, 16].Style.Font.Bold = true;
                saleWS.Cells[8, 16].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[8, 16].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[8, 16].Value = "RELATIONSHIP BETWEEN SENDER AND BENEFICIARY";
                saleWS.Cells[8, 17].Style.Font.Bold = true;
                saleWS.Cells[8, 17].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[8, 17].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[8, 17].Value = "SOURCE OF FUNDS";
                saleWS.Cells[8, 18].Style.Font.Bold = true;
                saleWS.Cells[8, 18].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[8, 18].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[8, 18].Value = "PURPOSE OF PAYMENT";

                int saleRow = 9;

                string sgdFormat = GetDecimalFormat(sgdDp);
                string rateFormat = GetRateFormat(rateDP);

                decimal grandTotalForeign = 0;
                decimal grandTotalLocal = 0;
                decimal totalcostRemittance = 0;
                decimal totalGain = 0;
                var getRemittance = _remittancesalesModel.GetSingle(id);
                var customerName = "";
                var ordercompanyName = "";
                if (getRemittance.CustomerParticulars.CustomerType == "Corporate & Trading Company")
                {
                    ordercompanyName = getRemittance.CustomerParticulars.CustomerCode + " - " + getRemittance.CustomerParticulars.Company_RegisteredName;
                    customerName = getRemittance.CustomerParticulars.Company_ContactName;
                }
                else
                {
                    ordercompanyName = getRemittance.CustomerParticulars.CustomerCode + " - " + getRemittance.CustomerParticulars.Natural_SelfEmployedBusinessName;
                    customerName = getRemittance.CustomerParticulars.Natural_Name;
                }
                saleWS.Cells["C3:E3"].Merge = true;
                saleWS.Cells[3, 3].Style.Font.Bold = true;
                saleWS.Cells[3, 3].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[3, 3].Value = exportDate;

                saleWS.Cells["C4:E4"].Merge = true;
                saleWS.Cells[4, 3].Style.Font.Bold = true;
                saleWS.Cells[4, 3].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[4, 3].Value = "GreatEastForex";

                saleWS.Cells["C5:E5"].Merge = true;
                saleWS.Cells[5, 3].Style.Font.Bold = true;
                saleWS.Cells[5, 3].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[5, 3].Value = "Ko Say Gak";

                foreach (var ro in getRemittance.RemittanceOders.OrderBy(e => e.ID))
                {
                    saleWS.Cells[saleRow, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 1].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 1].Value = getRemittance.MemoID + " - " + ro.TransactionID;
                    saleWS.Cells[saleRow, 2].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 2].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 2].Value = ro.GetCurrencyDecimal.CurrencyCode;
                    saleWS.Cells[saleRow, 3].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 3].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 3].Value = ro.PayCurrencyDecimal.ProductSymbol + ro.GetAmount;

                    saleWS.Cells[saleRow, 4].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 4].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 4].Value = ro.BeneficiaryFullName;

                    //call db to get details
                    string nationality = "-";
                    string companyRegNo = "-";
                    string sourcePayment = "-";
                    string purposePayment = "-";
                    string bankorIBAN = ro.BeneficiaryBankAccountNo;
                    using (var context = new DataAccess.GreatEastForex())
                    {
                        if (ro.BeneficiaryNationality > 0)
                        {
                            var getNationality = context.Nationalities.Where(e => e.ID == ro.BeneficiaryNationality).FirstOrDefault().Name;
                            if (getNationality != "Others")
                            {
                                nationality = getNationality;
                            }
                            else
                            {
                                nationality = ro.BeneficiaryNationalityIfOthers;
                            }
                        }
                        if (ro.BeneficiaryCompanyRegistrationNo != null)
                        {
                            companyRegNo = ro.BeneficiaryCompanyRegistrationNo;
                        }

                        if (ro.IBANEuropeBSBAustralia != null)
                        {
                            bankorIBAN = ro.IBANEuropeBSBAustralia;
                        }

                        if (ro.BeneficiarySourceOfPayment > 0)
                        {
                            var getSourcePayment = context.FundLists.Where(e => e.ID == ro.BeneficiarySourceOfPayment).FirstOrDefault().Name;
                            if (getSourcePayment != "Others")
                            {
                                sourcePayment = getSourcePayment;
                            }
                            else
                            {
                                sourcePayment = getSourcePayment;
                            }
                        }

                        if (ro.BeneficiaryPurposeOfPayment > 0)
                        {
                            var getPurposePayment = context.PaymentLists.Where(e => e.ID == ro.BeneficiaryPurposeOfPayment).FirstOrDefault().Name;
                            if (getPurposePayment != "Others")
                            {
                                purposePayment = getPurposePayment;
                            }
                            else
                            {
                                purposePayment = getPurposePayment;
                            }
                        }
                    }

                    saleWS.Cells[saleRow, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 5].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 5].Value = nationality;
                    saleWS.Cells[saleRow, 6].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 6].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 6].Value = "-";
                    saleWS.Cells[saleRow, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 7].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 7].Value = ro.BeneficiaryAddressMain;
                    saleWS.Cells[saleRow, 8].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 8].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 8].Value = ro.BeneficiaryContactNoMain;
                    saleWS.Cells[saleRow, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 9].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 9].Value = "-";
                    saleWS.Cells[saleRow, 10].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 10].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 10].Value = companyRegNo;
                    saleWS.Cells[saleRow, 11].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 11].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 11].Value = "-";

                    saleWS.Cells[saleRow, 12].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 12].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 12].Value = bankorIBAN;
                    saleWS.Cells[saleRow, 13].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 13].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 13].Value = ro.BeneficiaryBankName;
                    saleWS.Cells[saleRow, 14].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 14].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 14].Value = ro.BeneficiaryBankCode;
                    saleWS.Cells[saleRow, 15].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 15].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 15].Value = ro.BeneficiaryBankAddress;

                    saleWS.Cells[saleRow, 16].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 16].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 16].Value = "-";
                    saleWS.Cells[saleRow, 17].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 17].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 17].Value = sourcePayment;
                    saleWS.Cells[saleRow, 18].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 18].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 18].Value = purposePayment;

                    saleRow++;
                }

                //Authorised Person Details

                saleWS.PrinterSettings.PaperSize = ePaperSize.A4;
                saleWS.PrinterSettings.TopMargin = 0.35M;
                saleWS.PrinterSettings.RightMargin = 0.35M;
                saleWS.PrinterSettings.BottomMargin = 0.35M;
                saleWS.PrinterSettings.LeftMargin = 0.35M;
                saleWS.HeaderFooter.OddFooter.RightAlignedText = String.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);
                saleWS.Cells[saleWS.Dimension.Address].Style.Font.Size = 9;
                saleWS.Cells[saleWS.Dimension.Address].AutoFitColumns();
                //double width_col4 = saleWS.Column(4).Width;
                //if (width_col4 > 15)
                //{
                //    saleWS.Column(4).Width = 15;
                //    saleWS.Column(4).Style.WrapText = true;
                //}
                //double width_col7 = saleWS.Column(7).Width;
                //if (width_col7 > 10)
                //{
                //    saleWS.Column(7).Width = 10;
                //    saleWS.Column(7).Style.WrapText = true;
                //}
                //double width_col8 = saleWS.Column(8).Width;
                //if (width_col8 > 10)
                //{
                //    saleWS.Column(8).Width = 10;
                //    saleWS.Column(8).Style.WrapText = true;
                //}
                if (getRemittance.CustomerParticulars.CustomerType == "Corporate & Trading Company")
                {
                    GenerateSenderInfoCooperation(id, pck);
                }
                else
                {
                    GenerateSenderInfoIndividual(id, pck);
                }

                //Write it back to the client
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.AddHeader("content-disposition", "attachment;  filename=msb-order-form-" + DateTime.Now.ToString("yyyyMMddHHmm") + ".xlsx");
                Response.BinaryWrite(pck.GetAsByteArray());
            }
        }

        public void GenerateCYSOthersForm(int id)
        {
            string companyName = _settingsModel.GetCodeValue("COMPANY_NAME").ToUpper();
            string exportDate = DateTime.Now.ToString("dd-MM-yyyy");
            var getRemittanceSale = _remittancesalesModel.GetSingle2(id);
            var firstRO = getRemittanceSale.RemittanceOders.FirstOrDefault();
            var sgdFormat = GetDecimalFormat(sgdDp);
            var rateFormat = GetDecimalFormat(rateDP);
            var countryList = new List<Countries>();
            var nationalityList = new List<Nationalities>();
            using (var context = new DataAccess.GreatEastForex())
            {
                countryList = context.Countries.Where(e => e.IsDeleted == 0).ToList();
                nationalityList = context.Nationalities.Where(e => e.IsDeleted == 0).ToList();
            }
            using (ExcelPackage pck = new ExcelPackage())
            {
                //Create Worksheet
                ExcelWorksheet saleWS = pck.Workbook.Worksheets.Add("English");

                //set header rows
                saleWS.Cells["A1:L1"].Merge = true;
                //saleWS.Cells[1, 1].Style.Font.Bold = true;
                saleWS.Row(1).Height = 38.25;
                saleWS.Cells[1, 1].Style.WrapText = false;
                saleWS.Cells[1, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[1, 1].Value = "CYS GLOBAL REMIT PTE LTD";
                var getFile = Path.Combine(Server.MapPath("~/Content/images/CYS_Global_Remittance_Banner.jpg"));
                System.Drawing.Image img = System.Drawing.Image.FromFile(getFile);
                var pic = saleWS.Drawings.AddPicture("CYS", img);
                pic.SetPosition(0, 0, 0, 0);
                pic.SetSize(768, 50);

                saleWS.Cells["A2:L4"].Merge = true;
                saleWS.Cells[2, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[2, 1].Value = "Commercial Foreign Exchange Traders, Banknotes Dealers & Remittance Agent (REG NO 199409248-M) \n3 Shenton Way  #02-04/05, Shenton House, Singapore 068805 \nTEL +65 6226 2088 FAX +65 6226 0288";
                saleWS.Cells[2, 1].Style.WrapText = true;

                saleWS.Cells["A5:L5"].Merge = true;
                //saleWS.Cells[2, 5].Style.Font.Bold = false;
                saleWS.Cells[5, 1].Style.Font.Color.SetColor(System.Drawing.Color.White);
                saleWS.Cells[5, 1].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                saleWS.Cells[5, 1].Style.Fill.BackgroundColor.SetColor(255, 137, 171, 58);
                saleWS.Cells[5, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[5, 1].Value = "Remittance Application Form";

                saleWS.Cells["A6:D6"].Merge = true;
                saleWS.Cells[6, 1].Style.Font.Bold = true;
                saleWS.Cells[6, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                //saleWS.Cells[6, 1].Value = "Wire Transfer";
                var WireCheckbox = saleWS.Drawings.AddCheckBoxControl("Wire Transfer");
                WireCheckbox.Text = "Wire Transfer";
                //WireCheckbox.LinkedCell = saleWS.Cells["A6"];
                WireCheckbox.Print = true;
                WireCheckbox.SetPosition(5, 0, 1, 0);
                WireCheckbox.Checked = OfficeOpenXml.Drawing.Controls.eCheckState.Checked;

                saleWS.Cells["E6:H6"].Merge = true;
                saleWS.Cells[6, 5].Style.Font.Bold = true;
                saleWS.Cells[6, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                //saleWS.Cells[6, 5].Value = "Ledger Transfer";
                var LedgerCheckbox = saleWS.Drawings.AddCheckBoxControl("Ledger Transfer");
                LedgerCheckbox.Text = "Ledger Transfer";
                //LedgerCheckbox.LinkedCell = saleWS.Cells["E6"];
                LedgerCheckbox.Print = true;
                LedgerCheckbox.SetPosition(5, 0, 5, 0);
                saleWS.Row(6).Height = 23;

                saleWS.Cells["I6:L6"].Merge = true;
                saleWS.Cells[6, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[6, 9].Value = "Date of application: " + exportDate;

                saleWS.Cells["A7:L7"].Merge = true;
                saleWS.Cells[7, 1].Style.Font.Color.SetColor(System.Drawing.Color.White);
                saleWS.Cells[7, 1].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                saleWS.Cells[7, 1].Style.Fill.BackgroundColor.SetColor(255, 137, 171, 58);
                saleWS.Cells[7, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[7, 1].Value = "Client's Details";

                saleWS.Cells["A8:H9"].Merge = true;
                saleWS.Cells[8, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                ExcelRange rg81 = saleWS.Cells[8, 1];
                rg81.IsRichText = true;
                var ClientName = rg81.RichText.Add("Client's Name: ");
                var ClientName2 = rg81.RichText.Add("GREAT EAST FOREX");
                ClientName2.Bold = true;
                //saleWS.Cells[8, 1].Value = rg81;

                saleWS.Cells["I8:L9"].Merge = true;
                saleWS.Cells[8, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                ExcelRange rg89 = saleWS.Cells[8, 9];
                rg89.IsRichText = true;
                var Phone = rg89.RichText.Add("Phone: ");
                var Phone2 = rg89.RichText.Add("6339 2828");
                Phone2.Bold = true;
                //saleWS.Cells[8, 9].Value = rg89;

                saleWS.Cells["A10:L10"].Merge = true;
                saleWS.Cells[10, 1].Style.Font.Color.SetColor(System.Drawing.Color.White);
                saleWS.Cells[10, 1].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                saleWS.Cells[10, 1].Style.Fill.BackgroundColor.SetColor(255, 137, 171, 58);
                saleWS.Cells[10, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[10, 1].Value = "Details of Remittance/ Foreign Exchange Contract";

                saleWS.Cells["A11:F12"].Merge = true;
                saleWS.Cells[11, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[11, 1].Value = "Foreign Currency & Amount: " + firstRO.GetCurrencyDecimal.CurrencyCode + firstRO.GetAmount.ToString(GetDecimalFormat(firstRO.GetCurrencyDecimal.ProductDecimal));

                var converToSGD = ((getRemittanceSale.AgentRate.HasValue ? getRemittanceSale.AgentRate : 0.00M) * firstRO.GetAmount);
                saleWS.Cells["G11:L12"].Merge = true;
                saleWS.Cells[11, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[11, 7].Value = "Exchange Rate: " + (getRemittanceSale.AgentRate.HasValue ? getRemittanceSale.AgentRate : 0.00M).Value.ToString(rateFormat);

                saleWS.Cells["A13:F14"].Merge = true;
                saleWS.Cells[13, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[13, 1].Value = "Equivalent in SGD: ";

                saleWS.Cells["G13:L14"].Merge = true;
                saleWS.Cells[13, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[13, 7].Value = "Transaction Fee(SGD): " + (getRemittanceSale.AgentFee.HasValue ? getRemittanceSale.AgentFee : 0.00M).Value.ToString(sgdFormat);

                saleWS.Cells["A15:F16"].Merge = true;
                saleWS.Cells[15, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[15, 1].Style.WrapText = true;
                saleWS.Cells[15, 1].Value = "Purpose of Remittance: " + firstRO.BeneficiaryPaymentDetails;

                saleWS.Cells["G15:L16"].Merge = true;
                saleWS.Cells[15, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[15, 7].Value = "Total in SGD: " + getRemittanceSale.CostPrice.ToString(sgdFormat);

                saleWS.Cells["A17:L17"].Merge = true;
                saleWS.Cells[17, 1].Style.Font.Color.SetColor(System.Drawing.Color.White);
                saleWS.Cells[17, 1].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                saleWS.Cells[17, 1].Style.Fill.BackgroundColor.SetColor(255, 137, 171, 58);
                saleWS.Cells[17, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[17, 1].Value = "Beneficiary's Particulars";

                saleWS.Cells["A18:L19"].Merge = true;
                saleWS.Cells[18, 1].Style.WrapText = true;
                saleWS.Cells[18, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[18, 1].Value = "Beneficiary Account Name: " + firstRO.BeneficiaryFullName;

                saleWS.Cells["A20:L21"].Merge = true;
                saleWS.Cells[20, 1].Style.WrapText = true;
                saleWS.Cells[20, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[20, 1].Value = "Beneficiary's Address: " + firstRO.BeneficiaryAddressMain;

                saleWS.Cells["A22:L23"].Merge = true;
                saleWS.Cells[22, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[22, 1].Value = "Beneficiary's Bank Name: " + firstRO.BeneficiaryBankName;

                saleWS.Cells["A24:F25"].Merge = true;
                saleWS.Cells[24, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[24, 1].Value = "Branch: ";

                var bankCountry = "";
                if (firstRO.BeneficiaryBankCountry != 48)
                    bankCountry = countryList.Where(e => e.ID == firstRO.BeneficiaryBankCountry).FirstOrDefault().Name;
                else
                    bankCountry = firstRO.BankCountryIfOthers;
                saleWS.Cells["G24:L25"].Merge = true;
                saleWS.Cells[24, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[24, 7].Value = "Country: " + bankCountry;

                saleWS.Cells["A26:L27"].Merge = true;
                saleWS.Cells[26, 1].Style.WrapText = true;
                saleWS.Cells[26, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[26, 1].Value = "Beneficiary's Account Number OR IBAN Number (for EUR  payments only): \n" + firstRO.BeneficiaryBankAccountNo;

                saleWS.Cells["A28:L29"].Merge = true;
                saleWS.Cells[28, 1].Style.WrapText = true;
                saleWS.Cells[28, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[28, 1].Value = "Beneficiary Bank Indentification Code(BIC). eg Sort Code, SWIFT, Fedwire No. BSB (Compulsory Field) \n" + firstRO.BeneficiaryBankCode;

                saleWS.Cells["A30:D31"].Merge = true;
                saleWS.Cells[30, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[30, 1].Value = "Intermediary Bank Details eg Bank Name ";

                saleWS.Cells["E30:H31"].Merge = true;
                saleWS.Cells[30, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[30, 5].Value = "Account No. ";

                saleWS.Cells["I30:L31"].Merge = true;
                saleWS.Cells[30, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[30, 9].Value = "Routing No. ";

                saleWS.Cells["A32:L33"].Merge = true;
                saleWS.Cells[32, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[32, 1].Value = "Payment Details / Instructions: ";

                saleWS.Cells["A34:L34"].Merge = true;
                saleWS.Cells[34, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[34, 1].Value = "I / We hereby request you to execute the above remittance ";

                saleWS.Cells["A35:D37"].Merge = true;
                saleWS.Cells[35, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[35, 1].Value = "Signature 1: ";

                saleWS.Cells["E35:H37"].Merge = true;
                saleWS.Cells[35, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[35, 5].Value = "Name: ";

                saleWS.Cells["I35:L37"].Merge = true;
                saleWS.Cells[35, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[35, 9].Value = "Date: ";

                saleWS.Cells["A38:D40"].Merge = true;
                saleWS.Cells[38, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[38, 1].Value = "Signature 2: (if dual signatory required) ";

                saleWS.Cells["E38:H40"].Merge = true;
                saleWS.Cells[38, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[38, 5].Value = "Name: ";

                saleWS.Cells["I38:L40"].Merge = true;
                saleWS.Cells[38, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[38, 9].Value = "Date: ";

                saleWS.Cells["A41:L42"].Merge = true;
                saleWS.Cells[41, 1].Style.Font.Bold = true;
                saleWS.Cells[41, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[41, 1].Value = "For our Corporate Customers: ";

                saleWS.Cells["A43:L43"].Merge = true;
                saleWS.Cells[43, 1].Style.Font.Bold = true;
                saleWS.Cells[43, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[43, 1].Value = "Please fax completed form to: +65 6226 0288";

                saleWS.Cells["A44:L44"].Merge = true;
                saleWS.Cells[44, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[44, 1].Value = "CYS Global Remit Hotline : +65 6226 2088";

                saleWS.Cells["A45:L45"].Merge = true;
                saleWS.Cells[45, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[45, 1].Value = "Available from 9am to 6pm (Singapore Time) Monday to Friday, except Public Holidays";

                saleWS.Cells["A46:L46"].Merge = true;
                saleWS.Cells[46, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[46, 1].Value = "Co.Reg. No. 199409248-M";

                //Authorised Person Details
                saleWS.Cells["A1:L46"].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Top;
                saleWS.Cells["A1:L46"].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                saleWS.Cells["A1:L46"].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                saleWS.Cells["A1:L46"].Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                saleWS.Cells["A1:L46"].Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                saleWS.PrinterSettings.PaperSize = ePaperSize.A4;
                saleWS.PrinterSettings.TopMargin = 0.35M;
                saleWS.PrinterSettings.RightMargin = 0.35M;
                saleWS.PrinterSettings.BottomMargin = 0.35M;
                saleWS.PrinterSettings.LeftMargin = 0.35M;
                saleWS.HeaderFooter.OddFooter.RightAlignedText = String.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);
                saleWS.Cells[saleWS.Dimension.Address].Style.Font.Size = 11;
                saleWS.Cells[saleWS.Dimension.Address].AutoFitColumns();
                //double width_col4 = saleWS.Column(4).Width;
                //if (width_col4 > 15)
                //{
                //    saleWS.Column(4).Width = 15;
                //    saleWS.Column(4).Style.WrapText = true;
                //}
                //double width_col7 = saleWS.Column(7).Width;
                //if (width_col7 > 10)
                //{
                //    saleWS.Column(7).Width = 10;
                //    saleWS.Column(7).Style.WrapText = true;
                //}
                //double width_col8 = saleWS.Column(8).Width;
                //if (width_col8 > 10)
                //{
                //    saleWS.Column(8).Width = 10;
                //    saleWS.Column(8).Style.WrapText = true;
                //}
                //if (getRemittance.CustomerParticulars.CustomerType == "Corporate & Trading Company")
                //{
                //    GenerateSenderInfoCooperation(id, pck);
                //}
                //else
                //{
                CYSOthersChineseForm(pck, id);
                //}

                //Write it back to the client
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.AddHeader("content-disposition", "attachment;  filename=cys-other-form-" + DateTime.Now.ToString("yyyyMMddHHmm") + ".xlsx");
                Response.BinaryWrite(pck.GetAsByteArray());
            }
        }

        public void CYSOthersChineseForm(ExcelPackage pck, int id)
        {
            var getRemittanceSale = _remittancesalesModel.GetSingle2(id);
            var firstRO = getRemittanceSale.RemittanceOders.FirstOrDefault();
            var sgdFormat = GetDecimalFormat(sgdDp);
            var rateFormat = GetDecimalFormat(rateDP);
            var countryList = new List<Countries>();
            var nationalityList = new List<Nationalities>();
            using (var context = new DataAccess.GreatEastForex())
            {
                countryList = context.Countries.Where(e => e.IsDeleted == 0).ToList();
                nationalityList = context.Nationalities.Where(e => e.IsDeleted == 0).ToList();
            }

            //Create Worksheet
            ExcelWorksheet saleWS = pck.Workbook.Worksheets.Add("Chinese");

            //set header rows
            saleWS.Cells["A1:L1"].Merge = true;
            //saleWS.Cells[1, 1].Style.Font.Bold = true;
            saleWS.Row(1).Height = 38.25;
            saleWS.Cells[1, 1].Style.WrapText = false;
            saleWS.Cells[1, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[1, 1].Value = "CYS GLOBAL REMIT PTE LTD";
            var getFile = Path.Combine(Server.MapPath("~/Content/images/CYS_Global_Remittance_Banner.jpg"));
            System.Drawing.Image img = System.Drawing.Image.FromFile(getFile);
            var pic = saleWS.Drawings.AddPicture("CYS", img);
            pic.SetPosition(0, 0, 0, 0);
            pic.SetSize(768, 50);

            saleWS.Cells["A2:L4"].Merge = true;
            saleWS.Cells[2, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[2, 1].Value = "Commercial Foreign Exchange Traders, Banknotes Dealers & Remittance Agent (REG NO 199409248-M) \n3 Shenton Way  #02-04/05, Shenton House, Singapore 068805 \nTEL +65 6226 2088 FAX +65 6226 0288";
            saleWS.Cells[2, 1].Style.WrapText = true;

            saleWS.Cells["A5:L5"].Merge = true;
            //saleWS.Cells[2, 5].Style.Font.Bold = false;
            saleWS.Cells[5, 1].Style.Font.Color.SetColor(System.Drawing.Color.White);
            saleWS.Cells[5, 1].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
            saleWS.Cells[5, 1].Style.Fill.BackgroundColor.SetColor(255, 137, 171, 58);
            saleWS.Cells[5, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[5, 1].Value = "汇款申请书";

            saleWS.Cells["A6:D6"].Merge = true;
            saleWS.Cells[6, 1].Style.Font.Bold = true;
            saleWS.Cells[6, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            var WireCheckbox = saleWS.Drawings.AddCheckBoxControl("Wire Transfer");
            WireCheckbox.Text = "电汇";
            //WireCheckbox.LinkedCell = saleWS.Cells["A6"];
            WireCheckbox.Print = true;
            WireCheckbox.SetPosition(5, 0, 1, 0);
            WireCheckbox.Checked = OfficeOpenXml.Drawing.Controls.eCheckState.Checked;

            saleWS.Cells["E6:H6"].Merge = true;
            saleWS.Cells[6, 5].Style.Font.Bold = true;
            saleWS.Cells[6, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            var LedgerCheckbox = saleWS.Drawings.AddCheckBoxControl("Ledger Transfer");
            LedgerCheckbox.Text = "入帐";
            //WireCheckbox.LinkedCell = saleWS.Cells["A6"];
            LedgerCheckbox.Print = true;
            LedgerCheckbox.SetPosition(5, 0, 5, 0);
            saleWS.Row(6).Height = 23;

            saleWS.Cells["I6:L6"].Merge = true;
            saleWS.Cells[6, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[6, 9].Value = "申办日期: " + DateTime.Now.ToString("dd/MM/yyyy");

            saleWS.Cells["A7:L7"].Merge = true;
            saleWS.Cells[7, 1].Style.Font.Color.SetColor(System.Drawing.Color.White);
            saleWS.Cells[7, 1].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
            saleWS.Cells[7, 1].Style.Fill.BackgroundColor.SetColor(255, 137, 171, 58);
            saleWS.Cells[7, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[7, 1].Value = "客户明细";

            saleWS.Cells["A8:H9"].Merge = true;
            saleWS.Cells[8, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            ExcelRange rg81 = saleWS.Cells[8, 1];
            rg81.IsRichText = true;
            var ClientName = rg81.RichText.Add("客户名字:: ");
            var ClientName2 = rg81.RichText.Add("GREAT EAST FOREX");
            ClientName2.Bold = true;
            //saleWS.Cells[8, 1].Value = rg81;

            saleWS.Cells["I8:L9"].Merge = true;
            saleWS.Cells[8, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            ExcelRange rg89 = saleWS.Cells[8, 9];
            rg89.IsRichText = true;
            var Phone = rg89.RichText.Add("电话号码: ");
            var Phone2 = rg89.RichText.Add("6339 2828");
            Phone2.Bold = true;
            //saleWS.Cells[8, 9].Value = rg89;

            saleWS.Cells["A10:L10"].Merge = true;
            saleWS.Cells[10, 1].Style.Font.Color.SetColor(System.Drawing.Color.White);
            saleWS.Cells[10, 1].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
            saleWS.Cells[10, 1].Style.Fill.BackgroundColor.SetColor(255, 137, 171, 58);
            saleWS.Cells[10, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[10, 1].Value = "汇款明细";

            saleWS.Cells["A11:F12"].Merge = true;
            saleWS.Cells[11, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[11, 1].Value = "汇出货币和金额: " + firstRO.GetCurrencyDecimal.CurrencyCode + firstRO.GetAmount.ToString(GetDecimalFormat(firstRO.GetCurrencyDecimal.ProductDecimal));

            var converToSGD = ((getRemittanceSale.AgentRate.HasValue ? getRemittanceSale.AgentRate : 0.00M) * firstRO.GetAmount);
            saleWS.Cells["G11:L12"].Merge = true;
            saleWS.Cells[11, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[11, 7].Value = "汇率: " + (getRemittanceSale.AgentRate.HasValue ? getRemittanceSale.AgentRate : 0.00M).Value.ToString(rateFormat);

            saleWS.Cells["A13:F14"].Merge = true;
            saleWS.Cells[13, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[13, 1].Value = "等额星币: ";

            saleWS.Cells["G13:L14"].Merge = true;
            saleWS.Cells[13, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[13, 7].Value = "手续费(星币): " + (getRemittanceSale.AgentFee.HasValue ? getRemittanceSale.AgentFee : 0.00M).Value.ToString(sgdFormat);

            saleWS.Cells["A15:F16"].Merge = true;
            saleWS.Cells[15, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[15, 1].Style.WrapText = true;
            saleWS.Cells[15, 1].Value = "汇款原因: " + firstRO.BeneficiaryPaymentDetails;

            saleWS.Cells["G15:L16"].Merge = true;
            saleWS.Cells[15, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[15, 7].Value = "星币总计: " + getRemittanceSale.CostPrice.ToString(sgdFormat);

            saleWS.Cells["A17:L17"].Merge = true;
            saleWS.Cells[17, 1].Style.Font.Color.SetColor(System.Drawing.Color.White);
            saleWS.Cells[17, 1].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
            saleWS.Cells[17, 1].Style.Fill.BackgroundColor.SetColor(255, 137, 171, 58);
            saleWS.Cells[17, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[17, 1].Value = "收款人资料";

            saleWS.Cells["A18:L19"].Merge = true;
            saleWS.Cells[18, 1].Style.WrapText = true;
            saleWS.Cells[18, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[18, 1].Value = "收款人姓名: " + firstRO.BeneficiaryFullName;

            saleWS.Cells["A20:L21"].Merge = true;
            saleWS.Cells[20, 1].Style.WrapText = true;
            saleWS.Cells[20, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[20, 1].Value = "收款人地址: " + firstRO.BeneficiaryAddressMain;

            saleWS.Cells["A22:L23"].Merge = true;
            saleWS.Cells[22, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[22, 1].Value = "收款人银行: " + firstRO.BeneficiaryBankName;

            saleWS.Cells["A24:F25"].Merge = true;
            saleWS.Cells[24, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[24, 1].Value = "分行: ";

            var bankCountry = "";
            if (firstRO.BeneficiaryBankCountry != 48)
                bankCountry = countryList.Where(e => e.ID == firstRO.BeneficiaryBankCountry).FirstOrDefault().Name;
            else
                bankCountry = firstRO.BankCountryIfOthers;
            saleWS.Cells["G24:L25"].Merge = true;
            saleWS.Cells[24, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[24, 7].Value = "国家: " + bankCountry;

            saleWS.Cells["A26:L27"].Merge = true;
            saleWS.Cells[26, 1].Style.WrapText = true;
            saleWS.Cells[26, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[26, 1].Value = "收款人帐号 或 IBAN 帐号 (仅欧元汇款): \n" + firstRO.BeneficiaryBankAccountNo;

            saleWS.Cells["A28:L29"].Merge = true;
            saleWS.Cells[28, 1].Style.WrapText = true;
            saleWS.Cells[28, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[28, 1].Value = "收款人银行相关验证代码。如：分类编码，SWIFT 代码，Fedwire 代码，BSB代码（必填项）\n" + firstRO.BeneficiaryBankCode;

            saleWS.Cells["A30:D31"].Merge = true;
            saleWS.Cells[30, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[30, 1].Value = "中间行明细资料，行名 ";

            saleWS.Cells["E30:H31"].Merge = true;
            saleWS.Cells[30, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[30, 5].Value = "帐号 ";

            saleWS.Cells["I30:L31"].Merge = true;
            saleWS.Cells[30, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[30, 9].Value = "Routing 代码 ";

            saleWS.Cells["A32:L33"].Merge = true;
            saleWS.Cells[32, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[32, 1].Value = "备注: ";

            saleWS.Cells["A34:L34"].Merge = true;
            saleWS.Cells[34, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[34, 1].Value = "请贵公司按所填之内容办理汇款 ";

            saleWS.Cells["A35:D37"].Merge = true;
            saleWS.Cells[35, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[35, 1].Value = "汇款人签名 1: ";

            saleWS.Cells["E35:H37"].Merge = true;
            saleWS.Cells[35, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[35, 5].Value = "姓名: ";

            saleWS.Cells["I35:L37"].Merge = true;
            saleWS.Cells[35, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[35, 9].Value = "日期: ";

            saleWS.Cells["A38:D40"].Merge = true;
            saleWS.Cells[38, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[38, 1].Value = "汇款人签名 2: (if dual signatory required) ";

            saleWS.Cells["E38:H40"].Merge = true;
            saleWS.Cells[38, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[38, 5].Value = "姓名: ";

            saleWS.Cells["I38:L40"].Merge = true;
            saleWS.Cells[38, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[38, 9].Value = "日期: ";

            saleWS.Cells["A41:L42"].Merge = true;
            saleWS.Cells[41, 1].Style.Font.Bold = true;
            saleWS.Cells[41, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[41, 1].Value = "公司客户: ";

            saleWS.Cells["A43:L43"].Merge = true;
            saleWS.Cells[43, 1].Style.Font.Bold = true;
            saleWS.Cells[43, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[43, 1].Value = "请把完整表格传真至: +65 6226 0288";

            saleWS.Cells["A44:L44"].Merge = true;
            saleWS.Cells[44, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[44, 1].Value = "CYS Global Remit 热线 : +65 6226 2088";

            saleWS.Cells["A45:L45"].Merge = true;
            saleWS.Cells[45, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[45, 1].Value = "营业时间（新加坡时间）星期一至星期五上午九点至下午六点（公众假期除外）";

            saleWS.Cells["A46:L46"].Merge = true;
            saleWS.Cells[46, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[46, 1].Value = "Co.Reg. No. 199409248-M";

            //Authorised Person Details
            saleWS.Cells["A1:L46"].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Top;
            saleWS.Cells["A1:L46"].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
            saleWS.Cells["A1:L46"].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
            saleWS.Cells["A1:L46"].Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
            saleWS.Cells["A1:L46"].Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
            saleWS.PrinterSettings.PaperSize = ePaperSize.A4;
            saleWS.PrinterSettings.TopMargin = 0.35M;
            saleWS.PrinterSettings.RightMargin = 0.35M;
            saleWS.PrinterSettings.BottomMargin = 0.35M;
            saleWS.PrinterSettings.LeftMargin = 0.35M;
            saleWS.HeaderFooter.OddFooter.RightAlignedText = String.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);
            saleWS.Cells[saleWS.Dimension.Address].Style.Font.Size = 11;
            saleWS.Cells[saleWS.Dimension.Address].AutoFitColumns();
        }

        public void GenerateCYSCNYForm(int id)
        {
            string companyName = _settingsModel.GetCodeValue("COMPANY_NAME").ToUpper();
            string exportDate = DateTime.Now.ToString("dd-MM-yyyy");
            var getRemittanceSale = _remittancesalesModel.GetSingle2(id);
            var firstRO = getRemittanceSale.RemittanceOders.FirstOrDefault();
            var sgdFormat = GetDecimalFormat(sgdDp);
            var rateFormat = GetDecimalFormat(rateDP);
            var countryList = new List<Countries>();
            var nationalityList = new List<Nationalities>();
            using (var context = new DataAccess.GreatEastForex())
            {
                countryList = context.Countries.Where(e => e.IsDeleted == 0).ToList();
                nationalityList = context.Nationalities.Where(e => e.IsDeleted == 0).ToList();
            }
            using (ExcelPackage pck = new ExcelPackage())
            {
                //Create Worksheet
                ExcelWorksheet saleWS = pck.Workbook.Worksheets.Add("BENEFICIARY INFO");

                //set header rows
                saleWS.Cells["A1:C2"].Merge = true;
                saleWS.Cells[1, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                var getFile = Path.Combine(Server.MapPath("~/Content/images/CYSGlobalRemit.PNG"));
                System.Drawing.Image img = System.Drawing.Image.FromFile(getFile);
                var pic = saleWS.Drawings.AddPicture("CYSRemitt", img);
                pic.SetPosition(0, 0, 0, 0);
                pic.SetSize(232, 123);

                saleWS.Cells["D1:G2"].Merge = true;
                saleWS.Cells[1, 4].Style.Font.Bold = true;
                saleWS.Cells[1, 4].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[1, 4].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Top;
                saleWS.Cells[1, 4].Value = "CNY PAYMENT INSTRUCTION \n人民币付款指令";
                saleWS.Cells[1, 4].Style.WrapText = true;

                saleWS.Cells["A3:C3"].Merge = true;
                //saleWS.Cells[2, 5].Style.Font.Bold = false;
                saleWS.Cells[3, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[3, 1].Value = "Company Name:";

                saleWS.Cells["D3:G3"].Merge = true;
                saleWS.Cells[3, 4].Style.Font.Bold = true;
                saleWS.Cells[3, 4].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[3, 4].Value = "GREAT EAST FOREX";

                saleWS.Cells["A4:C4"].Merge = true;
                //saleWS.Cells[2, 5].Style.Font.Bold = false;
                saleWS.Cells[4, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[4, 1].Value = "Customer ID:";

                saleWS.Cells["D4:G4"].Merge = true;
                saleWS.Cells[4, 4].Style.Font.Bold = true;
                saleWS.Cells[4, 4].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[4, 4].Value = "17012803";

                saleWS.Cells["A5:C5"].Merge = true;
                //saleWS.Cells[2, 5].Style.Font.Bold = false;
                saleWS.Cells[5, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[5, 1].Value = "Submitted By:";

                saleWS.Cells["D5:G5"].Merge = true;
                saleWS.Cells[5, 4].Style.Font.Bold = true;
                saleWS.Cells[5, 4].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[5, 4].Value = "CHANG SHI HAO";

                var atpDDL = saleWS.DataValidations.AddListValidation("D5");
                atpDDL.Formula.Values.Add("CHANG SHI HAO");
                atpDDL.Formula.Values.Add("KO HAI RONG SHAINA");
                atpDDL.Formula.Values.Add("KO SAY GAK");
                atpDDL.Formula.Values.Add("WU PANG CHIAT @ PETER");

                saleWS.Cells["A6:C6"].Merge = true;
                //saleWS.Cells[2, 5].Style.Font.Bold = false;
                saleWS.Cells[6, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[6, 1].Value = "Date of Submission:";

                saleWS.Cells["D6:G6"].Merge = true;
                saleWS.Cells[6, 4].Style.Font.Bold = true;
                saleWS.Cells[6, 4].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[6, 4].Value = exportDate;

                saleWS.Cells["A7:C7"].Merge = true;
                //saleWS.Cells[2, 5].Style.Font.Bold = false;
                saleWS.Cells[7, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[7, 1].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Top;
                saleWS.Cells[7, 1].Value = "Remarks:";
                saleWS.Row(7).Height = 35;

                saleWS.Cells["D7:G7"].Merge = true;
                saleWS.Cells[7, 4].Style.Font.Bold = true;
                saleWS.Cells[7, 4].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[7, 4].Value = "";

                //set first row name
                saleWS.Cells[9, 1].Style.Font.Bold = true;
                saleWS.Cells[9, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[9, 1].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[9, 1].Value = "No";

                saleWS.Cells[9, 2].Style.Font.Bold = true;
                saleWS.Cells[9, 2].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[9, 2].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[9, 2].Style.WrapText = true;
                saleWS.Cells[9, 2].Value = "Beneficiary Name \n(Hanyu Pinyin 中文名字)";

                saleWS.Cells[9, 3].Style.Font.Bold = true;
                saleWS.Cells[9, 3].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[9, 3].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[9, 3].Value = "Country";

                saleWS.Cells[9, 4].Style.Font.Bold = true;
                saleWS.Cells[9, 4].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[9, 4].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[9, 4].Value = "Bank Name";

                saleWS.Cells[9, 5].Style.Font.Bold = true;
                saleWS.Cells[9, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[9, 5].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[9, 5].Value = "Beneficiary Account No";

                saleWS.Cells[9, 6].Style.Font.Bold = true;
                saleWS.Cells[9, 6].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[9, 6].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[9, 6].Value = "CNY";

                saleWS.Cells[9, 7].Style.Font.Bold = true;
                saleWS.Cells[9, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[9, 7].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[9, 7].Style.WrapText = true;
                saleWS.Cells[9, 7].Value = "Branch \n(Input in Chinese)";

                saleWS.Cells[9, 8].Style.Font.Bold = true;
                saleWS.Cells[9, 8].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[9, 8].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[9, 8].Value = "Bank Country";

                saleWS.Cells[9, 9].Style.Font.Bold = true;
                saleWS.Cells[9, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[9, 9].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[9, 9].Value = "Amount in CNY";

                saleWS.Cells[9, 10].Style.Font.Bold = true;
                saleWS.Cells[9, 10].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[9, 10].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[9, 10].Value = "Purpose of Remittance";

                saleWS.Cells[9, 11].Style.Font.Bold = true;
                saleWS.Cells[9, 11].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[9, 11].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[9, 11].Value = "Beneficiary Type";

                saleWS.Cells[9, 12].Style.Font.Bold = true;
                saleWS.Cells[9, 12].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[9, 12].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[9, 12].Value = "Industry Code";

                saleWS.Cells[9, 13].Style.Font.Bold = true;
                saleWS.Cells[9, 13].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[9, 13].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[9, 13].Value = "Super Code";

                saleWS.Cells["A9:M10"].Style.Font.Color.SetColor(System.Drawing.Color.White);
                saleWS.Cells["A9:M10"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                saleWS.Cells["A9:M10"].Style.Fill.BackgroundColor.SetColor(255, 0, 176, 80);
                saleWS.Row(1).Height = 77.25;
                saleWS.Row(9).Height = 60;
                saleWS.Cells["A3:G7"].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thick;
                saleWS.Cells["A3:G7"].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thick;
                saleWS.Cells["A3:G7"].Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thick;
                saleWS.Cells["A3:G7"].Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thick;

                saleWS.Cells[10, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[10, 1].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[10, 1].Value = "EG:";

                saleWS.Cells[10, 2].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[10, 2].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[10, 2].Style.WrapText = true;
                saleWS.Cells[10, 2].Value = "CHEN AI NI 陳爱倪";

                saleWS.Cells[10, 3].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[10, 3].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[10, 3].Value = "CHINA";

                saleWS.Cells[10, 4].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[10, 4].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[10, 4].Value = "ABC (CN) 农业银行";
                var bankNameDDL1 = saleWS.DataValidations.AddListValidation("D" + 10);
                bankNameDDL1.Formula.Values.Add("ABC (CN) 农业银行");
                bankNameDDL1.Formula.Values.Add("BOC (CN) 中国银行");
                bankNameDDL1.Formula.Values.Add("CCB (CN) 建设银行");
                bankNameDDL1.Formula.Values.Add("CMB (CN) 招商银行");
                bankNameDDL1.Formula.Values.Add("ICBC (CN) 工商银行");
                bankNameDDL1.Formula.Values.Add("ICBC (CN) 工商银行");


                saleWS.Cells[10, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[10, 5].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[10, 5].Value = "";

                saleWS.Cells[10, 6].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[10, 6].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[10, 6].Value = "CNY";

                saleWS.Cells[10, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[10, 7].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[10, 7].Style.WrapText = true;
                saleWS.Cells[10, 7].Value = "吉林省四平市双辽市支行";

                saleWS.Cells[10, 8].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[10, 8].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[10, 8].Value = "China";

                saleWS.Cells[10, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[10, 9].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[10, 9].Value = "100000.00";

                saleWS.Cells[10, 10].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[10, 10].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[10, 10].Value = "Family Expenses";

                int saleRow = 11;
                foreach (var ro in getRemittanceSale.RemittanceOders.ToList())
                {
                    var no = 1;
                    saleWS.Cells[saleRow, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 1].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 1].Value = no;

                    saleWS.Cells[saleRow, 2].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 2].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 2].Style.WrapText = true;
                    saleWS.Cells[saleRow, 2].Value = "" + ro.BeneficiaryFullName;

                    var nationality = "";
                    if (ro.BeneficiaryType == "individual")
                        nationality = nationalityList.Where(e => e.ID == ro.BeneficiaryNationality).FirstOrDefault().Name;
                    saleWS.Cells[saleRow, 3].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 3].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 3].Value = "" + nationality;

                    saleWS.Cells[saleRow, 4].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 4].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 4].Value = "ABC (CN) 农业银行";
                    var bankNameDDL = saleWS.DataValidations.AddListValidation("D" + saleRow);
                    bankNameDDL.Formula.Values.Add("ABC (CN) 农业银行");
                    bankNameDDL.Formula.Values.Add("BOC (CN) 中国银行");
                    bankNameDDL.Formula.Values.Add("CCB (CN) 建设银行");
                    bankNameDDL.Formula.Values.Add("CMB (CN) 招商银行");
                    bankNameDDL.Formula.Values.Add("ICBC (CN) 工商银行");
                    bankNameDDL.Formula.Values.Add("ICBC (CN) 工商银行");


                    saleWS.Cells[saleRow, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 5].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 5].Value = "" + ro.BeneficiaryBankAccountNo;

                    saleWS.Cells[saleRow, 6].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 6].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 6].Value = "CNY";

                    saleWS.Cells[saleRow, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 7].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 7].Style.WrapText = true;
                    saleWS.Cells[saleRow, 7].Value = "" + ro.BeneficiaryBankName;

                    saleWS.Cells[saleRow, 8].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 8].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    var bankCountry = "";
                    if (ro.BeneficiaryBankCountry != 48)
                        bankCountry = countryList.Where(e => e.ID == ro.BeneficiaryBankCountry).FirstOrDefault().Name;
                    else
                        bankCountry = ro.BankCountryIfOthers;

                    saleWS.Cells[saleRow, 8].Value = "" + bankCountry;
                    saleWS.Cells[saleRow, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 9].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 9].Value = "" + ro.GetAmount.ToString(GetDecimalFormat(ro.GetCurrencyDecimal.ProductDecimal));

                    saleWS.Cells[saleRow, 10].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    saleWS.Cells[saleRow, 10].Style.WrapText = true;
                    saleWS.Cells[saleRow, 10].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    saleWS.Cells[saleRow, 10].Value = "" + ro.BeneficiaryPaymentDetails;

                    saleWS.Row(saleRow).Height = 48;
                    no++;
                    saleRow++;
                    //saleWS.Cells[saleRow, 11].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    //saleWS.Cells[saleRow, 11].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    //saleWS.Cells[saleRow, 11].Value = "Beneficiary Type";

                    //saleWS.Cells[saleRow, 12].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    //saleWS.Cells[saleRow, 12].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    //saleWS.Cells[saleRow, 12].Value = "Industry Code";

                    //saleWS.Cells[saleRow, 13].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    //saleWS.Cells[saleRow, 13].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                    //saleWS.Cells[saleRow, 13].Value = "Super Code";
                }

                //Authorised Person Details
                saleWS.Cells[9, 1, saleRow, 13].Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                saleWS.Cells[9, 1, saleRow, 13].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                saleWS.Cells[9, 1, saleRow, 13].Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                saleWS.Cells[9, 1, saleRow, 13].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;

                saleWS.PrinterSettings.PaperSize = ePaperSize.A4;
                saleWS.PrinterSettings.TopMargin = 0.35M;
                saleWS.PrinterSettings.RightMargin = 0.35M;
                saleWS.PrinterSettings.BottomMargin = 0.35M;
                saleWS.PrinterSettings.LeftMargin = 0.35M;
                saleWS.HeaderFooter.OddFooter.RightAlignedText = String.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);
                saleWS.Cells[saleWS.Dimension.Address].Style.Font.Size = 11;
                saleWS.Cells[saleWS.Dimension.Address].AutoFitColumns();
                saleWS.Cells[1, 4].Style.Font.Size = 24;
                saleWS.Column(2).Width = 22;
                saleWS.Column(3).Width = 12;
                saleWS.Column(7).Width = 26;
                saleWS.Column(10).Width = 36;
                //double width_col4 = saleWS.Column(4).Width;
                //if (width_col4 > 15)
                //{
                //    saleWS.Column(4).Width = 15;
                //    saleWS.Column(4).Style.WrapText = true;
                //}
                //double width_col7 = saleWS.Column(7).Width;
                //if (width_col7 > 10)
                //{
                //    saleWS.Column(7).Width = 10;
                //    saleWS.Column(7).Style.WrapText = true;
                //}
                //double width_col8 = saleWS.Column(8).Width;
                //if (width_col8 > 10)
                //{
                //    saleWS.Column(8).Width = 10;
                //    saleWS.Column(8).Style.WrapText = true;
                //}

                //Write it back to the client
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.AddHeader("content-disposition", "attachment;  filename=cys-cny-form-" + DateTime.Now.ToString("yyyyMMddHHmm") + ".xlsx");
                Response.BinaryWrite(pck.GetAsByteArray());
            }
        }

        public void GenerateCimbTTForm(int id)
        {
            string companyName = _settingsModel.GetCodeValue("COMPANY_NAME").ToUpper();
            string exportDate = DateTime.Now.ToString("dd-MM-yyyy");
            var getRemittanceSale = _remittancesalesModel.GetSingle2(id);
            var firstRO = getRemittanceSale.RemittanceOders.FirstOrDefault();
            var sgdFormat = GetDecimalFormat(sgdDp);
            var rateFormat = GetDecimalFormat(rateDP);
            var countryList = new List<Countries>();
            using (var context = new DataAccess.GreatEastForex())
            {
                countryList = context.Countries.Where(e => e.IsDeleted == 0).ToList();
            }
            using (ExcelPackage pck = new ExcelPackage())
            {
                //Create Worksheet
                ExcelWorksheet saleWS = pck.Workbook.Worksheets.Add("Cimb TT");

                //set header rows
                saleWS.Cells["A1:L1"].Merge = true;
                //saleWS.Cells[1, 1].Style.Font.Bold = true;
                saleWS.Row(1).Height = 70;
                saleWS.Cells[1, 1].Style.WrapText = false;
                saleWS.Cells[1, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                var getFile = Path.Combine(Server.MapPath("~/Content/images/CIMB_Logo.png"));
                System.Drawing.Image img = System.Drawing.Image.FromFile(getFile);
                var pic = saleWS.Drawings.AddPicture("CIMB", img);
                pic.SetPosition(5, 5);
                pic.SetSize(125, 88);

                saleWS.Cells["A2:L3"].Merge = true;
                saleWS.Cells[2, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[2, 1].Value = "CIMB BANK BERHAD (INCORPORATED IN MALAYSIA) \n3 SINGAPORE BRANCH";
                saleWS.Cells[2, 1].Style.WrapText = true;

                saleWS.Cells["A4:F4"].Merge = true;
                //saleWS.Cells[2, 5].Style.Font.Bold = false;
                saleWS.Cells[4, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[4, 1].Value = "APPLICATION FOR REMITTANCE";

                saleWS.Cells["G4:L4"].Merge = true;
                //saleWS.Cells[2, 5].Style.Font.Bold = false;
                saleWS.Cells[4, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[4, 7].Value = "Date: " + exportDate;

                saleWS.Cells["A5:L6"].Merge = true;
                //saleWS.Cells[2, 5].Style.Font.Bold = false;
                saleWS.Cells[5, 1].Style.WrapText = true;
                saleWS.Cells[5, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[5, 1].Value = "Please issue/remit as indicated below without any responsibility or liability to yourselves subject to the terms and conditions which I/we have read and understood.";

                saleWS.Cells["A7:F11"].Merge = true;
                //saleWS.Cells[2, 5].Style.Font.Bold = false;
                saleWS.Cells[7, 1].Style.WrapText = true;
                saleWS.Cells[7, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[7, 1].Value = "APPLICATIONS'S NAME & ADDRESS: \nGREAT EAST FOREX \n101 BEACH ROAD #02-02 THE 101 \nSINGAPORE 189703 \n\nTelephone No: 63392828        Fax No: 63342013 \nContact Person: Rexford Ko";
                saleWS.Row(7).Height = 40;
                saleWS.Cells["G7:L9"].Merge = true;
                //saleWS.Cells[2, 5].Style.Font.Bold = false;
                saleWS.Cells[7, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[7, 7].Value = "APPLICANTION FOR";

                saleWS.Cells["G7:L9"].Merge = true;
                saleWS.Cells[7, 7].Style.Font.Bold = true;
                saleWS.Row(9).Height = 20;
                var TelegraphicCheckbox = saleWS.Drawings.AddCheckBoxControl("Telegraphic");
                TelegraphicCheckbox.Text = "TELEGRAPHIC TRANSFER (T/T)";
                TelegraphicCheckbox.Print = true;
                TelegraphicCheckbox.SetPosition(7, 0, 7, 0);
                TelegraphicCheckbox.Checked = OfficeOpenXml.Drawing.Controls.eCheckState.Checked;

                saleWS.Cells["G7:L9"].Merge = true;
                //saleWS.Cells[6, 5].Value = "Ledger Transfer";
                var DemandDraftCheckbox = saleWS.Drawings.AddCheckBoxControl("DemandDraft");
                DemandDraftCheckbox.Text = "DEMAND DRAFT (D/D) - drawn on: \n\n(Location / Country)";
                //LedgerCheckbox.LinkedCell = saleWS.Cells["E6"];
                DemandDraftCheckbox.Print = true;
                DemandDraftCheckbox.SetPosition(8, 0, 7, 0);

                saleWS.Cells["G10:L11"].Merge = true;
                //saleWS.Cells[2, 5].Style.Font.Bold = false;
                saleWS.Cells[10, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[10, 7].Value = "CORRESPONDENT / INTERMEDIARY";

                saleWS.Cells["A12:F17"].Merge = true;
                saleWS.Cells["A12:F17"].Style.WrapText = true;
                saleWS.Cells[12, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                var bankCountry = "";
                if (firstRO.BeneficiaryBankCountry == 48)
                    bankCountry = firstRO.BankCountryIfOthers;
                else
                    bankCountry = countryList.Where(e => e.ID == firstRO.BeneficiaryBankCountry).FirstOrDefault().Name;
                saleWS.Cells[12, 1].Value = "BENEFICIARY BANK'S NAME & ADDRESS (for T/T): \n" + firstRO.BeneficiaryBankName + "\n" + firstRO.BeneficiaryBankAddress + "\n\nCity/Country: " + bankCountry + "\n\nSWIFT Code: " + firstRO.BeneficiaryBankCode;

                saleWS.Cells["G12:L13"].Merge = true;
                saleWS.Cells[12, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[12, 7].Style.WrapText = true;
                saleWS.Cells[12, 7].Value = "REMITTANCE CURRENCY & AMOUNT \n" + firstRO.GetCurrencyDecimal.CurrencyCode + firstRO.GetAmount.ToString(GetDecimalFormat(firstRO.GetCurrencyDecimal.ProductDecimal));

                saleWS.Cells["G14:L16"].Merge = true;
                saleWS.Cells[14, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[14, 7].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Top;
                saleWS.Cells[14, 7].Value = "PAYMENT BY: \n";
                saleWS.Row(17).Height = 21;
                var CashCheckbox = saleWS.Drawings.AddCheckBoxControl("Cash");
                CashCheckbox.Text = "Cash";
                CashCheckbox.Print = true;
                CashCheckbox.SetPosition(14, 0, 7, 0);
                CashCheckbox.Checked = OfficeOpenXml.Drawing.Controls.eCheckState.Checked;

                var DebitCheckbox = saleWS.Drawings.AddCheckBoxControl("Debit");
                DebitCheckbox.Text = "Debit A/C No.";
                DebitCheckbox.Print = true;
                DebitCheckbox.SetPosition(15, 0, 7, 0);

                var OthersCheckbox = saleWS.Drawings.AddCheckBoxControl("Others");
                OthersCheckbox.Text = "Others";
                OthersCheckbox.Print = true;
                OthersCheckbox.SetPosition(15, 20, 7, 0);
                saleWS.Row(16).Height = 40;
                saleWS.Cells["G17:L17"].Merge = true;
                saleWS.Cells[17, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[17, 7].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Top;
                saleWS.Cells[17, 7].Value = "For others: ";

                saleWS.Cells["A18:F24"].Merge = true;
                saleWS.Cells["A18:F24"].Style.WrapText = true;
                saleWS.Cells[18, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[18, 1].Value = "BENEFICIARY'S NAME & ADDRESS \n" + firstRO.BeneficiaryFullName + "\n" + firstRO.BeneficiaryAddressMain + "\n\nAccount No: " + firstRO.BeneficiaryBankAccountNo + "\n(For payment to Europe please provide IBAN Number)";

                saleWS.Cells["G18:L18"].Merge = true;
                saleWS.Cells[18, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[18, 7].Value = "FOR BANK USE";

                saleWS.Cells["G19:L20"].Merge = true;
                saleWS.Cells[19, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[19, 7].Value = "AGENT / CORRESPONDENT \n";

                saleWS.Cells["G21:L22"].Merge = true;
                saleWS.Cells[21, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[21, 7].Value = "BANK REF NO \n";

                saleWS.Cells["G23:L24"].Merge = true;
                saleWS.Cells[23, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[23, 7].Value = "REMITTANCE AMOUNT \n\n" + firstRO.GetCurrencyDecimal.CurrencyCode + firstRO.GetAmount.ToString(GetDecimalFormat(firstRO.GetCurrencyDecimal.ProductDecimal));

                saleWS.Cells["A25:F31"].Merge = true;
                saleWS.Cells["A25:F31"].Style.WrapText = true;
                saleWS.Cells[25, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[25, 1].Value = "CHARGES imposed by overseas Agent / Correspondent Bank for T/T \n(Please select either one option)";

                var SHACheckbox = saleWS.Drawings.AddCheckBoxControl("SHA");
                SHACheckbox.Text = "SHA - Applicant pays local charges & Beneficiary pays overseas charges";
                SHACheckbox.SetSize(280, 20);
                SHACheckbox.Print = true;
                SHACheckbox.SetPosition(27, 0, 1, 0);
                SHACheckbox.Checked = OfficeOpenXml.Drawing.Controls.eCheckState.Checked;

                var OURCheckbox = saleWS.Drawings.AddCheckBoxControl("OUR");
                OURCheckbox.Text = "OUR - Applicant pays all local and overseas charges";
                OURCheckbox.SetSize(280, 20);
                OURCheckbox.Print = true;
                OURCheckbox.SetPosition(28, 0, 1, 0);

                var BenCheckbox = saleWS.Drawings.AddCheckBoxControl("BEN");
                BenCheckbox.Text = "BEN - Beneficiary pay all local and overseas charges";
                BenCheckbox.SetSize(280, 20);
                BenCheckbox.Print = true;
                BenCheckbox.SetPosition(29, 0, 1, 0);

                saleWS.Cells["A32:F36"].Merge = true;
                saleWS.Cells[32, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[32, 1].Value = "PAYMENT DETAILS / PURPOSE OF PAYMENT";

                saleWS.Cells["G25:H25"].Merge = true;
                saleWS.Cells[25, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[25, 7].Value = "AMOUNT";

                saleWS.Cells["I25:J25"].Merge = true;
                saleWS.Cells[25, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[25, 9].Value = "EXCHANGE RATE";

                saleWS.Cells["K25:L25"].Merge = true;
                saleWS.Cells[25, 11].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[25, 11].Value = "SGD EQUIVALENT";

                decimal? totalGetAmount = 0.00M;
                for (var i = 26; i < 32; i++)
                {
                    if (getRemittanceSale.RemittanceOders.Count > 0)
                    {
                        foreach (var ro in getRemittanceSale.RemittanceOders)
                        {
                            var converToSGD = ((getRemittanceSale.AgentRate.HasValue ? getRemittanceSale.AgentRate : 0.00M) * ro.GetAmount);

                            saleWS.Cells["G" + i + ":H" + i].Merge = true;
                            saleWS.Cells[i, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                            saleWS.Cells[i, 7].Value = "";

                            saleWS.Cells["I" + i + ":J" + i].Merge = true;
                            saleWS.Cells[i, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                            saleWS.Cells[i, 9].Value = "" + (getRemittanceSale.AgentRate.HasValue ? getRemittanceSale.AgentRate : 0.00M).Value.ToString(rateFormat);

                            saleWS.Cells["K" + i + ":L" + i].Merge = true;
                            saleWS.Cells[i, 11].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                            saleWS.Cells[i, 11].Value = "" + converToSGD.Value.ToString(sgdFormat);
                            totalGetAmount += converToSGD;
                            i++;
                        }
                        if (i < 32)
                        {
                            do
                            {
                                saleWS.Cells["G" + i + ":H" + i].Merge = true;
                                saleWS.Cells[i, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                                saleWS.Cells[i, 7].Value = "";

                                saleWS.Cells["I" + i + ":J" + i].Merge = true;
                                saleWS.Cells[i, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                                saleWS.Cells[i, 9].Value = "";

                                saleWS.Cells["K" + i + ":L" + i].Merge = true;
                                saleWS.Cells[i, 11].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                                saleWS.Cells[i, 11].Value = "";

                                i++;
                            } while (i < 32);
                        }
                    }
                    else
                    {
                        saleWS.Cells["G" + i + ":H" + i].Merge = true;
                        saleWS.Cells[i, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                        saleWS.Cells[i, 7].Value = "";

                        saleWS.Cells["I" + i + ":J" + i].Merge = true;
                        saleWS.Cells[i, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                        saleWS.Cells[i, 9].Value = "";

                        saleWS.Cells["K" + i + ":L" + i].Merge = true;
                        saleWS.Cells[i, 11].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                        saleWS.Cells[i, 11].Value = "";
                    }
                }
                saleWS.Cells["G32:J32"].Merge = true;
                saleWS.Cells[32, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[32, 7].Value = "SUB-TOTAL";

                saleWS.Cells["G33:J33"].Merge = true;
                saleWS.Cells[33, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[33, 7].Value = "COMMISSION";

                saleWS.Cells["G34:J34"].Merge = true;
                saleWS.Cells[34, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[34, 7].Value = "AGENT CHARGES";

                saleWS.Cells["G35:J35"].Merge = true;
                saleWS.Cells[35, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[35, 7].Value = "MISC. CHARGES";

                saleWS.Cells["G36:J36"].Merge = true;
                saleWS.Cells[36, 7].Style.Font.Bold = true;
                saleWS.Cells[36, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[36, 7].Value = "TOTAL";

                saleWS.Cells["K32:L32"].Merge = true;
                saleWS.Cells[32, 11].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[32, 11].Value = "" + totalGetAmount.Value.ToString(sgdFormat);

                saleWS.Cells["K33:L33"].Merge = true;
                saleWS.Cells[33, 11].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[33, 11].Value = "" + (getRemittanceSale.AgentFee.HasValue ? getRemittanceSale.AgentFee : 0.00M).Value.ToString(sgdFormat);

                saleWS.Cells["K34:L34"].Merge = true;
                saleWS.Cells[34, 11].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[34, 11].Value = "";

                saleWS.Cells["K35:L35"].Merge = true;
                saleWS.Cells[35, 11].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[35, 11].Value = "";

                saleWS.Cells["K36:L36"].Merge = true;
                saleWS.Cells[36, 11].Style.Font.Bold = true;
                saleWS.Cells[36, 11].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[36, 11].Value = "" + getRemittanceSale.CostPrice.ToString(sgdFormat);

                saleWS.Cells["A37:F40"].Merge = true;
                saleWS.Cells[37, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[37, 1].Style.WrapText = true;
                saleWS.Cells[37, 1].Value = "This application and issue of the above item is subject to the Terms and Conditions of the Bank of which I/we hereby acknowledge receipt and which I/we have read and agree to abide by.";

                saleWS.Cells["B41:E42"].Merge = true;
                saleWS.Cells["B41:E42"].Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thick;
                saleWS.Cells[41, 2].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[41, 2].Style.WrapText = true;
                saleWS.Cells[41, 2].Value = "";

                saleWS.Cells["A43:F43"].Merge = true;
                saleWS.Cells[43, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[43, 1].Style.WrapText = true;
                saleWS.Cells[43, 1].Style.Font.Bold = true;
                saleWS.Cells[43, 1].Style.Font.Italic = true;
                saleWS.Cells[43, 1].Style.Font.Size = 20;
                saleWS.Cells[43, 1].Value = "APPLICANT'S of SIGNATURE (S)";

                saleWS.Cells["G37:I43"].Merge = true;
                saleWS.Cells[37, 7].Style.Font.Size = 20;
                saleWS.Cells[37, 7].Style.Font.Bold = true;
                saleWS.Cells[37, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[37, 7].Value = "SINGATURE VERIFIED BY";

                saleWS.Cells["J37:L43"].Merge = true;
                saleWS.Cells[37, 10].Style.Font.Size = 20;
                saleWS.Cells[37, 10].Style.Font.Bold = true;
                saleWS.Cells[37, 10].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[37, 10].Value = "CONFIRMED BY";

                saleWS.Cells["A45:L45"].Merge = true;
                saleWS.Cells[45, 1].Style.Font.Bold = true;
                saleWS.Cells[45, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[45, 1].Value = "Strickly Private and Confidential";

                saleWS.Cells["A46:L46"].Merge = true;
                saleWS.Cells[46, 1].Style.Font.Bold = true;
                saleWS.Cells[46, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[46, 1].Value = "Additional Information For WBN";

                saleWS.Cells["A47:D47"].Merge = true;
                saleWS.Cells[47, 1].Style.Font.Bold = true;
                saleWS.Cells[47, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[47, 1].Value = "Ulitmate Originator's Name";

                saleWS.Cells["E47:L47"].Merge = true;
                saleWS.Cells[47, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                var customerName = "";
                var customerCountry = "";
                if (getRemittanceSale.CustomerParticulars.CustomerType == "Corporate & Trading Company")
                {
                    customerName = getRemittanceSale.CustomerParticulars.Company_RegisteredName;
                    customerCountry = getRemittanceSale.CustomerParticulars.Company_PlaceOfRegistration;
                }
                else
                {
                    customerName = getRemittanceSale.CustomerParticulars.Natural_Name;
                    customerCountry = getRemittanceSale.CustomerParticulars.Natural_SelfEmployedBusinessPrincipalPlace;
                }

                saleWS.Cells[47, 5].Value = customerName;

                saleWS.Cells["A48:D48"].Merge = true;
                saleWS.Cells[48, 1].Style.Font.Bold = true;
                saleWS.Cells[48, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[48, 1].Value = "Country of Ulitmate Originator";

                saleWS.Cells["E48:L48"].Merge = true;
                saleWS.Cells[48, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[48, 5].Value = "" + customerCountry;

                saleWS.Cells["A49:D49"].Merge = true;
                saleWS.Cells[49, 1].Style.Font.Bold = true;
                saleWS.Cells[49, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[49, 1].Value = "Declared Purpose For Remittance";

                saleWS.Cells["E49:L49"].Merge = true;
                saleWS.Cells[49, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[49, 5].Value = "" + firstRO.BeneficiaryPaymentDetails;

                saleWS.Cells["A51:L51"].Merge = true;
                saleWS.Cells[51, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[51, 1].Value = "TERMS AND CONDITIONS";

                saleWS.Cells["A52:L54"].Merge = true;
                saleWS.Cells[52, 1].Style.WrapText = true;
                saleWS.Cells[52, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[52, 1].Value = "1. The copy of the customer's receipt is valid only if It bears an authorised signature or the validation print of a Bank teller machine.";

                saleWS.Cells["A55:L56"].Merge = true;
                saleWS.Cells[55, 1].Style.WrapText = true;
                saleWS.Cells[55, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[55, 1].Value = "2. Any alteration made on the form must be counter-signed by the customer against the alteration.";

                saleWS.Cells["A57:L59"].Merge = true;
                saleWS.Cells[57, 1].Style.WrapText = true;
                saleWS.Cells[57, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[57, 1].Value = "3. The Bank acts only on the instructions issued by the customer. It is for the customer to notify the Bank immediately if there are any errors or omissions in the instructions given.";

                saleWS.Cells["A60:L64"].Merge = true;
                saleWS.Cells[60, 1].Style.WrapText = true;
                saleWS.Cells[60, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[60, 1].Value = "4. The Bank shall be at liberty on behalf of the customer make use of any correspondent agent or sub-agent or other agency in issuing its Draft or effecting its Telegraphic Transfer pertaining to this application and shall hot assume any liability orresponsibility for any delay, non-remittance or non - receipt of the proceeds arising on the part on the Bank's correspondents or agents, sub - agents or other agencies which are outside the control of the Bank.";

                saleWS.Cells["A65:L68"].Merge = true;
                saleWS.Cells[65, 1].Style.WrapText = true;
                saleWS.Cells[65, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[65, 1].Value = "5. Encashment or payment of draft or any other form of transfer of funds is subject to the rules and regulations and market practices of the country of payment. The Bank and / or its correspondents or agents shall not be liable for any loss or delaycaused by any such rules and regulations or market practices.";

                saleWS.Cells["A69:L72"].Merge = true;
                saleWS.Cells[69, 1].Style.WrapText = true;
                saleWS.Cells[69, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[69, 1].Value = "6. A refund or repurchase by the Bank of the amount of the outward remittance shall be made at the Bank's discretion only to or from the customer.In the case .of draft, the original draft must be endorsed by the customer and surrendered to the Bank at theprevailing on demand buying rate less all costs, charges and expenses incurred by the Bank.";

                saleWS.Cells["A73:L75"].Merge = true;
                saleWS.Cells[73, 1].Style.WrapText = true;
                saleWS.Cells[73, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[73, 1].Value = "7. Any replacement or refund of a lost, stolen or destroyed draft is made subject to the customer providing the Bank with an acceptable letter of indemnity and complying with any other requirements of the Bank.";

                saleWS.Cells["A76:L80"].Merge = true;
                saleWS.Cells[76, 1].Style.WrapText = true;
                saleWS.Cells[76, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[76, 1].Value = "8. The Bank is under no obligation under any circumstances to entertain any instruction by the customer to stop payment on a draft or any other from of transfer of funds except In cases of fraud, loss or theft and is subject to its sole discretion.The Bankshall not be liable for any failure to do so howsoever arising and the customer shall indemnify the Bank against any expense,loss, damage or liability whatsoever which may be incurred or suffered by the Bank as a result of its endeavours.";

                saleWS.Cells["A81:L83"].Merge = true;
                saleWS.Cells[81, 1].Style.WrapText = true;
                saleWS.Cells[81, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[81, 1].Value = "9. The terms and conditions pertaining to this application may be varied from time as may be required by the Bank without any notice to the customer.";

                saleWS.Cells["A84:L86"].Merge = true;
                saleWS.Cells[84, 1].Style.WrapText = true;
                saleWS.Cells[84, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[84, 1].Value = "10. The customer agrees that the Bank may at any time, If the Bank deems fit, make disclosure to any person, or make a record for any person, of any information or document whatsoever relating to the affairs or account of the customer.";

                saleWS.Cells["A87:L88"].Merge = true;
                saleWS.Cells[87, 1].Style.WrapText = true;
                saleWS.Cells[87, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[87, 1].Value = "11. The Bank reserves the right to reject the application without having to furnish any reason for doing so.";

                saleWS.Cells["A89:L90"].Merge = true;
                saleWS.Cells[89, 1].Style.WrapText = true;
                saleWS.Cells[89, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                saleWS.Cells[89, 1].Value = "12. The application and these conditions shall be governed by and construed in accordance with Singapore law.";

                //Authorised Person Details
                saleWS.Cells["A1:L90"].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Top;
                saleWS.Cells["A1:L43"].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                saleWS.Cells["A46:L49"].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;

                saleWS.Cells["A1:L43"].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                saleWS.Cells["A46:L49"].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;

                saleWS.Cells["A1:L43"].Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                saleWS.Cells["A46:L49"].Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                saleWS.Cells["A2:L3"].Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.None;


                saleWS.Cells["A1:L43"].Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                saleWS.Cells["A46:L49"].Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;

                saleWS.Cells["A1:L1"].Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.None;

                saleWS.Cells["A41:A41"].Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.None;
                saleWS.Cells["A41:A41"].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.None;
                saleWS.Cells["F41:F41"].Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.None;
                saleWS.Cells["F41:F41"].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.None;
                saleWS.Cells["B41:E42"].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.None;
                saleWS.Cells["A42:A42"].Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.None;
                saleWS.Cells["A42:A42"].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.None;
                saleWS.Cells["B41:E42"].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.None;
                saleWS.Cells["F42:F42"].Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.None;
                saleWS.Cells["F42:F42"].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.None;
                saleWS.Cells["G17:L17"].Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.None;
                saleWS.Cells["G12:L16"].Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.None;
                saleWS.PrinterSettings.PaperSize = ePaperSize.A4;
                saleWS.PrinterSettings.TopMargin = 0.35M;
                saleWS.PrinterSettings.RightMargin = 0.35M;
                saleWS.PrinterSettings.BottomMargin = 0.35M;
                saleWS.PrinterSettings.LeftMargin = 0.35M;
                saleWS.HeaderFooter.OddFooter.RightAlignedText = String.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);
                saleWS.Cells[saleWS.Dimension.Address].Style.Font.Size = 11;
                saleWS.Cells[saleWS.Dimension.Address].AutoFitColumns();
                //double width_col4 = saleWS.Column(4).Width;
                //if (width_col4 > 15)
                //{
                //    saleWS.Column(4).Width = 15;
                //    saleWS.Column(4).Style.WrapText = true;
                //}
                //double width_col7 = saleWS.Column(7).Width;
                //if (width_col7 > 10)
                //{
                //    saleWS.Column(7).Width = 10;
                //    saleWS.Column(7).Style.WrapText = true;
                //}
                //double width_col8 = saleWS.Column(8).Width;
                //if (width_col8 > 10)
                //{
                //    saleWS.Column(8).Width = 10;
                //    saleWS.Column(8).Style.WrapText = true;
                //}
                //if (getRemittance.CustomerParticulars.CustomerType == "Corporate & Trading Company")
                //{
                //    GenerateSenderInfoCooperation(id, pck);
                //}
                //else
                //{
                //CYSOthersChineseForm(pck, id);
                //}

                //Write it back to the client
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.AddHeader("content-disposition", "attachment;  filename=cimb-tt-form-" + DateTime.Now.ToString("yyyyMMddHHmm") + ".xlsx");
                Response.BinaryWrite(pck.GetAsByteArray());
            }
        }

        public void GenerateInternationalRemittanceForm(int id)
        {
            string companyName = _settingsModel.GetCodeValue("COMPANY_NAME").ToUpper();
            string exportDate = DateTime.Now.ToString("dd-MM-yyyy");
            var getRemittanceSale = _remittancesalesModel.GetSingle2(id);
            var sgdFormat = GetDecimalFormat(sgdDp);
            var rateFormat = GetDecimalFormat(rateDP);
            var countryList = new List<Countries>();
            using (var context = new DataAccess.GreatEastForex())
            {
                countryList = context.Countries.Where(e => e.IsDeleted == 0).ToList();
            }
            using (ExcelPackage pck = new ExcelPackage())
            {
                if (getRemittanceSale != null)
                {
                    var count = 1;
                    if (getRemittanceSale.RemittanceOders.Count > 0)
                    {
                        foreach (var ro in getRemittanceSale.RemittanceOders)
                        {
                            //Create Worksheet
                            ExcelWorksheet saleWS = pck.Workbook.Worksheets.Add("International Remittance " + count);

                            //set header rows
                            saleWS.Cells["A1:B4"].Merge = true;
                            //saleWS.Cells[1, 1].Style.Font.Bold = true;
                            //saleWS.Row(1).Height = 70;
                            //saleWS.Column(1).Width = 12;
                            saleWS.Cells[1, 1].Style.WrapText = false;
                            saleWS.Cells[1, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                            var getFile = Path.Combine(Server.MapPath("~/Content/images/IR_Logo.png"));
                            System.Drawing.Image img = System.Drawing.Image.FromFile(getFile);
                            var pic = saleWS.Drawings.AddPicture("IR", img);
                            pic.SetPosition(5, 25);
                            pic.SetSize(78, 72);

                            saleWS.Cells["C1:L1"].Merge = true;
                            saleWS.Cells[1, 3].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                            saleWS.Cells[1, 3].Value = "INTERNATIONAL REMITTANCE PTE LTD";
                            saleWS.Cells[1, 3].Style.WrapText = true;
                            saleWS.Cells[1, 3].Style.Font.Bold = true;

                            saleWS.Cells["C2:L4"].Merge = true;
                            saleWS.Cells[2, 3].Style.WrapText = true;
                            //saleWS.Cells[2, 5].Style.Font.Bold = false;
                            saleWS.Cells[2, 3].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                            saleWS.Cells[2, 3].Value = "11 COLLYER QUAY #05-06A THE ARCADE, SINGAPORE 049317 \nTEL: 65-63246395 FAX: 65-63246396 \nTEL: 65-63246395 FAX: 65-63246396";

                            saleWS.Cells["A5:L5"].Merge = true;
                            saleWS.Cells[5, 1].Style.Font.Bold = true;
                            saleWS.Cells[5, 1].Style.Font.Italic = true;
                            saleWS.Cells[5, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Right;
                            saleWS.Cells[5, 1].Value = "APPLICATION FOR TELEGRAPHIC TRANSFER";

                            saleWS.Cells["A6:I6"].Merge = true;
                            //saleWS.Cells[2, 5].Style.Font.Bold = false;
                            saleWS.Cells[6, 1].Style.WrapText = true;
                            saleWS.Cells[6, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                            saleWS.Cells[6, 1].Value = "Please tick the revelant box";

                            saleWS.Row(6).Height = 20;
                            var TelegraphicCheckbox = saleWS.Drawings.AddCheckBoxControl("INCOMING");
                            TelegraphicCheckbox.Text = "INCOMING T.T";
                            TelegraphicCheckbox.Print = true;
                            TelegraphicCheckbox.SetPosition(5, 0, 3, 0);

                            var DemandDraftCheckbox = saleWS.Drawings.AddCheckBoxControl("OUTGOING");
                            DemandDraftCheckbox.Text = "OUTGOING T.T";
                            DemandDraftCheckbox.Print = true;
                            DemandDraftCheckbox.SetPosition(5, 0, 5, 0);
                            DemandDraftCheckbox.Checked = OfficeOpenXml.Drawing.Controls.eCheckState.Checked;

                            saleWS.Cells["J6:L6"].Merge = true;
                            //saleWS.Cells[2, 5].Style.Font.Bold = false;
                            saleWS.Cells[6, 10].Style.WrapText = true;
                            saleWS.Cells[6, 10].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                            saleWS.Cells[6, 10].Value = "Date: " + exportDate;

                            saleWS.Cells["A7:L7"].Merge = true;
                            saleWS.Cells[2, 5].Style.Font.Italic = false;
                            saleWS.Cells[7, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                            saleWS.Cells[7, 1].Value = "Please complete form clearly in BLOCK letters. Care should be taken as illegibility will result in processing delays";

                            saleWS.Cells["A8:F14"].Merge = true;
                            saleWS.Cells[8, 1].Style.WrapText = true;
                            saleWS.Cells[8, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                            saleWS.Cells[8, 1].Value = "Applicant's Name: KO SAY GAK \n\nNationality: SINGAPOREAN \n\nCompany Name: GREAT EAST FOREX \n\nCo. Reg. No.: 40238800C";

                            saleWS.Cells["G8:L14"].Merge = true;
                            saleWS.Cells["G8:L14"].Style.WrapText = true;
                            saleWS.Cells[8, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                            saleWS.Cells[8, 7].Value = "NRIC/Passport No.: *****41F \n\nTel. No. & Fax No.: 63392828 \n\nAddress: 101 BEACH ROAD #02-02 \n\tTHE 101, SINGAPORE 456223";

                            saleWS.Cells["A15:L15"].Merge = true;
                            saleWS.Cells[15, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                            saleWS.Cells[15, 1].Value = "PARTICULARS OF ORIGINATOR (IF APPLICABLE)";

                            saleWS.Cells["A16:F22"].Merge = true;
                            saleWS.Cells["A16:F22"].Style.WrapText = true;
                            saleWS.Cells[16, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                            saleWS.Cells[16, 1].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Top;
                            saleWS.Cells[16, 1].Value = "Name: \n\nNationality: \n\nP.P No. / IC / ROC No.: ";

                            saleWS.Cells["G16:L22"].Merge = true;
                            saleWS.Cells["G16:L22"].Style.WrapText = true;
                            saleWS.Cells[16, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                            saleWS.Cells[16, 7].Value = "Date Of Birth: \n\nPlace Of Birth: \n\nAddress: ";

                            saleWS.Cells["A23:F27"].Merge = true;
                            saleWS.Cells["A23:F27"].Style.WrapText = true;
                            saleWS.Cells[23, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                            saleWS.Cells[23, 1].Value = "Beneficiary's Name: " + ro.BeneficiaryFullName + "\n\nBeneficiary's A/c No.: " + ro.BeneficiaryBankAccountNo + "\nfor payment to Europe please provide IBAN number \n\nBeneficiary's Address: " + ro.BeneficiaryAddressMain;

                            saleWS.Cells["G23:L27"].Merge = true;
                            saleWS.Cells["G23:L27"].Style.WrapText = true;
                            saleWS.Row(27).Height = 48;
                            saleWS.Cells[23, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                            saleWS.Cells[23, 7].Value = "CURRENCY & AMOUNT: " + ro.GetCurrencyDecimal.CurrencyCode + ro.GetAmount.ToString(GetDecimalFormat(ro.GetCurrencyDecimal.ProductDecimal)) + "\n\nRate: " + (getRemittanceSale.AgentRate.HasValue ? getRemittanceSale.AgentRate : 0.00M).Value.ToString(rateFormat) + "\n\nSGD Equivalent: " + (ro.GetAmount * (getRemittanceSale.AgentRate.HasValue ? getRemittanceSale.AgentRate : 0.00M)).Value.ToString(sgdFormat) + "\n\nCharges: " + (getRemittanceSale.AgentFee.HasValue ? getRemittanceSale.AgentFee : 0.00M).Value.ToString(sgdFormat) + "\n\nTotal Amount: " + getRemittanceSale.CostPrice.ToString(sgdFormat);
                            saleWS.Row(27).Height = 84;

                            saleWS.Cells["A28:F33"].Merge = true;
                            saleWS.Cells["A28:F33"].Style.WrapText = true;
                            saleWS.Cells[28, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                            saleWS.Cells[28, 1].Value = "Beneficiary's Bank: " + ro.BeneficiaryBankName + "\n" + ro.IBANEuropeBSBAustralia + "\n\nAddress (Branch Details): " + ro.BeneficiaryBankAddress;

                            saleWS.Cells["G28:L33"].Merge = true;
                            saleWS.Cells["G28:L33"].Style.WrapText = true;
                            saleWS.Cells[28, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                            var bankCountry = "";
                            if (ro.BeneficiaryBankCountry == 48)
                                bankCountry = ro.BankCountryIfOthers;
                            else
                                bankCountry = countryList.Where(e => e.ID == ro.BeneficiaryBankCountry).FirstOrDefault().Name;
                            saleWS.Cells[28, 7].Value = "*Country: " + bankCountry + "\n\nSwift Code: " + ro.BeneficiaryBankCode + "\n\nChips UID #";

                            saleWS.Cells["A34:F37"].Merge = true;
                            saleWS.Cells["A34:F37"].Style.WrapText = true;
                            saleWS.Cells[34, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                            saleWS.Cells[34, 1].Value = "Corresponding Bank Details: ";

                            saleWS.Cells["G34:L37"].Merge = true;
                            saleWS.Cells["G34:L37"].Style.WrapText = true;
                            saleWS.Cells[32, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                            saleWS.Cells[32, 7].Value = "Swift Code: \nChips UID #";

                            saleWS.Cells["A38:L39"].Merge = true;
                            saleWS.Cells["A38:L39"].Style.WrapText = true;
                            saleWS.Cells[38, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                            saleWS.Cells[38, 1].Value = "Payment Details / Purpose Of Payment: " + ro.BeneficiaryPaymentDetails;
                            saleWS.Row(39).Height = 30;

                            saleWS.Cells["A40:F43"].Merge = true;
                            saleWS.Cells[40, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                            saleWS.Cells[40, 1].Style.Font.UnderLineType = OfficeOpenXml.Style.ExcelUnderLineType.Single;
                            saleWS.Cells[40, 1].Style.Font.UnderLine = true;
                            //saleWS.Cells[40, 1].Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                            saleWS.Cells[40, 1].Value = "                                                                               ";

                            saleWS.Cells["A44:F44"].Merge = true;
                            saleWS.Cells[44, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                            saleWS.Cells[44, 1].Value = "Signature of Applicant";

                            saleWS.Cells["G40:L43"].Merge = true;
                            saleWS.Cells[40, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                            saleWS.Cells[40, 7].Style.Font.UnderLineType = OfficeOpenXml.Style.ExcelUnderLineType.Single;
                            saleWS.Cells[40, 7].Style.Font.UnderLine = true;
                            saleWS.Cells[40, 7].Value = "                                                                               ";

                            saleWS.Cells["G44:L44"].Merge = true;
                            saleWS.Cells[44, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                            saleWS.Cells[44, 7].Value = "for INTERNATIONAL REMITTANCE PTE LTD";

                            saleWS.Cells["A46:L46"].Merge = true;
                            saleWS.Cells[46, 1].Style.Font.Bold = true;
                            saleWS.Cells[46, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                            saleWS.Cells[46, 1].Value = "Note: TT will be effected the following business day if payment is received after 3.00pm";

                            //Authorised Person Details
                            saleWS.Cells["A1:L46"].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Top;
                            saleWS.Cells["A1:L44"].Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                            saleWS.Cells["A1:L44"].Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                            saleWS.Cells["A1:L44"].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                            saleWS.Cells["A1:L44"].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                            saleWS.Cells["B1:L1"].Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.None;
                            saleWS.Cells["B2:L4"].Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.None;
                            saleWS.Cells["A40:L43"].Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.None;
                            saleWS.Cells["A44:L44"].Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.None;
                            saleWS.Cells["A1:B4"].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.None;
                            saleWS.Cells["C1:L4"].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.None;
                            saleWS.Cells["A40:L43"].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Bottom;

                            saleWS.PrinterSettings.PaperSize = ePaperSize.A4;
                            saleWS.PrinterSettings.TopMargin = 0.35M;
                            saleWS.PrinterSettings.RightMargin = 0.35M;
                            saleWS.PrinterSettings.BottomMargin = 0.35M;
                            saleWS.PrinterSettings.LeftMargin = 0.35M;
                            saleWS.HeaderFooter.OddFooter.RightAlignedText = String.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);
                            saleWS.Cells[saleWS.Dimension.Address].Style.Font.Size = 11;
                            saleWS.Cells[saleWS.Dimension.Address].AutoFitColumns();
                        }
                    }
                }

                //Write it back to the client
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.AddHeader("content-disposition", "attachment;  filename=international-remittance-form-" + DateTime.Now.ToString("yyyyMMddHHmm") + ".xlsx");
                Response.BinaryWrite(pck.GetAsByteArray());
            }
        }

        //public void GeneratAgentExcelForm(int id)
        //{
        //    Remittances sales = _remittancesalesModel.GetSingle(id);
        //    List<Countries> countries = new List<Countries>();
        //    List<PaymentLists> paymentLists = new List<PaymentLists>();
        //    List<FundLists> fundLists = new List<FundLists>();
        //    List<RemittanceProducts> remittanceProductsLists = new List<RemittanceProducts>();

        //    using (var context = new DataAccess.GreatEastForex())
        //    {
        //        var getAllCountry = context.Countries.Where(e => e.IsDeleted == 0);
        //        countries.AddRange(getAllCountry);
        //        var getAllpaymentLists = context.PaymentLists.Where(e => e.IsDeleted == 0);
        //        paymentLists.AddRange(getAllpaymentLists);
        //        var getAllfundLists = context.FundLists.Where(e => e.IsDeleted == 0);
        //        fundLists.AddRange(getAllfundLists);
        //        var getAllRemittanceProducts = context.RemittanceProducts.Where(e => e.IsDeleted == "N");
        //        remittanceProductsLists.AddRange(getAllRemittanceProducts);
        //    }
        //    sales.RemittanceOders = sales.RemittanceOders.OrderBy(e => e.ID).ToList();

        //    string prefixBarcode = _settingsModel.GetCodeValue("PREFIX_BARCODE");
        //    string barcode = GenerateBarcode(prefixBarcode + sales.MemoID);
        //    string token = EncryptionHelper.GenerateRandomAlphaNumeric(8);

        //    string header = WriteMemoHeaderHTML(barcode, token);
        //    int getPayDecimal = 2;
        //    string getPayCurrencyCode = "SGD";

        //    List<RemittanceOrders> buyTransactions = sales.RemittanceOders.ToList();
        //    List<MemoRemittanceCurrencyTable> buyMemos = new List<MemoRemittanceCurrencyTable>();

        //    int buyRowCount = 1;

        //    decimal? buyMemoTotal = null;

        //    foreach (RemittanceOrders transaction in buyTransactions)
        //    {
        //        string paymentMode = transaction.PayPaymentType;

        //        if (paymentMode == "2" && !string.IsNullOrEmpty(transaction.ChequeNo))
        //        {
        //            paymentMode += " (" + transaction.ChequeNo + ")";
        //        }
        //        else if (paymentMode == "3" && !string.IsNullOrEmpty(transaction.BankTransferNo))
        //        {
        //            paymentMode += " (" + transaction.BankTransferNo + ")";
        //        }

        //        buyMemos.Add(new MemoRemittanceCurrencyTable()
        //        {
        //            RowId = buyRowCount,
        //            Currency = transaction.GetCurrencyDecimal.CurrencyCode,
        //            Rate = transaction.Rate.ToString(GetRateFormat(rateDP)),
        //            Amount = FormValidationHelper.AmountFormatter(transaction.GetAmount, transaction.GetCurrencyDecimal.ProductDecimal),
        //            PaymentMode = paymentMode,
        //            TotalAmount = FormValidationHelper.AmountFormatter(transaction.PayAmount, transaction.PayCurrencyDecimal.ProductDecimal),
        //            BeneficiaryName = transaction.BeneficiaryFullName
        //        });

        //        buyMemoTotal = Convert.ToDecimal(buyMemoTotal) + transaction.PayAmount;
        //        getPayDecimal = transaction.PayCurrencyDecimal.ProductDecimal;
        //        getPayCurrencyCode = transaction.PayCurrencyDecimal.CurrencyCode;
        //        buyRowCount++;
        //    }

        //    if (buyTransactions.Count > 0 && buyTransactions.Count < 5)
        //    {
        //        for (int i = buyTransactions.Count; i < 5; i++)
        //        {
        //            buyMemos.Add(new MemoRemittanceCurrencyTable()
        //            {
        //                RowId = i + 1,
        //                Currency = "",
        //                Rate = "",
        //                Amount = "",
        //                PaymentMode = "",
        //                TotalAmount = "",
        //                BeneficiaryName = ""
        //            });
        //        }
        //    }

        //    ViewData["BuyMemo"] = buyMemos;
        //    ViewData["PayCurrency"] = getPayCurrencyCode;
        //    ViewData["BuyMemoTotal"] = "";
        //    if (buyMemoTotal != null)
        //    {
        //        ViewData["BuyMemoTotal"] = getPayCurrencyCode + " " + FormValidationHelper.AmountFormatter(Convert.ToDecimal(buyMemoTotal), getPayDecimal);
        //    }

        //    ViewData["Sale"] = sales;
        //    ViewData["Countries"] = countries;
        //    ViewData["PurposeList"] = paymentLists;
        //    ViewData["SourceFundList"] = fundLists;
        //    ViewData["RemittanceProductsLists"] = remittanceProductsLists;

        //    string companyName = _settingsModel.GetCodeValue("COMPANY_NAME").ToUpper();
        //    string exportDate = DateTime.Now.ToString("dd-MM-yyyy");

        //    using (ExcelPackage pck = new ExcelPackage())
        //    {
        //        //Create Worksheet
        //        ExcelWorksheet saleWS = pck.Workbook.Worksheets.Add("BENEFICIARY INFO");

        //        //set header rows
        //        saleWS.Cells["A1:H1"].Merge = true;
        //        saleWS.Cells[1, 1].Style.Font.Bold = true;
        //        saleWS.Cells[1, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
        //        saleWS.Cells[1, 1].Value = "AGENT FORM";

        //        saleWS.Cells["A3:B3"].Merge = true;
        //        saleWS.Cells[3, 1].Style.Font.Bold = true;
        //        saleWS.Cells[3, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
        //        saleWS.Cells[3, 1].Value = "Date: ";

        //        saleWS.Cells["A4:B4"].Merge = true;
        //        saleWS.Cells[4, 1].Style.Font.Bold = true;
        //        saleWS.Cells[4, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
        //        saleWS.Cells[4, 1].Value = "Agent: ";

        //        saleWS.Cells["A5:B5"].Merge = true;
        //        saleWS.Cells[5, 1].Style.Font.Bold = true;
        //        saleWS.Cells[5, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
        //        saleWS.Cells[5, 1].Value = "Remittance Amount: ";

        //        saleWS.Cells["A6:B6"].Merge = true;
        //        saleWS.Cells[6, 1].Style.Font.Bold = false;
        //        saleWS.Cells[6, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
        //        saleWS.Cells[6, 1].Value = "SGD Payble: ";

        //        saleWS.Cells["A7:B7"].Merge = true;
        //        saleWS.Cells[7, 1].Style.Font.Color.SetColor(System.Drawing.Color.Red);
        //        saleWS.Cells[7, 1].Style.Font.Bold = true;
        //        saleWS.Cells[7, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
        //        saleWS.Cells[7, 1].Value = "Agent Rate: ";

        //        saleWS.Cells["A8:B8"].Merge = true;
        //        saleWS.Cells[8, 1].Style.Font.Bold = true;
        //        saleWS.Cells[8, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
        //        saleWS.Cells[8, 1].Value = "AgentFee: ";

        //        saleWS.Cells["A9:B9"].Merge = true;
        //        saleWS.Cells[9, 1].Style.Font.Color.SetColor(System.Drawing.Color.Red);
        //        saleWS.Cells[9, 1].Style.Font.Bold = true;
        //        saleWS.Cells[9, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
        //        saleWS.Cells[9, 1].Value = "Remarks: ";

        //        //set first row name
        //        saleWS.Cells["A11:H11"].Merge = true;
        //        saleWS.Cells[11, 1].Style.Font.Bold = true;
        //        saleWS.Cells[11, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //        saleWS.Cells[11, 1].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[11, 1].Value = "Beneficiary's Particulars";
        //        saleWS.Cells["A12:D12"].Merge = true;
        //        //saleWS.Cells[12, 1].Style.Font.Bold = true;
        //        saleWS.Cells[12, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
        //        saleWS.Cells[12, 1].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[12, 1].Value = "Beneficiary Name: ";
        //        saleWS.Cells["E12:H12"].Merge = true;
        //        saleWS.Cells[12, 5].Style.Font.Bold = true;
        //        saleWS.Cells[12, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
        //        saleWS.Cells[12, 5].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[12, 5].Value = "Only For Remittance to Malaysia, Philipines, Thailand and Indonesia";
        //        saleWS.Cells["A13:D13"].Merge = true;
        //        saleWS.Cells[13, 1].Style.Font.Bold = true;
        //        saleWS.Cells[13, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
        //        saleWS.Cells[13, 1].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[13, 1].Value = "Beneficiary's Address: ";
        //        saleWS.Cells["E13:H13"].Merge = true;
        //        saleWS.Cells[13, 5].Style.Font.Bold = true;
        //        saleWS.Cells[13, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
        //        saleWS.Cells[13, 5].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[13, 5].Value = "Beneficiary's Company Registration No: ";

        //        saleWS.Cells["E14:H14"].Merge = true;
        //        saleWS.Cells[14, 5].Style.Font.Bold = true;
        //        saleWS.Cells[14, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
        //        saleWS.Cells[14, 5].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[14, 5].Value = "Contact No: ";

        //        saleWS.Cells["A15:H15"].Merge = true;
        //        saleWS.Cells[15, 1].Style.Font.Bold = true;
        //        saleWS.Cells[15, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
        //        saleWS.Cells[15, 1].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[15, 1].Value = "Beneficiary's Bank Name: ";

        //        saleWS.Cells["D7:K7"].Merge = true;
        //        saleWS.Cells[7, 4].Style.Font.Bold = true;
        //        saleWS.Cells[7, 4].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //        saleWS.Cells[7, 4].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[7, 4].Value = "BENEFICIARY DETAILS *ONLY APPLICABLE FOR CORPORATE BENEFICIARY";
        //        saleWS.Cells[8, 4].Style.Font.Bold = true;
        //        saleWS.Cells[8, 4].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //        saleWS.Cells[8, 4].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[8, 4].Value = "NAME";
        //        saleWS.Cells[8, 5].Style.Font.Bold = true;
        //        saleWS.Cells[8, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //        saleWS.Cells[8, 5].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[8, 5].Value = "NATIONALITY (MYR, PHP, IDR & THB)";
        //        saleWS.Cells[8, 6].Style.Font.Bold = true;
        //        saleWS.Cells[8, 6].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //        saleWS.Cells[8, 6].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[8, 6].Value = "ID NO. (TWD)";
        //        saleWS.Cells[8, 7].Style.Font.Bold = true;
        //        saleWS.Cells[8, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //        saleWS.Cells[8, 7].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[8, 7].Value = "RESIDENTIAL ADDRESS";
        //        saleWS.Cells[8, 8].Style.Font.Bold = true;
        //        saleWS.Cells[8, 8].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //        saleWS.Cells[8, 8].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[8, 8].Value = "CONTACT NUMBER (TWD, MYR *, PHP *, IDR * , THB *)";
        //        saleWS.Cells[8, 9].Style.Font.Bold = true;
        //        saleWS.Cells[8, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //        saleWS.Cells[8, 9].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[8, 9].Value = "STAFF IN CHARGE (TWD*)";
        //        saleWS.Cells[8, 10].Style.Font.Bold = true;
        //        saleWS.Cells[8, 10].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //        saleWS.Cells[8, 10].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[8, 10].Value = "COMPANY REG NO. (TWD, MYR, PHP, IDR & THB)";
        //        saleWS.Cells[8, 11].Style.Font.Bold = true;
        //        saleWS.Cells[8, 11].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //        saleWS.Cells[8, 11].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[8, 11].Value = "BUSINESS ENTITY TYPE";

        //        saleWS.Cells["L7:O7"].Merge = true;
        //        saleWS.Cells[7, 12].Style.Font.Bold = true;
        //        saleWS.Cells[7, 12].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //        saleWS.Cells[7, 12].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[7, 12].Value = "BANK DETAILS";
        //        saleWS.Cells[8, 12].Style.Font.Bold = true;
        //        saleWS.Cells[8, 12].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //        saleWS.Cells[8, 12].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[8, 12].Value = "ACCOUNT NUMBER / IBAN";
        //        saleWS.Cells[8, 13].Style.Font.Bold = true;
        //        saleWS.Cells[8, 13].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //        saleWS.Cells[8, 13].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[8, 13].Value = "BANK NAME";
        //        saleWS.Cells[8, 14].Style.Font.Bold = true;
        //        saleWS.Cells[8, 14].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //        saleWS.Cells[8, 14].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[8, 14].Value = "BANK CODE / SWIFT CODE";
        //        saleWS.Cells[8, 15].Style.Font.Bold = true;
        //        saleWS.Cells[8, 15].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //        saleWS.Cells[8, 15].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[8, 15].Value = "BANK ADDRESS";

        //        saleWS.Cells["P7:R7"].Merge = true;
        //        saleWS.Cells[7, 16].Style.Font.Bold = true;
        //        saleWS.Cells[7, 16].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //        saleWS.Cells[7, 16].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[7, 16].Value = "ADDITIONAL INFORMATION";
        //        saleWS.Cells[8, 16].Style.Font.Bold = true;
        //        saleWS.Cells[8, 16].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //        saleWS.Cells[8, 16].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[8, 16].Value = "RELATIONSHIP BETWEEN SENDER AND BENEFICIARY";
        //        saleWS.Cells[8, 17].Style.Font.Bold = true;
        //        saleWS.Cells[8, 17].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //        saleWS.Cells[8, 17].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[8, 17].Value = "SOURCE OF FUNDS";
        //        saleWS.Cells[8, 18].Style.Font.Bold = true;
        //        saleWS.Cells[8, 18].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //        saleWS.Cells[8, 18].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //        saleWS.Cells[8, 18].Value = "PURPOSE OF PAYMENT";

        //        int saleRow = 9;

        //        string sgdFormat = GetDecimalFormat(sgdDp);
        //        string rateFormat = GetRateFormat(rateDP);

        //        decimal grandTotalForeign = 0;
        //        decimal grandTotalLocal = 0;
        //        decimal totalcostRemittance = 0;
        //        decimal totalGain = 0;
        //        var getRemittance = _remittancesalesModel.GetSingle(id);
        //        var customerName = "";
        //        var ordercompanyName = "";
        //        if (getRemittance.CustomerParticulars.CustomerType == "Corporate & Trading Company")
        //        {
        //            ordercompanyName = getRemittance.CustomerParticulars.CustomerCode + " - " + getRemittance.CustomerParticulars.Company_RegisteredName;
        //            customerName = getRemittance.CustomerParticulars.Company_ContactName;
        //        }
        //        else
        //        {
        //            ordercompanyName = getRemittance.CustomerParticulars.CustomerCode + " - " + getRemittance.CustomerParticulars.Natural_SelfEmployedBusinessName;
        //            customerName = getRemittance.CustomerParticulars.Natural_Name;
        //        }
        //        saleWS.Cells["C3:E3"].Merge = true;
        //        saleWS.Cells[3, 3].Style.Font.Bold = true;
        //        saleWS.Cells[3, 3].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
        //        saleWS.Cells[3, 3].Value = exportDate;

        //        saleWS.Cells["C4:E4"].Merge = true;
        //        saleWS.Cells[4, 3].Style.Font.Bold = true;
        //        saleWS.Cells[4, 3].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
        //        saleWS.Cells[4, 3].Value = ordercompanyName;

        //        saleWS.Cells["C5:E5"].Merge = true;
        //        saleWS.Cells[5, 3].Style.Font.Bold = true;
        //        saleWS.Cells[5, 3].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
        //        saleWS.Cells[5, 3].Value = customerName;

        //        foreach (var ro in getRemittance.RemittanceOders.OrderBy(e => e.ID))
        //        {
        //            saleWS.Cells[saleRow, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //            saleWS.Cells[saleRow, 1].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //            saleWS.Cells[saleRow, 1].Value = getRemittance.MemoID + " - " + ro.TransactionID;
        //            saleWS.Cells[saleRow, 2].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //            saleWS.Cells[saleRow, 2].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //            saleWS.Cells[saleRow, 2].Value = ro.PayCurrencyDecimal.CurrencyCode;
        //            saleWS.Cells[saleRow, 3].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //            saleWS.Cells[saleRow, 3].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //            saleWS.Cells[saleRow, 3].Value = ro.PayCurrencyDecimal.ProductSymbol + ro.PayAmount;

        //            saleWS.Cells[saleRow, 4].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //            saleWS.Cells[saleRow, 4].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //            saleWS.Cells[saleRow, 4].Value = ro.BeneficiaryFullName;

        //            //call db to get details
        //            string nationality = "-";
        //            string companyRegNo = "-";
        //            string sourcePayment = "-";
        //            string purposePayment = "-";
        //            string bankorIBAN = ro.BeneficiaryBankAccountNo;
        //            using (var context = new DataAccess.GreatEastForex())
        //            {
        //                if (ro.BeneficiaryNationality > 0)
        //                {
        //                    var getNationality = context.Countries.Where(e => e.ID == ro.BeneficiaryNationality).FirstOrDefault().Name;
        //                    if (getNationality != "Others")
        //                    {
        //                        nationality = getNationality;
        //                    }
        //                    else
        //                    {
        //                        nationality = ro.BeneficiaryNationalityIfOthers;
        //                    }
        //                }
        //                if (ro.BeneficiaryCompanyRegistrationNo != null)
        //                {
        //                    companyRegNo = ro.BeneficiaryCompanyRegistrationNo;
        //                }

        //                if (ro.IBANEuropeBSBAustralia != null)
        //                {
        //                    bankorIBAN = ro.IBANEuropeBSBAustralia;
        //                }

        //                if (ro.BeneficiarySourceOfPayment > 0)
        //                {
        //                    var getSourcePayment = context.FundLists.Where(e => e.ID == ro.BeneficiarySourceOfPayment).FirstOrDefault().Name;
        //                    if (getSourcePayment != "Others")
        //                    {
        //                        sourcePayment = getSourcePayment;
        //                    }
        //                    else
        //                    {
        //                        sourcePayment = getSourcePayment;
        //                    }
        //                }

        //                if (ro.BeneficiaryPurposeOfPayment > 0)
        //                {
        //                    var getPurposePayment = context.PaymentLists.Where(e => e.ID == ro.BeneficiaryPurposeOfPayment).FirstOrDefault().Name;
        //                    if (getPurposePayment != "Others")
        //                    {
        //                        purposePayment = getPurposePayment;
        //                    }
        //                    else
        //                    {
        //                        purposePayment = getPurposePayment;
        //                    }
        //                }
        //            }

        //            saleWS.Cells[saleRow, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //            saleWS.Cells[saleRow, 5].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //            saleWS.Cells[saleRow, 5].Value = nationality;
        //            saleWS.Cells[saleRow, 6].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //            saleWS.Cells[saleRow, 6].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //            saleWS.Cells[saleRow, 6].Value = "-";
        //            saleWS.Cells[saleRow, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //            saleWS.Cells[saleRow, 7].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //            saleWS.Cells[saleRow, 7].Value = ro.BeneficiaryAddressMain;
        //            saleWS.Cells[saleRow, 8].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //            saleWS.Cells[saleRow, 8].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //            saleWS.Cells[saleRow, 8].Value = ro.BeneficiaryContactNoMain;
        //            saleWS.Cells[saleRow, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //            saleWS.Cells[saleRow, 9].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //            saleWS.Cells[saleRow, 9].Value = "-";
        //            saleWS.Cells[saleRow, 10].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //            saleWS.Cells[saleRow, 10].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //            saleWS.Cells[saleRow, 10].Value = companyRegNo;
        //            saleWS.Cells[saleRow, 11].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //            saleWS.Cells[saleRow, 11].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //            saleWS.Cells[saleRow, 11].Value = "-";

        //            saleWS.Cells[saleRow, 12].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //            saleWS.Cells[saleRow, 12].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //            saleWS.Cells[saleRow, 12].Value = bankorIBAN;
        //            saleWS.Cells[saleRow, 13].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //            saleWS.Cells[saleRow, 13].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //            saleWS.Cells[saleRow, 13].Value = ro.BeneficiaryBankName;
        //            saleWS.Cells[saleRow, 14].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //            saleWS.Cells[saleRow, 14].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //            saleWS.Cells[saleRow, 14].Value = ro.BeneficiaryBankCode;
        //            saleWS.Cells[saleRow, 15].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //            saleWS.Cells[saleRow, 15].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //            saleWS.Cells[saleRow, 15].Value = ro.BeneficiaryBankAddress;

        //            saleWS.Cells[saleRow, 16].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //            saleWS.Cells[saleRow, 16].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //            saleWS.Cells[saleRow, 16].Value = "-";
        //            saleWS.Cells[saleRow, 17].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //            saleWS.Cells[saleRow, 17].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //            saleWS.Cells[saleRow, 17].Value = sourcePayment;
        //            saleWS.Cells[saleRow, 18].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
        //            saleWS.Cells[saleRow, 18].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
        //            saleWS.Cells[saleRow, 18].Value = purposePayment;

        //            saleRow++;
        //        }

        //        //Authorised Person Details

        //        saleWS.PrinterSettings.PaperSize = ePaperSize.A4;
        //        saleWS.PrinterSettings.TopMargin = 0.35M;
        //        saleWS.PrinterSettings.RightMargin = 0.35M;
        //        saleWS.PrinterSettings.BottomMargin = 0.35M;
        //        saleWS.PrinterSettings.LeftMargin = 0.35M;
        //        saleWS.HeaderFooter.OddFooter.RightAlignedText = String.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);
        //        saleWS.Cells[saleWS.Dimension.Address].Style.Font.Size = 9;
        //        saleWS.Cells[saleWS.Dimension.Address].AutoFitColumns();
        //        //double width_col4 = saleWS.Column(4).Width;
        //        //if (width_col4 > 15)
        //        //{
        //        //    saleWS.Column(4).Width = 15;
        //        //    saleWS.Column(4).Style.WrapText = true;
        //        //}
        //        //double width_col7 = saleWS.Column(7).Width;
        //        //if (width_col7 > 10)
        //        //{
        //        //    saleWS.Column(7).Width = 10;
        //        //    saleWS.Column(7).Style.WrapText = true;
        //        //}
        //        //double width_col8 = saleWS.Column(8).Width;
        //        //if (width_col8 > 10)
        //        //{
        //        //    saleWS.Column(8).Width = 10;
        //        //    saleWS.Column(8).Style.WrapText = true;
        //        //}
        //        if (getRemittance.CustomerParticulars.CustomerType == "Corporate & Trading Company")
        //        {
        //            GenerateSenderInfoCooperation(id, pck);
        //        }
        //        else
        //        {
        //            GenerateSenderInfoIndividual(id, pck);
        //        }

        //        //Write it back to the client
        //        Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        //        Response.AddHeader("content-disposition", "attachment;  filename=msb-order-form-" + DateTime.Now.ToString("yyyyMMddHHmm") + ".xlsx");
        //        Response.BinaryWrite(pck.GetAsByteArray());
        //    }
        //}

        public void GenerateSenderInfoIndividual(int id, ExcelPackage pck)
        {
            string companyName = _settingsModel.GetCodeValue("COMPANY_NAME").ToUpper();
            string exportDate = DateTime.Now.ToString("dd-MM-yyyy");

            //using (ExcelPackage pck = new ExcelPackage())
            //{
            //Create Worksheet
            ExcelWorksheet saleWS = pck.Workbook.Worksheets.Add("Sende INFO (INDIVIDUAL)");

            //set header rows
            saleWS.Cells["A1:D1"].Merge = true;
            saleWS.Cells[1, 1].Style.Font.Bold = true;
            saleWS.Cells[1, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[1, 1].Style.Font.UnderLine = true;
            saleWS.Cells[1, 1].Value = "PLEASE FILL UP ONLY FOR TRANSACTION BY INDIVIDUAL SENDER";

            //set first row name
            saleWS.Cells[3, 1].Style.Font.Bold = true;
            saleWS.Cells[3, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[3, 1].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[3, 1].Value = "";
            saleWS.Cells[4, 1].Style.Font.Bold = true;
            saleWS.Cells[4, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 1].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 1].Value = "BENEFICIARY'S NAME";

            saleWS.Cells["B3:K3"].Merge = true;
            saleWS.Cells[3, 2].Style.Font.Bold = true;
            saleWS.Cells[3, 2].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[3, 2].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[3, 2].Value = "SENDER INFORMATION";
            saleWS.Cells[4, 2].Style.Font.Bold = true;
            saleWS.Cells[4, 2].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 2].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 2].Value = "SENDER'S NAME";
            saleWS.Cells[4, 3].Style.Font.Bold = true;
            saleWS.Cells[4, 3].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 3].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 3].Value = "NATIONALITY";
            saleWS.Cells[4, 4].Style.Font.Bold = true;
            saleWS.Cells[4, 4].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 4].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 4].Value = "DATE OF BIRTH";
            saleWS.Cells[4, 5].Style.Font.Bold = true;
            saleWS.Cells[4, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 5].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 5].Value = "ID TYPE";
            saleWS.Cells[4, 6].Style.Font.Bold = true;
            saleWS.Cells[4, 6].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 6].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 6].Value = "ID NO.";
            saleWS.Cells[4, 7].Style.Font.Bold = true;
            saleWS.Cells[4, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 7].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 7].Value = "CONTACT NO.";
            saleWS.Cells[4, 8].Style.Font.Bold = true;
            saleWS.Cells[4, 8].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 8].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 8].Value = "RESIDENTIAL ADDRESS";
            saleWS.Cells[4, 9].Style.Font.Bold = true;
            saleWS.Cells[4, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 9].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 9].Value = "OCCUPATION";
            saleWS.Cells[4, 10].Style.Font.Bold = true;
            saleWS.Cells[4, 10].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 10].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 10].Value = "NAME OF EMPLOYER";
            saleWS.Cells[4, 11].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 11].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 11].Value = "COMPANY ADDRESS";

            int saleRow = 5;

            var getRemittanceSale = _remittancesalesModel.GetSingle(id);
            var customerName = "";
            var ordercompanyName = "";
            var nationality = "";
            var residentAddress = "";
            string firstICNo = getRemittanceSale.CustomerParticulars.Natural_ICPassportNo.Substring(0, 1);
            string checkIsICPassport = "Passport";
            if (firstICNo == "S")
            {
                checkIsICPassport = "IC";
            }
            if (getRemittanceSale.CustomerParticulars.CustomerType == "Corporate & Trading Company")
            {
                ordercompanyName = getRemittanceSale.CustomerParticulars.CustomerCode + " - " + getRemittanceSale.CustomerParticulars.Company_RegisteredName;
                customerName = getRemittanceSale.CustomerParticulars.Company_ContactName;
                nationality = getRemittanceSale.CustomerParticulars.Company_Nationality;
            }
            else
            {
                ordercompanyName = getRemittanceSale.CustomerParticulars.CustomerCode + " - " + getRemittanceSale.CustomerParticulars.Natural_SelfEmployedBusinessName;
                customerName = getRemittanceSale.CustomerParticulars.Natural_Name;
                nationality = getRemittanceSale.CustomerParticulars.Natural_Nationality;
                residentAddress = getRemittanceSale.CustomerParticulars.Natural_PermanentAddress + " " + getRemittanceSale.CustomerParticulars.Natural_PermanentAddress2 + " " + getRemittanceSale.CustomerParticulars.Natural_PermanentAddress3;
            }
            foreach (var ro in getRemittanceSale.RemittanceOders.OrderBy(e => e.ID))
            {
                saleWS.Cells[saleRow, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 1].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 1].Value = ro.BeneficiaryFullName;

                saleWS.Cells[saleRow, 2].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 2].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 2].Value = customerName;
                saleWS.Cells[saleRow, 3].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 3].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 3].Value = nationality;
                saleWS.Cells[saleRow, 4].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 4].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 4].Value = getRemittanceSale.CustomerParticulars.Natural_DOB.HasValue ? getRemittanceSale.CustomerParticulars.Natural_DOB.Value.ToString("dd/MM/yyyy") : "[N/A]";
                saleWS.Cells[saleRow, 5].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 5].Value = checkIsICPassport;
                saleWS.Cells[saleRow, 6].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 6].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 6].Value = getRemittanceSale.CustomerParticulars.Natural_ICPassportNo;
                saleWS.Cells[saleRow, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 7].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 7].Value = getRemittanceSale.CustomerParticulars.Natural_ContactNoM;
                saleWS.Cells[saleRow, 8].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 8].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 8].Value = residentAddress;
                saleWS.Cells[saleRow, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 9].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 9].Value = getRemittanceSale.CustomerParticulars.Natural_EmployedJobTitle;
                saleWS.Cells[saleRow, 10].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 10].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 10].Value = getRemittanceSale.CustomerParticulars.Natural_EmployedEmployerName;
                saleWS.Cells[saleRow, 11].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 11].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 11].Value = getRemittanceSale.CustomerParticulars.Natural_EmployedRegisteredAddress;

                saleRow++;
            }

            saleWS.PrinterSettings.PaperSize = ePaperSize.A4;
            saleWS.PrinterSettings.TopMargin = 0.35M;
            saleWS.PrinterSettings.RightMargin = 0.35M;
            saleWS.PrinterSettings.BottomMargin = 0.35M;
            saleWS.PrinterSettings.LeftMargin = 0.35M;
            saleWS.HeaderFooter.OddFooter.RightAlignedText = String.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);
            saleWS.Cells[saleWS.Dimension.Address].Style.Font.Size = 9;
            saleWS.Cells[saleWS.Dimension.Address].AutoFitColumns();
            //double width_col4 = saleWS.Column(4).Width;
            //if (width_col4 > 15)
            //{
            //    saleWS.Column(4).Width = 15;
            //    saleWS.Column(4).Style.WrapText = true;
            //}
            //double width_col7 = saleWS.Column(7).Width;
            //if (width_col7 > 10)
            //{
            //    saleWS.Column(7).Width = 10;
            //    saleWS.Column(7).Style.WrapText = true;
            //}
            //double width_col8 = saleWS.Column(8).Width;
            //if (width_col8 > 10)
            //{
            //    saleWS.Column(8).Width = 10;
            //    saleWS.Column(8).Style.WrapText = true;
            //}

            //Write it back to the client
            //Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            //Response.AddHeader("content-disposition", "attachment;  filename=sender-info-individual-" + DateTime.Now.ToString("yyyyMMddHHmm") + ".xlsx");
            //Response.BinaryWrite(pck.GetAsByteArray());
            //}
        }

        public void GenerateSenderInfoCooperation(int id, ExcelPackage pck)
        {
            string companyName = _settingsModel.GetCodeValue("COMPANY_NAME").ToUpper();
            string exportDate = DateTime.Now.ToString("dd-MM-yyyy");

            //using (ExcelPackage pck = new ExcelPackage())
            //{
            //Create Worksheet
            ExcelWorksheet saleWS = pck.Workbook.Worksheets.Add("SENDER INFO (COOPERATION)");

            //set header rows
            saleWS.Cells["A1:D1"].Merge = true;
            saleWS.Cells[1, 1].Style.Font.Bold = true;
            saleWS.Cells[1, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            saleWS.Cells[1, 1].Style.Font.UnderLine = true;
            saleWS.Cells[1, 1].Value = "PLEASE FILL UP ONLY FOR TRANSACTION BY CORPORATE SENDER";

            //set first row name
            saleWS.Cells[3, 1].Style.Font.Bold = true;
            saleWS.Cells[3, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[3, 1].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[3, 1].Value = "";
            saleWS.Cells[4, 1].Style.Font.Bold = true;
            saleWS.Cells[4, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 1].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 1].Value = "BENEFICIARY'S NAME";

            saleWS.Cells["B3:H3"].Merge = true;
            saleWS.Cells[3, 2].Style.Font.Bold = true;
            saleWS.Cells[3, 2].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[3, 2].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[3, 2].Value = "COMPANY INFORMATION";
            saleWS.Cells[4, 2].Style.Font.Bold = true;
            saleWS.Cells[4, 2].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 2].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 2].Value = "SENDER'S NAME";
            saleWS.Cells[4, 3].Style.Font.Bold = true;
            saleWS.Cells[4, 3].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 3].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 3].Value = "CO. REG NO.";
            saleWS.Cells[4, 4].Style.Font.Bold = true;
            saleWS.Cells[4, 4].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 4].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 4].Value = "CO. REG DATE";
            saleWS.Cells[4, 5].Style.Font.Bold = true;
            saleWS.Cells[4, 5].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 5].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 5].Value = "NATURE OF BUSINESS";
            saleWS.Cells[4, 6].Style.Font.Bold = true;
            saleWS.Cells[4, 6].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 6].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 6].Value = "CONTACT NO.";
            saleWS.Cells[4, 7].Style.Font.Bold = true;
            saleWS.Cells[4, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 7].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 7].Value = "BUSINESS ENTITY TYPE";
            saleWS.Cells[4, 8].Style.Font.Bold = true;
            saleWS.Cells[4, 8].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 8].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 8].Value = "COMPANY ADDRESS";

            saleWS.Cells["I3:N3"].Merge = true;
            saleWS.Cells[3, 9].Style.Font.Bold = true;
            saleWS.Cells[3, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[3, 9].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[3, 9].Value = "AUTHORISED PERSON INFORMATION";
            saleWS.Cells[4, 9].Style.Font.Bold = true;
            saleWS.Cells[4, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 9].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 9].Value = "NAME";
            saleWS.Cells[4, 10].Style.Font.Bold = true;
            saleWS.Cells[4, 10].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 10].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 10].Value = "DATE OF BIRTH";
            saleWS.Cells[4, 11].Style.Font.Bold = true;
            saleWS.Cells[4, 11].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 11].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 11].Value = "NATIONALITY";
            saleWS.Cells[4, 12].Style.Font.Bold = true;
            saleWS.Cells[4, 12].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 12].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 12].Value = "ID TYPE";
            saleWS.Cells[4, 13].Style.Font.Bold = true;
            saleWS.Cells[4, 13].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 13].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 13].Value = "ID NO.";
            saleWS.Cells[4, 14].Style.Font.Bold = true;
            saleWS.Cells[4, 14].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
            saleWS.Cells[4, 14].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
            saleWS.Cells[4, 14].Value = "DESIGNATION";

            int saleRow = 5;

            var getRemittanceSale = _remittancesalesModel.GetSingle(id);
            var customerName = "";
            var ordercompanyName = "";
            var nationality = "";
            var businessentity = "";
            string firstICNo = "";
            if (!string.IsNullOrEmpty(getRemittanceSale.CustomerParticulars.Company_ICPassport))
            {
                firstICNo = getRemittanceSale.CustomerParticulars.Company_ICPassport.Substring(0, 1);
            }

            string checkIsICPassport = "Passport";
            if (firstICNo == "S")
            {
                checkIsICPassport = "IC";
            }
            if (getRemittanceSale.CustomerParticulars.Company_TypeOfEntity != "Others")
            {
                businessentity = getRemittanceSale.CustomerParticulars.Company_TypeOfEntity;
            }
            else
            {
                businessentity = getRemittanceSale.CustomerParticulars.Company_TypeOfEntityIfOthers;
            }
            if (getRemittanceSale.CustomerParticulars.CustomerType == "Corporate & Trading Company")
            {
                ordercompanyName = getRemittanceSale.CustomerParticulars.CustomerCode + " - " + getRemittanceSale.CustomerParticulars.Company_RegisteredName;
                customerName = getRemittanceSale.CustomerParticulars.Company_ContactName;
                nationality = getRemittanceSale.CustomerParticulars.Company_Nationality;
            }
            else
            {
                ordercompanyName = getRemittanceSale.CustomerParticulars.CustomerCode + " - " + getRemittanceSale.CustomerParticulars.Natural_SelfEmployedBusinessName;
                customerName = getRemittanceSale.CustomerParticulars.Natural_Name;
                nationality = getRemittanceSale.CustomerParticulars.Natural_Nationality;
            }
            foreach (var ro in getRemittanceSale.RemittanceOders.OrderBy(e => e.ID))
            {
                saleWS.Cells[saleRow, 1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 1].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 1].Value = ro.BeneficiaryFullName;

                saleWS.Cells[saleRow, 2].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 2].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 2].Value = ordercompanyName;
                saleWS.Cells[saleRow, 3].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 3].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 3].Value = getRemittanceSale.CustomerParticulars.Company_RegistrationNo;
                saleWS.Cells[saleRow, 4].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 4].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 4].Value = getRemittanceSale.CustomerParticulars.Company_DateOfRegistration.HasValue ? getRemittanceSale.CustomerParticulars.Company_DateOfRegistration.Value.ToString("dd/MM/yyyy") : "-";
                saleWS.Cells[saleRow, 5].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 5].Value = "-";
                saleWS.Cells[saleRow, 6].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 6].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 6].Value = getRemittanceSale.CustomerParticulars.Company_ContactNoM;
                saleWS.Cells[saleRow, 7].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 7].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 7].Value = businessentity;
                saleWS.Cells[saleRow, 8].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 8].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 8].Value = getRemittanceSale.CustomerParticulars.Company_RegisteredAddress;
                saleWS.Cells[saleRow, 9].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 9].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 9].Value = getRemittanceSale.CustomerParticulars.Company_ContactName;
                saleWS.Cells[saleRow, 10].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 10].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 10].Value = getRemittanceSale.CustomerParticulars.DOB.HasValue ? getRemittanceSale.CustomerParticulars.DOB.Value.ToString("dd/MM/yyyy") : "-";
                saleWS.Cells[saleRow, 11].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 11].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 11].Value = nationality;
                saleWS.Cells[saleRow, 12].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 12].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 12].Value = checkIsICPassport;
                saleWS.Cells[saleRow, 13].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 13].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 13].Value = getRemittanceSale.CustomerParticulars.Company_ICPassport;
                saleWS.Cells[saleRow, 14].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                saleWS.Cells[saleRow, 14].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                saleWS.Cells[saleRow, 14].Value = getRemittanceSale.CustomerParticulars.Company_JobTitle;

                saleRow++;
            }

            saleWS.PrinterSettings.PaperSize = ePaperSize.A4;
            saleWS.PrinterSettings.TopMargin = 0.35M;
            saleWS.PrinterSettings.RightMargin = 0.35M;
            saleWS.PrinterSettings.BottomMargin = 0.35M;
            saleWS.PrinterSettings.LeftMargin = 0.35M;
            saleWS.HeaderFooter.OddFooter.RightAlignedText = String.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);
            saleWS.Cells[saleWS.Dimension.Address].Style.Font.Size = 9;
            saleWS.Cells[saleWS.Dimension.Address].AutoFitColumns();
            //double width_col4 = saleWS.Column(4).Width;
            //if (width_col4 > 15)
            //{
            //    saleWS.Column(4).Width = 15;
            //    saleWS.Column(4).Style.WrapText = true;
            //}
            //double width_col7 = saleWS.Column(7).Width;
            //if (width_col7 > 10)
            //{
            //    saleWS.Column(7).Width = 10;
            //    saleWS.Column(7).Style.WrapText = true;
            //}
            //double width_col8 = saleWS.Column(8).Width;
            //if (width_col8 > 10)
            //{
            //    saleWS.Column(8).Width = 10;
            //    saleWS.Column(8).Style.WrapText = true;
            //}

            //Write it back to the client
            //Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            //Response.AddHeader("content-disposition", "attachment;  filename=sender-info-cooperation-" + DateTime.Now.ToString("yyyyMMddHHmm") + ".xlsx");
            //Response.BinaryWrite(pck.GetAsByteArray());
            //}
        }

        public string[] GetWeeklyDates()
        {
            string[] dates = new string[2];

            DateTime today = DateTime.Now;

            int dayBefore = 0;
            int dayAfter = 0;

            string day = today.DayOfWeek.ToString();

            switch (day)
            {
                case "Monday": dayBefore = 0; dayAfter = 6; break;
                case "Tuesday": dayBefore = 1; dayAfter = 5; break;
                case "Wednesday": dayBefore = 2; dayAfter = 4; break;
                case "Thursday": dayBefore = 3; dayAfter = 3; break;
                case "Friday": dayBefore = 4; dayAfter = 2; break;
                case "Saturday": dayBefore = 5; dayAfter = 1; break;
                case "Sunday": dayBefore = 6; dayAfter = 0; break;
            }

            DateTime firstWeekDay = today.AddDays(-dayBefore);
            DateTime lastWeekDay = today.AddDays(dayAfter);

            dates[0] = firstWeekDay.ToString("dd/MM/yyyy");
            dates[1] = lastWeekDay.ToString("dd/MM/yyyy");

            return dates;
        }

        //Customer Dropdown
        //public Dropdown[] CustomerDDL(int id = 0)
        //{
        //    //Start
        //    using (var conn = new SqlConnection(ConfigurationManager.ConnectionStrings["GreatEastForex"].ConnectionString))
        //    {
        //        conn.Open();

        //        List<GetAllCustomerActiveListInSalesModule> customerList = new List<GetAllCustomerActiveListInSalesModule>();
        //        GetAllCustomerActiveListInSalesModule singleItem = new GetAllCustomerActiveListInSalesModule();

        //        SqlCommand cmd = new SqlCommand("GetAllCustomerActiveListInSalesModule", conn);

        //        cmd.ExecuteNonQuery();
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.CommandTimeout = 5000;

        //        // execute the command
        //        using (SqlDataReader reader = cmd.ExecuteReader())
        //        {

        //            customerList = reader.Cast<IDataRecord>()
        //            .Select(x => new GetAllCustomerActiveListInSalesModule
        //            {
        //                ID = (int)x["ID"],
        //                IsSubAccount = (long)x["IsSubAccount"],
        //                IsDeleted = (string)x["IsDeleted"],
        //                CustomerType = (string)x["CustomerType"],
        //                Company_RegisteredName = (x["Company_RegisteredName"] == DBNull.Value) ? "" : (string)x["Company_RegisteredName"],
        //                Natural_Name = (x["Natural_Name"] == DBNull.Value) ? "" : (string)x["Natural_Name"],
        //                Customer_Profile = (string)x["CustomerProfile"],
        //                CustomerCode = (x["CustomerCode"] == DBNull.Value) ? "" : (string)x["CustomerCode"],
        //                Status = (string)x["Status"]
        //            }).ToList();
        //        }

        //        if (id > 0)
        //        {
        //            singleItem = customerList.Where(e => e.ID == id).FirstOrDefault();
        //        }

        //        int size = customerList.Count + 1;

        //        if (singleItem != null)
        //        {
        //            size++;
        //        }

        //        Dropdown[] ddl = new Dropdown[size];
        //        ddl[0] = new Dropdown { val = "", name = "" };

        //        int count = 1;

        //        if (singleItem.ID != 0)
        //        {
        //            if (singleItem.CustomerType == "Corporate & Trading Company")
        //            {
        //                if (singleItem.Customer_Profile == "Incomplete")
        //                {
        //                    ddl[count] = new Dropdown { name = singleItem.CustomerCode + " - " + singleItem.Company_RegisteredName + " (" + singleItem.Customer_Profile + ")", val = singleItem.ID.ToString() };
        //                }
        //                else
        //                {
        //                    ddl[count] = new Dropdown { name = singleItem.CustomerCode + " - " + singleItem.Company_RegisteredName, val = singleItem.ID.ToString() };
        //                }
        //            }
        //            else
        //            {
        //                if (singleItem.Customer_Profile == "Incomplete")
        //                {
        //                    ddl[count] = new Dropdown { name = singleItem.CustomerCode + " - " + singleItem.Natural_Name + " (" + singleItem.Customer_Profile + ")", val = singleItem.ID.ToString() };
        //                }
        //                else
        //                {
        //                    ddl[count] = new Dropdown { name = singleItem.CustomerCode + " - " + singleItem.Natural_Name, val = singleItem.ID.ToString() };
        //                }
        //            }
        //            count++;
        //        }

        //        foreach (GetAllCustomerActiveListInSalesModule customer in customerList)
        //        {
        //            if (customer.CustomerType == "Corporate & Trading Company")
        //            {
        //                if (customer.Customer_Profile == "Incomplete")
        //                {
        //                    ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Company_RegisteredName + " (" + customer.Customer_Profile + ")", val = customer.ID.ToString() };
        //                }
        //                else
        //                {
        //                    ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Company_RegisteredName, val = customer.ID.ToString() };
        //                }
        //            }
        //            else
        //            {
        //                if (customer.Customer_Profile == "Incomplete")
        //                {
        //                    ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Natural_Name + " (" + customer.Customer_Profile + ")", val = customer.ID.ToString() };
        //                }
        //                else
        //                {
        //                    ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Natural_Name, val = customer.ID.ToString() };
        //                }
        //            }
        //            count++;
        //        }
        //        conn.Close();
        //        return ddl;
        //    }
        //    //End


        //    //IList<CustomerParticular> customerParticulars = _customerParticularsModel.GetAllByStatus("Active").OrderByDescending(e => e.CustomerType == "Corporate & Trading Company").ThenBy(e => e.Company_RegisteredName).ThenBy(e => e.Natural_Name).ToList();

        //    //CustomerParticular selectedCustomer = null;

        //    //         if (id > 0)
        //    //         {
        //    //             selectedCustomer = _customerParticularsModel.GetSingle2(id);
        //    //             //selectedCustomer = _customerParticularsModel.GetSingle(id);
        //    //         }

        //    //         int size = customerParticulars.Count + 1;

        //    //         if (selectedCustomer != null)
        //    //         {
        //    //             size++;
        //    //         }

        //    //Dropdown[] ddl = new Dropdown[size];
        //    //ddl[0] = new Dropdown { val = "", name = "" };

        //    //int count = 1;

        //    //if (selectedCustomer != null)
        //    //{
        //    //    if (selectedCustomer.CustomerType == "Corporate & Trading Company")
        //    //    {
        //    //        if (selectedCustomer.Others[0].CustomerProfile == "Incomplete")
        //    //        {
        //    //            ddl[count] = new Dropdown { name = selectedCustomer.CustomerCode + " - " + selectedCustomer.Company_RegisteredName + " (" + selectedCustomer.Others[0].CustomerProfile + ")", val = selectedCustomer.ID.ToString() };
        //    //        }
        //    //        else
        //    //        {
        //    //            ddl[count] = new Dropdown { name = selectedCustomer.CustomerCode + " - " + selectedCustomer.Company_RegisteredName, val = selectedCustomer.ID.ToString() };
        //    //        }
        //    //    }
        //    //    else
        //    //    {
        //    //        if (selectedCustomer.Others[0].CustomerProfile == "Incomplete")
        //    //        {
        //    //            ddl[count] = new Dropdown { name = selectedCustomer.CustomerCode + " - " + selectedCustomer.Natural_Name + " (" + selectedCustomer.Others[0].CustomerProfile + ")", val = selectedCustomer.ID.ToString() };
        //    //        }
        //    //        else
        //    //        {
        //    //            ddl[count] = new Dropdown { name = selectedCustomer.CustomerCode + " - " + selectedCustomer.Natural_Name, val = selectedCustomer.ID.ToString() };
        //    //        }
        //    //    }
        //    //    count++;
        //    //}

        //    //foreach (CustomerParticular customer in customerParticulars)
        //    //{
        //    //    if (customer.CustomerType == "Corporate & Trading Company")
        //    //    {
        //    //        if (customer.Others[0].CustomerProfile == "Incomplete")
        //    //        {
        //    //            ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Company_RegisteredName + " (" + customer.Others[0].CustomerProfile + ")", val = customer.ID.ToString() };
        //    //        }
        //    //        else
        //    //        {
        //    //            ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Company_RegisteredName, val = customer.ID.ToString() };
        //    //        }
        //    //    }
        //    //    else
        //    //    {
        //    //        if (customer.Others[0].CustomerProfile == "Incomplete")
        //    //        {
        //    //            ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Natural_Name + " (" + customer.Others[0].CustomerProfile + ")", val = customer.ID.ToString() };
        //    //        }
        //    //        else
        //    //        {
        //    //            ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Natural_Name, val = customer.ID.ToString() };
        //    //        }
        //    //    }
        //    //    count++;
        //    //}
        //}

        public Dropdown[] CustomerDDL(int id = 0)
        {
            //Start
            using (var conn = new SqlConnection(ConfigurationManager.ConnectionStrings["GreatEastForex"].ConnectionString))
            {
                conn.Open();

                List<GetAllCustomerActiveListInSalesModule> customerList = new List<GetAllCustomerActiveListInSalesModule>();
                GetAllCustomerActiveListInSalesModule singleItem = new GetAllCustomerActiveListInSalesModule();

                SqlCommand cmd = new SqlCommand("GetAllCustomerActiveListInSalesModule", conn);

                cmd.ExecuteNonQuery();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 5000;

                // execute the command
                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    customerList = reader.Cast<IDataRecord>()
                    .Select(x => new GetAllCustomerActiveListInSalesModule
                    {
                        ID = (int)x["ID"],
                        IsSubAccount = (long)x["IsSubAccount"],
                        IsDeleted = (string)x["IsDeleted"],
                        CustomerType = (string)x["CustomerType"],
                        Company_RegisteredName = (x["Company_RegisteredName"] == DBNull.Value) ? "" : (string)x["Company_RegisteredName"],
                        Natural_Name = (x["Natural_Name"] == DBNull.Value) ? "" : (string)x["Natural_Name"],
                        Customer_Profile = (string)x["CustomerProfile"],
                        CustomerCode = (x["CustomerCode"] == DBNull.Value) ? "" : (string)x["CustomerCode"],
                        Status = (string)x["Status"]
                    }).ToList();
                }

                if (id > 0)
                {
                    singleItem = customerList.Where(e => e.ID == id).FirstOrDefault();

                    if (singleItem == null)
                    {
                        using (var context = new DataAccess.GreatEastForex())
                        {
                            var CustomerParticularSingleItem = context.CustomerParticulars.Where(e => e.ID == id).FirstOrDefault();

                            if (CustomerParticularSingleItem != null)
                            {
                                singleItem = new GetAllCustomerActiveListInSalesModule();
                                singleItem.ID = CustomerParticularSingleItem.ID;
                                singleItem.IsDeleted = CustomerParticularSingleItem.IsDeleted;
                                singleItem.IsSubAccount = CustomerParticularSingleItem.IsSubAccount;
                                singleItem.Natural_ContactNoH = CustomerParticularSingleItem.Natural_ContactNoH;
                                singleItem.Natural_EmployedEmployerName = CustomerParticularSingleItem.Natural_EmployedEmployerName;
                                singleItem.Natural_EmploymentType = CustomerParticularSingleItem.Natural_EmploymentType;
                                singleItem.Natural_Name = CustomerParticularSingleItem.Natural_Name;
                                singleItem.Natural_SelfEmployedBusinessName = CustomerParticularSingleItem.Natural_SelfEmployedBusinessName;
                                singleItem.SearchTags = CustomerParticularSingleItem.SearchTags;
                                singleItem.Status = CustomerParticularSingleItem.Others.FirstOrDefault().Status;
                                singleItem.CustomerCode = CustomerParticularSingleItem.CustomerCode;
                                singleItem.Company_ContactName = CustomerParticularSingleItem.Company_ContactName;
                                singleItem.CustomerType = CustomerParticularSingleItem.CustomerType;
                                singleItem.Company_RegisteredName = CustomerParticularSingleItem.Company_RegisteredName;
                                singleItem.Customer_Profile = CustomerParticularSingleItem.Others.FirstOrDefault().CustomerProfile;
                                singleItem.Company_TelNo = CustomerParticularSingleItem.Company_TelNo;
                            }
                        }
                    }
                }

                int size = customerList.Count + 1;

                if (singleItem != null)
                {
                    size++;
                }

                Dropdown[] ddl = new Dropdown[size];
                ddl[0] = new Dropdown { val = "", name = "" };

                int count = 1;

                if (singleItem.ID != 0)
                {
                    if (singleItem.CustomerType == "Corporate & Trading Company")
                    {
                        if (singleItem.Customer_Profile == "Incomplete")
                        {
                            ddl[count] = new Dropdown { name = singleItem.CustomerCode + " - " + singleItem.Company_RegisteredName + " (" + singleItem.Customer_Profile + ")", val = singleItem.ID.ToString() };
                        }
                        else
                        {
                            ddl[count] = new Dropdown { name = singleItem.CustomerCode + " - " + singleItem.Company_RegisteredName, val = singleItem.ID.ToString() };
                        }
                    }
                    else
                    {
                        if (singleItem.Customer_Profile == "Incomplete")
                        {
                            ddl[count] = new Dropdown { name = singleItem.CustomerCode + " - " + singleItem.Natural_Name + " (" + singleItem.Customer_Profile + ")", val = singleItem.ID.ToString() };
                        }
                        else
                        {
                            ddl[count] = new Dropdown { name = singleItem.CustomerCode + " - " + singleItem.Natural_Name, val = singleItem.ID.ToString() };
                        }
                    }
                    count++;
                }

                foreach (GetAllCustomerActiveListInSalesModule customer in customerList)
                {
                    if (customer.CustomerType == "Corporate & Trading Company")
                    {
                        if (customer.Customer_Profile == "Incomplete")
                        {
                            ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Company_RegisteredName + " (" + customer.Customer_Profile + ")", val = customer.ID.ToString() };
                        }
                        else
                        {
                            ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Company_RegisteredName, val = customer.ID.ToString() };
                        }
                    }
                    else
                    {
                        if (customer.Customer_Profile == "Incomplete")
                        {
                            ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Natural_Name + " (" + customer.Customer_Profile + ")", val = customer.ID.ToString() };
                        }
                        else
                        {
                            ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Natural_Name, val = customer.ID.ToString() };
                        }
                    }
                    count++;
                }
                conn.Close();
                return ddl;
            }
            //End


            //IList<CustomerParticular> customerParticulars = _customerParticularsModel.GetAllByStatus("Active").OrderByDescending(e => e.CustomerType == "Corporate & Trading Company").ThenBy(e => e.Company_RegisteredName).ThenBy(e => e.Natural_Name).ToList();

            //CustomerParticular selectedCustomer = null;

            //         if (id > 0)
            //         {
            //             selectedCustomer = _customerParticularsModel.GetSingle2(id);
            //             //selectedCustomer = _customerParticularsModel.GetSingle(id);
            //         }

            //         int size = customerParticulars.Count + 1;

            //         if (selectedCustomer != null)
            //         {
            //             size++;
            //         }

            //Dropdown[] ddl = new Dropdown[size];
            //ddl[0] = new Dropdown { val = "", name = "" };

            //int count = 1;

            //if (selectedCustomer != null)
            //{
            //    if (selectedCustomer.CustomerType == "Corporate & Trading Company")
            //    {
            //        if (selectedCustomer.Others[0].CustomerProfile == "Incomplete")
            //        {
            //            ddl[count] = new Dropdown { name = selectedCustomer.CustomerCode + " - " + selectedCustomer.Company_RegisteredName + " (" + selectedCustomer.Others[0].CustomerProfile + ")", val = selectedCustomer.ID.ToString() };
            //        }
            //        else
            //        {
            //            ddl[count] = new Dropdown { name = selectedCustomer.CustomerCode + " - " + selectedCustomer.Company_RegisteredName, val = selectedCustomer.ID.ToString() };
            //        }
            //    }
            //    else
            //    {
            //        if (selectedCustomer.Others[0].CustomerProfile == "Incomplete")
            //        {
            //            ddl[count] = new Dropdown { name = selectedCustomer.CustomerCode + " - " + selectedCustomer.Natural_Name + " (" + selectedCustomer.Others[0].CustomerProfile + ")", val = selectedCustomer.ID.ToString() };
            //        }
            //        else
            //        {
            //            ddl[count] = new Dropdown { name = selectedCustomer.CustomerCode + " - " + selectedCustomer.Natural_Name, val = selectedCustomer.ID.ToString() };
            //        }
            //    }
            //    count++;
            //}

            //foreach (CustomerParticular customer in customerParticulars)
            //{
            //    if (customer.CustomerType == "Corporate & Trading Company")
            //    {
            //        if (customer.Others[0].CustomerProfile == "Incomplete")
            //        {
            //            ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Company_RegisteredName + " (" + customer.Others[0].CustomerProfile + ")", val = customer.ID.ToString() };
            //        }
            //        else
            //        {
            //            ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Company_RegisteredName, val = customer.ID.ToString() };
            //        }
            //    }
            //    else
            //    {
            //        if (customer.Others[0].CustomerProfile == "Incomplete")
            //        {
            //            ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Natural_Name + " (" + customer.Others[0].CustomerProfile + ")", val = customer.ID.ToString() };
            //        }
            //        else
            //        {
            //            ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Natural_Name, val = customer.ID.ToString() };
            //        }
            //    }
            //    count++;
            //}
        }

        //CollectionTime Dropdown
        public Dropdown[] CollectionTimeDDL()
        {
            Dropdown[] ddl = new Dropdown[4];
            ddl[0] = new Dropdown { name = "9am to 10am", val = "9am to 10am" };
            ddl[1] = new Dropdown { name = "10am to 12pm", val = "10am to 12pm" };
            ddl[2] = new Dropdown { name = "2pm to 3pm", val = "2pm to 3pm" };
            ddl[3] = new Dropdown { name = "3pm to 5pm", val = "3pm to 5pm" };
            return ddl;
        }

        //Currency Dropdown
        public Dropdown[] CurrencyDDL(string transactionType = "")
        {
            IList<RemittanceProducts> products = null;

            if (!string.IsNullOrEmpty(transactionType))
            {
                products = _remittanceproductsModel.GetAll().ToList();
                //products = _productsModel.GetAll(transactionType).Where(e => e.Status == "Active" && e.CurrencyCode != "SGD").ToList();
            }
            else
            {
                products = _remittanceproductsModel.GetAll().ToList();
                //products = _productsModel.GetAll().Where(e => e.Status == "Active" && e.CurrencyCode != "SGD").ToList();
            }

            //products = products.OrderByDescending(e => e.ID).ToList();
            List<int> getCount = new List<int>();//to store currency id
            IList<RemittanceOrders> getSalesTransactionList = new List<RemittanceOrders>();
            int getSingleSalesTransactionList = 0;
            List<CalculateSalesTransaction> FinalResult = new List<CalculateSalesTransaction>();

            foreach (var _prod in products)
            {
                getSingleSalesTransactionList = _saleTransactionsModel.GetProductTransactions(_prod.ID, null, null, new List<string>());

                //first get the total count number
                FinalResult.Add(new CalculateSalesTransaction
                {
                    PrimaryID = _prod.ID,
                    TotalCount = getSingleSalesTransactionList
                });
                //((List<SaleTransaction>)getSalesTransactionList).AddRange(getSingleSalesTransactionList);
                //getSalesTransactionList = getSalesTransactionList.Concat(getSingleSalesTransactionList);
                //getCount.Add(insideCount);
            }

            FinalResult = FinalResult.OrderByDescending(e => e.TotalCount).ToList();

            foreach (var _final in FinalResult)
            {
                getCount.Add(_final.PrimaryID);
            }

            //int checks = 0;

            //getCount.Sort();
            //getCount.Reverse();

            //List<int> getCount2 = new List<int>();
            //getCount2.Add(7);77
            //getCount2.Add(47);51
            //getCount2.Add(51);52
            //getCount2.Add(1);54
            //getCount2.Add(53);1
            //getCount2.Add(54);7
            //getCount2.Add(52);47
            //getCount2.Add(34);34
            //getCount2.Add(77);53
            //getCount2.Add(72);72

            //products = products.OrderBy(e => getCount2).ToList();
            products = products.OrderBy(i => getCount.IndexOf(i.ID)).ThenBy(e => e.PopularCurrencies == 1).ToList();
            //products = products.OrderByDescending(e => _saleTransactionsModel.GetProductTransactions(e.ID, null, null, new List<string>()).Count).ToList();

            Dropdown[] ddl = new Dropdown[products.Count];

            int count = 0;

            foreach (RemittanceProducts product in products)
            {

                ddl[count] = new Dropdown { name = product.CurrencyCode, val = product.ID.ToString() };
                count++;
            }

            return ddl;
        }

        public Dropdown2[] CurrencyDDL2(string transactionType = "", string type = "")
        {
            IList<RemittanceProducts> products = null;

            if (!string.IsNullOrEmpty(transactionType))
            {
                products = _remittanceproductsModel.GetAll().ToList();
                //products = _productsModel.GetAll(transactionType).Where(e => e.Status == "Active" && e.CurrencyCode != "SGD").ToList();
            }
            else
            {
                products = _remittanceproductsModel.GetAll().ToList();
                //products = _productsModel.GetAll().Where(e => e.Status == "Active" && e.CurrencyCode != "SGD").ToList();
            }

            //products = products.OrderByDescending(e => e.ID).ToList();
            List<int> getCount = new List<int>();//to store currency id
            IList<RemittanceOrders> getSalesTransactionList = new List<RemittanceOrders>();
            int getSingleSalesTransactionList = 0;
            List<CalculateSalesTransaction> FinalResult = new List<CalculateSalesTransaction>();

            foreach (var _prod in products)
            {
                getSingleSalesTransactionList = _remittanceordersModel.GetProductTransactions(_prod.ID, null, null, new List<string>());

                //first get the total count number
                FinalResult.Add(new CalculateSalesTransaction
                {
                    PrimaryID = _prod.ID,
                    TotalCount = getSingleSalesTransactionList
                });
                //((List<SaleTransaction>)getSalesTransactionList).AddRange(getSingleSalesTransactionList);
                //getSalesTransactionList = getSalesTransactionList.Concat(getSingleSalesTransactionList);
                //getCount.Add(insideCount);
            }

            FinalResult = FinalResult.OrderBy(e => e.PrimaryID).ToList();

            foreach (var _final in FinalResult)
            {
                getCount.Add(_final.PrimaryID);
            }

            //int checks = 0;

            //getCount.Sort();
            //getCount.Reverse();

            //List<int> getCount2 = new List<int>();
            //getCount2.Add(7);77
            //getCount2.Add(47);51
            //getCount2.Add(51);52
            //getCount2.Add(1);54
            //getCount2.Add(53);1
            //getCount2.Add(54);7
            //getCount2.Add(52);47
            //getCount2.Add(34);34
            //getCount2.Add(77);53
            //getCount2.Add(72);72

            //products = products.OrderBy(e => getCount2).ToList();
            products = products.OrderBy(i => getCount.IndexOf(i.ID)).ThenBy(e => e.IsBaseProduct == 1).ThenBy(e => e.PopularCurrencies == 1).ToList();
            //products = products.OrderByDescending(e => _saleTransactionsModel.GetProductTransactions(e.ID, null, null, new List<string>()).Count).ToList();

            Dropdown2[] ddl = new Dropdown2[products.Count];

            int count = 0;

            foreach (RemittanceProducts product in products)
            {
                if (product.PopularCurrencies == 1)
                {
                    ddl[count] = new Dropdown2
                    {
                        name = product.CurrencyCode,
                        val = product.ID.ToString(),
                        group = "Popular"
                    };
                }
                else
                {
                    ddl[count] = new Dropdown2
                    {
                        name = product.CurrencyCode,
                        val = product.ID.ToString(),
                        group = "Others"
                    };

                }
                count++;
            }

            return ddl;
        }

        //PaymentMode Dropdown
        public Dropdown[] PaymentModeDDL(int selectedProductId)
        {
            RemittanceProducts selectedProduct = _remittanceproductsModel.GetSingle(selectedProductId);
            var bankMode = new List<PaymentModeLists>();
            using (var context = new DataAccess.GreatEastForex())
            {
                bankMode = context.PaymentModeLists.Where(e => e.IsDeleted == 0).ToList();
            }
            string[] paymentMode = null;

            if (selectedProduct != null)
            {
                paymentMode = selectedProduct.PaymentModeAllowed.Split(',');
            }

            if (paymentMode != null)
            {
                Dropdown[] ddl = new Dropdown[paymentMode.Length];

                int count = 0;

                foreach (string mode in paymentMode)
                {
                    var modeDetails = bankMode.Where(e => e.ID == Convert.ToInt32(mode)).FirstOrDefault();
                    ddl[count] = new Dropdown { name = modeDetails.Name, val = modeDetails.ID.ToString() };
                    count++;
                }

                return ddl;
            }
            else
            {
                Dropdown[] ddl = new Dropdown[1];
                ddl[0] = new Dropdown { name = "Pending", val = "Pending" };
                return ddl;
            }
        }

        //LocalPaymentBank Dropdown
        public Dropdown[] LocalPaymentBankDDL(string selectedBank = "")
        {
            List<string> localPaymentBanks = _settingsModel.GetCodeValue("LOCAL_PAYMENT_BANK").Split('|').OrderByDescending(e => e == "CASH").ThenBy(e => e).ToList();

            if (!string.IsNullOrEmpty(selectedBank) && !localPaymentBanks.Contains(selectedBank))
            {
                localPaymentBanks.Insert(0, selectedBank);
            }

            Dropdown[] ddl = new Dropdown[localPaymentBanks.Count + 1];

            int count = 1;

            foreach (string bank in localPaymentBanks)
            {
                ddl[count] = new Dropdown { name = bank, val = bank };

                count++;
            }

            return ddl;
        }

        public Dropdown[] PayBankDDL(string selectedBank = "")
        {
            List<PayBankLists> payBankLists = new List<PayBankLists>();
            using (var context = new DataAccess.GreatEastForex())
            {
                payBankLists = context.PayBankLists.Where(e => e.IsDeleted == 0).ToList();
            }

            Dropdown[] ddl = new Dropdown[payBankLists.Count + 1];

            int count = 1;

            foreach (var bank in payBankLists)
            {
                ddl[count] = new Dropdown { name = bank.BankName, val = bank.ID.ToString() };

                count++;
            }

            return ddl;
        }

        //POST: FileUploader
        [HttpPost]
        public void FileUploader()
        {
            string filesUploaded = "";

            try
            {
                if (Request.Files.Count > 0)
                {
                    foreach (string key in Request.Files)
                    {
                        HttpPostedFileBase attachment = Request.Files[key];

                        if (!string.IsNullOrEmpty(attachment.FileName))
                        {
                            string mimeType = attachment.ContentType;
                            int fileLength = attachment.ContentLength;

                            string[] allowedTypes = ConfigurationManager.AppSettings["AllowedFileTypes"].ToString().Split(',');

                            if (allowedTypes.Contains(mimeType))
                            {
                                if (fileLength <= Convert.ToInt32(ConfigurationManager.AppSettings["MaxFileSize"]) * 1024 * 1024)
                                {
                                    string file = attachment.FileName.Substring(attachment.FileName.LastIndexOf(@"\") + 1, attachment.FileName.Length - (attachment.FileName.LastIndexOf(@"\") + 1));
                                    string fileName = Path.GetFileNameWithoutExtension(file);
                                    string newFileName = FileHelper.sanitiseFilename(fileName) + "_" + DateTime.Now.ToString("yyMMddHHmmss") + Path.GetExtension(file).ToLower();
                                    string path = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), newFileName);

                                    if (!System.IO.File.Exists(path))
                                    {
                                        string oriPath = "";

                                        //if (mimeType != "application/pdf")
                                        //{
                                        //    oriPath = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), "ori_" + newFileName);

                                        //    attachment.SaveAs(oriPath);

                                        //    string resizedPath = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), newFileName);

                                        //    int maxWidth = int.Parse(ConfigurationManager.AppSettings["MaxImgWidth"].ToString());
                                        //    int maxHeight = int.Parse(ConfigurationManager.AppSettings["MaxImgHeight"].ToString());

                                        //    int width = 0;
                                        //    int height = 0;

                                        //    using (System.Drawing.Image Img = System.Drawing.Image.FromFile(oriPath))
                                        //    {
                                        //        width = Img.Width;
                                        //        height = Img.Height;
                                        //    }

                                        //    if (width >= maxWidth || height >= maxHeight)
                                        //    {
                                        //        ImageResizer.ImageJob i = new ImageResizer.ImageJob(oriPath, resizedPath, new ImageResizer.ResizeSettings(
                                        //   "width=" + maxWidth + ";height=" + maxHeight + ";format=jpg;mode=pad"));//mode=null, max, pad(default), crop, carve, stretch

                                        //        i.Build();
                                        //    }
                                        //    else
                                        //    {
                                        //        ImageResizer.ImageJob i = new ImageResizer.ImageJob(oriPath, resizedPath, new ImageResizer.ResizeSettings(
                                        //   "width=" + maxWidth + ";height=" + maxHeight + ";format=jpg;scale=canvas"));

                                        //        i.Build();
                                        //    }

                                        //    System.IO.File.Delete(oriPath);
                                        //}
                                        //else
                                        //{
                                        //    oriPath = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), newFileName);

                                        //    attachment.SaveAs(oriPath);
                                        //}
                                        oriPath = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), newFileName);

                                        attachment.SaveAs(oriPath);
                                        filesUploaded += newFileName + ",";
                                    }
                                    else
                                    {
                                        Response.Write("{\"result\":\"error\",\"msg\":\"" + newFileName + " already exists.\"}");
                                        break;
                                    }
                                }
                                else
                                {
                                    Response.Write("{\"result\":\"error\",\"msg\":\"File size exceeds 2MB.\"}");
                                    break;
                                }
                            }
                            else
                            {
                                Response.Write("{\"result\":\"error\",\"msg\":\"Invalid file type.\"}");
                                break;
                            }
                        }
                        else
                        {
                            Response.Write("{\"result\":\"error\",\"msg\":\"Please select a file to upload.\"}");
                            break;
                        }
                    }
                }
                else
                {
                    Response.Write("{\"result\":\"error\",\"msg\":\"Please select a file to upload.\"}");
                }

                if (!string.IsNullOrEmpty(filesUploaded))
                {
                    Response.Write("{\"result\":\"success\",\"msg\":\"" + filesUploaded.Substring(0, filesUploaded.Length - 1) + "\"}");
                }
            }
            catch
            {
                Response.Write("{\"result\":\"error\",\"msg\":\"An error occured while uploading file.\"}");
            }
        }

        //POST: FileUploader
        [HttpPost]
        public void IDPassportUploader()
        {
            string filesUploaded = "";

            try
            {
                if (Request.Files.Count > 0)
                {
                    foreach (string key in Request.Files)
                    {
                        HttpPostedFileBase attachment = Request.Files[key];

                        if (!string.IsNullOrEmpty(attachment.FileName))
                        {
                            string mimeType = attachment.ContentType;
                            int fileLength = attachment.ContentLength;

                            string[] allowedTypes = ConfigurationManager.AppSettings["AllowedIDPassportTypes"].ToString().Split(',');

                            if (allowedTypes.Contains(mimeType))
                            {
                                if (fileLength <= Convert.ToInt32(ConfigurationManager.AppSettings["MaxFileSize"]) * 1024 * 1024)
                                {
                                    string file = attachment.FileName.Substring(attachment.FileName.LastIndexOf(@"\") + 1, attachment.FileName.Length - (attachment.FileName.LastIndexOf(@"\") + 1));
                                    string fileName = Path.GetFileNameWithoutExtension(file);
                                    string newFileName = FileHelper.sanitiseFilename(fileName) + "_" + DateTime.Now.ToString("yyMMddHHmmss") + Path.GetExtension(file).ToLower();
                                    string path = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), newFileName);

                                    if (!System.IO.File.Exists(path))
                                    {
                                        string oriPath = "";

                                        //if (mimeType != "application/pdf")
                                        //{
                                        //    oriPath = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), "ori_" + newFileName);

                                        //    attachment.SaveAs(oriPath);

                                        //    string resizedPath = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), newFileName);

                                        //    int maxWidth = int.Parse(ConfigurationManager.AppSettings["MaxImgWidth"].ToString());
                                        //    int maxHeight = int.Parse(ConfigurationManager.AppSettings["MaxImgHeight"].ToString());

                                        //    int width = 0;
                                        //    int height = 0;

                                        //    using (System.Drawing.Image Img = System.Drawing.Image.FromFile(oriPath))
                                        //    {
                                        //        width = Img.Width;
                                        //        height = Img.Height;
                                        //    }

                                        //    if (width >= maxWidth || height >= maxHeight)
                                        //    {
                                        //        ImageResizer.ImageJob i = new ImageResizer.ImageJob(oriPath, resizedPath, new ImageResizer.ResizeSettings(
                                        //   "width=" + maxWidth + ";height=" + maxHeight + ";format=jpg;mode=pad"));//mode=null, max, pad(default), crop, carve, stretch

                                        //        i.Build();
                                        //    }
                                        //    else
                                        //    {
                                        //        ImageResizer.ImageJob i = new ImageResizer.ImageJob(oriPath, resizedPath, new ImageResizer.ResizeSettings(
                                        //   "width=" + maxWidth + ";height=" + maxHeight + ";format=jpg;scale=canvas"));

                                        //        i.Build();
                                        //    }

                                        //    System.IO.File.Delete(oriPath);
                                        //}
                                        //else
                                        //{
                                        //    oriPath = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), newFileName);

                                        //    attachment.SaveAs(oriPath);
                                        //}
                                        oriPath = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), newFileName);

                                        attachment.SaveAs(oriPath);
                                        filesUploaded += newFileName + ",";
                                    }
                                    else
                                    {
                                        Response.Write("{\"result\":\"error\",\"msg\":\"" + newFileName + " already exists.\"}");
                                        break;
                                    }
                                }
                                else
                                {
                                    Response.Write("{\"result\":\"error\",\"msg\":\"File size exceeds 2MB.\"}");
                                    break;
                                }
                            }
                            else
                            {
                                Response.Write("{\"result\":\"error\",\"msg\":\"Invalid file type.\"}");
                                break;
                            }
                        }
                        else
                        {
                            Response.Write("{\"result\":\"error\",\"msg\":\"Please select a file to upload.\"}");
                            break;
                        }
                    }
                }
                else
                {
                    Response.Write("{\"result\":\"error\",\"msg\":\"Please select a file to upload.\"}");
                }

                if (!string.IsNullOrEmpty(filesUploaded))
                {
                    Response.Write("{\"result\":\"success\",\"msg\":\"" + filesUploaded.Substring(0, filesUploaded.Length - 1) + "\"}");
                }
            }
            catch
            {
                Response.Write("{\"result\":\"error\",\"msg\":\"An error occured while uploading file.\"}");
            }
        }

        public Dropdown[] AgentDDL()
        {
            IList<Agents> agentsListing = _agentsModel.GetAll();


            if (agentsListing.Count > 0)
            {
                Dropdown[] ddl = new Dropdown[agentsListing.Count + 1];
                ddl[0] = new Dropdown { val = "", name = "" };
                int count = 1;

                foreach (var agent in agentsListing)
                {
                    ddl[count] = new Dropdown { name = agent.AgentId + " - " + agent.CompanyName, val = agent.ID.ToString() };
                    count++;
                }

                return ddl;
            }

            else
            {
                Dropdown[] ddl = new Dropdown[1];
                ddl[0] = new Dropdown { name = "No Agents found", val = "0" };
                return ddl;
            }
        }

        public Dropdown[] BeneficiariesDDL()
        {
            IList<Beneficiaries> beneficiaries = _beneficiaryModel.GetAll();


            if (beneficiaries.Count > 0)
            {
                Dropdown[] ddl = new Dropdown[beneficiaries.Count + 1];
                ddl[0] = new Dropdown { val = "", name = "" };
                int count = 1;

                foreach (var beneficiary in beneficiaries)
                {
                    ddl[count] = new Dropdown { name = beneficiary.BeneficiaryFriendlyName + " - " + beneficiary.BeneficiaryFullName, val = beneficiary.ID.ToString() };
                    count++;
                }

                return ddl;
            }

            else
            {
                Dropdown[] ddl = new Dropdown[1];
                ddl[0] = new Dropdown { name = "No beneficiaries found", val = "0" };
                return ddl;
            }
        }

        public Dropdown[] SupportDocTypeDDL()
        {


            using (var context = new DataAccess.GreatEastForex())
            {
                List<SupportingDocumentTypeLists> supportingDocumentTypes = new List<SupportingDocumentTypeLists>();
                supportingDocumentTypes = context.SupportingDocumentTypeLists.Where(e => e.IsDeleted == 0).ToList();

                if (supportingDocumentTypes.Count > 0)
                {
                    Dropdown[] ddl = new Dropdown[supportingDocumentTypes.Count + 1];
                    ddl[0] = new Dropdown { name = "", val = "0" };
                    int count = 1;

                    foreach (var type in supportingDocumentTypes)
                    {
                        ddl[count] = new Dropdown { name = type.Name, val = type.ID.ToString() };
                        count++;
                    }

                    return ddl;
                }

                else
                {
                    Dropdown[] ddl = new Dropdown[1];
                    ddl[0] = new Dropdown { name = "No supporting document type lists found", val = "0" };
                    return ddl;
                }
            }

        }

        public Dropdown[] CountryDDL()
        {


            using (var context = new DataAccess.GreatEastForex())
            {
                List<Countries> countries = new List<Countries>();
                countries = context.Countries.Where(e => e.IsDeleted == 0).ToList();

                if (countries.Count > 0)
                {
                    Dropdown[] ddl = new Dropdown[countries.Count];
                    int count = 0;

                    foreach (var type in countries)
                    {
                        ddl[count] = new Dropdown { name = type.Name, val = type.ID.ToString() };
                        count++;
                    }

                    return ddl;
                }

                else
                {
                    Dropdown[] ddl = new Dropdown[1];
                    ddl[0] = new Dropdown { name = "No countries found", val = "0" };
                    return ddl;
                }
            }

        }

        public Dropdown[] PurposePaymentDDL(int type)
        {


            using (var context = new DataAccess.GreatEastForex())
            {
                List<PaymentLists> paymentLists = new List<PaymentLists>();
                if (type == 99)
                {
                    paymentLists = context.PaymentLists.Where(e => e.IsDeleted == 0).ToList();
                }
                else
                {
                    paymentLists = context.PaymentLists.Where(e => e.IsDeleted == 0 && (e.Type == type || e.Type == 3)).ToList();
                }


                if (paymentLists.Count > 0)
                {
                    Dropdown[] ddl = new Dropdown[paymentLists.Count];
                    int count = 0;

                    foreach (var payment in paymentLists)
                    {
                        ddl[count] = new Dropdown { name = payment.Name, val = payment.ID.ToString() };
                        count++;
                    }

                    return ddl;
                }

                else
                {
                    Dropdown[] ddl = new Dropdown[1];
                    ddl[0] = new Dropdown { name = "No payment list found", val = "0" };
                    return ddl;
                }
            }

        }

        [HttpPost]
        public JsonResult PurposePaymentSelectList(int type)
        {
            string errorMessage = "";
            string result = "";
            List<PaymentLists> paymentLists = new List<PaymentLists>();
            List<PurposeSelectList> list = new List<PurposeSelectList>();
            using (var context = new DataAccess.GreatEastForex())
            {
                paymentLists = context.PaymentLists.Where(e => e.IsDeleted == 0 && (e.Type == type || e.Type == 3)).ToList();

            }
            if (paymentLists.Count > 0)
            {
                Dropdown[] ddl = new Dropdown[paymentLists.Count];
                int count = 0;

                foreach (var payment in paymentLists)
                {
                    ddl[count] = new Dropdown { name = payment.Name, val = payment.ID.ToString() };
                    count++;
                }
                SelectList paymentModeDDL = new SelectList(ddl, "val", "name");

                var model = new PurposeSelectList()
                {
                    Result = "true",
                    PurposeofPaymentDDL = paymentModeDDL
                };
                list.Add(model);

                return Json(list);
            }

            else
            {
                Dropdown[] ddl = new Dropdown[1];
                ddl[0] = new Dropdown { name = "No payment list found", val = "0" };
                SelectList paymentModeDDL = new SelectList(ddl, "val", "name");

                var model = new PurposeSelectList()
                {
                    Result = "true",
                    PurposeofPaymentDDL = paymentModeDDL
                };
                list.Add(model);

                return Json(list);
            }
        }

        public Dropdown[] SourceFundsDDL()
        {
            using (var context = new DataAccess.GreatEastForex())
            {
                List<FundLists> fundLists = new List<FundLists>();
                fundLists = context.FundLists.Where(e => e.IsDeleted == 0).ToList();

                if (fundLists.Count > 0)
                {
                    Dropdown[] ddl = new Dropdown[fundLists.Count];
                    int count = 0;

                    foreach (var type in fundLists)
                    {
                        ddl[count] = new Dropdown { name = type.Name, val = type.ID.ToString() };
                        count++;
                    }

                    return ddl;
                }

                else
                {
                    Dropdown[] ddl = new Dropdown[1];
                    ddl[0] = new Dropdown { name = "No fund list found", val = "0" };
                    return ddl;
                }
            }
        }

        public Dropdown[] NationalityDDL()
        {
            using (var context = new DataAccess.GreatEastForex())
            {
                List<Nationalities> nationalities = new List<Nationalities>();
                nationalities = context.Nationalities.Where(e => e.IsDeleted == 0).ToList();

                if (nationalities.Count > 0)
                {
                    Dropdown[] ddl = new Dropdown[nationalities.Count];
                    int count = 0;

                    foreach (var type in nationalities)
                    {
                        ddl[count] = new Dropdown { name = type.Name, val = type.ID.ToString() };
                        count++;
                    }

                    return ddl;
                }

                else
                {
                    Dropdown[] ddl = new Dropdown[1];
                    ddl[0] = new Dropdown { name = "No nationalities found", val = "0" };
                    return ddl;
                }
            }
        }

        public Dropdown2[] BusinessCategoryDDL()
        {
            using (var context = new DataAccess.GreatEastForex())
            {
                List<BusinessCategoriesLists> BusinessCategoriesLists = new List<BusinessCategoriesLists>();
                BusinessCategoriesLists = context.BusinessCategoriesLists.Where(e => e.IsDeleted == 0).ToList();

                if (BusinessCategoriesLists.Count > 0)
                {
                    Dropdown2[] ddl = new Dropdown2[BusinessCategoriesLists.Count];
                    int count = 0;

                    foreach (var type in BusinessCategoriesLists)
                    {
                        ddl[count] = new Dropdown2 { name = type.Name, val = type.ID.ToString(), group = type.Headers };
                        count++;
                    }

                    return ddl;
                }

                else
                {
                    Dropdown2[] ddl = new Dropdown2[1];
                    ddl[0] = new Dropdown2 { name = "No business categories found", val = "0" };
                    return ddl;
                }
            }
        }

        public string GetAmount(string rowID, int getproductID, int payproductID, string Amount, int type, string currentRate, string currentFee, int cid)
        {
            decimal? getRate = 0;
            decimal? payRate = 0;
            decimal gettransactionFees = 0;
            decimal paytransactionFees = 0;
            string result = "";
            string errorMessage = "";
            var getDecimalformat = "";
            var payDecimalformat = "";
            decimal? rate = 0;
            decimal fee = 0;

            try
            {
                using (var context = new DataAccess.GreatEastForex())
                {
                    var getProduct = context.RemittanceProducts.Where(e => e.ID == getproductID).FirstOrDefault();
                    var payProduct = context.RemittanceProducts.Where(e => e.ID == payproductID).FirstOrDefault();
                    getDecimalformat = GetDecimalFormat(getProduct.ProductDecimal);
                    payDecimalformat = GetDecimalFormat(payProduct.ProductDecimal);
                    decimal convertpayrate = 0;
                    if (payProduct.PayRate != null)
                        convertpayrate = Convert.ToDecimal(payProduct.PayRate);
                    decimal convertgetrate = 0;
                    if (getProduct.GetRate != null)
                        convertgetrate = Convert.ToDecimal(getProduct.GetRate);
                    gettransactionFees = getProduct.TransactionFee;
                    paytransactionFees = payProduct.TransactionFee;
                    //if (type == 1)
                    //{
                    var finalPayProductRate = convertpayrate;
                    var finalGetProductRate = convertgetrate;
                    var payCustomRemittanceRate = context.CustomerRemittanceProductCustomRates.Where(e => e.CustomerParticularId == cid && e.RemittanceProductId == payproductID).FirstOrDefault();
                    var getCustomRemittanceRate = context.CustomerRemittanceProductCustomRates.Where(e => e.CustomerParticularId == cid && e.RemittanceProductId == getproductID).FirstOrDefault();

                    if (convertpayrate > 0)
                    {
                        if (payCustomRemittanceRate != null)
                        {
                            if (payCustomRemittanceRate.PayRateAdjustment != null && payCustomRemittanceRate.PayRateAdjustment > 0)
                            {
                                var OriginalValue = finalPayProductRate;
                                var InputValue = Convert.ToDecimal(payCustomRemittanceRate.PayRateAdjustment);
                                finalPayProductRate = OriginalValue * (1 - InputValue);
                            }
                        }
                        else if (payProduct.BuyRateAdjustment != null && payProduct.BuyRateAdjustment != 0)
                        {
                            var OriginalValue = finalPayProductRate;
                            var InputValue = Convert.ToDecimal(payProduct.BuyRateAdjustment);
                            finalPayProductRate = OriginalValue * (1 - InputValue);
                        }
                    }
                    else
                    {
                        if (payProduct.AutomatedPayRate != null)
                        {
                            finalPayProductRate = Convert.ToDecimal(payProduct.AutomatedPayRate);
                            if (payCustomRemittanceRate != null)
                            {
                                if (payCustomRemittanceRate.PayRateAdjustment != null && payCustomRemittanceRate.PayRateAdjustment > 0)
                                {
                                    var OriginalValue = finalPayProductRate;
                                    var InputValue = Convert.ToDecimal(payCustomRemittanceRate.PayRateAdjustment);
                                    finalPayProductRate = OriginalValue * (1 - InputValue);
                                }
                            }
                            else if (payProduct.BuyRateAdjustment != null && payProduct.BuyRateAdjustment != 0)
                            {
                                var OriginalValue = finalPayProductRate;
                                var InputValue = Convert.ToDecimal(payProduct.BuyRateAdjustment);
                                finalPayProductRate = OriginalValue * (1 - InputValue);
                            }
                        }
                    }
                    if (convertgetrate > 0)
                    {
                        if (getCustomRemittanceRate != null)
                        {
                            if (getCustomRemittanceRate.GetRateAdjustment != null && getCustomRemittanceRate.GetRateAdjustment > 0)
                            {
                                var OriginalValue = finalGetProductRate;
                                var InputValue = Convert.ToDecimal(getCustomRemittanceRate.GetRateAdjustment);
                                finalGetProductRate = OriginalValue * (1 + InputValue);
                            }
                        }
                        else if (getProduct.SellRateAdjustment != null && getProduct.SellRateAdjustment != 0)
                        {
                            var OriginalValue = finalGetProductRate;
                            var InputValue = Convert.ToDecimal(getProduct.SellRateAdjustment);
                            finalGetProductRate = OriginalValue * (1 + InputValue);
                        }
                    }
                    else
                    {
                        if (getProduct.AutomatedGetRate != null)
                        {
                            finalGetProductRate = Convert.ToDecimal(getProduct.AutomatedGetRate);
                            if (getCustomRemittanceRate != null)
                            {
                                if (getCustomRemittanceRate.GetRateAdjustment != null && getCustomRemittanceRate.GetRateAdjustment > 0)
                                {
                                    var OriginalValue = finalGetProductRate;
                                    var InputValue = Convert.ToDecimal(getCustomRemittanceRate.GetRateAdjustment);
                                    finalGetProductRate = OriginalValue * (1 + InputValue);
                                }
                            }
                            else if (getProduct.SellRateAdjustment != null && getProduct.SellRateAdjustment != 0)
                            {
                                var OriginalValue = finalGetProductRate;
                                var InputValue = Convert.ToDecimal(getProduct.SellRateAdjustment);
                                finalGetProductRate = OriginalValue * (1 + InputValue);
                            }
                        }
                    }
                    //rate = convertgetrate / convertpayrate;
                    rate = finalGetProductRate / finalPayProductRate;
					//fee = paytransactionFees;
					fee = gettransactionFees / (finalPayProductRate / 1);
                    //}
                    //else
                    //{
                    //    if (!string.IsNullOrEmpty(currentRate))
                    //        rate = Convert.ToDecimal(currentRate);
                    //    else
                    //        rate = convertpayrate / convertgetrate;
                    //    if (!string.IsNullOrEmpty(currentFee))
                    //        fee = Convert.ToDecimal(currentFee);
                    //    else
                    //        fee = paytransactionFees;
                    //}
                    //rate = payRate / getRate;
                    //payRate = Convert.ToDecimal(convertpayrate);
                    payRate = Convert.ToDecimal(finalPayProductRate.ToString(GetDecimalFormat(rateDP)));
                    //getRate = Convert.ToDecimal(convertgetrate);
                    getRate = Convert.ToDecimal(finalGetProductRate.ToString(GetDecimalFormat(rateDP)));
                }
                string stringRate = Convert.ToDecimal(rate).ToString(GetDecimalFormat(rateDP));
                string stringFee = fee.ToString(payDecimalformat);
                if (errorMessage == "")
                {

                    result = "{\"Result\":true,\"PayRate\":\"" + payRate + "\",\"GetRate\":\"" + getRate +
                        "\",\"GetTransactionFees\":\"" + gettransactionFees + "\",\"PayTransactionFees\":\"" + paytransactionFees + "\",\"GetDecimalFormat\":\"" + getDecimalformat +
                         "\",\"PayDecimalFormat\":\"" + payDecimalformat + "\",\"rate\":\"" + stringRate + "\",\"fee\":\"" + fee + "\"}";
                }
                else
                {
                    result = "{\"Result\":false,\"ErrorMessage\":\"" + errorMessage + "\"}";
                }
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        [HttpPost]
        public JsonResult GetAmount2(int type, FormCollection form)
        {
            //decimal? getRate = 0;
            //decimal? payRate = 0;
            //decimal gettransactionFees = 0;
            decimal paytransactionFees = 0;
            string result = "";
            string errorMessage = "";
            //var getDecimalformat = "";
            //var payDecimalformat = "";
            var firstpaycurrency = Convert.ToInt32(form["Transaction_PayCurrency_" + 1]);
            var payproductID = Convert.ToInt32(form["Transaction_PayCurrency_" + 1]);
            //Calculate Total Amount
            List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_PayCurrency_")).ToList();
            List<PayCurrencyApproval> payCurrencyApprovals = new List<PayCurrencyApproval>();
            var model = new PayCurrencyApproval();
            int cid = Convert.ToInt32(form["sales.CustomerParticularId"]);
            try
            {
                using (var context = new DataAccess.GreatEastForex())
                {
                    var payProduct = context.RemittanceProducts.Where(e => e.ID == firstpaycurrency).FirstOrDefault();
                    foreach (string key in amountForeignKeys)
                    {
                        paytransactionFees = 0;
                        string rid = key.Split('_')[2];
                        decimal payAmountForm = 1;
                        if (!string.IsNullOrEmpty(form["Transaction_PayAmount_" + rid]))
                            payAmountForm = Convert.ToDecimal(form["Transaction_PayAmount_" + rid]);
                        int getCurrencyForm = Convert.ToInt32(form["Transaction_GetCurrency_" + rid]);

                        var getProduct = context.RemittanceProducts.Where(e => e.ID == getCurrencyForm).FirstOrDefault();
                        decimal payRate = 0;
                        if (payProduct.PayRate != null)
                            payRate = Convert.ToDecimal(payProduct.PayRate);
                        decimal getRate = 0;
                        if (getProduct.GetRate != null)
                            getRate = Convert.ToDecimal(getProduct.GetRate);
                        var payDecimalformat = GetDecimalFormat(payProduct.ProductDecimal);
                        var getFeeForm = (form["Transaction_Fee_" + rid]).ToString();
                        decimal? finalrate = 1.00M;
                        decimal amount = 1.00M;
                        decimal rate = 1.00M;
                        var getDecimalformat = GetDecimalFormat(getProduct.ProductDecimal);
                        var gettransactionFees = getProduct.TransactionFee;

                        if (type == 1)
                        {
							paytransactionFees = Convert.ToDecimal(getFeeForm);
						}

                        //calculate GetAmount                        
                        decimal calculateGetAmount = 1;
                        if (payAmountForm > 0)
                            calculateGetAmount = payAmountForm - paytransactionFees;
                        //finalrate = calculateGetAmount / payRate;
                        //amount = (Convert.ToDecimal(finalrate) * Convert.ToDecimal(getRate));
                        var payCustomRemittanceRate = context.CustomerRemittanceProductCustomRates.Where(e => e.CustomerParticularId == cid && e.RemittanceProductId == payproductID).FirstOrDefault();
                        var getCustomRemittanceRate = context.CustomerRemittanceProductCustomRates.Where(e => e.CustomerParticularId == cid && e.RemittanceProductId == getProduct.ID).FirstOrDefault();

                        var finalPayProductRate = payRate;
                        var finalGetProductRate = getRate;
                        if (payRate > 0)
                        {
                            if (payCustomRemittanceRate != null)
                            {
                                if (payCustomRemittanceRate.PayRateAdjustment != null && payCustomRemittanceRate.PayRateAdjustment > 0)
                                {
                                    var OriginalValue = finalPayProductRate;
                                    var InputValue = Convert.ToDecimal(payCustomRemittanceRate.PayRateAdjustment);
                                    finalPayProductRate = OriginalValue * (1 - InputValue);
                                }
                            }
                            else if (payProduct.BuyRateAdjustment != null && payProduct.BuyRateAdjustment != 0)
                            {
                                var OriginalValue = finalPayProductRate;
                                var InputValue = Convert.ToDecimal(payProduct.BuyRateAdjustment);
                                finalPayProductRate = OriginalValue * (1 - InputValue);
                            }
                        }
                        else
                        {
                            if (payProduct.AutomatedPayRate != null)
                            {
                                finalPayProductRate = Convert.ToDecimal(payProduct.AutomatedPayRate);
                                if (payCustomRemittanceRate != null)
                                {
                                    if (payCustomRemittanceRate.PayRateAdjustment != null && payCustomRemittanceRate.PayRateAdjustment > 0)
                                    {
                                        var OriginalValue = finalPayProductRate;
                                        var InputValue = Convert.ToDecimal(payCustomRemittanceRate.PayRateAdjustment);
                                        finalPayProductRate = OriginalValue * (1 - InputValue);
                                    }
                                }
                                else if (payProduct.BuyRateAdjustment != null && payProduct.BuyRateAdjustment != 0)
                                {
                                    var OriginalValue = finalPayProductRate;
                                    var InputValue = Convert.ToDecimal(payProduct.BuyRateAdjustment);
                                    finalPayProductRate = OriginalValue * (1 - InputValue);
                                }
                            }
                        }
                        if (getRate > 0)
                        {
                            if (getCustomRemittanceRate != null)
                            {
                                if (getCustomRemittanceRate.GetRateAdjustment != null && getCustomRemittanceRate.GetRateAdjustment > 0)
                                {
                                    var OriginalValue = finalGetProductRate;
                                    var InputValue = Convert.ToDecimal(getCustomRemittanceRate.GetRateAdjustment);
                                    finalGetProductRate = OriginalValue * (1 + InputValue);
                                }
                            }
                            else if (getProduct.SellRateAdjustment != null && getProduct.SellRateAdjustment != 0)
                            {
                                var OriginalValue = finalGetProductRate;
                                var InputValue = Convert.ToDecimal(getProduct.SellRateAdjustment);
                                finalGetProductRate = OriginalValue * (1 + InputValue);
                            }
                        }
                        else
                        {
                            if (getProduct.AutomatedGetRate != null)
                            {
                                finalGetProductRate = Convert.ToDecimal(getProduct.AutomatedGetRate);
                                if (getCustomRemittanceRate != null)
                                {
                                    if (getCustomRemittanceRate.GetRateAdjustment != null && getCustomRemittanceRate.GetRateAdjustment > 0)
                                    {
                                        var OriginalValue = finalGetProductRate;
                                        var InputValue = Convert.ToDecimal(getCustomRemittanceRate.GetRateAdjustment);
                                        finalGetProductRate = OriginalValue * (1 + InputValue);
                                    }
                                }
                                else if (getProduct.SellRateAdjustment != null && getProduct.SellRateAdjustment != 0)
                                {
                                    var OriginalValue = finalGetProductRate;
                                    var InputValue = Convert.ToDecimal(getProduct.SellRateAdjustment);
                                    finalGetProductRate = OriginalValue * (1 + InputValue);
                                }
                            }
                        }
                        //rate = (Convert.ToDecimal(getRate) / Convert.ToDecimal(payRate));
                        rate = finalGetProductRate / finalPayProductRate;
                        amount = (calculateGetAmount / rate);
                        //transactionFee = (gettransactionfees / getrate);
                        var GetAmount = amount.ToString(getDecimalformat);
                        var finalRateAmount = rate.ToString(GetDecimalFormat(rateDP));
						//string finalTransactionFee = paytransactionFees.ToString(payDecimalformat);
						//paytransactionFees / finalPayProductRate

						string finalTransactionFee = getFeeForm;//(gettransactionFees / finalPayProductRate).ToString(payDecimalformat);

						if (type == 1)
						{
							finalTransactionFee = (gettransactionFees / finalPayProductRate).ToString(payDecimalformat);
						}

						//calculate GetAmount

						model = new PayCurrencyApproval()
                        {
                            RowID = rid,
                            PayAmount = payAmountForm.ToString(payDecimalformat),
                            GetAmount = GetAmount,
                            GetRate = finalGetProductRate.ToString(GetDecimalFormat(rateDP)),
                            Fee = finalTransactionFee,
                            GettransactionFees = gettransactionFees.ToString(GetDecimalFormat(rateDP)),
                            PayRate = finalPayProductRate.ToString(GetDecimalFormat(rateDP)),
                            PaytransactionFees = payProduct.TransactionFee.ToString(),
                            GetDecimalformat = getDecimalformat,
                            PayDecimalformat = payDecimalformat,
                            Rate = finalRateAmount,
                            PayProductID = payproductID.ToString(),
                            GetProductID = getCurrencyForm.ToString(),
                            Type = type
                        };

                        payCurrencyApprovals.Add(model);
                    }
                }

                //if (errorMessage == "")
                //{

                //    result = "{\"Result\":true,\"PayRate\":\"" + payRate + "\",\"GetRate\":\"" + getRate +
                //        "\",\"GetTransactionFees\":\"" + gettransactionFees + "\",\"PayTransactionFees\":\"" + paytransactionFees + "\",\"GetDecimalFormat\":\"" + getDecimalformat +
                //         "\",\"PayDecimalFormat\":\"" + payDecimalformat + "\"}";
                //}
                //else
                //{
                //    result = "{\"Result\":false,\"ErrorMessage\":\"" + errorMessage + "\"}";
                //}
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
                return Json(result);
            }

            return Json(payCurrencyApprovals);
        }

        [HttpPost]
        public string calculateAmount(int type, decimal payrate, decimal getrate, decimal paytransactionfees, string payamount = "0", string getamount = "0", string paydec = "", string getdec = "", string currentRate = "")
        {
            decimal amount = 0;
            decimal finalrate = 0;
            decimal rate = 0;
            decimal transactionFee = 0;
            string finalAmount = "0";
            string finalRateAmount = "0";
            string finalTransactionFee = "0";
            string errorMessage = "";
            string result = "";
            decimal payamout_convert = 0;
            decimal getamout_convert = 0;
            if (string.IsNullOrEmpty(payamount))
            {
                payamount = "0";
            }
            if (string.IsNullOrEmpty(getamount))
            {
                getamount = "0";
            }
            payamout_convert = Convert.ToDecimal(payamount);
            getamout_convert = Convert.ToDecimal(getamount);
            try
            {
                if (type == 1)
                {
					//Calculate Get Amount
                    if (!string.IsNullOrEmpty(currentRate))
                    {
                        if (Convert.ToDecimal(currentRate) > 0)
                        {
                            rate = Convert.ToDecimal(currentRate);
                            payamout_convert = payamout_convert - paytransactionfees;
                            //finalrate = payamout_convert * payrate;
                            amount = payamout_convert / rate;
                            //amount = ((finalrate / getrate) - (gettransactionfees / getrate));
                            //transactionFee = (gettransactionfees / getrate);
                            finalAmount = amount.ToString(getdec);
                            finalRateAmount = rate.ToString(GetDecimalFormat(rateDP));
                            finalTransactionFee = paytransactionfees.ToString(paydec);
                        }
                        else
                        {
                            payamout_convert = payamout_convert - paytransactionfees;
                            //finalrate = payamout_convert / payrate;
                            //amount = (finalrate * getrate);
                            //amount = ((finalrate / getrate) - (gettransactionfees / getrate));
                            rate = (getrate / payrate);
                            amount = (payamout_convert / rate);
                            transactionFee = paytransactionfees;
                            //transactionFee = (gettransactionfees / getrate);
                            finalAmount = amount.ToString(getdec);
                            finalRateAmount = rate.ToString(GetDecimalFormat(rateDP));
                            finalTransactionFee = transactionFee.ToString(paydec);
                        }
                    }

                    else
                    {
                        payamout_convert = payamout_convert - paytransactionfees;
                        //finalrate = payamout_convert / payrate;
                        //amount = (finalrate * getrate);
                        //amount = ((finalrate / getrate) - (gettransactionfees / getrate));
                        rate = (getrate / payrate);
                        amount = (payamout_convert / rate);
                        transactionFee = paytransactionfees;
                        //transactionFee = (gettransactionfees / getrate);
                        finalAmount = amount.ToString(getdec);
                        finalRateAmount = rate.ToString(GetDecimalFormat(rateDP));
                        finalTransactionFee = transactionFee.ToString(paydec);
                    }
                }
                else if (type == 2)
                {
					//Calculate Pay Amount
                    if (getamout_convert != 0)
                    {
                        if (!string.IsNullOrEmpty(currentRate))
                        {
                            if (Convert.ToDecimal(currentRate) > 0)
                            {
                                rate = Convert.ToDecimal(currentRate);
                                getamout_convert = getamout_convert * rate;
                                //finalrate = payamout_convert * payrate;
                                amount = getamout_convert + paytransactionfees;
                                //amount = ((finalrate / getrate) - (gettransactionfees / getrate));
                                //transactionFee = (gettransactionfees / getrate);
                                finalAmount = amount.ToString(paydec);
                                finalRateAmount = rate.ToString(GetDecimalFormat(rateDP));
                                finalTransactionFee = paytransactionfees.ToString(paydec);
                            }
                            else
                            {
                                //finalrate = getamout_convert / payrate;
                                //amount = (finalrate / getrate) + paytransactionfees;
                                //amount = (finalrate * getrate) + (gettransactionfees / payrate);
                                rate = (getrate / payrate);
                                finalrate = getamout_convert * rate;
                                amount = finalrate + paytransactionfees;
                                transactionFee = paytransactionfees;
                                //transactionFee = (gettransactionfees / getrate);
                                finalAmount = amount.ToString(paydec);
                                finalRateAmount = rate.ToString(GetDecimalFormat(rateDP));
                                finalTransactionFee = transactionFee.ToString(paydec);
                            }
                        }

                        else
                        {
                            //finalrate = getamout_convert / payrate;
                            //amount = (finalrate / getrate) + paytransactionfees;
                            //amount = (finalrate * getrate) + (gettransactionfees / payrate);
                            rate = (getrate / payrate);
                            finalrate = getamout_convert * rate;
                            amount = finalrate + paytransactionfees;
                            transactionFee = paytransactionfees;
                            //transactionFee = (gettransactionfees / getrate);
                            finalAmount = amount.ToString(paydec);
                            finalRateAmount = rate.ToString(GetDecimalFormat(rateDP));
                            finalTransactionFee = transactionFee.ToString(paydec);
                        }

                    }

                }
                else if (type == 4)
                {
                    if (!string.IsNullOrEmpty(currentRate))
                    {
                        if (getamout_convert != 0)
                        //if (payamout_convert != 0)
                        {
                            if (!string.IsNullOrEmpty(currentRate))
                            {
                                rate = Convert.ToDecimal(currentRate);
                                //payamout_convert = payamout_convert - paytransactionfees;
                                //finalrate = payamout_convert * payrate;
                                //amount = payamout_convert / rate;
                                amount = (getamout_convert * rate) + paytransactionfees;
                                //amount = ((finalrate / getrate) - (gettransactionfees / getrate));
                                //transactionFee = (gettransactionfees / getrate);
                                finalAmount = amount.ToString(paydec);
                                finalRateAmount = rate.ToString(GetDecimalFormat(rateDP));
                                finalTransactionFee = paytransactionfees.ToString(paydec);
                            }

                        }
                    }
                }
                else
                {
                    if (getamout_convert != 0)
                    //if (payamout_convert != 0)
                    {
                        if (!string.IsNullOrEmpty(currentRate))
                        {
                            if (Convert.ToDecimal(currentRate) > 0)
                            {
                                rate = Convert.ToDecimal(currentRate);
                            }
                            else
                            {
                                rate = (getrate / payrate);
                            }
                        }

                        var getFee = paytransactionfees / rate;
                        //payamout_convert = payamout_convert - paytransactionfees;
                        //finalrate = payamout_convert * payrate;
                        //amount = (finalrate / getrate);
                        //amount = payamout_convert / rate;
                        amount = (getamout_convert * rate) + paytransactionfees;
                        //amount = ((finalrate / getrate) - (gettransactionfees / getrate));
                        //transactionFee = (gettransactionfees / getrate);
                        finalAmount = amount.ToString(paydec);
                        finalRateAmount = rate.ToString(GetDecimalFormat(rateDP));
                        finalTransactionFee = paytransactionfees.ToString(paydec);
                    }
                }

                if (errorMessage == "")
                {

                    result = "{\"Result\":true,\"amount\":\"" + finalAmount + "\",\"rate\":\"" + finalRateAmount +
                        "\",\"transactionfee\":\"" + finalTransactionFee + "\"}";
                }
                else
                {
                    result = "{\"Result\":false,\"ErrorMessage\":\"" + errorMessage + "\"}";
                }
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: BulkUploader
        [HttpPost]
        public ActionResult BulkUploader(int transactionCount, int CheckFirstItemCurrency, int customerID)
        {
            RemittanceBulkUploadClassRoot RootClass = new RemittanceBulkUploadClassRoot();
            List<RemittanceBulkUploadClass> ListOfItem = new List<RemittanceBulkUploadClass>();
            RemittanceBulkUploadClass singleItem = new RemittanceBulkUploadClass();

            try
            {
                RootClass.success = false;

                if (Request.Files.Count > 0)
                {
                    foreach (string key in Request.Files)
                    {
                        HttpPostedFileBase attachment = Request.Files[key];

                        if (!string.IsNullOrEmpty(attachment.FileName))
                        {
                            string mimeType = attachment.ContentType;
                            int fileLength = attachment.ContentLength;

                            string[] allowedTypes = ConfigurationManager.AppSettings["AllowedBulkOrderFileTypes"].ToString().Split(',');

                            if (allowedTypes.Contains(mimeType))
                            {
                                using (var package = new ExcelPackage(attachment.InputStream))
                                {
                                    var currentSheet = package.Workbook.Worksheets;
                                    var workSheet = currentSheet.First();
                                    var noOfCol = workSheet.Dimension.End.Column;
                                    var noOfRow = workSheet.Dimension.End.Row;
                                    int Error = 0;

                                    using (var context = new DataAccess.GreatEastForex())
                                    {
                                        int CustomerId = Convert.ToInt32(Session["CustomerId"]);
                                        var getTransactionType = context.RemittanceProducts.Where(e => e.IsDeleted == "N" && e.TransactionTypeAllowed != null && e.Status == "Active").ToList();
                                        var getTransactionPay = getTransactionType.Where(e => e.TransactionTypeAllowed.Contains("Pay")).ToList();
                                        var getTransactionGet = getTransactionType.Where(e => e.TransactionTypeAllowed.Contains("Get")).ToList();
                                        var getPaymentModeList = context.PaymentModeLists.Where(e => e.IsDeleted == 0).ToList();
                                        var getDepositAccountList = context.PayBankLists.Where(e => e.IsDeleted == 0).ToList();
                                        var getCountryList = context.Countries.Where(e => e.IsDeleted == 0).ToList();
                                        var getPurposeOfPaymentList = context.PaymentLists.Where(e => e.IsDeleted == 0).ToList();
                                        var getSourceOfPaymentList = context.FundLists.Where(e => e.IsDeleted == 0).ToList();
                                        var getNationalityList = context.Nationalities.Where(e => e.IsDeleted == 0).ToList();
                                        var getBusinessCategoryList = context.BusinessCategoriesLists.Where(e => e.IsDeleted == 0).ToList();
                                        var getCustomFee = context.CustomerRemittanceProductCustomRates.Where(e => e.CustomerParticularId == CustomerId).ToList();
                                        var getSupportingDocumentTypeList = context.SupportingDocumentTypeLists.Where(e => e.IsDeleted == 0).ToList();

                                        string[] TypeOfBeneficiary = { "business", "individual" };
                                        string[] TypeOfBank = { "bank code", "swift code" };

                                        //Max loop 50 items only (will skip the first row - first row is title, so total 51)
                                        for (int rowIterator = 2; rowIterator <= noOfRow; rowIterator++)
                                        {
                                            if (Error == 1)
                                            {
                                                break;
                                            }

                                            if (rowIterator >= 51)
                                            {
                                                break;
                                            }

                                            singleItem = new RemittanceBulkUploadClass();

                                            if (string.IsNullOrEmpty(workSheet?.Cells[rowIterator, 2]?.Value?.ToString().Trim()))
                                            {
                                                Error = 1;
                                                RootClass.NoOfErrorRow = rowIterator;
                                                RootClass.error = "Pay Currency Cannot be empty.";
                                                break;
                                            }
                                            else
                                            {
                                                if (workSheet.Cells[rowIterator, 2].Value.ToString().Trim().Length > 250)
                                                {
                                                    Error = 1;
                                                    RootClass.NoOfErrorRow = rowIterator;
                                                    RootClass.error = "Pay Currency cannot more than 250 characters.";
                                                    break;
                                                }
                                                else
                                                {
                                                    //check the pay currency is exist in db or not.
                                                    var checkCurrency = getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault();

                                                    if (checkCurrency == null)
                                                    {
                                                        Error = 1;
                                                        RootClass.NoOfErrorRow = rowIterator;
                                                        RootClass.error = "Invalid Pay Currency.";
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        //this is check if table have more than 1 transaction, need to same pay currency then only can add.
                                                        if (CheckFirstItemCurrency > 0)
                                                        {
                                                            if (CheckFirstItemCurrency != getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().ID)
                                                            {
                                                                Error = 1;
                                                                RootClass.NoOfErrorRow = rowIterator;
                                                                RootClass.error = "Different Pay Currency is not allowed in an order.";
                                                                break;
                                                            }
                                                            else
                                                            {
                                                                CheckFirstItemCurrency = getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().ID;//this is to loop inside pay currency check must be same
                                                                singleItem.PayCurrencyID = getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().ID;
                                                                //singleItem.PayCurrencyCode = getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().CurrencyCode;
                                                                //singleItem.PayCurrencyName = getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().CurrencyCode + " - " + getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().CurrencyName;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            CheckFirstItemCurrency = getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().ID;
                                                            singleItem.PayCurrencyID = getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().ID;
                                                            //singleItem.PayCurrencyCode = getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().CurrencyCode;
                                                            //singleItem.PayCurrencyName = getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().CurrencyCode + " - " + getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().CurrencyName;
                                                        }
                                                    }
                                                }
                                            }

                                            if (string.IsNullOrEmpty(workSheet?.Cells[rowIterator, 4]?.Value?.ToString().Trim()))
                                            {
                                                Error = 1;
                                                RootClass.NoOfErrorRow = rowIterator;
                                                RootClass.error = "Get Currency Cannot be empty.";
                                                break;
                                            }
                                            else
                                            {
                                                if (workSheet.Cells[rowIterator, 4].Value.ToString().Trim().Length > 250)
                                                {
                                                    Error = 1;
                                                    RootClass.NoOfErrorRow = rowIterator;
                                                    RootClass.error = "Get Currency cannot more than 250 characters.";
                                                    break;
                                                }
                                                else
                                                {
                                                    //check the pay currency is exist in db or not.
                                                    var checkCurrency = getTransactionGet.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 4].Value.ToString().Trim()).FirstOrDefault();

                                                    if (checkCurrency == null)
                                                    {
                                                        Error = 1;
                                                        RootClass.NoOfErrorRow = rowIterator;
                                                        RootClass.error = "Invalid Get Currency.";
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        singleItem.GetCurrencyID = getTransactionGet.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 4].Value.ToString().Trim()).FirstOrDefault().ID;
                                                        //singleItem.GetCurrencyCode = getTransactionGet.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 4].Value.ToString().Trim()).FirstOrDefault().CurrencyCode;
                                                        //singleItem.GetCurrencyName = getTransactionGet.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 4].Value.ToString().Trim()).FirstOrDefault().CurrencyCode + " - " + getTransactionGet.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 4].Value.ToString().Trim()).FirstOrDefault().CurrencyName;
                                                    }
                                                }
                                            }

                                            if (singleItem.PayCurrencyID != 0 && singleItem.PayCurrencyID != 0)
                                            {
                                                if (singleItem.PayCurrencyID == singleItem.GetCurrencyID)
                                                {
                                                    Error = 1;
                                                    RootClass.NoOfErrorRow = rowIterator;
                                                    RootClass.error = "You Pay Currency cannot same with You Get Currency.";
                                                    break;
                                                }
                                            }


                                            if (string.IsNullOrEmpty(workSheet?.Cells[rowIterator, 3]?.Value?.ToString().Trim()))
                                            {
                                                if (string.IsNullOrEmpty(workSheet?.Cells[rowIterator, 5]?.Value?.ToString().Trim()))
                                                {
                                                    Error = 1;
                                                    RootClass.NoOfErrorRow = rowIterator;
                                                    RootClass.error = "Both Amount cannot be empty.";
                                                    break;
                                                }
                                                else
                                                {
                                                    //Pay Empty but Get got value
                                                    //Use Get Amount to calculate Pay Amount
                                                    if (workSheet.Cells[rowIterator, 5].Value.ToString().Trim().Length > 12)
                                                    {
                                                        Error = 1;
                                                        RootClass.NoOfErrorRow = rowIterator;
                                                        RootClass.error = "You Get Amount length cannot more than 12.";
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        var checkGet = FormValidationHelper.AmountValidation(workSheet.Cells[rowIterator, 5].Value.ToString().Trim());

                                                        if (!checkGet)
                                                        {
                                                            Error = 1;
                                                            RootClass.NoOfErrorRow = rowIterator;
                                                            RootClass.error = "Invalid Get Amount.";
                                                            break;
                                                        }

                                                        if (getTransactionGet.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 4].Value.ToString().Trim()).FirstOrDefault().MaxAmount != 0)
                                                        {
                                                            string[] a = workSheet.Cells[rowIterator, 5].Value.ToString().Trim().Split(new char[] { '.' });

                                                            if (a.Length > 1)
                                                            {
                                                                int decimals = a[1].Length;

                                                                if (decimals > getTransactionGet.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 4].Value.ToString().Trim()).FirstOrDefault().ProductDecimal)
                                                                {
                                                                    Error = 1;
                                                                    RootClass.NoOfErrorRow = rowIterator;
                                                                    RootClass.error = "You Get Amount decimal place cannot more than " + getTransactionGet.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 4].Value.ToString().Trim()).FirstOrDefault().ProductDecimal;
                                                                    break;
                                                                }
                                                            }

                                                            //if (getTransactionGet.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 4].Value.ToString().Trim()).FirstOrDefault().MaxAmount > 0)
                                                            //{
                                                            //    if (Convert.ToDecimal(workSheet.Cells[rowIterator, 5].Value.ToString().Trim()) > getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 4].Value.ToString().Trim()).FirstOrDefault().MaxAmount)
                                                            //    {
                                                            //        Error = 1;
                                                            //        RootClass.NoOfErrorRow = rowIterator;
                                                            //        RootClass.error = "You Get Amount cannot more than " + getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 4].Value.ToString().Trim()).FirstOrDefault().MaxAmount;
                                                            //        break;
                                                            //    }
                                                            //}
                                                        }

														//gettransactionFees / (finalPayProductRate / 1);

														singleItem.GetAmount = Convert.ToDecimal(workSheet.Cells[rowIterator, 5].Value.ToString().Trim().ToString());
                                                        //decimal? PayTransactionFee = getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().TransactionFee;
														decimal? PayTransactionFee = getTransactionGet.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 4].Value.ToString().Trim()).FirstOrDefault().TransactionFee;
														//var checkCustomFee = getCustomFee.Where(e => e.RemittanceProductId == singleItem.PayCurrency).FirstOrDefault();

														//if (checkCustomFee != null)
														//{
														//    PayTransactionFee = checkCustomFee.Fee;
														//}

														decimal? PayRate = getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().PayRate;
                                                        decimal? GetRate = getTransactionGet.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 4].Value.ToString().Trim()).FirstOrDefault().GetRate;
                                                        int PayDecimal = getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().ProductDecimal;
                                                        int GetDecimal = getTransactionGet.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 4].Value.ToString().Trim()).FirstOrDefault().ProductDecimal;
                                                        singleItem.payDecimalFormat = GetDecimalFormat(PayDecimal);
                                                        singleItem.getDecimalFormat = GetDecimalFormat(GetDecimal);
                                                        //singleItem.PayDecimal = PayDecimal;
                                                        //singleItem.GetDecimal = GetDecimal;
                                                        var finalPayProductRate = PayRate;
                                                        var getPay = getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault();
                                                        var getGet = getTransactionGet.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 4].Value.ToString().Trim()).FirstOrDefault();
                                                        var payCustomRemittanceRate = context.CustomerRemittanceProductCustomRates.Where(e => e.CustomerParticularId == customerID && e.RemittanceProductId == getPay.ID).FirstOrDefault();
                                                        var finalGetProductRate = GetRate;
                                                        var getCustomRemittanceRate = context.CustomerRemittanceProductCustomRates.Where(e => e.CustomerParticularId == customerID && e.RemittanceProductId == getGet.ID).FirstOrDefault();

                                                        if (PayRate == null)
                                                        {
                                                            finalPayProductRate = getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().AutomatedPayRate;
                                                            if (payCustomRemittanceRate != null)
                                                            {
                                                                if (payCustomRemittanceRate.PayRateAdjustment != null && payCustomRemittanceRate.PayRateAdjustment > 0)
                                                                {
                                                                    var OriginalValue = finalPayProductRate;
                                                                    var InputValue = Convert.ToDecimal(payCustomRemittanceRate.PayRateAdjustment);
                                                                    finalPayProductRate = OriginalValue * (1 - InputValue);
                                                                }
                                                            }
                                                            else if (getPay.BuyRateAdjustment != null && getPay.BuyRateAdjustment != 0)
                                                            {
                                                                var OriginalValue = finalPayProductRate;
                                                                var InputValue = Convert.ToDecimal(getPay.BuyRateAdjustment);
                                                                finalPayProductRate = OriginalValue * (1 - InputValue);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (payCustomRemittanceRate != null)
                                                            {
                                                                if (payCustomRemittanceRate.PayRateAdjustment != null && payCustomRemittanceRate.PayRateAdjustment > 0)
                                                                {
                                                                    var OriginalValue = finalPayProductRate;
                                                                    var InputValue = Convert.ToDecimal(payCustomRemittanceRate.PayRateAdjustment);
                                                                    finalPayProductRate = OriginalValue * (1 - InputValue);
                                                                }
                                                            }
                                                            else if (getPay.BuyRateAdjustment != null && getPay.BuyRateAdjustment != 0)
                                                            {
                                                                var OriginalValue = finalPayProductRate;
                                                                var InputValue = Convert.ToDecimal(getPay.BuyRateAdjustment);
                                                                finalPayProductRate = OriginalValue * (1 - InputValue);
                                                            }
                                                        }

                                                        if (GetRate == null)
                                                        {
                                                            finalGetProductRate = getTransactionGet.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 4].Value.ToString().Trim()).FirstOrDefault().AutomatedGetRate;
                                                            if (getCustomRemittanceRate != null)
                                                            {
                                                                if (getCustomRemittanceRate.GetRateAdjustment != null && getCustomRemittanceRate.GetRateAdjustment > 0)
                                                                {
                                                                    var OriginalValue = finalGetProductRate;
                                                                    var InputValue = Convert.ToDecimal(getCustomRemittanceRate.GetRateAdjustment);
                                                                    finalGetProductRate = OriginalValue * (1 + InputValue);
                                                                }
                                                            }
                                                            else if (getGet.SellRateAdjustment != null && getGet.SellRateAdjustment != 0)
                                                            {
                                                                var OriginalValue = finalGetProductRate;
                                                                var InputValue = Convert.ToDecimal(getGet.SellRateAdjustment);
                                                                finalGetProductRate = OriginalValue * (1 + InputValue);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (getCustomRemittanceRate != null)
                                                            {
                                                                if (getCustomRemittanceRate.GetRateAdjustment != null && getCustomRemittanceRate.GetRateAdjustment > 0)
                                                                {
                                                                    var OriginalValue = finalGetProductRate;
                                                                    var InputValue = Convert.ToDecimal(getCustomRemittanceRate.GetRateAdjustment);
                                                                    finalGetProductRate = OriginalValue * (1 + InputValue);
                                                                }
                                                            }
                                                            else if (getGet.SellRateAdjustment != null && getGet.SellRateAdjustment != 0)
                                                            {
                                                                var OriginalValue = finalGetProductRate;
                                                                var InputValue = Convert.ToDecimal(getGet.SellRateAdjustment);
                                                                finalGetProductRate = OriginalValue * (1 + InputValue);
                                                            }
                                                        }

														//(Number($("#Get_Amount").val()) / Number($("#PayRate_Hidden").val()) * Number($("#GetRate_Hidden").val())) + (Number($("#GetTransactionFee_Hidden").val()) / Number($("#PayRate_Hidden").val()));
														//decimal CalculatedPayAmount = ((singleItem.GetAmount / PayRate * GetRate) + (GetTransactionFee / PayRate)) ?? 0;

														var CalculateFinalRate = (PayTransactionFee / finalPayProductRate);

														//decimal CalculatedPayAmount = ((Convert.ToDecimal(singleItem.GetAmount) * (finalGetProductRate / finalPayProductRate))) + PayTransactionFee ?? 0;
														decimal CalculatedPayAmount = ((Convert.ToDecimal(singleItem.GetAmount) * (finalGetProductRate / finalPayProductRate))) + CalculateFinalRate ?? 0;
														singleItem.PayAmount = Convert.ToDecimal((CalculatedPayAmount).ToString(GetDecimalFormat(PayDecimal)));
                                                        var GetFinalStoredRate = (finalGetProductRate / finalPayProductRate) ?? 0;
                                                        singleItem.Rate = GetFinalStoredRate.ToString(GetDecimalFormat(12));
                                                        singleItem.Payrate = Convert.ToDecimal(finalPayProductRate);
                                                        singleItem.GetRate = Convert.ToDecimal(finalGetProductRate);
                                                        singleItem.PayTransactionFee = CalculateFinalRate ?? 0;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                //direct use Pay amount to calculate Get Amount

                                                if (workSheet.Cells[rowIterator, 3].Value.ToString().Trim().Length > 12)
                                                {
                                                    Error = 1;
                                                    RootClass.NoOfErrorRow = rowIterator;
                                                    RootClass.error = "You Pay Amount length cannot more than 12.";
                                                    break;
                                                }
                                                else
                                                {
                                                    var checkPay = FormValidationHelper.AmountValidation(workSheet.Cells[rowIterator, 3].Value.ToString().Trim());

                                                    if (!checkPay)
                                                    {
                                                        Error = 1;
                                                        RootClass.NoOfErrorRow = rowIterator;
                                                        RootClass.error = "Invalid You Pay Amount.";
                                                        break;
                                                    }

                                                    //if (getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().MaxAmount != 0)
                                                    //{
                                                    //    string[] a = workSheet.Cells[rowIterator, 3].Value.ToString().Trim().Split(new char[] { '.' });

                                                    //    if (a.Length > 1)
                                                    //    {
                                                    //        int decimals = a[1].Length;

                                                    //        if (decimals > getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().ProductDecimal)
                                                    //        {
                                                    //            Error = 1;
                                                    //            RootClass.NoOfErrorRow = rowIterator;
                                                    //            RootClass.error = "You Pay Amount digit cannot more than " + getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().ProductDecimal;
                                                    //            break;
                                                    //        }
                                                    //    }

                                                    //    if (getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().MaxAmount > 0)
                                                    //    {
                                                    //        if (Convert.ToDecimal(workSheet.Cells[rowIterator, 3].Value.ToString().Trim()) > getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().MaxAmount)
                                                    //        {
                                                    //            Error = 1;
                                                    //            RootClass.NoOfErrorRow = rowIterator;
                                                    //            RootClass.error = "You Pay Amount cannot more than " + getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().MaxAmount;
                                                    //            break;
                                                    //        }
                                                    //    }
                                                    //}

                                                    decimal? PayTransactionFee = getTransactionGet.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 4].Value.ToString().Trim()).FirstOrDefault().TransactionFee;
                                                    //var checkCustomFee = getCustomFee.Where(e => e.RemittanceProductId == singleItem.PayCurrencyID).FirstOrDefault();

                                                    //if (checkCustomFee != null)
                                                    //{
                                                    //    PayTransactionFee = checkCustomFee.Fee;
                                                    //}

                                                    //var testUpdateGetAmount = (Number($("#Pay_Amount").val()) * Number($("#PayRate_Hidden").val()) / Number($("#GetRate_Hidden").val())) - (Number($("#GetTransactionFee_Hidden").val()) / Number($("#GetRate_Hidden").val()));
                                                    singleItem.PayAmount = Convert.ToDecimal((workSheet.Cells[rowIterator, 3].Value).ToString().Trim());
                                                    decimal? PayRate = getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().PayRate;
                                                    decimal? GetRate = getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 4].Value.ToString().Trim()).FirstOrDefault().GetRate;
                                                    int PayDecimal = getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().ProductDecimal;
                                                    int GetDecimal = getTransactionGet.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 4].Value.ToString().Trim()).FirstOrDefault().ProductDecimal;
                                                    singleItem.payDecimalFormat = GetDecimalFormat(PayDecimal);
                                                    singleItem.getDecimalFormat = GetDecimalFormat(GetDecimal);
                                                    var finalPayProductRate = PayRate;
                                                    var getPay = getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault();
                                                    var getGet = getTransactionGet.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 4].Value.ToString().Trim()).FirstOrDefault();
                                                    var payCustomRemittanceRate = context.CustomerRemittanceProductCustomRates.Where(e => e.CustomerParticularId == customerID && e.RemittanceProductId == getPay.ID).FirstOrDefault();
                                                    var finalGetProductRate = GetRate;
                                                    var getCustomRemittanceRate = context.CustomerRemittanceProductCustomRates.Where(e => e.CustomerParticularId == customerID && e.RemittanceProductId == getGet.ID).FirstOrDefault();

                                                    if (PayRate == null)
                                                    {
                                                        finalPayProductRate = getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().AutomatedPayRate;
                                                        if (payCustomRemittanceRate != null)
                                                        {
                                                            if (payCustomRemittanceRate.PayRateAdjustment != null && payCustomRemittanceRate.PayRateAdjustment > 0)
                                                            {
                                                                var OriginalValue = finalPayProductRate;
                                                                var InputValue = Convert.ToDecimal(payCustomRemittanceRate.PayRateAdjustment);
                                                                finalPayProductRate = OriginalValue * (1 - InputValue);
                                                            }
                                                        }
                                                        else if (getPay.BuyRateAdjustment != null && getPay.BuyRateAdjustment != 0)
                                                        {
                                                            var OriginalValue = finalPayProductRate;
                                                            var InputValue = Convert.ToDecimal(getPay.BuyRateAdjustment);
                                                            finalPayProductRate = OriginalValue * (1 - InputValue);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (payCustomRemittanceRate != null)
                                                        {
                                                            if (payCustomRemittanceRate.PayRateAdjustment != null && payCustomRemittanceRate.PayRateAdjustment > 0)
                                                            {
                                                                var OriginalValue = finalPayProductRate;
                                                                var InputValue = Convert.ToDecimal(payCustomRemittanceRate.PayRateAdjustment);
                                                                finalPayProductRate = OriginalValue * (1 - InputValue);
                                                            }
                                                        }
                                                        else if (getPay.BuyRateAdjustment != null && getPay.BuyRateAdjustment != 0)
                                                        {
                                                            var OriginalValue = finalPayProductRate;
                                                            var InputValue = Convert.ToDecimal(getPay.BuyRateAdjustment);
                                                            finalPayProductRate = OriginalValue * (1 - InputValue);
                                                        }
                                                    }

                                                    if (GetRate == null)
                                                    {
                                                        finalGetProductRate = getTransactionGet.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 4].Value.ToString().Trim()).FirstOrDefault().AutomatedGetRate;
                                                        if (getCustomRemittanceRate != null)
                                                        {
                                                            if (getCustomRemittanceRate.GetRateAdjustment != null && getCustomRemittanceRate.GetRateAdjustment > 0)
                                                            {
                                                                var OriginalValue = finalGetProductRate;
                                                                var InputValue = Convert.ToDecimal(getCustomRemittanceRate.GetRateAdjustment);
                                                                finalGetProductRate = OriginalValue * (1 + InputValue);
                                                            }
                                                        }
                                                        else if (getGet.SellRateAdjustment != null && getGet.SellRateAdjustment != 0)
                                                        {
                                                            var OriginalValue = finalGetProductRate;
                                                            var InputValue = Convert.ToDecimal(getGet.SellRateAdjustment);
                                                            finalGetProductRate = OriginalValue * (1 + InputValue);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (getCustomRemittanceRate != null)
                                                        {
                                                            if (getCustomRemittanceRate.GetRateAdjustment != null && getCustomRemittanceRate.GetRateAdjustment > 0)
                                                            {
                                                                var OriginalValue = finalGetProductRate;
                                                                var InputValue = Convert.ToDecimal(getCustomRemittanceRate.GetRateAdjustment);
                                                                finalGetProductRate = OriginalValue * (1 + InputValue);
                                                            }
                                                        }
                                                        else if (getGet.SellRateAdjustment != null && getGet.SellRateAdjustment != 0)
                                                        {
                                                            var OriginalValue = finalGetProductRate;
                                                            var InputValue = Convert.ToDecimal(getGet.SellRateAdjustment);
                                                            finalGetProductRate = OriginalValue * (1 + InputValue);
                                                        }
                                                    }

													var CalculateFinalRate = (PayTransactionFee / finalPayProductRate);

													//decimal CalculatedGetAmount = ((singleItem.PayAmount * PayRate / GetRate) - (GetTransactionFee / GetRate)) ?? 0;
													//decimal CalculatedGetAmount = (Convert.ToDecimal(singleItem.PayAmount) - PayTransactionFee) / (finalGetProductRate / finalPayProductRate) ?? 0;
													decimal CalculatedGetAmount = (Convert.ToDecimal(singleItem.PayAmount) - CalculateFinalRate) / (finalGetProductRate / finalPayProductRate) ?? 0;
													singleItem.GetAmount = Convert.ToDecimal((CalculatedGetAmount).ToString(GetDecimalFormat(GetDecimal)));
                                                    var GetFinalStoredRate = (finalGetProductRate / finalPayProductRate) ?? 0;
                                                    singleItem.Rate = Convert.ToDecimal(GetFinalStoredRate).ToString(GetDecimalFormat(rateDP));
                                                    singleItem.PayTransactionFee = CalculateFinalRate ?? 0;
                                                    singleItem.Payrate = Convert.ToDecimal(finalPayProductRate);
                                                    singleItem.GetRate = Convert.ToDecimal(finalGetProductRate);
                                                }
                                            }

                                            string Pay_PaymentModeText = workSheet?.Cells[rowIterator, 6]?.Value?.ToString().Trim();

                                            if (string.IsNullOrEmpty(Pay_PaymentModeText))
                                            {
                                                Error = 1;
                                                RootClass.NoOfErrorRow = rowIterator;
                                                RootClass.error = "You Pay Payment Type cannot be empty.";
                                                break;
                                            }
                                            else
                                            {
                                                if (Pay_PaymentModeText.Length > 50)
                                                {
                                                    Error = 1;
                                                    RootClass.NoOfErrorRow = rowIterator;
                                                    RootClass.error = "You Pay Payment Type cannot more than 50 characters.";
                                                    break;
                                                }
                                                else
                                                {
                                                    var checkContains = getPaymentModeList.Where(e => e.Name == Pay_PaymentModeText).FirstOrDefault();

                                                    if (checkContains == null)
                                                    {
                                                        Error = 1;
                                                        RootClass.NoOfErrorRow = rowIterator;
                                                        RootClass.error = "Invalid You Pay Payment Type.";
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        var checkCurrencyContains = getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().PaymentModeAllowed;
                                                        var checkCurrencyID = getTransactionPay.Where(e => e.CurrencyCode == workSheet.Cells[rowIterator, 2].Value.ToString().Trim()).FirstOrDefault().ID;
                                                        string[] splitstr = checkCurrencyContains.Split(',');
                                                        Dropdown[] paymentMode = PaymentModeDDL(Convert.ToInt32(checkCurrencyID));

                                                        if (Array.IndexOf(splitstr, checkContains.ID.ToString()) >= 0)
                                                        {
                                                            SelectList paymentModeDDL = new SelectList(paymentMode, "val", "name", checkContains.ID);
                                                            singleItem.PayPaymentModeDDL = paymentModeDDL;
                                                        }
                                                        else
                                                        {
                                                            Error = 1;
                                                            RootClass.NoOfErrorRow = rowIterator;
                                                            RootClass.error = "You Pay Payment Type is not allow in this product.";
                                                            break;
                                                        }
                                                    }
                                                }
                                            }

                                            //Deposit Account Check
                                            string Pay_PayBankAccountText = workSheet?.Cells[rowIterator, 7]?.Value?.ToString().Trim();

                                            if (string.IsNullOrEmpty(Pay_PayBankAccountText))
                                            {
                                                Error = 1;
                                                RootClass.NoOfErrorRow = rowIterator;
                                                RootClass.error = "You Pay Account cannot be empty.";
                                                break;
                                            }
                                            else
                                            {
                                                if (Pay_PayBankAccountText.Length > 50)
                                                {
                                                    Error = 1;
                                                    RootClass.NoOfErrorRow = rowIterator;
                                                    RootClass.error = "You Pay Account cannot more than 50 characters.";
                                                    break;
                                                }
                                                else
                                                {
                                                    var checkContains = getDepositAccountList.Where(e => e.BankName == Pay_PayBankAccountText).FirstOrDefault();

                                                    if (checkContains == null)
                                                    {
                                                        Error = 1;
                                                        RootClass.NoOfErrorRow = rowIterator;
                                                        RootClass.error = "Invalid You Pay Account.";
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        singleItem.DepositAccountID = checkContains.ID;
                                                        singleItem.DepositAccountText = checkContains.BankName;
                                                    }
                                                }
                                            }

                                            //Check Bank Country
                                            string CheckBankCountryText = workSheet?.Cells[rowIterator, 16]?.Value?.ToString().Trim();

                                            if (string.IsNullOrEmpty(CheckBankCountryText))
                                            {
                                                Error = 1;
                                                RootClass.NoOfErrorRow = rowIterator;
                                                RootClass.error = "Bank Country cannot be empty.";
                                                break;
                                            }
                                            else
                                            {
                                                if (CheckBankCountryText.Length > 250)
                                                {
                                                    Error = 1;
                                                    RootClass.NoOfErrorRow = rowIterator;
                                                    RootClass.error = "Bank Country cannot more than 250 characters.";
                                                    break;
                                                }
                                                else
                                                {
                                                    var checkContains = getCountryList.Where(e => e.Name == CheckBankCountryText).FirstOrDefault();

                                                    if (checkContains == null)
                                                    {
                                                        Error = 1;
                                                        RootClass.NoOfErrorRow = rowIterator;
                                                        RootClass.error = "Invalid Bank Country.";
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        if (checkContains.Name == "Others")
                                                        {
                                                            string checkBankCountryIfOthers = workSheet?.Cells[rowIterator, 17]?.Value?.ToString().Trim();

                                                            if (string.IsNullOrEmpty(checkBankCountryIfOthers))
                                                            {
                                                                Error = 1;
                                                                RootClass.NoOfErrorRow = rowIterator;
                                                                RootClass.error = "Bank Country If Others cannot be empty.";
                                                                break;
                                                            }
                                                            else
                                                            {
                                                                if (checkBankCountryIfOthers.Length > 250)
                                                                {
                                                                    Error = 1;
                                                                    RootClass.NoOfErrorRow = rowIterator;
                                                                    RootClass.error = "Bank Country If Others cannot more than 250 characters.";
                                                                    break;
                                                                }
                                                                else
                                                                {
                                                                    singleItem.BankCountryIfOthersText = checkBankCountryIfOthers;
                                                                    singleItem.CountryID = checkContains.ID;
                                                                    singleItem.CountryText = checkContains.Name;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            singleItem.BankCountryIfOthersText = "";
                                                            singleItem.CountryID = checkContains.ID;
                                                            singleItem.CountryText = checkContains.Name;
                                                        }
                                                    }
                                                }
                                            }

                                            //Check Purpose Of Payment (0 == individual, 1 == business)
                                            //Check Bank Country
                                            string CheckBeneficiaryType = workSheet?.Cells[rowIterator, 8]?.Value?.ToString().Trim();

                                            if (string.IsNullOrEmpty(CheckBeneficiaryType))
                                            {
                                                Error = 1;
                                                RootClass.NoOfErrorRow = rowIterator;
                                                RootClass.error = "Beneficiary Type cannot be empty.";
                                                break;
                                            }
                                            else
                                            {
                                                if (CheckBeneficiaryType.Length > 50)
                                                {
                                                    Error = 1;
                                                    RootClass.NoOfErrorRow = rowIterator;
                                                    RootClass.error = "Beneficiary Type cannot more than 50 characters.";
                                                    break;
                                                }
                                                else
                                                {
                                                    if (Array.IndexOf(TypeOfBeneficiary, CheckBeneficiaryType.ToLower()) >= 0)
                                                    {
                                                        if (CheckBeneficiaryType == "individual")
                                                        {
                                                            singleItem.BeneficiaryTypeValue = "0";
                                                        }
                                                        else
                                                        {
                                                            singleItem.BeneficiaryTypeValue = "1";
                                                        }

                                                        singleItem.BeneficiaryTypeText = CheckBeneficiaryType.ToLower();
                                                    }
                                                    else
                                                    {
                                                        Error = 1;
                                                        RootClass.NoOfErrorRow = rowIterator;
                                                        RootClass.error = "Invalid Beneficiary Type.";
                                                        break;
                                                    }
                                                }
                                            }

                                            //Individual Type
                                            if (!string.IsNullOrEmpty(singleItem.BeneficiaryTypeText))
                                            {
                                                if (singleItem.BeneficiaryTypeText.ToLower() == "individual")
                                                {
                                                    //nationality cannot be empty
                                                    string checkNationality = workSheet?.Cells[rowIterator, 18]?.Value?.ToString().Trim();

                                                    if (string.IsNullOrEmpty(checkNationality))
                                                    {
                                                        Error = 1;
                                                        RootClass.NoOfErrorRow = rowIterator;
                                                        RootClass.error = "Nationality cannot be empty.";
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        if (checkNationality.Length > 50)
                                                        {
                                                            Error = 1;
                                                            RootClass.NoOfErrorRow = rowIterator;
                                                            RootClass.error = "Nationality cannot more than 50 characters.";
                                                            break;
                                                        }
                                                        else
                                                        {
                                                            var checkContains = getNationalityList.Where(e => e.Name == checkNationality).FirstOrDefault();

                                                            if (checkContains == null)
                                                            {
                                                                Error = 1;
                                                                RootClass.NoOfErrorRow = rowIterator;
                                                                RootClass.error = "Invalid Nationality.";
                                                                break;
                                                            }
                                                            else
                                                            {

                                                                if (checkContains.Name == "Others")
                                                                {
                                                                    string CheckNationalityIfOthers = workSheet?.Cells[rowIterator, 19]?.Value?.ToString().Trim();
                                                                    if (string.IsNullOrEmpty(CheckNationalityIfOthers))
                                                                    {
                                                                        Error = 1;
                                                                        RootClass.NoOfErrorRow = rowIterator;
                                                                        RootClass.error = "Nationality If Others cannot be empty.";
                                                                        break;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (CheckNationalityIfOthers.Length > 250)
                                                                        {
                                                                            Error = 1;
                                                                            RootClass.NoOfErrorRow = rowIterator;
                                                                            RootClass.error = "Nationality If Others cannot more than 250 characters.";
                                                                            break;
                                                                        }
                                                                        else
                                                                        {
                                                                            singleItem.NationalityIfOthersText = CheckNationalityIfOthers;
                                                                            singleItem.NationalityID = checkContains.ID;
                                                                            singleItem.NationalityText = checkContains.Name;
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    singleItem.NationalityIfOthersText = "";
                                                                    singleItem.NationalityID = checkContains.ID;
                                                                    singleItem.NationalityText = checkContains.Name;
                                                                }
                                                            }
                                                        }
                                                    }

                                                    //Check Purpose of Payment
                                                    string PurposeOfPaymentText = workSheet?.Cells[rowIterator, 26]?.Value?.ToString().Trim();

                                                    if (string.IsNullOrEmpty(PurposeOfPaymentText))
                                                    {
                                                        Error = 1;
                                                        RootClass.NoOfErrorRow = rowIterator;
                                                        RootClass.error = "Purpose of Payment cannot be empty.";
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        if (PurposeOfPaymentText.Length > 250)
                                                        {
                                                            Error = 1;
                                                            RootClass.NoOfErrorRow = rowIterator;
                                                            RootClass.error = "Purpose of Payment cannot more than 250 characters.";
                                                            break;
                                                        }
                                                        else
                                                        {
                                                            var checkContains = getPurposeOfPaymentList.Where(e => e.Name == PurposeOfPaymentText && e.Type == 0 || e.Type == 3).FirstOrDefault();

                                                            if (checkContains == null)
                                                            {
                                                                Error = 1;
                                                                RootClass.NoOfErrorRow = rowIterator;
                                                                RootClass.error = "Invalid Purpose of Payment.";
                                                                break;
                                                            }
                                                            else
                                                            {
                                                                if (checkContains.Name == "Others")
                                                                {
                                                                    string checkPurposeOfPaymentIfOthers = workSheet?.Cells[rowIterator, 27]?.Value?.ToString().Trim();

                                                                    if (string.IsNullOrEmpty(checkPurposeOfPaymentIfOthers))
                                                                    {
                                                                        Error = 1;
                                                                        RootClass.NoOfErrorRow = rowIterator;
                                                                        RootClass.error = "Purpose of Payment If Others cannot be empty.";
                                                                        break;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (checkPurposeOfPaymentIfOthers.Length > 250)
                                                                        {
                                                                            Error = 1;
                                                                            RootClass.NoOfErrorRow = rowIterator;
                                                                            RootClass.error = "Purpose of Payment If Others cannot more than 250 characters.";
                                                                            break;
                                                                        }
                                                                        else
                                                                        {
                                                                            singleItem.PurposeOfPaymentIfOthersText = checkPurposeOfPaymentIfOthers;
                                                                            singleItem.PurposeOfPaymentID = checkContains.ID;
                                                                            singleItem.PurposeOfPaymentText = checkContains.Name;
                                                                            Dropdown[] paymentList = PurposePaymentDDL(Convert.ToInt32(singleItem.BeneficiaryTypeValue));
                                                                            singleItem.paymentListDDL = new SelectList(paymentList, "val", "name", checkContains.ID);
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    singleItem.PurposeOfPaymentIfOthersText = "";
                                                                    singleItem.PurposeOfPaymentID = checkContains.ID;
                                                                    singleItem.PurposeOfPaymentText = checkContains.Name;
                                                                    Dropdown[] paymentList = PurposePaymentDDL(Convert.ToInt32(singleItem.BeneficiaryTypeValue));
                                                                    singleItem.paymentListDDL = new SelectList(paymentList, "val", "name", checkContains.ID);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (singleItem.BeneficiaryTypeText.ToLower() == "business")
                                                {
                                                    if (string.IsNullOrEmpty(workSheet?.Cells[rowIterator, 12]?.Value?.ToString().Trim()))
                                                    {
                                                        Error = 1;
                                                        RootClass.NoOfErrorRow = rowIterator;
                                                        RootClass.error = "Company Registration No. cannot be empty.";
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        if (workSheet.Cells[rowIterator, 12].Value.ToString().Trim().Length > 50)
                                                        {
                                                            Error = 1;
                                                            RootClass.NoOfErrorRow = rowIterator;
                                                            RootClass.error = "Company Registration No. cannot more than 50 characters.";
                                                            break;
                                                        }
                                                        else
                                                        {
                                                            singleItem.BeneficiaryCompanyRegistrationNoText = workSheet.Cells[rowIterator, 12].Value.ToString().Trim();
                                                        }
                                                    }

                                                    if (string.IsNullOrEmpty(workSheet?.Cells[rowIterator, 13]?.Value?.ToString().Trim()))
                                                    {
                                                        Error = 1;
                                                        RootClass.NoOfErrorRow = rowIterator;
                                                        RootClass.error = "Company Contact No. cannot be empty.";
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        if (workSheet.Cells[rowIterator, 13].Value.ToString().Trim().Length > 15)
                                                        {
                                                            Error = 1;
                                                            RootClass.NoOfErrorRow = rowIterator;
                                                            RootClass.error = "Company Contact No. cannot more than 15 characters.";
                                                            break;
                                                        }
                                                        else
                                                        {
                                                            singleItem.BeneficiaryContactNoText = workSheet.Cells[rowIterator, 13].Value.ToString().Trim();
                                                        }
                                                    }

                                                    //check category of business
                                                    string checkCategoryText = workSheet?.Cells[rowIterator, 14]?.Value?.ToString().Trim();

                                                    if (string.IsNullOrEmpty(checkCategoryText))
                                                    {
                                                        Error = 1;
                                                        RootClass.NoOfErrorRow = rowIterator;
                                                        RootClass.error = "Category of Business cannot be empty.";
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        if (checkCategoryText.Length > 250)
                                                        {
                                                            Error = 1;
                                                            RootClass.NoOfErrorRow = rowIterator;
                                                            RootClass.error = "Category of Business cannot more than 250 characters.";
                                                            break;
                                                        }
                                                        else
                                                        {
                                                            var checkContains = getBusinessCategoryList.Where(e => e.Name == checkCategoryText).FirstOrDefault();

                                                            if (checkContains == null)
                                                            {
                                                                Error = 1;
                                                                RootClass.NoOfErrorRow = rowIterator;
                                                                RootClass.error = "Invalid Category of Business.";
                                                                break;
                                                            }
                                                            else
                                                            {
                                                                if (checkContains.Name == "Others")
                                                                {
                                                                    string checkBusinessCategoryIfOthers = workSheet?.Cells[rowIterator, 15]?.Value?.ToString().Trim();

                                                                    if (string.IsNullOrEmpty(checkBusinessCategoryIfOthers))
                                                                    {
                                                                        Error = 1;
                                                                        RootClass.NoOfErrorRow = rowIterator;
                                                                        RootClass.error = "Category of Business If Others cannot be empty.";
                                                                        break;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (checkBusinessCategoryIfOthers.Length > 250)
                                                                        {
                                                                            Error = 1;
                                                                            RootClass.NoOfErrorRow = rowIterator;
                                                                            RootClass.error = "Category of Business If Others cannot more than 250 characters.";
                                                                            break;
                                                                        }
                                                                        else
                                                                        {
                                                                            singleItem.BusinessCategoryIfOthersText = checkBusinessCategoryIfOthers;
                                                                            singleItem.BusinessCategoryID = checkContains.ID;
                                                                            singleItem.BusinessCategoryText = checkContains.Name;
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    singleItem.BusinessCategoryIfOthersText = "";
                                                                    singleItem.BusinessCategoryID = checkContains.ID;
                                                                    singleItem.BusinessCategoryText = checkContains.Name;
                                                                }
                                                            }
                                                        }
                                                    }

                                                    //Check Purpose of Payment
                                                    string PurposeOfPaymentText = workSheet?.Cells[rowIterator, 26]?.Value?.ToString().Trim();

                                                    if (string.IsNullOrEmpty(PurposeOfPaymentText))
                                                    {
                                                        Error = 1;
                                                        RootClass.NoOfErrorRow = rowIterator;
                                                        RootClass.error = "Purpose of Payment cannot more be empty.";
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        if (PurposeOfPaymentText.Length > 250)
                                                        {
                                                            Error = 1;
                                                            RootClass.NoOfErrorRow = rowIterator;
                                                            RootClass.error = "Purpose of Payment cannot more than 250 characters.";
                                                            break;
                                                        }
                                                        else
                                                        {
                                                            var checkContains = getPurposeOfPaymentList.Where(e => e.Name == PurposeOfPaymentText && e.Type == 1 || e.Type == 3).FirstOrDefault();

                                                            if (checkContains == null)
                                                            {
                                                                Error = 1;
                                                                RootClass.NoOfErrorRow = rowIterator;
                                                                RootClass.error = "Invalid Purpose of Payment.";
                                                                break;
                                                            }
                                                            else
                                                            {
                                                                if (checkContains.Name == "Others")
                                                                {
                                                                    string checkPurposeOfPaymentIfOthers = workSheet?.Cells[rowIterator, 27]?.Value?.ToString().Trim();

                                                                    if (string.IsNullOrEmpty(checkPurposeOfPaymentIfOthers))
                                                                    {
                                                                        Error = 1;
                                                                        RootClass.NoOfErrorRow = rowIterator;
                                                                        RootClass.error = "Purpose of Payment If Others cannot be empty.";
                                                                        break;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (checkPurposeOfPaymentIfOthers.Length > 250)
                                                                        {
                                                                            Error = 1;
                                                                            RootClass.NoOfErrorRow = rowIterator;
                                                                            RootClass.error = "Purpose of Payment If Others cannot more than 250 characters.";
                                                                            break;
                                                                        }
                                                                        else
                                                                        {
                                                                            singleItem.PurposeOfPaymentIfOthersText = checkPurposeOfPaymentIfOthers;
                                                                            singleItem.PurposeOfPaymentID = checkContains.ID;
                                                                            singleItem.PurposeOfPaymentText = checkContains.Name;
                                                                            Dropdown[] paymentList = PurposePaymentDDL(Convert.ToInt32(singleItem.BeneficiaryTypeValue));
                                                                            singleItem.paymentListDDL = new SelectList(paymentList, "val", "name", checkContains.ID);
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    singleItem.PurposeOfPaymentIfOthersText = "";
                                                                    singleItem.PurposeOfPaymentID = checkContains.ID;
                                                                    singleItem.PurposeOfPaymentText = checkContains.Name;
                                                                    Dropdown[] paymentList = PurposePaymentDDL(Convert.ToInt32(singleItem.BeneficiaryTypeValue));
                                                                    singleItem.paymentListDDL = new SelectList(paymentList, "val", "name", checkContains.ID);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    Error = 1;
                                                    RootClass.NoOfErrorRow = rowIterator;
                                                    RootClass.error = "Invalid Beneficiary Type.";
                                                    break;
                                                }
                                            }

                                            //Check Source of Payment
                                            string CheckSourceOfFunds = workSheet?.Cells[rowIterator, 28]?.Value?.ToString().Trim();

                                            if (string.IsNullOrEmpty(CheckSourceOfFunds))
                                            {
                                                Error = 1;
                                                RootClass.NoOfErrorRow = rowIterator;
                                                RootClass.error = "Source of Payment cannot be empty.";
                                                break;
                                            }
                                            else
                                            {
                                                if (CheckSourceOfFunds.Length > 250)
                                                {
                                                    Error = 1;
                                                    RootClass.NoOfErrorRow = rowIterator;
                                                    RootClass.error = "Source of Payment cannot more than 250 characters.";
                                                    break;
                                                }
                                                else
                                                {
                                                    var checkContains = getSourceOfPaymentList.Where(e => e.Name == CheckSourceOfFunds).FirstOrDefault();

                                                    if (checkContains == null)
                                                    {
                                                        Error = 1;
                                                        RootClass.NoOfErrorRow = rowIterator;
                                                        RootClass.error = "Invalid Source of Payment.";
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        if (checkContains.Name == "Others")
                                                        {
                                                            string checkSourceOfPaymentIfOthers = workSheet?.Cells[rowIterator, 29]?.Value?.ToString().Trim();

                                                            if (string.IsNullOrEmpty(checkSourceOfPaymentIfOthers))
                                                            {
                                                                Error = 1;
                                                                RootClass.NoOfErrorRow = rowIterator;
                                                                RootClass.error = "Source of Payment If Others cannot be empty.";
                                                                break;
                                                            }
                                                            else
                                                            {
                                                                if (checkSourceOfPaymentIfOthers.Length > 250)
                                                                {
                                                                    Error = 1;
                                                                    RootClass.NoOfErrorRow = rowIterator;
                                                                    RootClass.error = "Source of Payment If Others cannot more than 250 characters.";
                                                                    break;
                                                                }
                                                                else
                                                                {
                                                                    singleItem.SourceOfPaymentIfOthersText = checkSourceOfPaymentIfOthers;
                                                                    singleItem.SourceOfPaymentID = checkContains.ID;
                                                                    singleItem.SourceOfPaymentText = checkContains.Name;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            singleItem.SourceOfPaymentIfOthersText = "";
                                                            singleItem.SourceOfPaymentID = checkContains.ID;
                                                            singleItem.SourceOfPaymentText = checkContains.Name;
                                                        }
                                                    }
                                                }
                                            }

                                            //singleItem.GetRate = Convert.ToDecimal((singleItem.PayAmount / singleItem.GetAmount).ToString(GetDecimalFormat(8)));

                                            if (string.IsNullOrEmpty(workSheet?.Cells[rowIterator, 9]?.Value?.ToString().Trim()))
                                            {
                                                Error = 1;
                                                RootClass.NoOfErrorRow = rowIterator;
                                                RootClass.error = "Beneficiary Full Name cannot be empty.";
                                                break;
                                            }
                                            else
                                            {
                                                if (workSheet.Cells[rowIterator, 9].Value.ToString().Trim().Length > 250)
                                                {
                                                    Error = 1;
                                                    RootClass.NoOfErrorRow = rowIterator;
                                                    RootClass.error = "Beneficiary Full Name cannot more than 250 characters.";
                                                    break;
                                                }
                                                else
                                                {
                                                    singleItem.GetBeneficiaryFriendlyName = workSheet.Cells[rowIterator, 9].Value.ToString().Trim();
                                                }
                                            }

                                            if (string.IsNullOrEmpty(workSheet?.Cells[rowIterator, 21]?.Value?.ToString().Trim()))
                                            {
                                                Error = 1;
                                                RootClass.NoOfErrorRow = rowIterator;
                                                RootClass.error = "Bank Account No. cannot be empty.";
                                                break;
                                            }
                                            else
                                            {
                                                if (workSheet.Cells[rowIterator, 21].Value.ToString().Trim().Length > 50)
                                                {
                                                    Error = 1;
                                                    RootClass.NoOfErrorRow = rowIterator;
                                                    RootClass.error = "Bank Account No. cannot more than 50 characters.";
                                                    break;
                                                }
                                                else
                                                {
                                                    singleItem.BankAccountNoText = workSheet.Cells[rowIterator, 21].Value.ToString().Trim();
                                                }
                                            }

                                            //string CheckBeneficiaryBankType = workSheet?.Cells[rowIterator, 23]?.Value?.ToString().Trim();

                                            //if (string.IsNullOrEmpty(CheckBeneficiaryBankType))
                                            //{
                                            //	Error = 1;
                                            //	RootClass.NoOfErrorRow = rowIterator;
                                            //	RootClass.error = "Bank Type cannot be empty.";
                                            //	break;
                                            //}
                                            //else
                                            //{
                                            //	if (Array.IndexOf(TypeOfBank, CheckBeneficiaryBankType.ToLower()) >= 0)
                                            //	{
                                            //		if (CheckBeneficiaryBankType.ToLower() == "bank code")
                                            //		{
                                            //			singleItem.BankType = "1";
                                            //			singleItem.BankTypeName = "Bank Code";
                                            //		}
                                            //		else if (CheckBeneficiaryBankType.ToLower() == "swift code")
                                            //		{
                                            //			singleItem.BankType = "2";
                                            //			singleItem.BankTypeName = "SWIFT / BIC";
                                            //		}
                                            //		else
                                            //		{
                                            //			singleItem.BankType = "0";
                                            //			singleItem.BankTypeName = "";
                                            //		}
                                            //	}
                                            //	else
                                            //	{
                                            //		Error = 1;
                                            //		RootClass.NoOfErrorRow = rowIterator;
                                            //		RootClass.error = "Invalid Bank Type.";
                                            //		break;
                                            //	}
                                            //}

                                            if (string.IsNullOrEmpty(workSheet?.Cells[rowIterator, 23]?.Value?.ToString().Trim()))
                                            {
                                                Error = 1;
                                                RootClass.NoOfErrorRow = rowIterator;
                                                RootClass.error = "Bank Code / SWIFT cannot be empty.";
                                                break;
                                            }
                                            else
                                            {
                                                if (workSheet.Cells[rowIterator, 23].Value.ToString().Trim().Length > 50)
                                                {
                                                    Error = 1;
                                                    RootClass.NoOfErrorRow = rowIterator;
                                                    RootClass.error = "Bank Code / SWIFT cannot more than 50 characters.";
                                                    break;
                                                }
                                                else
                                                {
                                                    singleItem.BankCodeText = workSheet.Cells[rowIterator, 23].Value.ToString().Trim();
                                                }
                                            }

                                            if (string.IsNullOrEmpty(workSheet?.Cells[rowIterator, 22]?.Value?.ToString().Trim()))
                                            {
                                                Error = 1;
                                                RootClass.NoOfErrorRow = rowIterator;
                                                RootClass.error = "Bank Address cannot be empty.";
                                                break;
                                            }
                                            else
                                            {
                                                if (workSheet.Cells[rowIterator, 22].Value.ToString().Trim().Length > 250)
                                                {
                                                    Error = 1;
                                                    RootClass.NoOfErrorRow = rowIterator;
                                                    RootClass.error = "Bank Address cannot more than 250 characters.";
                                                    break;
                                                }
                                                else
                                                {
                                                    singleItem.BankAddressText = workSheet.Cells[rowIterator, 22].Value.ToString().Trim();
                                                }
                                            }

                                            if (string.IsNullOrEmpty(workSheet?.Cells[rowIterator, 25]?.Value?.ToString().Trim()))
                                            {
                                                Error = 1;
                                                RootClass.NoOfErrorRow = rowIterator;
                                                RootClass.error = "Payment Details/Instructions cannot be empty.";
                                                break;
                                            }
                                            else
                                            {
                                                if (workSheet.Cells[rowIterator, 25].Value.ToString().Trim().Length > 500)
                                                {
                                                    Error = 1;
                                                    RootClass.NoOfErrorRow = rowIterator;
                                                    RootClass.error = "Payment Details/Instructions cannot more than 500 characters.";
                                                    break;
                                                }
                                                else
                                                {
                                                    singleItem.PaymentDetailsText = workSheet.Cells[rowIterator, 25].Value.ToString().Trim();
                                                }
                                            }

                                            //New Field
                                            //Check Supporting Document Type
                                            string CheckSupportingDocumentType = workSheet?.Cells[rowIterator, 30]?.Value?.ToString().Trim();

                                            if (string.IsNullOrEmpty(CheckSupportingDocumentType))
                                            {
                                                Error = 1;
                                                RootClass.NoOfErrorRow = rowIterator;
                                                RootClass.error = "Supporting Document Type cannot be empty.";
                                                break;
                                            }
                                            else
                                            {
                                                if (CheckSupportingDocumentType.Length > 250)
                                                {
                                                    Error = 1;
                                                    RootClass.NoOfErrorRow = rowIterator;
                                                    RootClass.error = "Supporting Document Type cannot more than 250 characters.";
                                                    break;
                                                }
                                                else
                                                {
                                                    var checkContains = getSupportingDocumentTypeList.Where(e => e.Name == CheckSupportingDocumentType).FirstOrDefault();

                                                    if (checkContains == null)
                                                    {
                                                        Error = 1;
                                                        RootClass.NoOfErrorRow = rowIterator;
                                                        RootClass.error = "Invalid Supporting Document Type.";
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        if (checkContains.Name == "Others")
                                                        {
                                                            string checkSupportingDocumentTypeIfOthers = workSheet?.Cells[rowIterator, 31]?.Value?.ToString().Trim();

                                                            if (string.IsNullOrEmpty(checkSupportingDocumentTypeIfOthers))
                                                            {
                                                                Error = 1;
                                                                RootClass.NoOfErrorRow = rowIterator;
                                                                RootClass.error = "Supporting Document Type If Others cannot be empty.";
                                                                break;
                                                            }
                                                            else
                                                            {
                                                                if (checkSupportingDocumentTypeIfOthers.Length > 250)
                                                                {
                                                                    Error = 1;
                                                                    RootClass.NoOfErrorRow = rowIterator;
                                                                    RootClass.error = "Supporting Document Type If Others cannot more than 250 characters.";
                                                                    break;
                                                                }
                                                                else
                                                                {
                                                                    singleItem.UploadSupportingTypeIfOthersText = checkSupportingDocumentTypeIfOthers;
                                                                    singleItem.UploadSupportingTypeID = checkContains.ID;
                                                                    singleItem.UploadSupportingTypeText = checkContains.Name;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            singleItem.UploadSupportingTypeIfOthersText = "";
                                                            singleItem.UploadSupportingTypeID = checkContains.ID;
                                                            singleItem.UploadSupportingTypeText = checkContains.Name;
                                                        }
                                                    }
                                                }
                                            }

                                            //Beneficiary Contact No
                                            if (!string.IsNullOrEmpty(workSheet?.Cells[rowIterator, 10]?.Value?.ToString().Trim()))
                                            {
                                                if (workSheet?.Cells[rowIterator, 10]?.Value?.ToString().Trim().Length > 250)
                                                {
                                                    Error = 1;
                                                    RootClass.NoOfErrorRow = rowIterator;
                                                    RootClass.error = "Beneficiary Contact No. cannot more than 250 characters.";
                                                    break;
                                                }
                                                else
                                                {
                                                    singleItem.BeneficiaryContactNoMainText = workSheet?.Cells[rowIterator, 10]?.Value?.ToString();
                                                }
                                            }
                                            else
                                            {
                                                Error = 1;
                                                RootClass.NoOfErrorRow = rowIterator;
                                                RootClass.error = "Beneficiary Contact No. cannot be empty.";
                                                break;
                                            }

                                            //Beneficiary Address
                                            if (!string.IsNullOrEmpty(workSheet?.Cells[rowIterator, 11]?.Value?.ToString().Trim()))
                                            {
                                                if (workSheet?.Cells[rowIterator, 11]?.Value?.ToString().Trim().Length > 250)
                                                {
                                                    Error = 1;
                                                    RootClass.NoOfErrorRow = rowIterator;
                                                    RootClass.error = "Beneficiary Address cannot more than 250 characters.";
                                                    break;
                                                }
                                                else
                                                {
                                                    singleItem.BeneficiaryAddressMainText = workSheet?.Cells[rowIterator, 11]?.Value?.ToString();
                                                }
                                            }
                                            else
                                            {
                                                Error = 1;
                                                RootClass.NoOfErrorRow = rowIterator;
                                                RootClass.error = "Beneficiary Address cannot be empty.";
                                                break;
                                            }

                                            //Bank Name
                                            if (!string.IsNullOrEmpty(workSheet?.Cells[rowIterator, 20]?.Value?.ToString().Trim()))
                                            {
                                                if (workSheet?.Cells[rowIterator, 20]?.Value?.ToString().Trim().Length > 250)
                                                {
                                                    Error = 1;
                                                    RootClass.NoOfErrorRow = rowIterator;
                                                    RootClass.error = "Bank Name cannot more than 250 characters.";
                                                    break;
                                                }
                                                else
                                                {
                                                    singleItem.BeneficiaryBankNameText = workSheet?.Cells[rowIterator, 20]?.Value?.ToString();
                                                }
                                            }
                                            else
                                            {
                                                Error = 1;
                                                RootClass.NoOfErrorRow = rowIterator;
                                                RootClass.error = "Bank Name cannot be empty.";
                                                break;
                                            }

                                            //IBAN
                                            if (!string.IsNullOrEmpty(workSheet?.Cells[rowIterator, 24]?.Value?.ToString().Trim()))
                                            {
                                                if (workSheet?.Cells[rowIterator, 24]?.Value?.ToString().Trim().Length > 250)
                                                {
                                                    Error = 1;
                                                    RootClass.NoOfErrorRow = rowIterator;
                                                    RootClass.error = "BIC / EUROPE IBAN NO / AUSTRALIA BSB / USA FED WIRE / USA ABA / UK SORT cannot more than 250 characters.";
                                                    break;
                                                }
                                                else
                                                {
                                                    singleItem.IBANEuropeBSBAustraliaText = workSheet?.Cells[rowIterator, 24]?.Value?.ToString();
                                                }
                                            }

                                            if (Error == 0)
                                            {
                                                ListOfItem.Add(singleItem);
                                            }
                                        }

                                        if (Error != 0)
                                        {
                                            return Json(new { result = RootClass }, JsonRequestBehavior.AllowGet);
                                        }
                                        else
                                        {
                                            RootClass.RemittanceClass = ListOfItem;
                                            RootClass.success = true;
                                            var getTransaction = BulkAddNewTransaction(RootClass, transactionCount);
                                            return Json(new { result = getTransaction }, JsonRequestBehavior.AllowGet);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                //singleItem.error = "Invalid file type.";
                                RootClass.NoOfErrorRow = 0;
                                RootClass.error = "Invalid File Type.";
                                return Json(new { result = RootClass }, JsonRequestBehavior.AllowGet);
                            }
                        }
                        else
                        {
                            RootClass.NoOfErrorRow = 0;
                            RootClass.error = "Please Upload Your File.";
                            return Json(new { result = RootClass }, JsonRequestBehavior.AllowGet);
                        }
                    }
                    RootClass.NoOfErrorRow = 0;
                    RootClass.error = "Something went wrong in the file.";
                    return Json(new { result = RootClass }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    RootClass.NoOfErrorRow = 0;
                    RootClass.error = "Please Upload Your File.";
                    return Json(new { result = RootClass }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception e)
            {
                RootClass.NoOfErrorRow = 0;
                RootClass.error = e.StackTrace;
                return Json(new { result = RootClass }, JsonRequestBehavior.AllowGet);
            }
        }

        //POST: AddNewTransaction
        [HttpPost]
        public string BulkAddNewTransaction(RemittanceBulkUploadClassRoot RootClass, int transactionCount)
        {
            string result = "";
            ViewData["TransactionCount"] = transactionCount;
            try
            {
                var countOrder = RootClass.RemittanceClass.Count;
                if (countOrder > 0)
                {
                    #region Remittance Transaction Type
                    ViewData["RemittanceOrder"] = RootClass.RemittanceClass.ToList();

                    Dropdown2[] getcurrencyDDL = CurrencyDDL2("Remittance", "get");
                    Dropdown2[] paycurrencyDDL = CurrencyDDL2("Remittance", "pay");

                    var getFirstPayCurrency = RootClass.RemittanceClass.FirstOrDefault().PayCurrencyID;

                    ViewData["PayCurrencyDropdown"] = new SelectList(paycurrencyDDL, "val", "name", dataGroupField: "group", getFirstPayCurrency, disabledValues: "disabled");
                    //ViewData["CurrencyDropdown"] = new SelectList(getcurrencyDDL, "val", "name", dataGroupField: "group", "");
                    ViewData["CurrencyDropdown"] = getcurrencyDDL;


                    Dropdown[] paymentModeDDL = PaymentModeDDL(getFirstPayCurrency);
                    Dropdown[] getpaymentModeDDL = new Dropdown[1];
                    getpaymentModeDDL[0] = new Dropdown { name = "Bank Transfer", val = "3" };

                    ViewData["PaymentModeDropdown"] = paymentModeDDL;
                    ViewData["GetPaymentModeDropdown"] = new SelectList(getpaymentModeDDL, "val", "name");

                    Dropdown[] paymentBankDDL = PayBankDDL();
                    ViewData["DepositAccountDropdown"] = paymentBankDDL;

                    Dropdown[] beneficiaries = BeneficiariesDDL();
                    Dropdown[] docsuppList = SupportDocTypeDDL();
                    Dropdown[] countries = CountryDDL();
                    Dropdown[] paymentList = PurposePaymentDDL(99);
                    Dropdown[] fundList = SourceFundsDDL();
                    Dropdown[] nationalities = NationalityDDL();
                    Dropdown2[] BusinessCategoriesLists = BusinessCategoryDDL();
                    ViewData["BeneficiaryDropdown"] = new SelectList(beneficiaries, "val", "name");
                    ViewData["SupportDocTypeDropdown"] = docsuppList;
                    ViewData["CountriesDropdown"] = countries;
                    ViewData["PurposePaymentDropdown"] = paymentList;
                    ViewData["SourceFundDropdown"] = fundList;
                    ViewData["NationalitiesDropdown"] = nationalities;
                    ViewData["Transaction_BeneficiaryBusinessCategoriesLists"] = BusinessCategoriesLists;

                    string view = "";

                    using (var sw = new StringWriter())
                    {
                        var viewResult = ViewEngines.Engines.FindPartialView(ControllerContext, "BulkUploadRemittance");
                        var viewContext = new ViewContext(ControllerContext, viewResult.View, ViewData, TempData, sw);
                        viewResult.View.Render(viewContext, sw);
                        viewResult.ViewEngine.ReleaseView(ControllerContext, viewResult.View);
                        view = sw.GetStringBuilder().ToString();
                    }

                    view = JsonConvert.SerializeObject(view);

                    result = "{\"Result\":\"true\",\"View\":" + view + "}";
                    #endregion
                }


                //else
                //{
                //    result = "{\"Result\":false,\"ErrorMessage\":\"Invalid Transaction Type!\"}";
                //}
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

		public class GetBeneficiaryCLass
		{
			public bool Result { get; set; }

			public string BeneficiaryFullName { get; set; }

			public int BeneficiaryNationality { get; set; }

			public string BankAccountNo { get; set; }

			public string BankAddress { get; set; }

			public string BankCode { get; set; }

			public int BankCountry { get; set; }

			public int BankType { get; set; }

			public string BeneficiaryContactNo { get; set; }

			public string PaymentDetails { get; set; }

			public int PurposeOfPayment { get; set; }

			public string BeneficiaryContactNoMain { get; set; }

			public string BeneficiaryAddressMain { get; set; }

			public string BeneficiaryBankName { get; set; }

			public string IBANEuropeBSBAustralia { get; set; }

			public string BeneficiaryBankCountryOthers { get; set; }

			public string BeneficiaryBusinessCategoryIfOthers { get; set; }

			public string BeneficiaryNationalityIfOthers { get; set; }

			public string BeneficiaryPurposeOfPaymentIfOthers { get; set; }

			public string BeneficiarySourceOfPaymentIfOthers { get; set; }

			public int SourceOfPayment { get; set; }

			public int Type { get; set; }

			public int BeneficiaryBusinessCategory { get; set; }

			public string BeneficiaryCompanyRegistrationNo { get; set; }

			public string ErrorMessage { get; set; }
		}
	}
}
