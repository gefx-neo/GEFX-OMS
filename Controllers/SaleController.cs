using BarcodeLib;
using DataAccess;
using DataAccess.POCO;
using GreatEastForex.Helper;
using GreatEastForex.Models;
using Newtonsoft.Json;
using PagedList;
using Rotativa;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Configuration;
using System.Data.Entity.Infrastructure;
using System.IO;
using System.Linq;
using System.Text;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using System.Web.SessionState;
using System.Data.SqlClient;
using System.Data;
using System.Text.RegularExpressions;
using System.Xml;

namespace GreatEastForex.Controllers
{
    [HandleError]
    [RedirectingActionAttributeSale]
    [SessionState(SessionStateBehavior.ReadOnly)]
    public class SaleController : ControllerBase
    {
        #region Initialize models
        private ISaleRepository _salesModel;
        private ISaleTransactionRepository _saleTransactionsModel;
        private ISaleTransactionDenominationRepository _saleTransactionDenominationsModel;
        private ICustomerParticularRepository _customerParticularsModel;
        private ICustomerOtherRepository _customerOthersModel;
        private ICustomerCustomRateRepository _customerCustomRatesModel;
        private IInventoryRepository _inventoriesModel;
        private IProductRepository _productsModel;
        private IProductInventoryRepository _productInventoriesModel;
        private IProductDenominationRepository _productDenominationsModel;
        private ISettingRepository _settingsModel;
        private IEndDayTradeRepository _endDayTradesModel;
        private IEndDayTradeTransactionRepository _endDayTradeTransactionsModel;
        private IEmailLogRepository _emailLogsModel;
        private IUserRepository _usersModel;
        private IApprovalHistorysRepository _approvalHistorysModel;
        private int sgdDp = 2;
        private int rateDP = 8;
        public static readonly object LockObject = new object();
        #endregion

        public SaleController()
            : this(new SaleRepository(), new SaleTransactionRepository(), new SaleTransactionDenominationRepository(), new CustomerParticularRepository(), new CustomerOtherRepository(), new CustomerCustomRateRepository(), new InventoryRepository(), new ProductRepository(), new ProductInventoryRepository(), new ProductDenominationRepository(), new SettingRepository(), new EndDayTradeRepository(), new EndDayTradeTransactionRepository(), new EmailLogRepository(), new UserRepository(), new ApprovalHistorysRepository())
        {

        }

        public SaleController(ISaleRepository salesModel, ISaleTransactionRepository saleTransactionsModel, ISaleTransactionDenominationRepository saleTransactionDenominationsModel, ICustomerParticularRepository customerParticularsModel, ICustomerOtherRepository customerOthersModel, ICustomerCustomRateRepository customerCustomRatesModel, IInventoryRepository inventoriesModel, IProductRepository productsModel, IProductInventoryRepository productInventoriesModel, IProductDenominationRepository productDenominationsModel, ISettingRepository settingsModel, IEndDayTradeRepository endDayTradesModel, IEndDayTradeTransactionRepository endDayTradeTransactionsModel, IEmailLogRepository emailLogsModel, IUserRepository usersModel, IApprovalHistorysRepository approvalHistorysModel)
        {
            _salesModel = salesModel;
            _saleTransactionsModel = saleTransactionsModel;
            _saleTransactionDenominationsModel = saleTransactionDenominationsModel;
            _customerParticularsModel = customerParticularsModel;
            _customerOthersModel = customerOthersModel;
            _customerCustomRatesModel = customerCustomRatesModel;
            _inventoriesModel = inventoriesModel;
            _productsModel = productsModel;
            _productInventoriesModel = productInventoriesModel;
            _productDenominationsModel = productDenominationsModel;
            _settingsModel = settingsModel;
            _endDayTradesModel = endDayTradesModel;
            _endDayTradeTransactionsModel = endDayTradeTransactionsModel;
            _emailLogsModel = emailLogsModel;
            _usersModel = usersModel;
            _approvalHistorysModel = approvalHistorysModel;
            Product sgd = _productsModel.FindCurrencyCode("SGD");
            sgdDp = sgd.Decimal;
            ViewData["SGDDP"] = sgdDp;
            ViewData["RateDP"] = rateDP;
            ViewData["SGDFormat"] = GetDecimalFormat(sgdDp);
            ViewData["RateFormat"] = GetRateFormat(rateDP);
        }

        // GET: Sale
        public ActionResult Index()
        {
            if (TempData["SearchKeyword"] != null)
            {
                TempData.Remove("SearchKeyword");
            }

            if (TempData["SearchStatus"] != null)
            {
                TempData.Remove("SearchStatus");
            }

            return RedirectToAction("Listing");
        }

        //GET: ListingTesting
        public ActionResult ListingTesting(int page = 1, string searchStatus = "")
        {
            int pageSize = Convert.ToInt32(ConfigurationManager.AppSettings["SalePageSize"]);

            TempData["Page"] = page;
            ViewData["Page"] = page;

            TempData["PageSize"] = pageSize;
            ViewData["PageSize"] = pageSize;

            ViewData["SearchKeyword"] = "";

            if (TempData["SearchKeyword"] != null)
            {
                ViewData["SearchKeyword"] = TempData["SearchKeyword"];
                TempData.Keep("SearchKeyword");
            }

            ViewData["SearchStatus"] = searchStatus;
            TempData["SearchStatus"] = searchStatus;

            ViewData["AllSalesActive"] = "";
            ViewData["AllCompletedActive"] = "";
            ViewData["AllDeliveriesActive"] = "";
            ViewData["AllPendingActive"] = "";

            ViewData["PendingAccountActive"] = "";
            ViewData["PendingPackingActive"] = "";
            ViewData["PendingIncomingDeliveryActive"] = "";
            ViewData["PendingCashierActive"] = "";

            ViewData["PendingAssignDeliveryActive"] = "";
            ViewData["PendingDeliveryActive"] = "";
            ViewData["PendingGMApproval"] = "";
            ViewData["PendingGMApprovalReject"] = "";

            if (searchStatus == "Completed")
            {
                ViewData["AllCompletedActive"] = "active";
                ViewData["CurrentStatus"] = "All Completed";
            }
            else if (searchStatus == "Deliveries")
            {
                ViewData["AllDeliveriesActive"] = "active";
                ViewData["CurrentStatus"] = "All Deliveries";
            }
            else if (searchStatus == "Pending")
            {
                ViewData["AllPendingActive"] = "active";
                ViewData["CurrentStatus"] = "All Pending";
            }
            else if (searchStatus == "Pending Assign Delivery")
            {
                ViewData["PendingAssignDeliveryActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Assign Delivery Only";
            }
            else if (searchStatus == "Pending Delivery")
            {
                ViewData["PendingDeliveryActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Delivery Only";
            }
            else if (searchStatus == "Pending GM Approval")
            {
                ViewData["PendingGMApproval"] = "active";
                ViewData["CurrentStatus"] = "Pending GM Approval";
            }
            else if (searchStatus == "Pending GM Approval (Rejected)")
            {
                ViewData["PendingGMApprovalReject"] = "active";
                ViewData["CurrentStatus"] = "Pending GM Approval (Rejected)";
            }
            else if (searchStatus == "Pending Accounts")
            {
                ViewData["PendingAccountActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Accounts";

            }
            else if (searchStatus == "Pending Packing")
            {
                ViewData["PendingPackingActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Packing";
            }
            else if (searchStatus.Contains("Pending Incoming Delivery"))
            {
                ViewData["PendingIncomingDeliveryActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Incoming Delivery";
            }
            else if (searchStatus == "Pending Cashier")
            {
                ViewData["PendingCashierActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Cashier";
            }
            else
            {
                ViewData["AllSalesActive"] = "active";
                ViewData["CurrentStatus"] = "All Sales";
            }

            //check if is junior dealer only, then only show his own data.
            string userRole = Session["UserRole"].ToString();
            string[] userRoleList = userRole.Split(',');

            var getTotalPage = new int();
            bool MultipleRole = true;
            int userid = Convert.ToInt32(Session["UserId"].ToString());

            if (Array.IndexOf(userRoleList, "Junior Dealer") >= 0)
            {
                if (userRoleList.Length > 1)
                {
                    //this is contain another role
                    getTotalPage = _salesModel.GetPageCount2(ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString(), MultipleRole, userid);
                }
                else
                {
                    //this is only junior dealer
                    MultipleRole = false;
                    getTotalPage = _salesModel.GetPageCount2(ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString(), MultipleRole, userid);
                }
            }

            //var checkPageItems = _salesModel.GetCustomItems2(page, ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString(), MultipleRole, userid);

            var sales2 = new List<DataAccess.SaleListingModel>();
            var salesTransactionList = new List<DataAccess.SaleTransactionsModel>();

            int fixTotalItems = 50;
            int minusPerpage = 50;
            int getMaxItems = page * fixTotalItems;
            int getRange = getMaxItems - minusPerpage;

            //SQL Command here
            using (var connection = new SqlConnection(ConfigurationManager.ConnectionStrings["GreatEastForex"].ConnectionString))
            {
                connection.Open();
                string commandText = "";

                if (!string.IsNullOrEmpty(ViewData["SearchKeyword"].ToString()))
                {
                    if (!MultipleRole)
                    {
                        //var rec = db.Sales.Where(e => e.CreatedBy == userid && e.IsDeleted == "N" && (e.MemoID.Contains(keyword) || e.CustomerParticulars.Company_RegisteredName.Contains(keyword) || e.CustomerParticulars.Natural_Name.Contains(keyword))).ToList();
                        commandText = @"SELECT sa.Status as SA_Status, sa.TransactionType as SA_TransactionType, sa.ID as SA_ID, sa.CreatedOn as SA_CreatedOn, sa.CreatedBy as SA_CreatedBy, sa.IsDeleted as SA_IsDeleted, sa.MemoID as SA_MemoID, sa.CustomerParticularId as SA_CustomerParticularId, cp.ID as CP_ID, cp.Company_RegisteredName as CP_CompanyRegisteredName, cp.Natural_Name as CP_NaturalName, cp.CustomerCode as CP_CustomerCode FROM [dbo].[Sales] sa FULL OUTER JOIN [dbo].[CustomerParticulars] cp ON sa.CustomerParticularId = cp.ID WHERE sa.IsDeleted = 'N' AND sa.CreatedBy = " + userid + " AND (sa.MemoID LIKE '%" + ViewData["SearchKeyword"].ToString() + "%' OR cp.Company_RegisteredName LIKE '" + ViewData["SearchKeyword"].ToString() + "' OR cp.Natural_Name LIKE '" + ViewData["SearchKeyword"].ToString() + "') ORDER BY sa.CreatedOn DESC OFFSET " + getRange + " ROWS FETCH NEXT " + fixTotalItems + " ROWS ONLY";
                    }
                    else
                    {
                        commandText = @"SELECT sa.Status as SA_Status, sa.TransactionType as SA_TransactionType, sa.ID as SA_ID, sa.CreatedOn as SA_CreatedOn, sa.CreatedBy as SA_CreatedBy, sa.IsDeleted as SA_IsDeleted, sa.MemoID as SA_MemoID, sa.CustomerParticularId as SA_CustomerParticularId, cp.ID as CP_ID, cp.Company_RegisteredName as CP_CompanyRegisteredName, cp.Natural_Name as CP_NaturalName, cp.CustomerCode as CP_CustomerCode FROM [dbo].[Sales] sa FULL OUTER JOIN [dbo].[CustomerParticulars] cp ON sa.CustomerParticularId = cp.ID WHERE sa.IsDeleted = 'N' AND (sa.MemoID LIKE '%" + ViewData["SearchKeyword"].ToString() + "%' OR cp.Company_RegisteredName LIKE '" + ViewData["SearchKeyword"].ToString() + "' OR cp.Natural_Name LIKE '" + ViewData["SearchKeyword"].ToString() + "') ORDER BY sa.CreatedOn DESC OFFSET " + getRange + " ROWS FETCH NEXT " + fixTotalItems + " ROWS ONLY";
                    }
                }
                else if (!string.IsNullOrEmpty(ViewData["SearchStatus"].ToString()))
                {
                    //if (status == "Pending GM Approval")
                    if (ViewData["SearchStatus"].ToString() == "Pending GM Approval")
                    {
                        if (!MultipleRole)
                        {
                            commandText = @"SELECT sa.Status as SA_Status, sa.TransactionType as SA_TransactionType, sa.ID as SA_ID, sa.CreatedOn as SA_CreatedOn, sa.CreatedBy as SA_CreatedBy, sa.IsDeleted as SA_IsDeleted, sa.MemoID as SA_MemoID, sa.CustomerParticularId as SA_CustomerParticularId, cp.ID as CP_ID, cp.Company_RegisteredName as CP_CompanyRegisteredName, cp.Natural_Name as CP_NaturalName, cp.CustomerCode as CP_CustomerCode FROM [dbo].[Sales] sa FULL OUTER JOIN [dbo].[CustomerParticulars] cp ON sa.CustomerParticularId = cp.ID WHERE sa.IsDeleted = 'N' AND sa.CreatedBy = " + userid + " AND sa.Status = 'Pending GM Approval' ORDER BY sa.CreatedOn DESC OFFSET " + getRange + " ROWS FETCH NEXT " + fixTotalItems + " ROWS ONLY";
                        }
                        else
                        {
                            commandText = @"SELECT sa.Status as SA_Status, sa.TransactionType as SA_TransactionType, sa.ID as SA_ID, sa.CreatedOn as SA_CreatedOn, sa.CreatedBy as SA_CreatedBy, sa.IsDeleted as SA_IsDeleted, sa.MemoID as SA_MemoID, sa.CustomerParticularId as SA_CustomerParticularId, cp.ID as CP_ID, cp.Company_RegisteredName as CP_CompanyRegisteredName, cp.Natural_Name as CP_NaturalName, cp.CustomerCode as CP_CustomerCode FROM [dbo].[Sales] sa FULL OUTER JOIN [dbo].[CustomerParticulars] cp ON sa.CustomerParticularId = cp.ID WHERE sa.IsDeleted = 'N' AND sa.Status = 'Pending GM Approval' ORDER BY sa.CreatedOn DESC OFFSET " + getRange + " ROWS FETCH NEXT " + fixTotalItems + " ROWS ONLY";
                        }
                    }
                    else
                    {
                        if (ViewData["SearchStatus"].ToString() == "Deliveries")
                        {
                            if (!MultipleRole)
                            {
                                commandText = @"SELECT sa.Status as SA_Status, sa.TransactionType as SA_TransactionType, sa.ID as SA_ID, sa.CreatedOn as SA_CreatedOn, sa.CreatedBy as SA_CreatedBy, sa.IsDeleted as SA_IsDeleted, sa.MemoID as SA_MemoID, sa.CustomerParticularId as SA_CustomerParticularId, cp.ID as CP_ID, cp.Company_RegisteredName as CP_CompanyRegisteredName, cp.Natural_Name as CP_NaturalName, cp.CustomerCode as CP_CustomerCode FROM [dbo].[Sales] sa FULL OUTER JOIN [dbo].[CustomerParticulars] cp ON sa.CustomerParticularId = cp.ID WHERE sa.IsDeleted = 'N' AND sa.CreatedBy = " + userid + " AND sa.Status = 'Pending Assign Delivery' OR sa.Status = 'Pending Delivery' OR sa.Status = 'Pending Incoming Delivery' ORDER BY sa.CreatedOn DESC OFFSET " + getRange + " ROWS FETCH NEXT " + fixTotalItems + " ROWS ONLY";
                                //rec = rec.Where(e => e.CreatedBy == userid && e.Status.Contains("Pending Assign Delivery") || e.Status.Contains("Pending Delivery") || e.Status.Contains("Pending Incoming Delivery")).ToList();
                            }
                            else
                            {
                                commandText = @"SELECT sa.Status as SA_Status, sa.TransactionType as SA_TransactionType, sa.ID as SA_ID, sa.CreatedOn as SA_CreatedOn, sa.CreatedBy as SA_CreatedBy, sa.IsDeleted as SA_IsDeleted, sa.MemoID as SA_MemoID, sa.CustomerParticularId as SA_CustomerParticularId, cp.ID as CP_ID, cp.Company_RegisteredName as CP_CompanyRegisteredName, cp.Natural_Name as CP_NaturalName, cp.CustomerCode as CP_CustomerCode FROM [dbo].[Sales] sa FULL OUTER JOIN [dbo].[CustomerParticulars] cp ON sa.CustomerParticularId = cp.ID WHERE sa.IsDeleted = 'N' AND sa.Status = 'Pending Assign Delivery' OR sa.Status = 'Pending Delivery' OR sa.Status = 'Pending Incoming Delivery' ORDER BY sa.CreatedOn DESC OFFSET " + getRange + " ROWS FETCH NEXT " + fixTotalItems + " ROWS ONLY";
                                //rec = rec.Where(e => e.Status.Contains("Pending Assign Delivery") || e.Status.Contains("Pending Delivery") || e.Status.Contains("Pending Incoming Delivery")).ToList();
                            }
                        }
                        else
                        {
                            if (!MultipleRole)
                            {
                                commandText = @"SELECT sa.Status as SA_Status, sa.TransactionType as SA_TransactionType, sa.ID as SA_ID, sa.CreatedOn as SA_CreatedOn, sa.CreatedBy as SA_CreatedBy, sa.IsDeleted as SA_IsDeleted, sa.MemoID as SA_MemoID, sa.CustomerParticularId as SA_CustomerParticularId, cp.ID as CP_ID, cp.Company_RegisteredName as CP_CompanyRegisteredName, cp.Natural_Name as CP_NaturalName, cp.CustomerCode as CP_CustomerCode FROM [dbo].[Sales] sa FULL OUTER JOIN [dbo].[CustomerParticulars] cp ON sa.CustomerParticularId = cp.ID WHERE sa.IsDeleted = 'N' AND sa.CreatedBy = " + userid + " AND sa.Status LIKE '" + ViewData["SearchStatus"].ToString() + "' ORDER BY sa.CreatedOn DESC OFFSET " + getRange + " ROWS FETCH NEXT " + fixTotalItems + " ROWS ONLY";
                                //rec = rec.Where(e => e.CreatedBy == userid && e.Status.Contains("Pending Assign Delivery") || e.Status.Contains("Pending Delivery") || e.Status.Contains("Pending Incoming Delivery")).ToList();
                            }
                            else
                            {
                                commandText = @"SELECT sa.Status as SA_Status, sa.TransactionType as SA_TransactionType, sa.ID as SA_ID, sa.CreatedOn as SA_CreatedOn, sa.CreatedBy as SA_CreatedBy, sa.IsDeleted as SA_IsDeleted, sa.MemoID as SA_MemoID, sa.CustomerParticularId as SA_CustomerParticularId, cp.ID as CP_ID, cp.Company_RegisteredName as CP_CompanyRegisteredName, cp.Natural_Name as CP_NaturalName, cp.CustomerCode as CP_CustomerCode FROM [dbo].[Sales] sa FULL OUTER JOIN [dbo].[CustomerParticulars] cp ON sa.CustomerParticularId = cp.ID WHERE sa.IsDeleted = 'N' AND sa.Status LIKE '" + ViewData["SearchStatus"].ToString() + "' ORDER BY sa.CreatedOn DESC OFFSET " + getRange + " ROWS FETCH NEXT " + fixTotalItems + " ROWS ONLY";
                                //rec = rec.Where(e => e.Status.Contains("Pending Assign Delivery") || e.Status.Contains("Pending Delivery") || e.Status.Contains("Pending Incoming Delivery")).ToList();
                            }
                        }
                    }
                }
                else
                {
                    if (!MultipleRole)
                    {
                        commandText = @"SELECT sa.Status as SA_Status, sa.TransactionType as SA_TransactionType, sa.ID as SA_ID, sa.CreatedOn as SA_CreatedOn, sa.CreatedBy as SA_CreatedBy, sa.IsDeleted as SA_IsDeleted, sa.MemoID as SA_MemoID, sa.CustomerParticularId as SA_CustomerParticularId, cp.ID as CP_ID, cp.Company_RegisteredName as CP_CompanyRegisteredName, cp.Natural_Name as CP_NaturalName, cp.CustomerCode as CP_CustomerCode FROM [dbo].[Sales] sa FULL OUTER JOIN [dbo].[CustomerParticulars] cp ON sa.CustomerParticularId = cp.ID WHERE sa.IsDeleted = 'N' AND sa.CreatedBy = " + userid + " ORDER BY sa.CreatedOn DESC OFFSET " + getRange + " ROWS FETCH NEXT " + fixTotalItems + " ROWS ONLY";
                    }
                    else
                    {
                        commandText = @"SELECT sa.Status as SA_Status, sa.TransactionType as SA_TransactionType, sa.ID as SA_ID, sa.CreatedOn as SA_CreatedOn, sa.CreatedBy as SA_CreatedBy, sa.IsDeleted as SA_IsDeleted, sa.MemoID as SA_MemoID, sa.CustomerParticularId as SA_CustomerParticularId, cp.ID as CP_ID, cp.Company_RegisteredName as CP_CompanyRegisteredName, cp.Natural_Name as CP_NaturalName, cp.CustomerCode as CP_CustomerCode FROM [dbo].[Sales] sa FULL OUTER JOIN [dbo].[CustomerParticulars] cp ON sa.CustomerParticularId = cp.ID WHERE sa.IsDeleted = 'N' ORDER BY sa.CreatedOn DESC OFFSET " + getRange + " ROWS FETCH NEXT " + fixTotalItems + " ROWS ONLY";
                    }
                }

                using (SqlCommand command = new SqlCommand("SET ARITHABORT ON", connection))
                {
                    command.ExecuteNonQuery();
                    command.CommandText = commandText;
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        sales2 = reader.Cast<IDataRecord>()
                        .Select(x => new DataAccess.SaleListingModel
                        {
                            SalesID = (int)x["SA_ID"],
                            SalesMemoID = (string)x["SA_MemoID"],
                            SalesCreatedOn = (DateTime)x["SA_CreatedOn"],
                            Sales_CustomerParticularID = (int)x["SA_CustomerParticularId"],
                            SalesCreatedBy = (int)x["SA_CreatedBy"],
                            CP_CustomerCode = (string)x["CP_CustomerCode"],
                            CP_CompanyRegisteredName = (x["CP_CompanyRegisteredName"] == DBNull.Value) ? "" : (string)x["CP_CompanyRegisteredName"],
                            CP_NaturalName = (x["CP_NaturalName"] == DBNull.Value) ? "" : (string)x["CP_NaturalName"],
                            Sales_TransactionType = (x["SA_TransactionType"] == DBNull.Value) ? "" : (string)x["SA_TransactionType"],
                            Sales_Status = (x["SA_Status"] == DBNull.Value) ? "" : (string)x["SA_Status"]
                        }).ToList();

                        sales2 = sales2.OrderByDescending(e => e.SalesCreatedOn).ToList();
                    }
                }

                Dictionary<int, bool> deleteSales1 = new Dictionary<int, bool>();

                commandText = @"SELECT TransactionType, CurrencyId FROM [dbo].[SaleTransactions]";

                using (SqlCommand command = new SqlCommand("SET ARITHABORT ON", connection))
                {
                    command.ExecuteNonQuery();
                    command.CommandText = commandText;
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        salesTransactionList = reader.Cast<IDataRecord>()
                        .Select(x => new DataAccess.SaleTransactionsModel
                        {
                            SaleTransaction_TransactionType = (x["TransactionType"] == DBNull.Value) ? "" : (string)x["TransactionType"],
                            SaleTransaction_CurrencyID = (int)x["CurrencyId"]
                        }).ToList();
                    }
                }

                bool isDeletable = true;

                foreach (DataAccess.SaleListingModel _salesModel in sales2)
                {
                    isDeletable = true;

                    if (_salesModel.Sales_TransactionType != "Sell" && _salesModel.Sales_Status == "Completed")
                    {

                    }
                }
            }


            //END COmmand Here

            ViewData["Paginations"] = getTotalPage;
            ViewData["getPaging"] = page;
            ViewData["Sales"] = sales2;

            //Dictionary<int, bool> deleteSales1 = new Dictionary<int, bool>();
            //foreach (Sale sales in checkPageItems)
            //{
            //	bool isDeletable = true;

            //	if (sales.TransactionType != "Sell" && sales.Status == "Completed")
            //	{
            //		List<SaleTransaction> filteredTransactions = sales.SaleTransactions.Where(e => e.TransactionType == "Buy").ToList();

            //		foreach (SaleTransaction transaction in filteredTransactions)
            //		{
            //			EndDayTrade trade = _endDayTradesModel.GetProductCurrentTrade(transaction.CurrencyId, sales.LastApprovalOn);

            //			if (trade != null)
            //			{
            //				EndDayTrade futureTrade = _endDayTradesModel.GetProductFutureTrade(transaction.CurrencyId, trade.CurrentActivationTime);

            //				if (futureTrade != null)
            //				{
            //					isDeletable = false;
            //				}
            //			}
            //		}
            //	}

            //	deleteSales1.Add(sales.ID, isDeletable);
            //}

            //ViewData["DeleteSales"] = deleteSales1;

            ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
            return View();
        }

        //GET: Listing
        public ActionResult Listing(int page = 1, string searchStatus = "")
        {
            int pageSize = Convert.ToInt32(ConfigurationManager.AppSettings["SalePageSize"]);

            TempData["Page"] = page;
            ViewData["Page"] = page;

            TempData["PageSize"] = pageSize;
            ViewData["PageSize"] = pageSize;

            ViewData["SearchKeyword"] = "";

            if (TempData["SearchKeyword"] != null)
            {
                ViewData["SearchKeyword"] = TempData["SearchKeyword"];
                TempData.Keep("SearchKeyword");
            }

            ViewData["SearchStatus"] = searchStatus;
            TempData["SearchStatus"] = searchStatus;

            ViewData["AllSalesActive"] = "";
            ViewData["AllCompletedActive"] = "";
            ViewData["AllDeliveriesActive"] = "";
            ViewData["AllPendingActive"] = "";

            ViewData["PendingAccountActive"] = "";
            ViewData["PendingPackingActive"] = "";
            ViewData["PendingIncomingDeliveryActive"] = "";
            ViewData["PendingCashierActive"] = "";

            ViewData["PendingAssignDeliveryActive"] = "";
            ViewData["PendingDeliveryActive"] = "";
            ViewData["PendingGMApproval"] = "";
            ViewData["PendingGMApprovalReject"] = "";

            if (searchStatus == "Completed")
            {
                ViewData["AllCompletedActive"] = "active";
                ViewData["CurrentStatus"] = "All Completed";
            }
            else if (searchStatus == "Deliveries")
            {
                ViewData["AllDeliveriesActive"] = "active";
                ViewData["CurrentStatus"] = "All Deliveries";
            }
            else if (searchStatus == "Pending")
            {
                ViewData["AllPendingActive"] = "active";
                ViewData["CurrentStatus"] = "All Pending";
            }
            else if (searchStatus == "Pending Assign Delivery")
            {
                ViewData["PendingAssignDeliveryActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Assign Delivery Only";
            }
            else if (searchStatus == "Pending Delivery")
            {
                ViewData["PendingDeliveryActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Delivery Only";
            }
            else if (searchStatus == "Pending GM Approval")
            {
                ViewData["PendingGMApproval"] = "active";
                ViewData["CurrentStatus"] = "Pending GM Approval";
            }
            else if (searchStatus == "Pending GM Approval (Rejected)")
            {
                ViewData["PendingGMApprovalReject"] = "active";
                ViewData["CurrentStatus"] = "Pending GM Approval (Rejected)";
            }
            else if (searchStatus == "Pending Accounts")
            {
                ViewData["PendingAccountActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Accounts";

            }
            else if (searchStatus == "Pending Packing")
            {
                ViewData["PendingPackingActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Packing";
            }
            else if (searchStatus.Contains("Pending Incoming Delivery"))
            {
                ViewData["PendingIncomingDeliveryActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Incoming Delivery";
            }
            else if (searchStatus == "Pending Cashier")
            {
                ViewData["PendingCashierActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Cashier";
            }
            else
            {
                ViewData["AllSalesActive"] = "active";
                ViewData["CurrentStatus"] = "All Sales";
            }

            //check if is junior dealer only, then only show his own data.
            string userRole = Session["UserRole"].ToString();
            string[] userRoleList = userRole.Split(',');

            var getTotalPage = new int();
            bool MultipleRole = true;
            int userid = Convert.ToInt32(Session["UserId"].ToString());
            if (Array.IndexOf(userRoleList, "Junior Dealer") >= 0)
            {
                if (userRoleList.Length > 1)
                {
                    //this is contain another role
                    getTotalPage = _salesModel.GetPageCount2(ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString(), MultipleRole, userid);
                }
                else
                {
                    //this is only junior dealer
                    MultipleRole = false;
                    getTotalPage = _salesModel.GetPageCount2(ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString(), MultipleRole, userid);
                }
            }
            else
            {
                getTotalPage = _salesModel.GetPageCount(ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString());
            }

            var checkPageItems = _salesModel.GetCustomItems2(page, ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString(), MultipleRole, userid);


            ViewData["Paginations"] = getTotalPage;
            ViewData["getPaging"] = page;
            ViewData["Sales"] = checkPageItems;

            Dictionary<int, bool> deleteSales1 = new Dictionary<int, bool>();
            foreach (Sale sales in checkPageItems)
            {
                bool isDeletable = true;

                if (sales.TransactionType != "Sell" && sales.Status == "Completed")
                {
                    List<SaleTransaction> filteredTransactions = sales.SaleTransactions.Where(e => e.TransactionType == "Buy").ToList();

                    foreach (SaleTransaction transaction in filteredTransactions)
                    {
                        EndDayTrade trade = _endDayTradesModel.GetProductCurrentTrade(transaction.CurrencyId, sales.LastApprovalOn);

                        if (trade != null)
                        {
                            EndDayTrade futureTrade = _endDayTradesModel.GetProductFutureTrade(transaction.CurrencyId, trade.CurrentActivationTime);

                            if (futureTrade != null)
                            {
                                isDeletable = false;
                            }
                        }
                    }
                }

                deleteSales1.Add(sales.ID, isDeletable);
            }

            ViewData["DeleteSales"] = deleteSales1;

            ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
            return View();
        }

        //POST: Listing
        [HttpPost]
        public ActionResult Listing(FormCollection form)
        {
            int page = 1;
            int pageSize = Convert.ToInt32(ConfigurationManager.AppSettings["SalePageSize"]);

            TempData["Page"] = page;
            ViewData["Page"] = page;

            TempData["PageSize"] = pageSize;
            ViewData["PageSize"] = pageSize;

            ViewData["SearchKeyword"] = form["SearchKeyword"].Trim();
            TempData["SearchKeyword"] = form["SearchKeyword"].Trim();

            ViewData["SearchStatus"] = "";

            if (TempData["SearchStatus"] != null)
            {
                ViewData["SearchStatus"] = TempData["SearchStatus"];
            }

            ViewData["AllSalesActive"] = "";
            ViewData["AllCompletedActive"] = "";
            ViewData["AllPendingActive"] = "";
            ViewData["AllDeliveriesActive"] = "";
            ViewData["PendingAssignDeliveryActive"] = "";
            ViewData["PendingDeliveryActive"] = "";
            ViewData["PendingGMApproval"] = "";
            ViewData["PendingGMApprovalReject"] = "";

            ViewData["PendingAccountActive"] = "";
            ViewData["PendingPackingActive"] = "";
            ViewData["PendingIncomingDeliveryActive"] = "";
            ViewData["PendingCashierActive"] = "";

            if (ViewData["SearchStatus"].ToString() == "Completed")
            {
                ViewData["AllCompletedActive"] = "active";
                ViewData["CurrentStatus"] = "All Completed";
            }
            else if (ViewData["SearchStatus"].ToString() == "Deliveries")
            {
                ViewData["AllDeliveriesActive"] = "active";
                ViewData["CurrentStatus"] = "All Deliveries";
            }
            else if (ViewData["SearchStatus"].ToString() == "Pending")
            {
                ViewData["AllPendingActive"] = "active";
                ViewData["CurrentStatus"] = "All Pending";
            }
            else if (ViewData["SearchStatus"].ToString() == "Pending Assign Delivery")
            {
                ViewData["PendingAssignDeliveryActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Assign Delivery Only";
            }
            else if (ViewData["SearchStatus"].ToString() == "Pending Delivery")
            {
                ViewData["PendingDeliveryActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Delivery Only";
            }
            else if (ViewData["SearchStatus"].ToString() == "Pending Accounts")
            {
                ViewData["PendingAccountActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Accounts";

            }
            else if (ViewData["SearchStatus"].ToString() == "Pending Packing")
            {
                ViewData["PendingPackingActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Packing";
            }
            else if (ViewData["SearchStatus"].ToString().Contains("Pending Incoming Delivery"))
            {
                ViewData["PendingIncomingDeliveryActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Incoming Delivery";
            }
            else if (ViewData["SearchStatus"].ToString() == "Pending Cashier")
            {
                ViewData["PendingCashierActive"] = "active";
                ViewData["CurrentStatus"] = "Pending Cashier";
            }
            else if (ViewData["SearchStatus"].ToString() == "Pending GM Approval")
            {
                ViewData["PendingGMApproval"] = "active";
                ViewData["CurrentStatus"] = "Pending GM Approval";
            }
            else if (ViewData["SearchStatus"].ToString() == "Pending GM Approval (Rejected)")
            {
                ViewData["PendingGMApprovalReject"] = "active";
                ViewData["CurrentStatus"] = "Pending GM Approval (Rejected)";
            }
            else
            {
                ViewData["AllSalesActive"] = "active";
                ViewData["CurrentStatus"] = "All Sales";
            }

            //Start
            string userRole = Session["UserRole"].ToString();
            string[] userRoleList = userRole.Split(',');

            var getTotalPage = new int();
            bool MultipleRole = true;
            int userid = Convert.ToInt32(Session["UserId"].ToString());

            if (Array.IndexOf(userRoleList, "Junior Dealer") >= 0)
            {
                if (userRoleList.Length > 1)
                {
                    //this is contain another role
                    getTotalPage = _salesModel.GetPageCount2(ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString(), MultipleRole, userid);
                }
                else
                {
                    //this is only junior dealer
                    MultipleRole = false;
                    getTotalPage = _salesModel.GetPageCount2(ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString(), MultipleRole, userid);
                }
            }
            else
            {
                getTotalPage = _salesModel.GetPageCount(ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString());
            }

            var checkPageItems = _salesModel.GetCustomItems2(page, ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString(), MultipleRole, userid);

            //End
            ViewData["Paginations"] = getTotalPage;
            ViewData["getPaging"] = page;
            ViewData["Sales"] = checkPageItems;

            Dictionary<int, bool> deleteSales1 = new Dictionary<int, bool>();
            foreach (Sale sales in checkPageItems)
            {
                bool isDeletable = true;

                if (sales.TransactionType != "Sell" && sales.Status == "Completed")
                {
                    List<SaleTransaction> filteredTransactions = sales.SaleTransactions.Where(e => e.TransactionType == "Buy").ToList();

                    foreach (SaleTransaction transaction in filteredTransactions)
                    {
                        EndDayTrade trade = _endDayTradesModel.GetProductCurrentTrade(transaction.CurrencyId, sales.LastApprovalOn);

                        if (trade != null)
                        {
                            EndDayTrade futureTrade = _endDayTradesModel.GetProductFutureTrade(transaction.CurrencyId, trade.CurrentActivationTime);

                            if (futureTrade != null)
                            {
                                isDeletable = false;
                            }
                        }
                    }
                }

                deleteSales1.Add(sales.ID, isDeletable);
            }

            ViewData["DeleteSales"] = deleteSales1;

            ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
            return View();
        }

        //GET: ViewTransactions
        public ActionResult ViewTransactions(int id)
        {
            Sale sales = _salesModel.GetSingle(id);
            sales.SaleTransactions = sales.SaleTransactions.OrderBy(e => e.ID).ToList();
            ViewData["Sale"] = sales;

            Product sgd = _productsModel.FindCurrencyCode("SGD");
            ViewData["SGDDP"] = GetDecimalFormat(sgd.Decimal);
            ViewData["RATEDP"] = GetRateFormat(rateDP);

            Dictionary<int, string> dictionaryAmountForeignFormat = new Dictionary<int, string> {
                {0, "###,0"},
                {1, "#,##0.0"},
                {2, "#,##0.00"},
                {3, "#,##0.000"},
                {4, "#,##0.0000"},
                {5, "#,##0.00000"},
                {6, "#,##0.000000"},
                {7, "#,##0.0000000"},
                {8, "#,##0.00000000"}
            };
            ViewData["DictionaryAmountForeignFormat"] = dictionaryAmountForeignFormat;

            return View();
        }

        //GET: View Approval History Model
        public ActionResult ViewApprovalHistory(int id)
        {
            IList<ApprovalHistorys> getApprovalHistory = _approvalHistorysModel.GetAll("Sale", id);
            ViewData["ApprovalHistory"] = getApprovalHistory;
            ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
            return View();
        }

        public ActionResult AddChequeModel(int id)
        {
            ViewData["RowID"] = id;
            return View();
        }

        public ActionResult AddBankTransferModel(int id)
        {
            ViewData["RowID"] = id;
            return View();
        }

        //GET: ViewEmailLogsIndex
        public ActionResult ViewEmailLogsIndex(int id)
        {
            if (TempData["EmailLogsSearchKeyword"] != null)
            {
                TempData.Remove("EmailLogsSearchKeyword");
            }

            return RedirectToAction("EmailLogsSearchKeyword", new { @id = id });
        }

        //GET: ViewEmailLogs
        public ActionResult ViewEmailLogs(int id, int page = 1)
        {
            Sale sale = null;

            if (Session["UserRole"].ToString().Contains("Super Admin") || Session["UserRole"].ToString().Contains("General Manager"))
            {
                sale = _salesModel.GetSingle(id);

                if (sale == null)
                {
                    TempData.Add("Result", "danger|Sale record not found!");
                }
            }
            else
            {
                TempData.Add("Result", "danger|You are not allowed to view email logs!");
            }

            ViewData["EmailLogsTitle"] = "Email Logs";

            int pageSize = Convert.ToInt32(ConfigurationManager.AppSettings["SalePageSize"]);

            TempData["EmailLogsPage"] = page;
            ViewData["EmailLogsPage"] = page;

            TempData["EmailLogsPageSize"] = pageSize;
            ViewData["EmailLogsPageSize"] = pageSize;

            ViewData["EmailLogsSearchKeyword"] = "";
            if (TempData["EmailLogsSearchKeyword"] != null)
            {
                ViewData["EmailLogsSearchKeyword"] = TempData["EmailLogsSearchKeyword"].ToString();
            }

            IPagedList<EmailLog> emailLogs = null;

            if (sale != null)
            {
                emailLogs = _emailLogsModel.GetPaged(new List<string> { "Email Receipt", "Email Confirmation" }, ViewData["EmailLogsSearchKeyword"].ToString(), sale.ID, page, pageSize);

                ViewData["EmailLogsTitle"] = "Email Logs - " + sale.MemoID;
            }

            ViewData["EmailLog"] = emailLogs;
            ViewData["SaleId"] = id;
            ViewData["EmailReceiptFolder"] = ConfigurationManager.AppSettings["EmailReceiptFolder"].ToString();
            ViewData["EmailConfirmationFolder"] = ConfigurationManager.AppSettings["EmailConfirmationFolder"].ToString();

            ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
            return View();
        }

        //POST: ViewEmailLogs
        [HttpPost]
        public ActionResult ViewEmailLogs(int id, FormCollection form)
        {
            Sale sale = null;

            if (Session["UserRole"].ToString().Contains("Super Admin") || Session["UserRole"].ToString().Contains("General Manager"))
            {
                sale = _salesModel.GetSingle(id);

                if (sale == null)
                {
                    TempData.Add("Result", "danger|Sale record not found!");
                }
            }
            else
            {
                TempData.Add("Result", "danger|You are not allowed to view email logs!");
            }

            ViewData["EmailLogsTitle"] = "Email Logs";

            int page = 1;
            int pageSize = Convert.ToInt32(ConfigurationManager.AppSettings["SalePageSize"]);

            TempData["EmailLogsPage"] = page;
            ViewData["EmailLogsPage"] = page;

            TempData["EmailLogsPageSize"] = pageSize;
            ViewData["EmailLogsPageSize"] = pageSize;

            ViewData["EmailLogsSearchKeyword"] = form["EmailLogsSearchKeyword"].Trim();
            TempData["EmailLogsSearchKeyword"] = form["EmailLogsSearchKeyword"].Trim();

            IPagedList<EmailLog> emailLogs = null;

            if (sale != null)
            {
                emailLogs = _emailLogsModel.GetPaged(new List<string> { "Email Receipt", "Email Confirmation" }, ViewData["EmailLogsSearchKeyword"].ToString(), sale.ID, page, pageSize);

                ViewData["EmailLogsTitle"] = "Email Logs - " + sale.MemoID;
            }

            ViewData["EmailLog"] = emailLogs;
            ViewData["SaleId"] = id;
            ViewData["EmailReceiptFolder"] = ConfigurationManager.AppSettings["EmailReceiptFolder"].ToString();
            ViewData["EmailConfirmationFolder"] = ConfigurationManager.AppSettings["EmailConfirmationFolder"].ToString();

            ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
            return View();
        }

        //GET: Create
        [RedirectingActionForCreate]
        public ActionResult Create()
        {
            Dropdown[] customerDDL = CustomerDDL();
            ViewData["CustomerDropdown"] = new SelectList(customerDDL, "val", "name");

            ViewData["CustomerContact"] = "";
            ViewData["CustomerAddress"] = "";

            //Dropdown[] collectionTimeDDL = CollectionTimeDDL();
            //ViewData["CollectionTimeDropdown"] = new SelectList(collectionTimeDDL, "val", "name");

            ViewData["NonUrgentRadio"] = "checked";
            ViewData["UrgentRadio"] = "";
            ViewData["RequireDeliveryCheckbox"] = "";
            ViewData["TransactionTypeBuyRadio"] = "";
            ViewData["TransactionTypeSellRadio"] = "";
            ViewData["TransactionTypeEncashmentRadio"] = "";
            ViewData["TransactionTypeSwapRadio"] = "";
            ViewData["TransactionTypeCrossCurrencyRadio"] = "";
            ViewData["LocalPaymentModeCashCheckbox"] = "checked";
            ViewData["LocalPaymentModeCheque1Checkbox"] = "";
            ViewData["LocalPaymentModeCheque2Checkbox"] = "";
            ViewData["LocalPaymentModeCheque3Checkbox"] = "";
            ViewData["LocalPaymentModeBankTransferCheckbox"] = "";

            Dropdown[] localPaymentBankDDL = LocalPaymentBankDDL();
            ViewData["CashBankDropdown"] = new SelectList(localPaymentBankDDL, "val", "name", "CASH");
            ViewData["Cheque1BankDropdown"] = new SelectList(localPaymentBankDDL, "val", "name");
            ViewData["Cheque2BankDropdown"] = new SelectList(localPaymentBankDDL, "val", "name");
            ViewData["Cheque3BankDropdown"] = new SelectList(localPaymentBankDDL, "val", "name");
            ViewData["BankTransferBankDropdown"] = new SelectList(localPaymentBankDDL, "val", "name");

            ViewData["PendingChequeLog"] = 0;
            ViewData["PendingBankTransferLog"] = 0;

            ViewData["PendingLocalCheque1Log"] = 0;
            ViewData["PendingLocalCheque2Log"] = 0;
            ViewData["PendingLocalCheque3Log"] = 0;
            ViewData["PendingLocalBankTransferLog"] = 0;

            ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
            return View();
        }

        //POST: Create
        [HttpPost]
        [RedirectingActionForCreate]
        public ActionResult Create(Sale sales, FormCollection form)
        {
            int page = 1;

            ViewData["PendingChequeLog"] = 0;
            ViewData["PendingBankTransferLog"] = 0;

            ViewData["PendingLocalCheque1Log"] = 0;
            ViewData["PendingLocalCheque2Log"] = 0;
            ViewData["PendingLocalCheque3Log"] = 0;
            ViewData["PendingLocalBankTransferLog"] = 0;

            CustomerParticular customer = null;
            sales.CashBank = "CASH";

            if (sales.CustomerParticularId > 0)
            {
                customer = _customerParticularsModel.GetSingle(sales.CustomerParticularId);

                if (customer == null)
                {
                    ModelState.AddModelError("sales.CustomerParticularId", "Customer record not found!");
                }
                else
                {
                    if (customer.Others[0].Status != "Active")
                    {
                        ModelState.AddModelError("sales.CustomerParticularId", "Customer is not active!");
                    }
                }
            }

            if (!string.IsNullOrEmpty(sales.TransactionType))
            {
                if (sales.TransactionType == "Buy" || sales.TransactionType == "Sell")
                {
                    if (string.IsNullOrEmpty(form["sales.LocalPaymentMode"]))
                    {
                        ModelState.AddModelError("sales.LocalPaymentMode", "Local Payment Mode is required!");
                    }
                    else
                    {
                        string[] paymentModes = form["sales.LocalPaymentMode"].ToString().Split(',');

                        if (paymentModes.Length > 4)
                        {
                            ModelState.AddModelError("sales.LocalPaymentMode", "Maximum FOUR Payment Modes only!");
                        }

                        if (form["sales.LocalPaymentMode"].ToString().Contains("Cash"))
                        {
                            ModelState cashAmountModel = ModelState["sales.CashAmount"];
                            cashAmountModel.Errors.Clear();

                            if (string.IsNullOrEmpty(form["sales.CashAmount"]))
                            {
                                ModelState.AddModelError("sales.CashAmount", "Cash Amount is required!");
                            }
                            else
                            {
                                bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.CashAmount"].ToString());

                                if (!checkFormat)
                                {
                                    ModelState.AddModelError("sales.CashAmount", "Cash Amount is not valid!");
                                }
                                else
                                {
                                    sales.CashAmount = Convert.ToDecimal(form["sales.CashAmount"].ToString());
                                }
                            }
                        }

                        if (form["sales.LocalPaymentMode"].ToString().Contains("Cheque 1"))
                        {
                            ModelState Cheque1AmountModel = ModelState["sales.Cheque1Amount"];
                            Cheque1AmountModel.Errors.Clear();

                            if (string.IsNullOrEmpty(form["sales.Cheque1Amount"]))
                            {
                                ModelState.AddModelError("sales.Cheque1Amount", "Cheque 1 Amount is required!");
                            }
                            else
                            {
                                bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.Cheque1Amount"].ToString());

                                if (!checkFormat)
                                {
                                    ModelState.AddModelError("sales.Cheque1Amount", "Cheque 1 Amount is not valid!");
                                }
                                else
                                {
                                    if (sales.TransactionType == "Sell")
                                    {
                                        ViewData["PendingLocalCheque1Log"] = 1;
                                    }

                                    sales.Cheque1Amount = Convert.ToDecimal(form["sales.Cheque1Amount"].ToString());
                                }
                            }
                        }

                        if (form["sales.LocalPaymentMode"].ToString().Contains("Cheque 2"))
                        {
                            ModelState Cheque2AmountModel = ModelState["sales.Cheque2Amount"];
                            Cheque2AmountModel.Errors.Clear();

                            if (string.IsNullOrEmpty(form["sales.Cheque2Amount"]))
                            {
                                ModelState.AddModelError("sales.Cheque2Amount", "Cheque 2 Amount is required!");
                            }
                            else
                            {
                                bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.Cheque2Amount"].ToString());

                                if (!checkFormat)
                                {
                                    ModelState.AddModelError("sales.Cheque2Amount", "Cheque 2 Amount is not valid!");
                                }
                                else
                                {

                                    if (sales.TransactionType == "Sell")
                                    {
                                        ViewData["PendingLocalCheque2Log"] = 1;
                                    }

                                    sales.Cheque2Amount = Convert.ToDecimal(form["sales.Cheque2Amount"].ToString());
                                }
                            }
                        }

                        if (form["sales.LocalPaymentMode"].ToString().Contains("Cheque 3"))
                        {
                            ModelState Cheque3AmountModel = ModelState["sales.Cheque3Amount"];
                            Cheque3AmountModel.Errors.Clear();

                            if (string.IsNullOrEmpty(form["sales.Cheque3Amount"]))
                            {
                                ModelState.AddModelError("sales.Cheque3Amount", "Cheque 3 Amount is required!");
                            }
                            else
                            {
                                bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.Cheque3Amount"].ToString());

                                if (!checkFormat)
                                {
                                    ModelState.AddModelError("sales.Cheque3Amount", "Cheque 3 Amount is not valid!");
                                }
                                else
                                {

                                    if (sales.TransactionType == "Sell")
                                    {
                                        ViewData["PendingLocalCheque3Log"] = 1;
                                    }

                                    sales.Cheque3Amount = Convert.ToDecimal(form["sales.Cheque3Amount"].ToString());
                                }
                            }
                        }

                        if (form["sales.LocalPaymentMode"].ToString().Contains("Bank Transfer"))
                        {
                            ModelState bankTransferAmountModel = ModelState["sales.BankTransferAmount"];
                            bankTransferAmountModel.Errors.Clear();

                            if (string.IsNullOrEmpty(form["sales.BankTransferAmount"]))
                            {
                                ModelState.AddModelError("sales.BankTransferAmount", "Bank Transfer Amount is required!");
                            }
                            else
                            {
                                bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.BankTransferAmount"].ToString());

                                if (!checkFormat)
                                {
                                    ModelState.AddModelError("sales.BankTransferAmount", "Bank Transfer Amount is not valid!");
                                }
                                else
                                {

                                    if (sales.TransactionType == "Sell")
                                    {
                                        ViewData["PendingLocalBankTransferLog"] = 1;
                                    }

                                    sales.BankTransferAmount = Convert.ToDecimal(form["sales.BankTransferAmount"].ToString());
                                }
                            }
                        }
                    }

                    //Memo Balance Validation
                    ModelState memoBalModel = ModelState["sales.MemoBalance"];
                    memoBalModel.Errors.Clear();

                    if (string.IsNullOrEmpty(form["sales.MemoBalance"]))
                    {
                        ModelState.AddModelError("sales.MemoBalance", "Memo Balance is required!");
                    }
                    else
                    {
                        bool checkFormat = FormValidationHelper.AmountValidation(form["sales.MemoBalance"]);

                        if (!checkFormat)
                        {
                            ModelState.AddModelError("sales.MemoBalance", "Memo Balance is not valid!");
                        }
                        else
                        {
                            sales.MemoBalance = Convert.ToDecimal(form["sales.MemoBalance"]);
                        }
                    }
                }
            }

            List<string> transactionKeys = form.AllKeys.Where(e => e.Contains("Transaction_ID_")).ToList();

            decimal totalForeign = 0;
            decimal totalLocal = 0;

            if (transactionKeys.Count > 0)
            {
                foreach (string key in transactionKeys)
                {
                    string rowId = key.Split('_')[2];

                    //Validation for All Transaction Types
                    if (string.IsNullOrEmpty(form["Transaction_Type_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_Type_" + rowId, "Type is required!");
                    }

                    if (string.IsNullOrEmpty(form["Transaction_Currency_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_Currency_" + rowId, "Currency is required!");
                    }
                    else
                    {
                        Product currency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                        if (currency == null)
                        {
                            ModelState.AddModelError("Transaction_Currency_" + rowId, "Currency record not found!");
                        }
                    }

                    if (string.IsNullOrEmpty(form["Transaction_AmountLocal_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_AmountLocal_" + rowId, "Amount (Local) is required!");
                    }
                    else
                    {
                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_AmountLocal_" + rowId]);

                        if (!checkAmountLocalFormat)
                        {
                            ModelState.AddModelError("Transaction_AmountLocal_" + rowId, "Amount (Local) is not valid!");
                        }
                        else
                        {
                            if (sales.TransactionType == "Buy")
                            {
                                totalLocal += Convert.ToDecimal(form["Transaction_AmountLocal_" + rowId]);
                            }
                            else
                            {
                                if (form["Transaction_Type_" + rowId] == "Sell")
                                {
                                    totalLocal += Convert.ToDecimal(form["Transaction_AmountLocal_" + rowId]);
                                }
                            }
                        }
                    }

                    if (string.IsNullOrEmpty(form["Transaction_AmountForeign_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!");
                    }
                    else
                    {
                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_AmountForeign_" + rowId]);

                        if (!checkAmountLocalFormat)
                        {
                            ModelState.AddModelError("Transaction_AmountForeign_" + rowId, "Amount (Foreign) is not valid!");
                        }
                        else
                        {
                            if (sales.TransactionType == "Buy")
                            {
                                totalForeign += Convert.ToDecimal(form["Transaction_AmountForeign_" + rowId]);
                            }
                            else
                            {
                                if (form["Transaction_Type_" + rowId] == "Sell")
                                {
                                    totalForeign += Convert.ToDecimal(form["Transaction_AmountForeign_" + rowId]);
                                }
                            }
                        }
                    }

                    if (string.IsNullOrEmpty(form["Transaction_PaymentMode_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_PaymentMode_" + rowId, "Payment Mode is not valid!");
                    }
                    else
                    {
                        if (form["Transaction_PaymentMode_" + rowId].ToString() == "Cheque")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
                            {
                                //ModelState.AddModelError("Transaction_ChequeNo_" + rowId, "Cheque No. is required!");
                            }
                            else
                            {
                                if (sales.TransactionType == "Buy")
                                {
                                    ViewData["PendingChequeLog"] = 1;
                                }
                            }
                        }
                        else if (form["Transaction_PaymentMode_" + rowId].ToString() == "Bank Transfer")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
                            {
                                //ModelState.AddModelError("Transaction_BankTransferNo_" + rowId, "Bank Transfer No. is required!");
                            }
                            else
                            {
                                if (sales.TransactionType == "Buy")
                                {
                                    ViewData["PendingBankTransferLog"] = 1;
                                }
                            }
                        }
                    }

                    if (sales.TransactionType == "Buy") //Perform Buy Validation
                    {
                        if (string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                        {
                            ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is required!");
                        }
                        else
                        {
                            bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                            if (checkRateFormat)
                            {
                                if (sales.CustomerParticularId > 0 && !string.IsNullOrEmpty(form["Transaction_Currency_" + rowId]))
                                {
                                    Product product = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));
                                    decimal buyRate = 0;
                                    decimal acceptable = product.AcceptableRange;

                                    CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(sales.CustomerParticularId, Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                                    if (acceptable > 0)
                                    {
                                        if (GetCustomRate != null)
                                        {
                                            if (GetCustomRate.BuyRate != 0 && GetCustomRate != null)
                                            {
                                                if (product.BuyRate != 0 && product.BuyRate != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(product.BuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                    buyRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    if (product.AutomatedBuyRate != 0 && product.AutomatedBuyRate != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.AutomatedBuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                        buyRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (product.BuyRate != 0 && product.BuyRate != null)
                                                {
                                                    if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.BuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                        buyRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        buyRate = Convert.ToDecimal(product.BuyRate);
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.AutomatedBuyRate != 0 && product.AutomatedBuyRate != null)
                                                    {
                                                        if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.AutomatedBuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                            buyRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            buyRate = Convert.ToDecimal(product.AutomatedBuyRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (product.BuyRate != 0 && product.BuyRate != null)
                                            {
                                                if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(product.BuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                    buyRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    buyRate = Convert.ToDecimal(product.BuyRate);
                                                }
                                            }
                                            else
                                            {
                                                if (product.AutomatedBuyRate != 0 && product.AutomatedBuyRate != null)
                                                {
                                                    if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.AutomatedBuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                        buyRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        buyRate = Convert.ToDecimal(product.AutomatedBuyRate);
                                                    }
                                                }
                                                else
                                                {
                                                    buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                }
                                            }
                                        }

                                        //if (product.BuyRate != null)
                                        //{
                                        //    buyRate = Convert.ToDecimal(product.BuyRate);
                                        //}
                                        //else
                                        //{
                                        //    buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                        //}

                                        decimal upperLimit = buyRate * (1 + acceptable / 100);
                                        decimal lowerLimit = buyRate * (1 - acceptable / 100);
                                        decimal rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);

                                        if (rate < lowerLimit || rate > upperLimit)
                                        {
                                            ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is out of acceptable range!");
                                        }
                                    }
                                }
                            }
                            else
                            {
                                ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is not valid!");
                            }
                        }
                    }
                    else if (sales.TransactionType == "Sell") //Perform Sell Validation
                    {
                        if (string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                        {
                            ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is required!");
                        }
                        else
                        {
                            bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                            if (checkRateFormat)
                            {
                                if (sales.CustomerParticularId > 0 && !string.IsNullOrEmpty(form["Transaction_Currency_" + rowId]))
                                {
                                    Product product = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));
                                    decimal sellRate = 0;
                                    decimal acceptable = product.AcceptableRange;

                                    CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(sales.CustomerParticularId, Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                                    if (acceptable > 0)
                                    {
                                        if (GetCustomRate != null)
                                        {
                                            if (GetCustomRate.SellRate != 0 && GetCustomRate != null)
                                            {
                                                if (product.SellRate != 0 && product.SellRate != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (product.SellRate != 0 && product.SellRate != null)
                                                {
                                                    if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(product.SellRate);
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                    {
                                                        if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                            sellRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(product.AutomatedSellRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (product.SellRate != 0 && product.SellRate != null)
                                            {
                                                if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(product.SellRate);
                                                }
                                            }
                                            else
                                            {
                                                if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                {
                                                    if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(product.AutomatedSellRate);
                                                    }
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                }
                                            }
                                        }


                                        //if (product.SellRate != null)
                                        //{
                                        //    sellRate = Convert.ToDecimal(product.SellRate);
                                        //}
                                        //else
                                        //{
                                        //    sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                        //}

                                        decimal upperLimit = sellRate * (1 + acceptable / 100);
                                        decimal lowerLimit = sellRate * (1 - acceptable / 100);
                                        decimal rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);

                                        if (rate < lowerLimit || rate > upperLimit)
                                        {
                                            ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is out of acceptable range!");
                                        }
                                    }
                                }
                            }
                            else
                            {
                                ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is not valid!");
                            }
                        }
                    }
                    else if (sales.TransactionType == "Encashment") //Perform Encashment Validation
                    {
                        if (form["Transaction_Type_" + rowId].ToString() == "Sell")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is required!");
                            }
                            else
                            {
                                bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                                if (checkRateFormat)
                                {
                                    if (sales.CustomerParticularId > 0 && !string.IsNullOrEmpty(form["Transaction_Currency_" + rowId]))
                                    {
                                        Product product = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));
                                        decimal sellRate = 0;
                                        decimal acceptable = product.AcceptableRange;

                                        CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(sales.CustomerParticularId, Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                                        if (acceptable > 0)
                                        {
                                            if (GetCustomRate != null)
                                            {
                                                if (GetCustomRate.SellRate != 0 && GetCustomRate != null)
                                                {
                                                    if (product.SellRate != 0 && product.SellRate != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                            sellRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.SellRate != 0 && product.SellRate != null)
                                                    {
                                                        if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                            sellRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(product.SellRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                        {
                                                            if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                            {
                                                                decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                                sellRate = Convert.ToDecimal(FinalRate);
                                                            }
                                                            else
                                                            {
                                                                sellRate = Convert.ToDecimal(product.AutomatedSellRate);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (product.SellRate != 0 && product.SellRate != null)
                                                {
                                                    if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(product.SellRate);
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                    {
                                                        if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                            sellRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(product.AutomatedSellRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                    }
                                                }
                                            }

                                            //if (product.SellRate != null)
                                            //{
                                            //    sellRate = Convert.ToDecimal(product.SellRate);
                                            //}
                                            //else
                                            //{
                                            //    sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                            //}

                                            decimal upperLimit = sellRate * (1 + acceptable / 100);
                                            decimal lowerLimit = sellRate * (1 - acceptable / 100);
                                            decimal rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);

                                            if (rate < lowerLimit || rate > upperLimit)
                                            {
                                                ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is out of acceptable range!");
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is not valid!");
                                }
                            }

                            if (string.IsNullOrEmpty(form["Transaction_EncashmentRate_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_EncashmentRate_" + rowId, "Encashment Rate is required!");
                            }
                            else
                            {
                                bool checkEncashmentRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                                if (!checkEncashmentRateFormat)
                                {
                                    ModelState.AddModelError("Transaction_EncashmentRate_" + rowId, "Encashment Rate is not valid!");
                                }
                            }
                        }
                    }
                    else if (sales.TransactionType == "Swap") //Perform Swap Validation
                    {
                        if (form["Transaction_Type_" + rowId].ToString() == "Buy")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is required!");
                            }
                            else
                            {
                                bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                                if (checkRateFormat)
                                {
                                    if (sales.CustomerParticularId > 0 && !string.IsNullOrEmpty(form["Transaction_Currency_" + rowId]))
                                    {
                                        Product product = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));
                                        decimal buyRate = 0;
                                        decimal acceptable = product.AcceptableRange;

                                        CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(sales.CustomerParticularId, Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                                        if (acceptable > 0)
                                        {
                                            if (GetCustomRate != null)
                                            {
                                                if (GetCustomRate.BuyRate != 0 && GetCustomRate != null)
                                                {
                                                    if (product.BuyRate != 0 && product.BuyRate != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.BuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                        buyRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        if (product.AutomatedBuyRate != 0 && product.AutomatedBuyRate != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.AutomatedBuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                            buyRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.BuyRate != 0 && product.BuyRate != null)
                                                    {
                                                        if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.BuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                            buyRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            buyRate = Convert.ToDecimal(product.BuyRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (product.AutomatedBuyRate != 0 && product.AutomatedBuyRate != null)
                                                        {
                                                            if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                            {
                                                                decimal FinalRate = Convert.ToDecimal(product.AutomatedBuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                                buyRate = Convert.ToDecimal(FinalRate);
                                                            }
                                                            else
                                                            {
                                                                buyRate = Convert.ToDecimal(product.AutomatedBuyRate);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (product.BuyRate != 0 && product.BuyRate != null)
                                                {
                                                    if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.BuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                        buyRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        buyRate = Convert.ToDecimal(product.BuyRate);
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.AutomatedBuyRate != 0 && product.AutomatedBuyRate != null)
                                                    {
                                                        if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.AutomatedBuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                            buyRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            buyRate = Convert.ToDecimal(product.AutomatedBuyRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                    }
                                                }
                                            }

                                            //if (product.BuyRate != null)
                                            //{
                                            //    buyRate = Convert.ToDecimal(product.BuyRate);
                                            //}
                                            //else
                                            //{
                                            //    buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                            //}

                                            decimal upperLimit = buyRate * (1 + acceptable / 100);
                                            decimal lowerLimit = buyRate * (1 - acceptable / 100);
                                            decimal rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);

                                            if (rate < lowerLimit || rate > upperLimit)
                                            {
                                                ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is out of acceptable range!");
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is not valid!");
                                }
                            }

                            if (string.IsNullOrEmpty(form["Transaction_EncashmentRate_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_EncashmentRate_" + rowId, "Encashment Rate is required!");
                            }
                            else
                            {
                                bool checkEncashmentRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                                if (!checkEncashmentRateFormat)
                                {
                                    ModelState.AddModelError("Transaction_EncashmentRate_" + rowId, "Encashment Rate is not valid!");
                                }
                            }
                        }
                    }
                    else if (sales.TransactionType == "Cross Currency") //Perform Cross Currency Validation
                    {
                        if (form["Transaction_Type_" + rowId].ToString() == "Buy")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is required!");
                            }
                            else
                            {
                                bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                                if (!checkRateFormat)
                                {
                                    ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is not valid!");
                                }
                            }
                        }
                        else
                        {
                            if (string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is required!");
                            }
                            else
                            {
                                bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                                if (checkRateFormat)
                                {
                                    if (sales.CustomerParticularId > 0 && !string.IsNullOrEmpty(form["Transaction_Currency_" + rowId]))
                                    {
                                        Product product = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));
                                        decimal sellRate = 0;
                                        decimal acceptable = product.AcceptableRange;

                                        CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(sales.CustomerParticularId, Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                                        if (acceptable > 0)
                                        {
                                            if (GetCustomRate != null)
                                            {
                                                if (GetCustomRate.SellRate != 0 && GetCustomRate != null)
                                                {
                                                    if (product.SellRate != 0 && product.SellRate != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                            sellRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.SellRate != 0 && product.SellRate != null)
                                                    {
                                                        if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                            sellRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(product.SellRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                        {
                                                            if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                            {
                                                                decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                                sellRate = Convert.ToDecimal(FinalRate);
                                                            }
                                                            else
                                                            {
                                                                sellRate = Convert.ToDecimal(product.AutomatedSellRate);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (product.SellRate != 0 && product.SellRate != null)
                                                {
                                                    if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(product.SellRate);
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                    {
                                                        if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                            sellRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(product.AutomatedSellRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                    }
                                                }
                                            }

                                            //if (product.SellRate != null)
                                            //{
                                            //    sellRate = Convert.ToDecimal(product.SellRate);
                                            //}
                                            //else
                                            //{
                                            //    sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                            //}

                                            decimal upperLimit = sellRate * (1 + acceptable / 100);
                                            decimal lowerLimit = sellRate * (1 - acceptable / 100);
                                            decimal rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);

                                            if (rate < lowerLimit || rate > upperLimit)
                                            {
                                                ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is out of acceptable range!");
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is not valid!");
                                }
                            }

                            if (string.IsNullOrEmpty(form["Transaction_CrossRate_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_CrossRate_" + rowId, "Cross Rate is required!");
                            }
                            else
                            {
                                bool checkCrossRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_CrossRate_" + rowId]);

                                if (!checkCrossRateFormat)
                                {
                                    ModelState.AddModelError("Transaction_CrossRate_" + rowId, "Cross Rate is not valid!");
                                }
                            }
                        }
                    }

                    //Validation for Outgoing Denomination
                    List<string> denominationKeys = form.AllKeys.Where(e => e.Contains("Denomination_Value_" + rowId + "_")).ToList();
                    bool denominationError = false;

                    foreach (string denoKey in denominationKeys)
                    {
                        string denoId = denoKey.Split('_')[3];

                        if (string.IsNullOrEmpty(form[denoKey]))
                        {
                            ModelState.AddModelError(denoKey, "Denomination Value is required!");
                            denominationError = true;
                        }

                        if (!string.IsNullOrEmpty(form["Denomination_Value_Pieces_" + rowId + "_" + denoId]))
                        {
                            bool checkPieces = FormValidationHelper.IntegerValidation(form["Denomination_Value_Pieces_" + rowId + "_" + denoId].ToString().Replace(",", ""));

                            if (!checkPieces)
                            {
                                ModelState.AddModelError("Denomination_Value_Pieces_" + rowId + "_" + denoId, "Pieces is not valid!");
                                denominationError = true;
                            }
                        }

                        if (!string.IsNullOrEmpty(form["Denomination_Value_AmountForeign_" + rowId + "_" + denoId]))
                        {
                            bool checkAmountForeign = FormValidationHelper.NonNegativeAmountValidation(form["Denomination_Value_AmountForeign_" + rowId + "_" + denoId].ToString());

                            if (!checkAmountForeign)
                            {
                                ModelState.AddModelError("Denomination_Value_AmountForeign_" + rowId + "_" + denoId, "Amount (Foreign) is not valid!");
                                denominationError = true;
                            }
                        }
                    }

                    if (denominationKeys.Count > 0)
                    {
                        decimal totalCalculatedForeign = Convert.ToDecimal(form["Denomination_Total_Calculated_Foreign_" + rowId]);
                        decimal remainingForeign = Convert.ToDecimal(form["Denomination_Remaining_Foreign_" + rowId]);
                        decimal totalOrderForeign = Convert.ToDecimal(form["Denomination_Total_Order_Foreign_" + rowId]);

                        if (totalCalculatedForeign != totalOrderForeign)
                        {
                            ModelState.AddModelError("Denomination_Total_Calculated_Foreign_" + rowId, "Total Calculated Amount (Foreign) and Total Order Amount (Foreign) not equal!");
                            denominationError = true;
                        }
                    }

                    if (denominationError)
                    {
                        ModelState.AddModelError("Transaction_Denomination_" + rowId, "Outgoing Denomination has error!");
                    }
                }

                if (sales.TransactionType == "Buy" || sales.TransactionType == "Sell")
                {
                    decimal localPaymentAmount = 0;

                    if (sales.CashAmount != null)
                    {
                        localPaymentAmount += Convert.ToDecimal(sales.CashAmount);
                    }

                    if (sales.Cheque1Amount != null)
                    {
                        localPaymentAmount += Convert.ToDecimal(sales.Cheque1Amount);
                    }

                    if (sales.Cheque2Amount != null)
                    {
                        localPaymentAmount += Convert.ToDecimal(sales.Cheque2Amount);
                    }

                    if (sales.Cheque3Amount != null)
                    {
                        localPaymentAmount += Convert.ToDecimal(sales.Cheque3Amount);
                    }

                    if (sales.BankTransferAmount != null)
                    {
                        localPaymentAmount += Convert.ToDecimal(sales.BankTransferAmount);
                    }

                    if (sales.MemoBalance != null)
                    {
                        localPaymentAmount += Convert.ToDecimal(sales.MemoBalance);
                    }

                    if (totalLocal != localPaymentAmount)
                    {
                        ModelState.AddModelError("sales.LocalPaymentMode", "Local Payment Mode Amount and Total Amount (Local) not equal!");
                    }
                }
            }
            else
            {
                ModelState.AddModelError("Transaction", "Please add at least ONE transaction!");
            }

            lock (LockObject)
            {
                if (ModelState.IsValid)
                {
                    bool sale_result = false;

                    //For rollback if error occured
                    Dictionary<int, decimal[]> productOldRates = new Dictionary<int, decimal[]>();

                    try
                    {
                        string memoID = _settingsModel.GetCodeValue("PREFIX_SALE") + DateTime.Now.ToString("yy");

                        Sale lastRecord = _salesModel.GetLastRecord();

                        if (lastRecord != null)
                        {
                            var output = Regex.Replace(lastRecord.MemoID, @"[^0-9]", string.Empty);
                            int id = Convert.ToInt32(output.Substring(2)) + 1;
                            memoID += id.ToString().PadLeft(7, '0');
                        }
                        else
                        {
                            memoID += "0000001";
                        }

                        sales.MemoID = memoID;
                        sales.IssueDate = DateTime.Now;
                        if (!string.IsNullOrEmpty(sales.RequireDelivery))
                        {
                            sales.RequireDelivery = "Yes";
                        }
                        else
                        {
                            sales.RequireDelivery = "No";
                        }
                        if (sales.TransactionType == "Buy" || sales.TransactionType == "Sell")
                        {
                            sales.LocalPaymentMode = form["sales.LocalPaymentMode"].ToString();
                        }
                        else
                        {
                            sales.LocalPaymentMode = null;
                            sales.CashAmount = null;
                            sales.Cheque1Amount = null;
                            sales.Cheque1No = null;
                            sales.Cheque2Amount = null;
                            sales.Cheque2No = null;
                            sales.Cheque3Amount = null;
                            sales.Cheque3No = null;
                            sales.BankTransferAmount = null;
                            sales.BankTransferNo = null;
                            sales.MemoBalance = null;
                        }
                        sales.TotalAmountLocal = totalLocal;
                        sales.TotalAmountForeign = totalForeign;
                        sales.CreatedBy = Convert.ToInt32(Session["UserId"]);
                        sales.Status = "Pending Accounts";
                        if (customer.Others[0].GMApprovalAbove > 0)
                        {
                            if (sales.TotalAmountLocal >= Convert.ToDecimal(customer.Others[0].GMApprovalAbove))
                            {
                                sales.Status = "Pending GM Approval";
                            }
                        }

                        Random generator = new Random();
                        string r = generator.Next(0, 1000000).ToString("D6");

                        sales.CollectionCode = r;

                        sale_result = _salesModel.Add(sales);

                        if (sale_result)
                        {

                            int userid = Convert.ToInt32(Session["UserId"]);
                            string tableAffected = "Sales";
                            string description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Created Sale [" + sales.MemoID + "]";

                            bool sale_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);

                            if (sale_log)
                            {
                                //Add Approval History
                                bool approval_history = _approvalHistorysModel.Add("Sale", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Create", "[" + Session["Username"].ToString() + "] Created Sale [" + sales.MemoID + "]");

                                if (sales.TransactionType == "Buy")
                                {
                                    //Check the hidden Value
                                    if (ViewData["PendingChequeLog"].ToString() == "1")
                                    {
                                        bool chequelog = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Create", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque (Transaction Row) [" + sales.MemoID + "]");
                                    }

                                    //Check the hidden Value
                                    if (ViewData["PendingBankTransferLog"].ToString() == "1")
                                    {
                                        bool banktransferlog = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Create", "[" + Session["Username"].ToString() + "] Checked Transaction Bank Transfer (Transaction Row) [" + sales.MemoID + "]");
                                    }
                                }

                                if (sales.TransactionType == "Sell")
                                {
                                    //Check the hidden Value
                                    if (ViewData["PendingLocalCheque1Log"].ToString() == "1")
                                    {
                                        bool localcheque1log = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Create", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque 1 (Local Payment) [" + sales.MemoID + "]");
                                    }

                                    //Check the hidden Value
                                    if (ViewData["PendingLocalCheque2Log"].ToString() == "1")
                                    {
                                        bool localcheque2log = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Create", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque 2 (Local Payment) [" + sales.MemoID + "]");
                                    }

                                    //Check the hidden Value
                                    if (ViewData["PendingLocalCheque3Log"].ToString() == "1")
                                    {
                                        bool localcheque3log = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Create", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque 3 (Local Payment) [" + sales.MemoID + "]");
                                    }

                                    //Check the hidden Value
                                    if (ViewData["PendingLocalBankTransferLog"].ToString() == "1")
                                    {
                                        bool localbanktransferlog = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Create", "[" + Session["Username"].ToString() + "] Checked Transaction Bank Transfer (Local Payment) [" + sales.MemoID + "]");
                                    }
                                }
                            }

                            bool add_transaction = false;
                            bool add_denomination = false;

                            //To update Product rates for new sale, after changes 0.7
                            Dictionary<int, decimal> buyTransactions = new Dictionary<int, decimal>();
                            Dictionary<int, decimal> sellTransactions = new Dictionary<int, decimal>();
                            bool checkExistItem = false;
                            foreach (string key in transactionKeys)
                            {
                                string rowId = key.Split('_')[2];

                                SaleTransaction transaction = new SaleTransaction();
                                transaction.SaleId = sales.ID;
                                transaction.TransactionID = form[key].ToString();
                                transaction.TransactionType = form["Transaction_Type_" + rowId].ToString();
                                transaction.VesselName = form["Transaction_VesselName_" + rowId];
                                transaction.CurrencyId = Convert.ToInt32(form["Transaction_Currency_" + rowId]);
                                transaction.Rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                if (!string.IsNullOrEmpty(form["Transaction_EncashmentRate_" + rowId]))
                                {
                                    transaction.EncashmentRate = Convert.ToDecimal(form["Transaction_EncashmentRate_" + rowId]);
                                }
                                if (!string.IsNullOrEmpty(form["Transaction_CrossRate_" + rowId]))
                                {
                                    transaction.CrossRate = Convert.ToDecimal(form["Transaction_CrossRate_" + rowId]);
                                }
                                transaction.Unit = Convert.ToInt32(form["Transaction_Unit_" + rowId].Replace(",", ""));
                                transaction.PaymentMode = form["Transaction_PaymentMode_" + rowId];
                                if (!string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
                                {
                                    transaction.ChequeNo = form["Transaction_ChequeNo_" + rowId].ToString();
                                }
                                if (!string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
                                {
                                    transaction.BankTransferNo = form["Transaction_BankTransferNo_" + rowId].ToString();
                                }
                                transaction.AmountLocal = Convert.ToDecimal(form["Transaction_AmountLocal_" + rowId]);
                                transaction.AmountForeign = Convert.ToDecimal(form["Transaction_AmountForeign_" + rowId]);

                                checkExistItem = false;

                                //Check have duplicate items or not first.
                                using (var context = new DataAccess.GreatEastForex())
                                {
                                    var checkExist = context.SaleTransactions.Where(e => e.SaleId == transaction.SaleId && e.TransactionID == transaction.TransactionID && e.TransactionType == transaction.TransactionType && e.CurrencyId == transaction.CurrencyId).Select(e => new { e.ID, e.SaleId, e.TransactionID, e.TransactionType }).FirstOrDefault();

                                    if (checkExist != null)
                                    {
                                        checkExistItem = true;
                                    }
                                }

                                if (!checkExistItem)//means dont have duplicate item, then add in this
                                {
                                    bool result_transaction = _saleTransactionsModel.Add(transaction);

                                    if (result_transaction)
                                    {
                                        if (!add_transaction)
                                        {
                                            add_transaction = true;
                                        }

                                        if (transaction.TransactionType == "Buy")
                                        {
                                            //To update Product rates after changes 0.7
                                            if (sales.TransactionType != "Encashment" && sales.TransactionType != "Cross Currency")
                                            {
                                                if (buyTransactions.Count == 0)
                                                {
                                                    buyTransactions.Add(transaction.CurrencyId, transaction.Rate);
                                                }
                                                else
                                                {
                                                    if (buyTransactions.Keys.Contains(transaction.CurrencyId))
                                                    {
                                                        buyTransactions[transaction.CurrencyId] = transaction.Rate;
                                                    }
                                                    else
                                                    {
                                                        buyTransactions.Add(transaction.CurrencyId, transaction.Rate);
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //To update Product rates after changes 0.7
                                            if (sales.TransactionType != "Swap" && sales.TransactionType != "Cross Currency")
                                            {
                                                if (sellTransactions.Count == 0)
                                                {
                                                    sellTransactions.Add(transaction.CurrencyId, transaction.Rate);
                                                }
                                                else
                                                {
                                                    if (sellTransactions.Keys.Contains(transaction.CurrencyId))
                                                    {
                                                        sellTransactions[transaction.CurrencyId] = transaction.Rate;
                                                    }
                                                    else
                                                    {
                                                        sellTransactions.Add(transaction.CurrencyId, transaction.Rate);
                                                    }
                                                }
                                            }
                                        }

                                        List<string> denominationKeys = form.AllKeys.Where(e => e.Contains("Denomination_Value_" + rowId + "_")).ToList();

                                        if (denominationKeys.Count > 0)
                                        {
                                            foreach (string denoKey in denominationKeys)
                                            {
                                                string rowId2 = denoKey.Split('_')[3];

                                                SaleTransactionDenomination denomination = new SaleTransactionDenomination();
                                                denomination.SaleTransactionId = transaction.ID;
                                                string deno = form[denoKey].ToString();
                                                if (deno == "coins")
                                                {
                                                    denomination.Denomination = 0;
                                                }
                                                else
                                                {
                                                    denomination.Denomination = Convert.ToInt32(form[denoKey]);
                                                }
                                                denomination.Pieces = 0;
                                                if (!string.IsNullOrEmpty(form["Denomination_Value_Pieces_" + rowId + "_" + rowId2]))
                                                {
                                                    denomination.Pieces = Convert.ToInt32(form["Denomination_Value_Pieces_" + rowId + "_" + rowId2].ToString().Replace(",", ""));
                                                }
                                                denomination.AmountForeign = 0;
                                                if (!string.IsNullOrEmpty(form["Denomination_Value_AmountForeign_" + rowId + "_" + rowId2]))
                                                {
                                                    denomination.AmountForeign = Convert.ToDecimal(form["Denomination_Value_AmountForeign_" + rowId + "_" + rowId2]);
                                                }

                                                bool result_denomination = _saleTransactionDenominationsModel.Add(denomination);

                                                if (result_denomination)
                                                {
                                                    if (!add_denomination)
                                                    {
                                                        add_denomination = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            //after add all the sale transaction, write log file.
                            if (add_transaction)
                            {
                                userid = Convert.ToInt32(Session["UserId"]);
                                tableAffected = "SaleTransactions";
                                description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Created Sale Transactions [" + sales.MemoID + "]";

                                bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                            }

                            if (add_denomination)
                            {
                                userid = Convert.ToInt32(Session["UserId"]);
                                tableAffected = "SaleTransactionDenominations";
                                description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Created Sale Transaction Denominations [" + sales.MemoID + "]";

                                bool denomination_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                            }

                            //To update Product rates after changes 0.7
                            if (buyTransactions.Count > 0)
                            {
                                foreach (int buy in buyTransactions.Keys)
                                {
                                    Product buyProduct = _productsModel.GetSingle(buy);

                                    if (productOldRates.ContainsKey(buyProduct.ID))
                                    {
                                        productOldRates[buyProduct.ID][0] = Convert.ToDecimal(buyProduct.BuyRate);
                                        productOldRates[buyProduct.ID][1] = Convert.ToDecimal(buyProduct.SellRate);
                                    }
                                    else
                                    {
                                        productOldRates.Add(buyProduct.ID, new decimal[2] { Convert.ToDecimal(buyProduct.BuyRate), Convert.ToDecimal(buyProduct.SellRate) });
                                    }

                                    if (buyProduct != null)
                                    {
                                        ////Testing Start
                                        //var GetAdjustmentBuyRate = Convert.ToDecimal(buyProduct.BuyRateAdjustment);
                                        //var GetAdjustmentSellRate = Convert.ToDecimal(buyProduct.SellRateAdjustment);
                                        //var FinalBuyRate = Convert.ToDecimal(buyProduct.BuyRate);
                                        //var FinalSellRate = Convert.ToDecimal(buyProduct.SellRate);

                                        //if (GetAdjustmentBuyRate != 0)
                                        //{
                                        //	//apply formula
                                        //	//Revert: Final / (1 - adjustment) = buyrate
                                        //	FinalBuyRate = Convert.ToDecimal(buyProduct.BuyRate) / (1 - GetAdjustmentBuyRate);
                                        //}

                                        //if (GetAdjustmentSellRate != 0)
                                        //{
                                        //	//apply formula
                                        //	//Revert: Final / (1 - adjustment) = buyrate
                                        //	FinalSellRate = Convert.ToDecimal(buyProduct.SellRate) / (1 + GetAdjustmentSellRate);
                                        //}


                                        //buyProduct.BuyRate = FinalBuyRate;//buyTransactions[buy];

                                        //if (sellTransactions.Keys.Contains(buy))
                                        //{
                                        //	buyProduct.SellRate = FinalSellRate;//sellTransactions[buy];
                                        //	sellTransactions.Remove(buy);
                                        //}

                                        //bool update_product = _productsModel.Update(buyProduct.ID, buyProduct);
                                        ////Testing End

                                        buyProduct.BuyRate = buyTransactions[buy];

                                        if (sellTransactions.Keys.Contains(buy))
                                        {
                                            buyProduct.SellRate = sellTransactions[buy];
                                            sellTransactions.Remove(buy);
                                        }

                                        bool update_product = _productsModel.Update(buyProduct.ID, buyProduct);

                                        userid = Convert.ToInt32(Session["UserId"]);
                                        tableAffected = "Products";
                                        description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Updated Buy Transaction Product [ID: " + buyProduct.ID + ", Product Currency: " + buyProduct.CurrencyCode + ", Buy Rate: " + buyProduct.BuyRate + ", Sell Rate: " + buyProduct.SellRate + "]";

                                        bool updateProduct_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                    }
                                }
                            }

                            if (sellTransactions.Count > 0)
                            {
                                foreach (int sell in sellTransactions.Keys)
                                {
                                    Product sellProduct = _productsModel.GetSingle(sell);

                                    if (productOldRates.ContainsKey(sellProduct.ID))
                                    {
                                        productOldRates[sellProduct.ID][0] = Convert.ToDecimal(sellProduct.BuyRate);
                                        productOldRates[sellProduct.ID][1] = Convert.ToDecimal(sellProduct.SellRate);
                                    }
                                    else
                                    {
                                        productOldRates.Add(sellProduct.ID, new decimal[2] { Convert.ToDecimal(sellProduct.BuyRate), Convert.ToDecimal(sellProduct.SellRate) });
                                    }

                                    if (sellProduct != null)
                                    {
                                        sellProduct.SellRate = sellTransactions[sell];

                                        if (buyTransactions.Keys.Contains(sell))
                                        {
                                            sellProduct.BuyRate = buyTransactions[sell];
                                            buyTransactions.Remove(sell);
                                        }

                                        bool update_product = _productsModel.Update(sellProduct.ID, sellProduct);

                                        userid = Convert.ToInt32(Session["UserId"]);
                                        tableAffected = "Products";
                                        description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Updated Sell Transaction Product [ID: " + sellProduct.ID + ", Product Currency: " + sellProduct.CurrencyCode + ", Buy Rate: " + sellProduct.BuyRate + ", Sell Rate: " + sellProduct.SellRate + "]";

                                        bool updateProduct_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                    }
                                }
                            }

                            TempData.Add("Result", "success|You have successfully created a New Memo [" + sales.MemoID + "]!");
                            return RedirectToAction("Create");
                            //return RedirectToAction("Listing", new { @page = page });
                        }
                        else
                        {
                            TempData.Add("Result", "danger|An error occured while saving sale record!");
                        }
                    }
                    catch (DbUpdateException e)
                    {
                        if (e.ToString().Contains("was deadlocked on lock resources with another process and has been chosen as the deadlock victim"))
                        {
                            bool result = _salesModel.Delete(sales.ID);

                            foreach (int key in productOldRates.Keys)
                            {
                                Product product = _productsModel.GetSingle(key);

                                product.BuyRate = productOldRates[key][0];
                                product.SellRate = productOldRates[key][1];

                                _productsModel.Update(key, product);
                            }

                            TempData.Add("Result", "danger|An error occured while saving sale record! Please submit again!");
                            return RedirectToAction("Listing");
                        }
                        else
                        {
                            throw;
                        }
                    }
                    catch
                    {
                        throw;
                    }
                }
                else
                {
                    TempData.Add("Result", "danger|There is something wrong in the form!");
                }
            }

            Dropdown[] customerDDL = CustomerDDL();
            ViewData["CustomerDropdown"] = new SelectList(customerDDL, "val", "name", sales.CustomerParticularId);

            ViewData["CustomerContact"] = "";
            ViewData["CustomerAddress"] = "";
            if (customer != null)
            {
                string contact = "";
                string address = "";

                if (customer.CustomerType == "Corporate & Trading Company")
                {
                    contact = customer.Company_TelNo;
                    if (!string.IsNullOrEmpty(customer.Company_BusinessAddress2))
                    {
                        address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_PostalCode;
                    }
                    else
                    {
                        address = customer.Company_BusinessAddress1 + ", " + customer.Company_PostalCode;
                    }

                }
                else
                {
                    contact = customer.Natural_ContactNoM;
                    address = customer.Natural_PermanentAddress;
                }

                ViewData["CustomerContact"] = contact;
                ViewData["CustomerAddress"] = address;
            }

            //Dropdown[] collectionTimeDDL = CollectionTimeDDL();
            //ViewData["CollectionTimeDropdown"] = new SelectList(collectionTimeDDL, "val", "name", sales.CollectionTime);

            ViewData["NonUrgentRadio"] = "";
            ViewData["UrgentRadio"] = "";
            if (sales.Urgent == "Non-Urgent")
            {
                ViewData["NonUrgentRadio"] = "checked";
            }
            else
            {
                ViewData["UrgentRadio"] = "checked";
            }

            ViewData["RequireDeliveryCheckbox"] = "";
            if (!string.IsNullOrEmpty(sales.RequireDelivery))
            {
                if (sales.RequireDelivery == "Yes")
                {
                    ViewData["RequireDeliveryCheckbox"] = "checked";
                }
            }

            ViewData["TransactionTypeBuyRadio"] = "";
            ViewData["TransactionTypeSellRadio"] = "";
            ViewData["TransactionTypeEncashmentRadio"] = "";
            ViewData["TransactionTypeSwapRadio"] = "";
            ViewData["TransactionTypeCrossCurrencyRadio"] = "";

            if (!string.IsNullOrEmpty(sales.TransactionType))
            {
                ViewData["SaleTransactionType"] = sales.TransactionType;

                if (sales.TransactionType == "Buy")
                {
                    ViewData["TransactionTypeBuyRadio"] = "checked";
                }
                else if (sales.TransactionType == "Sell")
                {
                    ViewData["TransactionTypeSellRadio"] = "checked";
                }
                else if (sales.TransactionType == "Encashment")
                {
                    ViewData["TransactionTypeEncashmentRadio"] = "checked";
                }
                else if (sales.TransactionType == "Swap")
                {
                    ViewData["TransactionTypeSwapRadio"] = "checked";
                }
                else
                {
                    ViewData["TransactionTypeCrossCurrencyRadio"] = "checked";
                }
            }

            ViewData["LocalPaymentModeCashCheckbox"] = "";
            ViewData["LocalPaymentModeCheque1Checkbox"] = "";
            ViewData["LocalPaymentModeCheque2Checkbox"] = "";
            ViewData["LocalPaymentModeCheque3Checkbox"] = "";
            ViewData["LocalPaymentModeBankTransferCheckbox"] = "";
            if (!string.IsNullOrEmpty(form["sales.LocalPaymentMode"]))
            {
                if (form["sales.LocalPaymentMode"].ToString().Contains("Cash"))
                {
                    ViewData["LocalPaymentModeCashCheckbox"] = "checked";
                }

                if (form["sales.LocalPaymentMode"].ToString().Contains("Cheque 1"))
                {
                    ViewData["LocalPaymentModeCheque1Checkbox"] = "checked";
                }

                if (form["sales.LocalPaymentMode"].ToString().Contains("Cheque 2"))
                {
                    ViewData["LocalPaymentModeCheque2Checkbox"] = "checked";
                }

                if (form["sales.LocalPaymentMode"].ToString().Contains("Cheque 3"))
                {
                    ViewData["LocalPaymentModeCheque3Checkbox"] = "checked";
                }

                if (form["sales.LocalPaymentMode"].ToString().Contains("Bank Transfer"))
                {
                    ViewData["LocalPaymentModeBankTransferCheckbox"] = "checked";
                }
            }

            Dropdown[] localPaymentBankDDL = LocalPaymentBankDDL();
            ViewData["CashBankDropdown"] = new SelectList(localPaymentBankDDL, "val", "name", sales.CashBank);
            ViewData["Cheque1BankDropdown"] = new SelectList(localPaymentBankDDL, "val", "name", sales.Cheque1Bank);
            ViewData["Cheque2BankDropdown"] = new SelectList(localPaymentBankDDL, "val", "name", sales.Cheque2Bank);
            ViewData["Cheque3BankDropdown"] = new SelectList(localPaymentBankDDL, "val", "name", sales.Cheque3Bank);
            ViewData["BankTransferBankDropdown"] = new SelectList(localPaymentBankDDL, "val", "name", sales.BankTransferBank);

            IList<SaleTransactionsData> transactions = new List<SaleTransactionsData>();
            Dropdown[] currency2 = CurrencyDDL(sales.TransactionType);
            foreach (string key in transactionKeys)
            {
                SaleTransactionsData transactionData = new SaleTransactionsData();
                transactionData.Denominations = new List<DenominationsData>();

                string rowId = key.Split('_')[2];
                string transactionID = form[key];
                string type = form["Transaction_Type_" + rowId].ToString();
                string vesselName = "";
                if (!string.IsNullOrEmpty(form["Transaction_VesselName_" + rowId]))
                {
                    vesselName = form["Transaction_VesselName_" + rowId].ToString();
                }

                string productId = form["Transaction_Currency_" + rowId].ToString();
                Product product = _productsModel.GetSingle(Convert.ToInt32(productId));
                string currencyFormat = GetDecimalFormat(product.Decimal);

                //Dropdown[] currency = CurrencyDDL(sales.TransactionType);
                SelectList currencyDDL = new SelectList(currency2, "val", "name", productId);

                string symbol = _productsModel.GetSingle(Convert.ToInt32(productId)).Symbol;
                string rate = form["Transaction_Rate_" + rowId].ToString();
                int unit = Convert.ToInt32(form["Transaction_Unit_" + rowId].ToString().Replace(",", ""));

                string encashmentRate = "";
                if (!string.IsNullOrEmpty(form["Transaction_EncashmentRate_" + rowId]))
                {
                    encashmentRate = form["Transaction_EncashmentRate_" + rowId].ToString();
                }

                string crossRate = "";
                if (!string.IsNullOrEmpty(form["Transaction_CrossRate_" + rowId]))
                {
                    crossRate = form["Transaction_CrossRate_" + rowId].ToString();
                }

                string paymentModeVal = "";
                if (!string.IsNullOrEmpty(form["Transaction_PaymentMode_" + rowId]))
                {
                    paymentModeVal = form["Transaction_PaymentMode_" + rowId].ToString();
                }
                Dropdown[] paymentMode = PaymentModeDDL(Convert.ToInt32(productId));
                SelectList paymentModeDDL = new SelectList(paymentMode, "val", "name", paymentModeVal);

                string disabledCheque = "disabled";
                string disabledBankTranfer = "disabled";
                if (paymentModeVal == "Cheque")
                {
                    disabledCheque = "";
                }
                else if (paymentModeVal == "Bank Transfer")
                {
                    disabledBankTranfer = "";
                }

                string chequeNo = "";
                if (!string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
                {
                    chequeNo = form["Transaction_ChequeNo_" + rowId].ToString();
                }

                string bankTransferNo = "";
                if (!string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
                {
                    bankTransferNo = form["Transaction_BankTransferNo_" + rowId].ToString();
                }

                string amountLocal = "";
                if (!string.IsNullOrEmpty(form["Transaction_AmountLocal_" + rowId]))
                {
                    amountLocal = form["Transaction_AmountLocal_" + rowId].ToString();
                }

                string amountForeign = "";
                if (!string.IsNullOrEmpty(form["Transaction_AmountForeign_" + rowId]))
                {
                    amountForeign = form["Transaction_AmountForeign_" + rowId].ToString();
                }

                List<string> denominationKeys = form.AllKeys.Where(e => e.Contains("Denomination_Value_" + rowId + "_")).ToList();

                foreach (string denoKey in denominationKeys)
                {
                    DenominationsData denoData = new DenominationsData();

                    string rowId2 = denoKey.Split('_')[3];
                    string denominationValue = "coins";
                    if (form["Denomination_Value_" + rowId + "_" + rowId2].ToString() != "0")
                    {
                        denominationValue = form["Denomination_Value_" + rowId + "_" + rowId2].ToString();
                    }

                    string pieces = "-";
                    if (!string.IsNullOrEmpty(form["Denomination_Value_Pieces_" + rowId + "_" + rowId2]))
                    {
                        pieces = form["Denomination_Value_Pieces_" + rowId + "_" + rowId2].ToString();
                    }
                    else
                    {
                        if (form["Denomination_Value_" + rowId + "_" + rowId2].ToString() != "0")
                        {
                            pieces = "";
                        }
                    }

                    string denoAmountForeign = "";
                    if (!string.IsNullOrEmpty(form["Denomination_Value_AmountForeign_" + rowId + "_" + rowId2]))
                    {
                        try
                        {
                            int dp = form["Denomination_Value_AmountForeign_" + rowId + "_" + rowId2].ToString().Split('.')[1].Length;
                            denoAmountForeign = Convert.ToDecimal(form["Denomination_Value_AmountForeign_" + rowId + "_" + rowId2].ToString()).ToString(currencyFormat);
                        }
                        catch
                        {
                            denoAmountForeign = form["Denomination_Value_AmountForeign_" + rowId + "_" + rowId2].ToString();
                        }
                    }

                    denoData.DenoId = rowId2;
                    denoData.DenominationValue = denominationValue;
                    denoData.Pieces = pieces;
                    denoData.AmountForeign = denoAmountForeign;
                    transactionData.Denominations.Add(denoData);
                }

                string denoCurrencyCode = product.CurrencyCode;
                string totalCalculatedForeign = "0.00";
                string remainingForeign = "0.00";
                string totalOrderForeign = "0.00";

                if (denominationKeys.Count > 0)
                {
                    totalCalculatedForeign = Convert.ToDecimal(form["Denomination_Total_Calculated_Foreign_" + rowId]).ToString(currencyFormat);
                    remainingForeign = Convert.ToDecimal(form["Denomination_Remaining_Foreign_" + rowId].ToString()).ToString(currencyFormat);
                    totalOrderForeign = Convert.ToDecimal(form["Denomination_Total_Order_Foreign_" + rowId].ToString()).ToString(currencyFormat);
                }

                transactionData.RowId = rowId;
                transactionData.TransactionID = transactionID;
                transactionData.Type = type;
                transactionData.VesselName = vesselName;
                transactionData.CurrencyDDL = currencyDDL;
                transactionData.Symbol = symbol;
                transactionData.Rate = rate;
                transactionData.EncashmentRate = encashmentRate;
                transactionData.CrossRate = crossRate;
                transactionData.Unit = unit;
                transactionData.PaymentModeDDL = paymentModeDDL;
                transactionData.DisabledChequeNo = disabledCheque;
                transactionData.ChequeNo = chequeNo;
                transactionData.DisabledBankTransferNo = disabledBankTranfer;
                transactionData.BankTransferNo = bankTransferNo;
                transactionData.AmountLocal = amountLocal;
                transactionData.AmountForeign = amountForeign;
                transactionData.DenominationCurrencyCode = denoCurrencyCode;
                transactionData.DenominationTotalCalculatedForeign = totalCalculatedForeign;
                transactionData.DenominationRemainingForeign = remainingForeign;
                transactionData.DenominationTotalOrderForeign = totalOrderForeign;
                transactions.Add(transactionData);
            }

            ViewData["SaleTransactionsData"] = transactions;
            ViewData["SaleTransactionType"] = sales.TransactionType;

            Product sgd = _productsModel.FindCurrencyCode("SGD");

            ViewData["TotalForeign"] = totalForeign.ToString(GetRateFormat(8));
            ViewData["TotalLocal"] = totalLocal.ToString(GetDecimalFormat(sgd.Decimal));

            ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
            return View();
        }

        //GET: Edit
        public ActionResult Edit(int id, string module = "Sale")
        {
            int page = 1;

            if (TempData["Page"] != null)
            {
                page = Convert.ToInt32(TempData.Peek("Page"));
                ViewData["Page"] = page;
                TempData.Keep("Page");
            }

            //check role if only junior dealer then only can update his own records.
            string userRole = Session["UserRole"].ToString();
            string[] userRoleList = userRole.Split(',');
            int userid = Convert.ToInt32(Session["UserId"].ToString());
            Sale sales = new Sale();

            if (Array.IndexOf(userRoleList, "Junior Dealer") >= 0)
            {
                sales = _salesModel.GetSingle(id);
                if (userRoleList.Length > 1)
                {
                    //this is multiple role

                }
                else
                {
                    //if single role, then only can update his own record
                    if (sales.CreatedBy != userid)
                    {
                        TempData.Add("Result", "error|Unable to access to this sales.");
                        return RedirectToAction("Listing", module, new { @page = page });
                    }
                }
            }
            else
            {
                //this is not junior dealer
                sales = _salesModel.GetSingle(id);
            }

            ///Sale sales = _salesModel.GetSingle2(id);
            if (sales != null)
            {
                ViewData["PendingChequeLog"] = 0;
                ViewData["PendingBankTransferLog"] = 0;

                ViewData["PendingLocalCheque1Log"] = 0;
                ViewData["PendingLocalCheque2Log"] = 0;
                ViewData["PendingLocalCheque3Log"] = 0;
                ViewData["PendingLocalBankTransferLog"] = 0;

                if ((sales.Status.Contains("Pending Accounts") && Array.IndexOf(userRoleList, "Finance") >= 0) || (sales.Status.Contains("Pending Packing") && Array.IndexOf(userRoleList, "Inventory") >= 0) || (sales.Status.Contains("Pending Delivery by") && Array.IndexOf(userRoleList, "Ops Exec") >= 0 && sales.PendingDeliveryById == Convert.ToInt32(Session["UserId"])) || (sales.Status.Contains("Pending Cashier") && Array.IndexOf(userRoleList, "Cashier") >= 0))
                {
                    return RedirectToAction("SaleApproval", new { @id = id, @module = module });
                }

                ViewData["Disabled"] = "";

                List<string> disabledStatus = new List<string>() { "Completed", "Pending GM Approval", "Pending GM Approval (Rejected)", "Cancelled", "Rejected", "Pending Delete GM Approval" };
                if (disabledStatus.Contains(sales.Status) || !Session["UserRole"].ToString().Contains("Super Admin"))
                {
                    ViewData["Disabled"] = "disabled";
                }

                Dropdown[] customerDDL = CustomerDDL(sales.CustomerParticularId);
                ViewData["CustomerDropdown"] = new SelectList(customerDDL, "val", "name", sales.CustomerParticularId);

                CustomerParticular customer = sales.CustomerParticulars;

                ViewData["CustomerContact"] = "";
                ViewData["CustomerAddress"] = "";
                if (customer != null)
                {
                    string contact = "";
                    string address = "";

                    if (customer.CustomerType == "Corporate & Trading Company")
                    {
                        contact = customer.Company_TelNo;
                        if (!string.IsNullOrEmpty(customer.Company_BusinessAddress2))
                        {
                            address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_PostalCode;
                        }
                        else
                        {
                            address = customer.Company_BusinessAddress1 + ", " + customer.Company_PostalCode;
                        }
                    }
                    else
                    {
                        contact = customer.Natural_ContactNoM;
                        address = customer.Natural_PermanentAddress;
                    }

                    ViewData["CustomerContact"] = contact;
                    ViewData["CustomerAddress"] = address;
                }

                //Dropdown[] collectionTimeDDL = CollectionTimeDDL();
                //ViewData["CollectionTimeDropdown"] = new SelectList(collectionTimeDDL, "val", "name", sales.CollectionTime);

                ViewData["NonUrgentRadio"] = "";
                ViewData["UrgentRadio"] = "";
                if (sales.Urgent == "Non-Urgent")
                {
                    ViewData["NonUrgentRadio"] = "checked";
                }
                else
                {
                    ViewData["UrgentRadio"] = "checked";
                }

                ViewData["RequireDeliveryCheckbox"] = "";
                if (sales.RequireDelivery == "Yes")
                {
                    ViewData["RequireDeliveryCheckbox"] = "checked";
                }

                ViewData["TransactionTypeBuyRadio"] = "";
                ViewData["TransactionTypeSellRadio"] = "";
                ViewData["TransactionTypeEncashmentRadio"] = "";
                ViewData["TransactionTypeSwapRadio"] = "";
                ViewData["TransactionTypeCrossCurrencyRadio"] = "";

                if (!string.IsNullOrEmpty(sales.TransactionType))
                {
                    if (sales.TransactionType == "Buy")
                    {
                        ViewData["TransactionTypeBuyRadio"] = "checked";
                    }
                    else if (sales.TransactionType == "Sell")
                    {
                        ViewData["TransactionTypeSellRadio"] = "checked";
                    }
                    else if (sales.TransactionType == "Encashment")
                    {
                        ViewData["TransactionTypeEncashmentRadio"] = "checked";
                    }
                    else if (sales.TransactionType == "Swap")
                    {
                        ViewData["TransactionTypeSwapRadio"] = "checked";
                    }
                    else
                    {
                        ViewData["TransactionTypeCrossCurrencyRadio"] = "checked";
                    }
                }

                ViewData["LocalPaymentModeCashCheckbox"] = "";
                ViewData["LocalPaymentModeCheque1Checkbox"] = "";
                ViewData["LocalPaymentModeCheque2Checkbox"] = "";
                ViewData["LocalPaymentModeCheque3Checkbox"] = "";
                ViewData["LocalPaymentModeBankTransferCheckbox"] = "";
                if (!string.IsNullOrEmpty(sales.LocalPaymentMode))
                {
                    if (sales.LocalPaymentMode.Contains("Cash"))
                    {
                        ViewData["LocalPaymentModeCashCheckbox"] = "checked";
                    }

                    if (sales.LocalPaymentMode.Contains("Cheque 1"))
                    {
                        ViewData["LocalPaymentModeCheque1Checkbox"] = "checked";
                    }

                    if (sales.LocalPaymentMode.Contains("Cheque 2"))
                    {
                        ViewData["LocalPaymentModeCheque2Checkbox"] = "checked";
                    }

                    if (sales.LocalPaymentMode.Contains("Cheque 3"))
                    {
                        ViewData["LocalPaymentModeCheque3Checkbox"] = "checked";
                    }

                    if (sales.LocalPaymentMode.Contains("Bank Transfer"))
                    {
                        ViewData["LocalPaymentModeBankTransferCheckbox"] = "checked";
                    }
                }

                Dropdown[] cashBankDDL = LocalPaymentBankDDL(sales.CashBank);
                ViewData["CashBankDropdown"] = new SelectList(cashBankDDL, "val", "name", sales.CashBank);

                Dropdown[] cheque1BankDDL = LocalPaymentBankDDL(sales.Cheque1Bank);
                ViewData["Cheque1BankDropdown"] = new SelectList(cheque1BankDDL, "val", "name", sales.Cheque1Bank);

                Dropdown[] cheque2BankDDL = LocalPaymentBankDDL(sales.Cheque2Bank);
                ViewData["Cheque2BankDropdown"] = new SelectList(cheque2BankDDL, "val", "name", sales.Cheque2Bank);

                Dropdown[] cheque3BankDDL = LocalPaymentBankDDL(sales.Cheque3Bank);
                ViewData["Cheque3BankDropdown"] = new SelectList(cheque3BankDDL, "val", "name", sales.Cheque3Bank);

                Dropdown[] bankTransferBankDDL = LocalPaymentBankDDL(sales.BankTransferBank);
                ViewData["BankTransferBankDropdown"] = new SelectList(bankTransferBankDDL, "val", "name", sales.BankTransferBank);

                Product sgd = _productsModel.FindCurrencyCode("SGD");
                string sgdFormat = GetDecimalFormat(sgd.Decimal);
                string rateFormat = GetRateFormat(rateDP);

                IList<SaleTransactionsData> transactions = new List<SaleTransactionsData>();

                int rowId = 1;
                decimal totalForeign = 0;
                decimal totalLocal = 0;
                Dropdown[] currency2 = CurrencyDDL(sales.TransactionType);
                foreach (SaleTransaction transaction in sales.SaleTransactions.OrderBy(e => e.ID))
                {
                    string currencyFormat = GetDecimalFormat(transaction.Products.Decimal);

                    SaleTransactionsData transactionData = new SaleTransactionsData();
                    transactionData.Denominations = new List<DenominationsData>();

                    string transactionID = transaction.TransactionID;
                    string type = transaction.TransactionType;
                    string vesselName = transaction.VesselName;

                    int productId = transaction.CurrencyId;
                    //Dropdown[] currency = CurrencyDDL(sales.TransactionType);
                    SelectList currencyDDL = new SelectList(currency2, "val", "name", productId);

                    string symbol = transaction.Products.Symbol;

                    string rate = transaction.Rate.ToString(rateFormat);
                    int unit = transaction.Unit;

                    string encashmentRate = "";
                    if (transaction.EncashmentRate != null)
                    {
                        encashmentRate = Convert.ToDecimal(transaction.EncashmentRate).ToString(rateFormat);
                    }

                    string crossRate = "";
                    if (transaction.CrossRate != null)
                    {
                        crossRate = Convert.ToDecimal(transaction.CrossRate).ToString(rateFormat);
                    }

                    Dropdown[] paymentMode = PaymentModeDDL(productId);
                    SelectList paymentModeDDL = new SelectList(paymentMode, "val", "name", transaction.PaymentMode);

                    string disabledCheque = "disabled";
                    string disabledBankTranfer = "disabled";
                    if (transaction.PaymentMode == "Cheque")
                    {
                        disabledCheque = "";
                    }
                    else if (transaction.PaymentMode == "Bank Transfer")
                    {
                        disabledBankTranfer = "";
                    }

                    string chequeNo = "";
                    if (!string.IsNullOrEmpty(transaction.ChequeNo))
                    {
                        chequeNo = transaction.ChequeNo;
                    }

                    string bankTransferNo = "";
                    if (!string.IsNullOrEmpty(transaction.BankTransferNo))
                    {
                        bankTransferNo = transaction.BankTransferNo;
                    }

                    string amountLocal = transaction.AmountLocal.ToString(sgdFormat);
                    string amountForeign = transaction.AmountForeign.ToString(currencyFormat);

                    if (sales.TransactionType == "Buy" || transaction.TransactionType == "Sell")
                    {
                        totalForeign += transaction.AmountForeign;
                        totalLocal += transaction.AmountLocal;
                    }

                    string denoCurrencyCode = "Currency";
                    string totalCalculatedForeign = "0.00";
                    string remainingForeign = "0.00";
                    string totalOrderForeign = "0.00";

                    if (transaction.SaleTransactionDenominations.Count > 0)
                    {
                        decimal foreignCalculated = 0;

                        foreach (SaleTransactionDenomination denomination in transaction.SaleTransactionDenominations)
                        {
                            DenominationsData denoData = new DenominationsData();

                            string denominationValue = "coins";
                            string pieces = "-";
                            if (denomination.Denomination != 0)
                            {
                                denominationValue = denomination.Denomination.ToString();
                                pieces = FormValidationHelper.AmountFormatter(Convert.ToDecimal(denomination.Pieces), 0);
                            }

                            string denoAmountForeign = denomination.AmountForeign.ToString(currencyFormat);

                            denoData.DenoId = denomination.ID.ToString();
                            denoData.DenominationValue = denominationValue;
                            denoData.Pieces = pieces;
                            denoData.AmountForeign = denoAmountForeign;
                            transactionData.Denominations.Add(denoData);

                            foreignCalculated += denomination.AmountForeign;
                        }

                        denoCurrencyCode = transaction.Products.CurrencyCode;
                        totalCalculatedForeign = foreignCalculated.ToString(currencyFormat);
                        remainingForeign = (transaction.AmountForeign - foreignCalculated).ToString(currencyFormat);
                        totalOrderForeign = transaction.AmountForeign.ToString(currencyFormat);
                    }

                    transactionData.RowId = rowId.ToString();
                    transactionData.TransactionID = transactionID;
                    transactionData.Type = type;
                    transactionData.VesselName = vesselName;
                    transactionData.CurrencyDDL = currencyDDL;
                    transactionData.Symbol = symbol;
                    transactionData.Rate = rate;
                    transactionData.Unit = unit;
                    transactionData.EncashmentRate = encashmentRate;
                    transactionData.CrossRate = crossRate;
                    transactionData.PaymentModeDDL = paymentModeDDL;
                    transactionData.DisabledChequeNo = disabledCheque;
                    transactionData.ChequeNo = chequeNo;
                    transactionData.DisabledBankTransferNo = disabledBankTranfer;
                    transactionData.BankTransferNo = bankTransferNo;
                    transactionData.AmountLocal = amountLocal;
                    transactionData.AmountForeign = amountForeign;
                    transactionData.DenominationCurrencyCode = denoCurrencyCode;
                    transactionData.DenominationTotalCalculatedForeign = totalCalculatedForeign;
                    transactionData.DenominationRemainingForeign = remainingForeign;
                    transactionData.DenominationTotalOrderForeign = totalOrderForeign;
                    transactions.Add(transactionData);

                    rowId++;
                }

                ViewData["SaleTransactionsData"] = transactions;

                ViewData["TotalForeign"] = totalForeign.ToString(GetRateFormat(8));
                ViewData["TotalLocal"] = totalLocal.ToString(sgdFormat);

                ViewData["Sale"] = sales;
                ViewData["SaleId"] = sales.ID;
                ViewData["PendingApproval"] = "No";
                if (sales.Status == "Pending GM Approval" || sales.Status == "Pending Delete GM Approval")
                {
                    ViewData["PendingApproval"] = "Yes";
                }
                ViewData["SaleTransactionType"] = sales.TransactionType;
                ViewData["Module"] = module;

                if (!string.IsNullOrEmpty(sales.DeliveryConfirmation))
                {
                    ViewData["DeliveryConfirmation"] = sales.DeliveryConfirmation.Split(',').ToList();
                    ViewData["DeliveryConfirmationDomain"] = ConfigurationManager.AppSettings["DeliveryConfirmationFolder"].ToString();
                }

                ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
                return View();
            }
            else
            {
                TempData.Add("Result", "error|Memo ID not found!");
            }

            return RedirectToAction("Listing", module, new { @page = page });
        }

        //POST: Edit
        [HttpPost]
        public ActionResult Edit(int id, Sale sales, FormCollection form, string module = "Sale")
        {
            int page = 1;

            if (TempData["Page"] != null)
            {
                page = Convert.ToInt32(TempData["Page"]);
                ViewData["Page"] = page;
            }

            Sale oldData = _salesModel.GetSingle(id);
            sales.MemoID = oldData.MemoID;
            sales.IssueDate = oldData.IssueDate;
            sales.CreatedBy = oldData.CreatedBy;
            sales.Users = oldData.Users;
            sales.BagNo = oldData.BagNo;
            sales.CashBank = oldData.CashBank;
            sales.Status = oldData.Status;
            sales.LastApprovalOn = oldData.LastApprovalOn;
            sales.CustomerRemarks = oldData.CustomerRemarks;

            ViewData["PendingChequeLog"] = form["PendingChequeLog"].ToString();
            ViewData["PendingBankTransferLog"] = form["PendingBankTransferLog"].ToString();

            ViewData["PendingLocalCheque1Log"] = form["PendingLocalCheque1Log"].ToString();
            ViewData["PendingLocalCheque2Log"] = form["PendingLocalCheque2Log"].ToString();
            ViewData["PendingLocalCheque3Log"] = form["PendingLocalCheque3Log"].ToString();
            ViewData["PendingLocalBankTransferLog"] = form["PendingLocalBankTransferLog"].ToString();

            CustomerParticular customer = null;

            if (sales.CustomerParticularId > 0)
            {
                customer = _customerParticularsModel.GetSingle(sales.CustomerParticularId);

                if (customer == null)
                {
                    ModelState.AddModelError("sales.CustomerParticularId", "Customer record not found!");
                }
                else
                {
                    if (customer.Others[0].Status != "Active")
                    {
                        ModelState.AddModelError("sales.CustomerParticularId", "Customer is not active!");
                    }
                }
            }

            if (!string.IsNullOrEmpty(sales.TransactionType))
            {
                if (sales.TransactionType == "Buy" || sales.TransactionType == "Sell")
                {
                    if (string.IsNullOrEmpty(form["sales.LocalPaymentMode"]))
                    {
                        ModelState.AddModelError("sales.LocalPaymentMode", "Local Payment Mode is required!");
                    }
                    else
                    {
                        string[] paymentModes = form["sales.LocalPaymentMode"].ToString().Split(',');

                        if (paymentModes.Length > 4)
                        {
                            ModelState.AddModelError("sales.LocalPaymentMode", "Maximum FOUR Payment Modes only!");
                        }

                        if (form["sales.LocalPaymentMode"].ToString().Contains("Cash"))
                        {
                            ModelState cashAmountModel = ModelState["sales.CashAmount"];
                            cashAmountModel.Errors.Clear();

                            if (string.IsNullOrEmpty(form["sales.CashAmount"]))
                            {
                                ModelState.AddModelError("sales.CashAmount", "Cash Amount is required!");
                            }
                            else
                            {
                                bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.CashAmount"].ToString());

                                if (!checkFormat)
                                {
                                    ModelState.AddModelError("sales.CashAmount", "Cash Amount is not valid!");
                                }
                                else
                                {
                                    sales.CashAmount = Convert.ToDecimal(form["sales.CashAmount"].ToString());
                                }
                            }
                        }

                        if (form["sales.LocalPaymentMode"].ToString().Contains("Cheque 1"))
                        {
                            ModelState Cheque1AmountModel = ModelState["sales.Cheque1Amount"];
                            Cheque1AmountModel.Errors.Clear();

                            if (string.IsNullOrEmpty(form["sales.Cheque1Amount"]))
                            {
                                ModelState.AddModelError("sales.Cheque1Amount", "Cheque 1 Amount is required!");
                            }
                            else
                            {
                                bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.Cheque1Amount"].ToString());

                                if (!checkFormat)
                                {
                                    ModelState.AddModelError("sales.Cheque1Amount", "Cheque 1 Amount is not valid!");
                                }
                                else
                                {
                                    sales.Cheque1Amount = Convert.ToDecimal(form["sales.Cheque1Amount"].ToString());
                                }
                            }
                        }

                        if (form["sales.LocalPaymentMode"].ToString().Contains("Cheque 2"))
                        {
                            ModelState Cheque2AmountModel = ModelState["sales.Cheque2Amount"];
                            Cheque2AmountModel.Errors.Clear();

                            if (string.IsNullOrEmpty(form["sales.Cheque2Amount"]))
                            {
                                ModelState.AddModelError("sales.Cheque2Amount", "Cheque 2 Amount is required!");
                            }
                            else
                            {
                                bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.Cheque2Amount"].ToString());

                                if (!checkFormat)
                                {
                                    ModelState.AddModelError("sales.Cheque2Amount", "Cheque 2 Amount is not valid!");
                                }
                                else
                                {
                                    sales.Cheque2Amount = Convert.ToDecimal(form["sales.Cheque2Amount"].ToString());
                                }
                            }
                        }

                        if (form["sales.LocalPaymentMode"].ToString().Contains("Cheque 3"))
                        {
                            ModelState Cheque3AmountModel = ModelState["sales.Cheque3Amount"];
                            Cheque3AmountModel.Errors.Clear();

                            if (string.IsNullOrEmpty(form["sales.Cheque3Amount"]))
                            {
                                ModelState.AddModelError("sales.Cheque3Amount", "Cheque 3 Amount is required!");
                            }
                            else
                            {
                                bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.Cheque3Amount"].ToString());

                                if (!checkFormat)
                                {
                                    ModelState.AddModelError("sales.Cheque3Amount", "Cheque 3 Amount is not valid!");
                                }
                                else
                                {
                                    sales.Cheque3Amount = Convert.ToDecimal(form["sales.Cheque3Amount"].ToString());
                                }
                            }
                        }

                        if (form["sales.LocalPaymentMode"].ToString().Contains("Bank Transfer"))
                        {
                            ModelState bankTransferAmountModel = ModelState["sales.BankTransferAmount"];
                            bankTransferAmountModel.Errors.Clear();

                            if (string.IsNullOrEmpty(form["sales.BankTransferAmount"]))
                            {
                                ModelState.AddModelError("sales.BankTransferAmount", "Bank Transfer Amount is required!");
                            }
                            else
                            {
                                bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.BankTransferAmount"].ToString());

                                if (!checkFormat)
                                {
                                    ModelState.AddModelError("sales.BankTransferAmount", "Bank Transfer Amount is not valid!");
                                }
                                else
                                {
                                    sales.BankTransferAmount = Convert.ToDecimal(form["sales.BankTransferAmount"].ToString());
                                }
                            }
                        }
                    }

                    //Memo Balance Validation
                    ModelState memoBalModel = ModelState["sales.MemoBalance"];
                    memoBalModel.Errors.Clear();

                    if (string.IsNullOrEmpty(form["sales.MemoBalance"]))
                    {
                        ModelState.AddModelError("sales.MemoBalance", "Memo Balance is required!");
                    }
                    else
                    {
                        bool checkFormat = FormValidationHelper.AmountValidation(form["sales.MemoBalance"]);

                        if (!checkFormat)
                        {
                            ModelState.AddModelError("sales.MemoBalance", "Memo Balance is not valid!");
                        }
                        else
                        {
                            sales.MemoBalance = Convert.ToDecimal(form["sales.MemoBalance"]);
                        }
                    }
                }
            }

            List<string> transactionKeys = form.AllKeys.Where(e => e.Contains("Transaction_ID_")).ToList();

            decimal totalForeign = 0;
            decimal totalLocal = 0;

            if (transactionKeys.Count > 0)
            {
                foreach (string key in transactionKeys)
                {
                    string rowId = key.Split('_')[2];

                    //Validation for All Transaction Types
                    if (string.IsNullOrEmpty(form["Transaction_Type_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_Type_" + rowId, "Type is required!");
                    }

                    if (string.IsNullOrEmpty(form["Transaction_Currency_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_Currency_" + rowId, "Currency is required!");
                    }
                    else
                    {
                        Product currency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                        if (currency == null)
                        {
                            ModelState.AddModelError("Transaction_Currency_" + rowId, "Currency record not found!");
                        }
                    }

                    if (string.IsNullOrEmpty(form["Transaction_AmountLocal_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_AmountLocal_" + rowId, "Amount (Local) is required!");
                    }
                    else
                    {
                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_AmountLocal_" + rowId]);

                        if (!checkAmountLocalFormat)
                        {
                            ModelState.AddModelError("Transaction_AmountLocal_" + rowId, "Amount (Local) is not valid!");
                        }
                        else
                        {
                            if (sales.TransactionType == "Buy")
                            {
                                totalLocal += Convert.ToDecimal(form["Transaction_AmountLocal_" + rowId]);
                            }
                            else
                            {
                                if (form["Transaction_Type_" + rowId] == "Sell")
                                {
                                    totalLocal += Convert.ToDecimal(form["Transaction_AmountLocal_" + rowId]);
                                }
                            }
                        }
                    }

                    if (string.IsNullOrEmpty(form["Transaction_AmountForeign_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!");
                    }
                    else
                    {
                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_AmountForeign_" + rowId]);

                        if (!checkAmountLocalFormat)
                        {
                            ModelState.AddModelError("Transaction_AmountForeign_" + rowId, "Amount (Foreign) is not valid!");
                        }
                        else
                        {
                            if (sales.TransactionType == "Buy")
                            {
                                totalForeign += Convert.ToDecimal(form["Transaction_AmountForeign_" + rowId]);
                            }
                            else
                            {
                                if (form["Transaction_Type_" + rowId] == "Sell")
                                {
                                    totalForeign += Convert.ToDecimal(form["Transaction_AmountForeign_" + rowId]);
                                }
                            }
                        }
                    }

                    if (string.IsNullOrEmpty(form["Transaction_PaymentMode_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_PaymentMode_" + rowId, "Payment Mode is not valid!");
                    }
                    else
                    {
                        if (form["Transaction_PaymentMode_" + rowId].ToString() == "Cheque")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
                            {
                                //ModelState.AddModelError("Transaction_ChequeNo_" + rowId, "Cheque No. is required!");
                            }
                        }
                        else if (form["Transaction_PaymentMode_" + rowId].ToString() == "Bank Transfer")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
                            {
                                //ModelState.AddModelError("Transaction_BankTransferNo_" + rowId, "Bank Transfer No. is required!");
                            }
                        }
                    }

                    if (sales.TransactionType == "Buy") //Perform Buy Validation
                    {
                        if (string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                        {
                            ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is required!");
                        }
                        else
                        {
                            bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                            if (checkRateFormat)
                            {
                                if (sales.CustomerParticularId > 0 && !string.IsNullOrEmpty(form["Transaction_Currency_" + rowId]))
                                {
                                    Product product = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));
                                    decimal buyRate = 0;
                                    decimal acceptable = product.AcceptableRange;

                                    CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(sales.CustomerParticularId, Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                                    if (acceptable > 0)
                                    {

                                        if (GetCustomRate != null)
                                        {
                                            if (GetCustomRate.BuyRate != 0 && GetCustomRate != null)
                                            {
                                                if (product.BuyRate != 0 && product.BuyRate != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(product.BuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                    buyRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    if (product.AutomatedBuyRate != 0 && product.AutomatedBuyRate != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.AutomatedBuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                        buyRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (product.BuyRate != 0 && product.BuyRate != null)
                                                {
                                                    if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.BuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                        buyRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        buyRate = Convert.ToDecimal(product.BuyRate);
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.AutomatedBuyRate != 0 && product.AutomatedBuyRate != null)
                                                    {
                                                        if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.AutomatedBuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                            buyRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            buyRate = Convert.ToDecimal(product.AutomatedBuyRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (product.BuyRate != 0 && product.BuyRate != null)
                                            {
                                                if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(product.BuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                    buyRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    buyRate = Convert.ToDecimal(product.BuyRate);
                                                }
                                            }
                                            else
                                            {
                                                if (product.AutomatedBuyRate != 0 && product.AutomatedBuyRate != null)
                                                {
                                                    if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.AutomatedBuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                        buyRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        buyRate = Convert.ToDecimal(product.AutomatedBuyRate);
                                                    }
                                                }
                                                else
                                                {
                                                    buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                }
                                            }
                                        }

                                        //if (product.BuyRate != null)
                                        //{
                                        //    buyRate = Convert.ToDecimal(product.BuyRate);
                                        //}
                                        //else
                                        //{
                                        //    buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                        //}

                                        decimal upperLimit = buyRate * (1 + acceptable / 100);
                                        decimal lowerLimit = buyRate * (1 - acceptable / 100);
                                        decimal rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);

                                        if (rate < lowerLimit || rate > upperLimit)
                                        {
                                            ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is out of acceptable range!");
                                        }
                                    }
                                }
                            }
                            else
                            {
                                ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is not valid!");
                            }
                        }
                    }
                    else if (sales.TransactionType == "Sell") //Perform Sell Validation
                    {
                        if (string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                        {
                            ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is required!");
                        }
                        else
                        {
                            bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                            if (checkRateFormat)
                            {
                                if (sales.CustomerParticularId > 0 && !string.IsNullOrEmpty(form["Transaction_Currency_" + rowId]))
                                {
                                    Product product = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));
                                    decimal sellRate = 0;
                                    decimal acceptable = product.AcceptableRange;

                                    CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(sales.CustomerParticularId, Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                                    if (acceptable > 0)
                                    {

                                        if (GetCustomRate != null)
                                        {
                                            if (GetCustomRate.SellRate != 0 && GetCustomRate != null)
                                            {
                                                if (product.SellRate != 0 && product.SellRate != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (product.SellRate != 0 && product.SellRate != null)
                                                {
                                                    if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(product.SellRate);
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                    {
                                                        if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                            sellRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(product.AutomatedSellRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (product.SellRate != 0 && product.SellRate != null)
                                            {
                                                if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(product.SellRate);
                                                }
                                            }
                                            else
                                            {
                                                if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                {
                                                    if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(product.AutomatedSellRate);
                                                    }
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                }
                                            }
                                        }

                                        //if (product.SellRate != null)
                                        //{
                                        //    sellRate = Convert.ToDecimal(product.SellRate);
                                        //}
                                        //else
                                        //{
                                        //    sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                        //}

                                        decimal upperLimit = sellRate * (1 + acceptable / 100);
                                        decimal lowerLimit = sellRate * (1 - acceptable / 100);
                                        decimal rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);

                                        if (rate < lowerLimit || rate > upperLimit)
                                        {
                                            ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is out of acceptable range!");
                                        }
                                    }
                                }
                            }
                            else
                            {
                                ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is not valid!");
                            }
                        }
                    }
                    else if (sales.TransactionType == "Encashment") //Perform Encashment Validation
                    {
                        if (form["Transaction_Type_" + rowId].ToString() == "Sell")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is required!");
                            }
                            else
                            {
                                bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                                if (checkRateFormat)
                                {
                                    if (sales.CustomerParticularId > 0 && !string.IsNullOrEmpty(form["Transaction_Currency_" + rowId]))
                                    {
                                        Product product = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));
                                        decimal sellRate = 0;
                                        decimal acceptable = product.AcceptableRange;

                                        CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(sales.CustomerParticularId, Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                                        if (acceptable > 0)
                                        {
                                            if (GetCustomRate != null)
                                            {
                                                if (GetCustomRate.SellRate != 0 && GetCustomRate != null)
                                                {
                                                    if (product.SellRate != 0 && product.SellRate != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                            sellRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.SellRate != 0 && product.SellRate != null)
                                                    {
                                                        if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                            sellRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(product.SellRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                        {
                                                            if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                            {
                                                                decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                                sellRate = Convert.ToDecimal(FinalRate);
                                                            }
                                                            else
                                                            {
                                                                sellRate = Convert.ToDecimal(product.AutomatedSellRate);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (product.SellRate != 0 && product.SellRate != null)
                                                {
                                                    if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(product.SellRate);
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                    {
                                                        if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                            sellRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(product.AutomatedSellRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                    }
                                                }
                                            }

                                            //if (product.SellRate != null)
                                            //{
                                            //    sellRate = Convert.ToDecimal(product.SellRate);
                                            //}
                                            //else
                                            //{
                                            //    sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                            //}

                                            decimal upperLimit = sellRate * (1 + acceptable / 100);
                                            decimal lowerLimit = sellRate * (1 - acceptable / 100);
                                            decimal rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);

                                            if (rate < lowerLimit || rate > upperLimit)
                                            {
                                                ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is out of acceptable range!");
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is not valid!");
                                }
                            }

                            if (string.IsNullOrEmpty(form["Transaction_EncashmentRate_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_EncashmentRate_" + rowId, "Encashment Rate is required!");
                            }
                            else
                            {
                                bool checkEncashmentRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                                if (!checkEncashmentRateFormat)
                                {
                                    ModelState.AddModelError("Transaction_EncashmentRate_" + rowId, "Encashment Rate is not valid!");
                                }
                            }
                        }
                    }
                    else if (sales.TransactionType == "Swap") //Perform Swap Validation
                    {
                        if (form["Transaction_Type_" + rowId].ToString() == "Buy")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is required!");
                            }
                            else
                            {
                                bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                                if (checkRateFormat)
                                {
                                    if (sales.CustomerParticularId > 0 && !string.IsNullOrEmpty(form["Transaction_Currency_" + rowId]))
                                    {
                                        Product product = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));
                                        decimal buyRate = 0;
                                        decimal acceptable = product.AcceptableRange;

                                        CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(sales.CustomerParticularId, Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                                        if (acceptable > 0)
                                        {

                                            if (GetCustomRate != null)
                                            {
                                                if (GetCustomRate.BuyRate != 0 && GetCustomRate != null)
                                                {
                                                    if (product.BuyRate != 0 && product.BuyRate != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.BuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                        buyRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        if (product.AutomatedBuyRate != 0 && product.AutomatedBuyRate != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.AutomatedBuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                            buyRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.BuyRate != 0 && product.BuyRate != null)
                                                    {
                                                        if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.BuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                            buyRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            buyRate = Convert.ToDecimal(product.BuyRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (product.AutomatedBuyRate != 0 && product.AutomatedBuyRate != null)
                                                        {
                                                            if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                            {
                                                                decimal FinalRate = Convert.ToDecimal(product.AutomatedBuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                                buyRate = Convert.ToDecimal(FinalRate);
                                                            }
                                                            else
                                                            {
                                                                buyRate = Convert.ToDecimal(product.AutomatedBuyRate);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (product.BuyRate != 0 && product.BuyRate != null)
                                                {
                                                    if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.BuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                        buyRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        buyRate = Convert.ToDecimal(product.BuyRate);
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.AutomatedBuyRate != 0 && product.AutomatedBuyRate != null)
                                                    {
                                                        if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.AutomatedBuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                            buyRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            buyRate = Convert.ToDecimal(product.AutomatedBuyRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                    }
                                                }
                                            }

                                            //if (product.BuyRate != null)
                                            //{
                                            //    buyRate = Convert.ToDecimal(product.BuyRate);
                                            //}
                                            //else
                                            //{
                                            //    buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                            //}

                                            decimal upperLimit = buyRate * (1 + acceptable / 100);
                                            decimal lowerLimit = buyRate * (1 - acceptable / 100);
                                            decimal rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);

                                            if (rate < lowerLimit || rate > upperLimit)
                                            {
                                                ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is out of acceptable range!");
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is not valid!");
                                }
                            }

                            if (string.IsNullOrEmpty(form["Transaction_EncashmentRate_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_EncashmentRate_" + rowId, "Encashment Rate is required!");
                            }
                            else
                            {
                                bool checkEncashmentRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                                if (!checkEncashmentRateFormat)
                                {
                                    ModelState.AddModelError("Transaction_EncashmentRate_" + rowId, "Encashment Rate is not valid!");
                                }
                            }
                        }
                    }
                    else if (sales.TransactionType == "Cross Currency") //Perform Cross Currency Validation
                    {
                        if (form["Transaction_Type_" + rowId].ToString() == "Buy")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is required!");
                            }
                            else
                            {
                                bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                                if (!checkRateFormat)
                                {
                                    ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is not valid!");
                                }
                            }
                        }
                        else
                        {
                            if (string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is required!");
                            }
                            else
                            {
                                bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                                if (checkRateFormat)
                                {
                                    if (sales.CustomerParticularId > 0 && !string.IsNullOrEmpty(form["Transaction_Currency_" + rowId]))
                                    {
                                        Product product = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));
                                        decimal sellRate = 0;
                                        decimal acceptable = product.AcceptableRange;

                                        CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(sales.CustomerParticularId, Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                                        if (acceptable > 0)
                                        {

                                            if (GetCustomRate != null)
                                            {
                                                if (GetCustomRate.SellRate != 0 && GetCustomRate != null)
                                                {
                                                    if (product.SellRate != 0 && product.SellRate != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                            sellRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.SellRate != 0 && product.SellRate != null)
                                                    {
                                                        if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                            sellRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(product.SellRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                        {
                                                            if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                            {
                                                                decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                                sellRate = Convert.ToDecimal(FinalRate);
                                                            }
                                                            else
                                                            {
                                                                sellRate = Convert.ToDecimal(product.AutomatedSellRate);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (product.SellRate != 0 && product.SellRate != null)
                                                {
                                                    if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(product.SellRate);
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                    {
                                                        if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                            sellRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(product.AutomatedSellRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                    }
                                                }
                                            }

                                            //if (product.SellRate != null)
                                            //{
                                            //    sellRate = Convert.ToDecimal(product.SellRate);
                                            //}
                                            //else
                                            //{
                                            //    sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                            //}

                                            decimal upperLimit = sellRate * (1 + acceptable / 100);
                                            decimal lowerLimit = sellRate * (1 - acceptable / 100);
                                            decimal rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);

                                            if (rate < lowerLimit || rate > upperLimit)
                                            {
                                                ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is out of acceptable range!");
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is not valid!");
                                }
                            }

                            if (string.IsNullOrEmpty(form["Transaction_CrossRate_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_CrossRate_" + rowId, "Cross Rate is required!");
                            }
                            else
                            {
                                bool checkCrossRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_CrossRate_" + rowId]);

                                if (!checkCrossRateFormat)
                                {
                                    ModelState.AddModelError("Transaction_CrossRate_" + rowId, "Cross Rate is not valid!");
                                }
                            }
                        }
                    }

                    //Validation for Outgoing Denomination
                    List<string> denominationKeys = form.AllKeys.Where(e => e.Contains("Denomination_Value_" + rowId + "_")).ToList();
                    bool denominationError = false;

                    foreach (string denoKey in denominationKeys)
                    {
                        string denoId = denoKey.Split('_')[3];

                        if (string.IsNullOrEmpty(form[denoKey]))
                        {
                            ModelState.AddModelError(denoKey, "Denomination Value is required!");
                            denominationError = true;
                        }

                        if (!string.IsNullOrEmpty(form["Denomination_Value_Pieces_" + rowId + "_" + denoId]))
                        {
                            bool checkPieces = FormValidationHelper.IntegerValidation(form["Denomination_Value_Pieces_" + rowId + "_" + denoId].ToString().Replace(",", ""));

                            if (!checkPieces)
                            {
                                ModelState.AddModelError("Denomination_Value_Pieces_" + rowId + "_" + denoId, "Pieces is not valid!");
                                denominationError = true;
                            }
                        }

                        if (!string.IsNullOrEmpty(form["Denomination_Value_AmountForeign_" + rowId + "_" + denoId]))
                        {
                            bool checkAmountForeign = FormValidationHelper.NonNegativeAmountValidation(form["Denomination_Value_AmountForeign_" + rowId + "_" + denoId].ToString());

                            if (!checkAmountForeign)
                            {
                                ModelState.AddModelError("Denomination_Value_AmountForeign_" + rowId + "_" + denoId, "Amount (Foreign) is not valid!");
                                denominationError = true;
                            }
                        }
                    }

                    if (denominationKeys.Count > 0)
                    {
                        decimal totalCalculatedForeign = Convert.ToDecimal(form["Denomination_Total_Calculated_Foreign_" + rowId]);
                        decimal remainingForeign = Convert.ToDecimal(form["Denomination_Remaining_Foreign_" + rowId]);
                        decimal totalOrderForeign = Convert.ToDecimal(form["Denomination_Total_Order_Foreign_" + rowId]);

                        if (totalCalculatedForeign != totalOrderForeign)
                        {
                            ModelState.AddModelError("Denomination_Total_Calculated_Foreign_" + rowId, "Total Calculated Amount (Foreign) and Total Order Amount (Foreign) not equal!");
                            denominationError = true;
                        }
                    }

                    if (denominationError)
                    {
                        ModelState.AddModelError("Transaction_Denomination_" + rowId, "Outgoing Denomination has error!");
                    }
                }

                if (sales.TransactionType == "Buy" || sales.TransactionType == "Sell")
                {
                    decimal localPaymentAmount = 0;

                    if (sales.CashAmount != null)
                    {
                        localPaymentAmount += Convert.ToDecimal(sales.CashAmount);
                    }

                    if (sales.Cheque1Amount != null)
                    {
                        localPaymentAmount += Convert.ToDecimal(sales.Cheque1Amount);
                    }

                    if (sales.Cheque2Amount != null)
                    {
                        localPaymentAmount += Convert.ToDecimal(sales.Cheque2Amount);
                    }

                    if (sales.Cheque3Amount != null)
                    {
                        localPaymentAmount += Convert.ToDecimal(sales.Cheque3Amount);
                    }

                    if (sales.BankTransferAmount != null)
                    {
                        localPaymentAmount += Convert.ToDecimal(sales.BankTransferAmount);
                    }

                    if (sales.MemoBalance != null)
                    {
                        localPaymentAmount += Convert.ToDecimal(sales.MemoBalance);
                    }

                    if (totalLocal != localPaymentAmount)
                    {
                        ModelState.AddModelError("sales.LocalPaymentMode", "Local Payment Mode Amount and Total Amount (Local) not equal!");
                    }
                }
            }
            else
            {
                ModelState.AddModelError("Transaction", "Please add at least ONE transaction!");
            }

            if (ModelState.IsValid)
            {
                if (sales.TransactionType == "Buy" || sales.TransactionType == "Sell")
                {
                    sales.LocalPaymentMode = form["sales.LocalPaymentMode"].ToString();
                }
                else
                {
                    sales.LocalPaymentMode = null;
                    sales.CashAmount = null;
                    sales.Cheque1Amount = null;
                    sales.Cheque1No = null;
                    sales.Cheque2Amount = null;
                    sales.Cheque2No = null;
                    sales.Cheque3Amount = null;
                    sales.Cheque3No = null;
                    sales.BankTransferAmount = null;
                    sales.BankTransferNo = null;
                    sales.MemoBalance = null;
                }
                sales.TotalAmountLocal = totalLocal;
                sales.TotalAmountForeign = totalForeign;
                if (customer.Others[0].GMApprovalAbove > 0)
                {
                    if (sales.TotalAmountLocal >= Convert.ToDecimal(customer.Others[0].GMApprovalAbove))
                    {
                        sales.Status = "Pending GM Approval";
                    }
                }

                bool result = false;

                if (oldData.Status.Contains("Approval"))
                {
                    oldData.Remarks = sales.Remarks;

                    result = _salesModel.Update(oldData.ID, oldData);
                }
                else
                {
                    result = _salesModel.Update(id, sales);
                }

                if (result)
                {
                    int userid = Convert.ToInt32(Session["UserId"]);
                    string tableAffected = "Sales";
                    string description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Updated Sale [" + sales.MemoID + "]";

                    bool sale_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);

                    if (sale_log)
                    {
                        //Add Approval History
                        bool approval_history = _approvalHistorysModel.Add("Sale", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Updated Sale [" + sales.MemoID + "]");

                        if (sales.TransactionType == "Buy")
                        {
                            //Check the hidden Value
                            if (ViewData["PendingChequeLog"].ToString() == "1")
                            {
                                bool chequelog = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque (Transaction Row) [" + sales.MemoID + "]");
                            }

                            //Check the hidden Value
                            if (ViewData["PendingBankTransferLog"].ToString() == "1")
                            {
                                bool banktransferlog = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Bank Transfer (Transaction Row) [" + sales.MemoID + "]");
                            }
                        }

                        if (sales.TransactionType == "Sell")
                        {
                            //Check the hidden Value
                            if (ViewData["PendingLocalCheque1Log"].ToString() == "1")
                            {
                                bool localcheque1log = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque 1 (Local Payment) [" + sales.MemoID + "]");
                            }

                            //Check the hidden Value
                            if (ViewData["PendingLocalCheque2Log"].ToString() == "1")
                            {
                                bool localcheque2log = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque 2 (Local Payment) [" + sales.MemoID + "]");
                            }

                            //Check the hidden Value
                            if (ViewData["PendingLocalCheque3Log"].ToString() == "1")
                            {
                                bool localcheque3log = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque 3 (Local Payment) [" + sales.MemoID + "]");
                            }

                            //Check the hidden Value
                            if (ViewData["PendingLocalBankTransferLog"].ToString() == "1")
                            {
                                bool localbanktransferlog = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Bank Transfer (Local Payment) [" + sales.MemoID + "]");
                            }
                        }
                    }

                    if (!oldData.Status.Contains("Approval"))
                    {
                        //Delete Old Transactions
                        if (oldData.SaleTransactions.Count > 0)
                        {
                            bool del_transaction = false;
                            bool del_denomination = false;

                            foreach (SaleTransaction transaction in oldData.SaleTransactions)
                            {
                                int productId = transaction.CurrencyId;
                                string transactionType = transaction.TransactionType;
                                decimal amountLocal = transaction.AmountLocal;
                                decimal amountForeign = transaction.AmountForeign;

                                if (transaction.SaleTransactionDenominations.Count > 0)
                                {
                                    foreach (SaleTransactionDenomination denomination in transaction.SaleTransactionDenominations)
                                    {
                                        bool delete_denomination = _saleTransactionDenominationsModel.Delete(denomination.ID);

                                        if (delete_denomination)
                                        {
                                            if (!del_denomination)
                                            {
                                                del_denomination = true;
                                            }
                                        }
                                    }
                                }

                                //bool delete_transaction = _saleTransactionsModel.Delete(transaction.ID);

                                //if (delete_transaction)
                                //{
                                //    if (!del_transaction)
                                //    {
                                //        del_transaction = true;
                                //    }
                                //}
                            }

                            bool delete_transaction = _saleTransactionsModel.Delete2(oldData.ID);

                            if (delete_transaction)
                            {
                                if (!del_transaction)
                                {
                                    del_transaction = true;
                                }
                            }

                            if (del_transaction)
                            {
                                userid = Convert.ToInt32(Session["UserId"]);
                                tableAffected = "SaleTransactions";
                                description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Deleted Sale Transactions [" + sales.MemoID + "]";

                                bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                            }

                            if (del_denomination)
                            {
                                userid = Convert.ToInt32(Session["UserId"]);
                                tableAffected = "SaleTransactionDenominations";
                                description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Deleted Sale Transaction Denominations [" + sales.MemoID + "]";

                                bool denomination_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                            }
                        }

                        //Add New Transactions
                        if (transactionKeys.Count > 0)
                        {
                            bool add_transaction = false;
                            bool add_denomination = false;

                            foreach (string key in transactionKeys)
                            {
                                string rowId = key.Split('_')[2];

                                SaleTransaction transaction = new SaleTransaction();
                                transaction.SaleId = id;
                                transaction.TransactionID = form[key].ToString();
                                transaction.TransactionType = form["Transaction_Type_" + rowId].ToString();
                                transaction.VesselName = form["Transaction_VesselName_" + rowId];
                                transaction.CurrencyId = Convert.ToInt32(form["Transaction_Currency_" + rowId]);
                                transaction.Rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                if (!string.IsNullOrEmpty(form["Transaction_EncashmentRate_" + rowId]))
                                {
                                    transaction.EncashmentRate = Convert.ToDecimal(form["Transaction_EncashmentRate_" + rowId]);
                                }
                                if (!string.IsNullOrEmpty(form["Transaction_CrossRate_" + rowId]))
                                {
                                    transaction.CrossRate = Convert.ToDecimal(form["Transaction_CrossRate_" + rowId]);
                                }
                                transaction.Unit = Convert.ToInt32(form["Transaction_Unit_" + rowId].ToString().Replace(",", ""));
                                transaction.PaymentMode = form["Transaction_PaymentMode_" + rowId];
                                if (!string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
                                {
                                    transaction.ChequeNo = form["Transaction_ChequeNo_" + rowId].ToString();
                                }
                                if (!string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
                                {
                                    transaction.BankTransferNo = form["Transaction_BankTransferNo_" + rowId].ToString();
                                }
                                transaction.AmountLocal = Convert.ToDecimal(form["Transaction_AmountLocal_" + rowId]);
                                transaction.AmountForeign = Convert.ToDecimal(form["Transaction_AmountForeign_" + rowId]);

                                bool result_transaction = _saleTransactionsModel.Add(transaction);

                                if (result_transaction)
                                {
                                    if (!add_transaction)
                                    {
                                        add_transaction = true;
                                    }

                                    List<string> denominationKeys = form.AllKeys.Where(e => e.Contains("Denomination_Value_" + rowId + "_")).ToList();

                                    if (denominationKeys.Count > 0)
                                    {
                                        foreach (string denoKey in denominationKeys)
                                        {
                                            string denoId = denoKey.Split('_')[3];

                                            SaleTransactionDenomination denomination = new SaleTransactionDenomination();
                                            denomination.SaleTransactionId = transaction.ID;
                                            denomination.Denomination = 0;
                                            string deno = form[denoKey].ToString();
                                            if (deno != "coins")
                                            {
                                                denomination.Denomination = Convert.ToInt32(deno);
                                            }
                                            denomination.Pieces = 0;
                                            if (!string.IsNullOrEmpty(form["Denomination_Value_Pieces_" + rowId + "_" + denoId]))
                                            {
                                                denomination.Pieces = Convert.ToInt32(form["Denomination_Value_Pieces_" + rowId + "_" + denoId].ToString().Replace(",", ""));
                                            }
                                            denomination.AmountForeign = 0;
                                            if (!string.IsNullOrEmpty(form["Denomination_Value_AmountForeign_" + rowId + "_" + denoId]))
                                            {
                                                denomination.AmountForeign = Convert.ToDecimal(form["Denomination_Value_AmountForeign_" + rowId + "_" + denoId]);
                                            }

                                            bool result_denomination = _saleTransactionDenominationsModel.Add(denomination);

                                            if (result_denomination)
                                            {
                                                if (!add_denomination)
                                                {
                                                    add_denomination = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            if (add_transaction)
                            {
                                userid = Convert.ToInt32(Session["UserId"]);
                                tableAffected = "SaleTransactions";
                                description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Created Sale Transactions [" + sales.MemoID + "]";

                                bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                            }

                            if (add_denomination)
                            {
                                userid = Convert.ToInt32(Session["UserId"]);
                                tableAffected = "SaleTransactionDenominations";
                                description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Created Sale Transaction Denominations [" + sales.MemoID + "]";

                                bool denomination_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                            }
                        }
                    }

                    TempData.Add("Result", "success|" + oldData.MemoID + " has been successfully updated!");

                    return RedirectToAction("Listing", module, new { @page = page });
                }
                else
                {
                    TempData.Add("Result", "danger|An error occured while saving sale record!");
                }
            }
            else
            {
                TempData.Add("Result", "danger|There is something wrong in the form!");
            }

            Dropdown[] customerDDL = CustomerDDL(oldData.CustomerParticularId);
            ViewData["CustomerDropdown"] = new SelectList(customerDDL, "val", "name", sales.CustomerParticularId);

            ViewData["CustomerContact"] = "";
            ViewData["CustomerAddress"] = "";
            if (customer != null)
            {
                string contact = "";
                string address = "";

                if (customer.CustomerType == "Corporate & Trading Company")
                {
                    contact = customer.Company_TelNo;
                    if (!string.IsNullOrEmpty(customer.Company_BusinessAddress2))
                    {
                        address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_PostalCode;
                    }
                    else
                    {
                        address = customer.Company_BusinessAddress1 + ", " + customer.Company_PostalCode;
                    }

                }
                else
                {
                    contact = customer.Natural_ContactNoM;
                    address = customer.Natural_PermanentAddress;
                }

                ViewData["CustomerContact"] = contact;
                ViewData["CustomerAddress"] = address;
            }

            //Dropdown[] collectionTimeDDL = CollectionTimeDDL();
            //ViewData["CollectionTimeDropdown"] = new SelectList(collectionTimeDDL, "val", "name", sales.CollectionTime);

            ViewData["NonUrgentRadio"] = "";
            ViewData["UrgentRadio"] = "";
            if (sales.Urgent == "Non-Urgent")
            {
                ViewData["NonUrgentRadio"] = "checked";
            }
            else
            {
                ViewData["UrgentRadio"] = "checked";
            }

            ViewData["RequireDeliveryCheckbox"] = "";
            if (!string.IsNullOrEmpty(sales.RequireDelivery))
            {
                if (sales.RequireDelivery == "Yes")
                {
                    ViewData["RequireDeliveryCheckbox"] = "checked";
                }
            }

            ViewData["TransactionTypeBuyRadio"] = "";
            ViewData["TransactionTypeSellRadio"] = "";
            ViewData["TransactionTypeEncashmentRadio"] = "";
            ViewData["TransactionTypeSwapRadio"] = "";
            ViewData["TransactionTypeCrossCurrencyRadio"] = "";

            if (!string.IsNullOrEmpty(sales.TransactionType))
            {
                ViewData["SaleTransactionType"] = sales.TransactionType;

                if (sales.TransactionType == "Buy")
                {
                    ViewData["TransactionTypeBuyRadio"] = "checked";
                }
                else if (sales.TransactionType == "Sell")
                {
                    ViewData["TransactionTypeSellRadio"] = "checked";
                }
                else if (sales.TransactionType == "Encashment")
                {
                    ViewData["TransactionTypeEncashmentRadio"] = "checked";
                }
                else if (sales.TransactionType == "Swap")
                {
                    ViewData["TransactionTypeSwapRadio"] = "checked";
                }
                else
                {
                    ViewData["TransactionTypeCrossCurrencyRadio"] = "checked";
                }
            }

            ViewData["LocalPaymentModeCashCheckbox"] = "";
            ViewData["LocalPaymentModeCheque1Checkbox"] = "";
            ViewData["LocalPaymentModeCheque2Checkbox"] = "";
            ViewData["LocalPaymentModeCheque3Checkbox"] = "";
            ViewData["LocalPaymentModeBankTransferCheckbox"] = "";
            if (!string.IsNullOrEmpty(form["sales.LocalPaymentMode"]))
            {
                if (form["sales.LocalPaymentMode"].ToString().Contains("Cash"))
                {
                    ViewData["LocalPaymentModeCashCheckbox"] = "checked";
                }

                if (form["sales.LocalPaymentMode"].ToString().Contains("Cheque 1"))
                {
                    ViewData["LocalPaymentModeCheque1Checkbox"] = "checked";
                }

                if (form["sales.LocalPaymentMode"].ToString().Contains("Cheque 2"))
                {
                    ViewData["LocalPaymentModeCheque2Checkbox"] = "checked";
                }

                if (form["sales.LocalPaymentMode"].ToString().Contains("Cheque 3"))
                {
                    ViewData["LocalPaymentModeCheque3Checkbox"] = "checked";
                }

                if (form["sales.LocalPaymentMode"].ToString().Contains("Bank Transfer"))
                {
                    ViewData["LocalPaymentModeBankTransferCheckbox"] = "checked";
                }
            }

            Dropdown[] cashBankDDL = LocalPaymentBankDDL(oldData.CashBank);
            ViewData["CashBankDropdown"] = new SelectList(cashBankDDL, "val", "name", sales.CashBank);

            Dropdown[] cheque1BankDDL = LocalPaymentBankDDL(oldData.Cheque1Bank);
            ViewData["Cheque1BankDropdown"] = new SelectList(cheque1BankDDL, "val", "name", sales.Cheque1Bank);

            Dropdown[] cheque2BankDDL = LocalPaymentBankDDL(oldData.Cheque2Bank);
            ViewData["Cheque2BankDropdown"] = new SelectList(cheque2BankDDL, "val", "name", sales.Cheque2Bank);

            Dropdown[] cheque3BankDDL = LocalPaymentBankDDL(oldData.Cheque3Bank);
            ViewData["Cheque3BankDropdown"] = new SelectList(cheque3BankDDL, "val", "name", sales.Cheque3Bank);

            Dropdown[] bankTransferBankDDL = LocalPaymentBankDDL(oldData.BankTransferBank);
            ViewData["BankTransferBankDropdown"] = new SelectList(bankTransferBankDDL, "val", "name", sales.BankTransferBank);

            IList<SaleTransactionsData> transactions = new List<SaleTransactionsData>();
            Dropdown[] currency2 = CurrencyDDL(sales.TransactionType);
            foreach (string key in transactionKeys)
            {
                SaleTransactionsData transactionData = new SaleTransactionsData();
                transactionData.Denominations = new List<DenominationsData>();

                string rowId = key.Split('_')[2];
                string transactionID = form[key];
                string type = form["Transaction_Type_" + rowId].ToString();
                string vesselName = "";
                if (!string.IsNullOrEmpty(form["Transaction_VesselName_" + rowId]))
                {
                    vesselName = form["Transaction_VesselName_" + rowId].ToString();
                }

                string productId = form["Transaction_Currency_" + rowId].ToString();
                Product product = _productsModel.GetSingle(Convert.ToInt32(productId));
                string currencyFormat = GetDecimalFormat(product.Decimal);

                //Dropdown[] currency = CurrencyDDL(sales.TransactionType);
                SelectList currencyDDL = new SelectList(currency2, "val", "name", productId);

                string symbol = _productsModel.GetSingle(Convert.ToInt32(productId)).Symbol;
                string rate = form["Transaction_Rate_" + rowId].ToString();
                int unit = Convert.ToInt32(form["Transaction_Unit_" + rowId]);

                string encashmentRate = "";
                if (!string.IsNullOrEmpty(form["Transaction_EncashmentRate_" + rowId]))
                {
                    encashmentRate = form["Transaction_EncashmentRate_" + rowId].ToString();
                }

                string crossRate = "";
                if (!string.IsNullOrEmpty(form["Transaction_CrossRate_" + rowId]))
                {
                    crossRate = form["Transaction_CrossRate_" + rowId].ToString();
                }

                string paymentModeVal = "";
                if (!string.IsNullOrEmpty(form["Transaction_PaymentMode_" + rowId]))
                {
                    paymentModeVal = form["Transaction_PaymentMode_" + rowId].ToString();
                }
                Dropdown[] paymentMode = PaymentModeDDL(Convert.ToInt32(productId));
                SelectList paymentModeDDL = new SelectList(paymentMode, "val", "name", paymentModeVal);

                string disabledCheque = "disabled";
                string disabledBankTranfer = "disabled";
                if (paymentModeVal == "Cheque")
                {
                    disabledCheque = "";
                }
                else if (paymentModeVal == "Bank Transfer")
                {
                    disabledBankTranfer = "";
                }

                string chequeNo = "";
                if (!string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
                {
                    chequeNo = form["Transaction_ChequeNo_" + rowId].ToString();
                }

                string bankTransferNo = "";
                if (!string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
                {
                    bankTransferNo = form["Transaction_BankTransferNo_" + rowId].ToString();
                }

                string amountLocal = "";
                if (!string.IsNullOrEmpty(form["Transaction_AmountLocal_" + rowId]))
                {
                    amountLocal = form["Transaction_AmountLocal_" + rowId].ToString();
                }

                string amountForeign = "";
                if (!string.IsNullOrEmpty(form["Transaction_AmountForeign_" + rowId]))
                {
                    amountForeign = form["Transaction_AmountForeign_" + rowId].ToString();
                }

                List<string> denominationKeys = form.AllKeys.Where(e => e.Contains("Denomination_Value_" + rowId + "_")).ToList();

                foreach (string denoKey in denominationKeys)
                {
                    DenominationsData denoData = new DenominationsData();

                    string rowId2 = denoKey.Split('_')[3];
                    string denominationValue = "coins";
                    if (form["Denomination_Value_" + rowId + "_" + rowId2].ToString() != "0")
                    {
                        denominationValue = form["Denomination_Value_" + rowId + "_" + rowId2].ToString();
                    }

                    string pieces = "-";
                    if (!string.IsNullOrEmpty(form["Denomination_Value_Pieces_" + rowId + "_" + rowId2]))
                    {
                        pieces = form["Denomination_Value_Pieces_" + rowId + "_" + rowId2].ToString();
                    }
                    else
                    {
                        if (form["Denomination_Value_" + rowId + "_" + rowId2].ToString() != "0")
                        {
                            pieces = "";
                        }
                    }

                    string denoAmountForeign = "";
                    if (!string.IsNullOrEmpty(form["Denomination_Value_AmountForeign_" + rowId + "_" + rowId2]))
                    {
                        try
                        {
                            int dp = form["Denomination_Value_AmountForeign_" + rowId + "_" + rowId2].ToString().Split('.')[1].Length;
                            denoAmountForeign = Convert.ToDecimal(form["Denomination_Value_AmountForeign_" + rowId + "_" + rowId2].ToString()).ToString(currencyFormat);
                        }
                        catch
                        {
                            denoAmountForeign = form["Denomination_Value_AmountForeign_" + rowId + "_" + rowId2].ToString();
                        }
                    }

                    denoData.DenoId = rowId2;
                    denoData.DenominationValue = denominationValue;
                    denoData.Pieces = pieces;
                    denoData.AmountForeign = denoAmountForeign;
                    transactionData.Denominations.Add(denoData);
                }

                string denoCurrencyCode = product.CurrencyCode;
                string totalCalculatedForeign = "0.00";
                string remainingForeign = "0.00";
                string totalOrderForeign = "0.00";

                if (denominationKeys.Count > 0)
                {
                    totalCalculatedForeign = Convert.ToDecimal(form["Denomination_Total_Calculated_Foreign_" + rowId]).ToString(currencyFormat);
                    remainingForeign = Convert.ToDecimal(form["Denomination_Remaining_Foreign_" + rowId].ToString()).ToString(currencyFormat);
                    totalOrderForeign = Convert.ToDecimal(form["Denomination_Total_Order_Foreign_" + rowId].ToString()).ToString(currencyFormat);
                }

                transactionData.RowId = rowId;
                transactionData.TransactionID = transactionID;
                transactionData.Type = type;
                transactionData.VesselName = vesselName;
                transactionData.CurrencyDDL = currencyDDL;
                transactionData.Symbol = symbol;
                transactionData.Rate = rate;
                transactionData.EncashmentRate = encashmentRate;
                transactionData.CrossRate = crossRate;
                transactionData.Unit = unit;
                transactionData.PaymentModeDDL = paymentModeDDL;
                transactionData.DisabledChequeNo = disabledCheque;
                transactionData.ChequeNo = chequeNo;
                transactionData.DisabledBankTransferNo = disabledBankTranfer;
                transactionData.BankTransferNo = bankTransferNo;
                transactionData.AmountLocal = amountLocal;
                transactionData.AmountForeign = amountForeign;
                transactionData.DenominationCurrencyCode = denoCurrencyCode;
                transactionData.DenominationTotalCalculatedForeign = totalCalculatedForeign;
                transactionData.DenominationRemainingForeign = remainingForeign;
                transactionData.DenominationTotalOrderForeign = totalOrderForeign;
                transactions.Add(transactionData);
            }

            ViewData["SaleTransactionsData"] = transactions;

            Product sgd = _productsModel.FindCurrencyCode("SGD");

            ViewData["TotalForeign"] = totalForeign.ToString(GetRateFormat(8));
            ViewData["TotalLocal"] = totalLocal.ToString(GetDecimalFormat(sgd.Decimal));

            ViewData["Disabled"] = "";

            List<string> disabledStatus = new List<string>() { "Completed", "Pending GM Approval", "Pending GM Approval (Rejected)", "Cancelled", "Rejected", "Pending Delete GM Approval" };
            if (disabledStatus.Contains(oldData.Status) || !Session["UserRole"].ToString().Contains("Super Admin"))
            {
                ViewData["Disabled"] = "disabled";
            }

            ViewData["Sale"] = sales;
            ViewData["SaleId"] = id;
            ViewData["PendingApproval"] = "No";
            if (oldData.Status == "Pending GM Approval" || oldData.Status == "Pending Delete GM Approval")
            {
                ViewData["PendingApproval"] = "Yes";
            }
            ViewData["SaleTransactionType"] = sales.TransactionType;
            ViewData["Module"] = module;

            ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
            return View();
        }

        //GET: SaleApproval
        public ActionResult SaleApproval(int id, string module = "Sale")
        {
            int page = 1;

            if (TempData["Page"] != null)
            {
                page = Convert.ToInt32(TempData.Peek("Page"));
                ViewData["Page"] = page;
                TempData.Keep("Page");
            }

            Sale sales = _salesModel.GetSingle(id);

            if (sales != null)
            {

                ViewData["PendingChequeLog"] = 0;
                ViewData["PendingBankTransferLog"] = 0;

                ViewData["PendingLocalCheque1Log"] = 0;
                ViewData["PendingLocalCheque2Log"] = 0;
                ViewData["PendingLocalCheque3Log"] = 0;
                ViewData["PendingLocalBankTransferLog"] = 0;

                if (!((sales.Status.Contains("Pending Accounts") && Session["UserRole"].ToString().Contains("Finance")) || (sales.Status.Contains("Pending Packing") && Session["UserRole"].ToString().Contains("Inventory")) || (sales.Status.Contains("Pending Delivery by") && Session["UserRole"].ToString().Contains("Ops Exec")) || (sales.Status.Contains("Pending Cashier") && Session["UserRole"].ToString().Contains("Cashier"))))
                {
                    return RedirectToAction("Edit", new { @id = id, @module = module });
                }
                else
                {
                    if (sales.Status.Contains("Pending Delivery by") && sales.PendingDeliveryById != Convert.ToInt32(Session["UserId"]))
                    {
                        return RedirectToAction("Edit", new { @id = id, @module = module });
                    }
                }

                Dropdown[] customerDDL = CustomerDDL(sales.CustomerParticularId);
                ViewData["CustomerDropdown"] = new SelectList(customerDDL, "val", "name", sales.CustomerParticularId);

                CustomerParticular customer = sales.CustomerParticulars;

                ViewData["CustomerContact"] = "";
                ViewData["CustomerAddress"] = "";
                if (customer != null)
                {
                    string contact = "";
                    string address = "";

                    if (customer.CustomerType == "Corporate & Trading Company")
                    {
                        contact = customer.Company_TelNo;
                        if (!string.IsNullOrEmpty(customer.Company_BusinessAddress2))
                        {
                            address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_PostalCode;
                        }
                        else
                        {
                            address = customer.Company_BusinessAddress1 + ", " + customer.Company_PostalCode;
                        }
                    }
                    else
                    {
                        contact = customer.Natural_ContactNoM;
                        address = customer.Natural_PermanentAddress;
                    }

                    ViewData["CustomerContact"] = contact;
                    ViewData["CustomerAddress"] = address;
                }

                //Dropdown[] collectionTimeDDL = CollectionTimeDDL();
                //ViewData["CollectionTimeDropdown"] = new SelectList(collectionTimeDDL, "val", "name", sales.CollectionTime);

                ViewData["NonUrgentRadio"] = "";
                ViewData["UrgentRadio"] = "";
                if (sales.Urgent == "Non-Urgent")
                {
                    ViewData["NonUrgentRadio"] = "checked";
                }
                else
                {
                    ViewData["UrgentRadio"] = "checked";
                }

                ViewData["RequireDeliveryCheckbox"] = "";
                if (sales.RequireDelivery == "Yes")
                {
                    ViewData["RequireDeliveryCheckbox"] = "checked";
                }

                ViewData["TransactionTypeBuyRadio"] = "";
                ViewData["TransactionTypeSellRadio"] = "";
                ViewData["TransactionTypeEncashmentRadio"] = "";
                ViewData["TransactionTypeSwapRadio"] = "";
                ViewData["TransactionTypeCrossCurrencyRadio"] = "";

                if (!string.IsNullOrEmpty(sales.TransactionType))
                {
                    if (sales.TransactionType == "Buy")
                    {
                        ViewData["TransactionTypeBuyRadio"] = "checked";
                    }
                    else if (sales.TransactionType == "Sell")
                    {
                        ViewData["TransactionTypeSellRadio"] = "checked";
                    }
                    else if (sales.TransactionType == "Encashment")
                    {
                        ViewData["TransactionTypeEncashmentRadio"] = "checked";
                    }
                    else if (sales.TransactionType == "Swap")
                    {
                        ViewData["TransactionTypeSwapRadio"] = "checked";
                    }
                    else
                    {
                        ViewData["TransactionTypeCrossCurrencyRadio"] = "checked";
                    }
                }

                ViewData["LocalPaymentModeCashCheckbox"] = "";
                ViewData["LocalPaymentModeCheque1Checkbox"] = "";
                ViewData["LocalPaymentModeCheque2Checkbox"] = "";
                ViewData["LocalPaymentModeCheque3Checkbox"] = "";
                ViewData["LocalPaymentModeBankTransferCheckbox"] = "";
                if (!string.IsNullOrEmpty(sales.LocalPaymentMode))
                {
                    if (sales.LocalPaymentMode.Contains("Cash"))
                    {
                        ViewData["LocalPaymentModeCashCheckbox"] = "checked";
                    }

                    if (sales.LocalPaymentMode.Contains("Cheque 1"))
                    {
                        ViewData["LocalPaymentModeCheque1Checkbox"] = "checked";
                    }

                    if (sales.LocalPaymentMode.Contains("Cheque 2"))
                    {
                        ViewData["LocalPaymentModeCheque2Checkbox"] = "checked";
                    }

                    if (sales.LocalPaymentMode.Contains("Cheque 3"))
                    {
                        ViewData["LocalPaymentModeCheque3Checkbox"] = "checked";
                    }

                    if (sales.LocalPaymentMode.Contains("Bank Transfer"))
                    {
                        ViewData["LocalPaymentModeBankTransferCheckbox"] = "checked";
                    }
                }

                Dropdown[] cashBankDDL = LocalPaymentBankDDL(sales.CashBank);
                ViewData["CashBankDropdown"] = new SelectList(cashBankDDL, "val", "name", sales.CashBank);

                Dropdown[] cheque1BankDDL = LocalPaymentBankDDL(sales.Cheque1Bank);
                ViewData["Cheque1BankDropdown"] = new SelectList(cheque1BankDDL, "val", "name", sales.Cheque1Bank);

                Dropdown[] cheque2BankDDL = LocalPaymentBankDDL(sales.Cheque2Bank);
                ViewData["Cheque2BankDropdown"] = new SelectList(cheque2BankDDL, "val", "name", sales.Cheque2Bank);

                Dropdown[] cheque3BankDDL = LocalPaymentBankDDL(sales.Cheque3Bank);
                ViewData["Cheque3BankDropdown"] = new SelectList(cheque3BankDDL, "val", "name", sales.Cheque3Bank);

                Dropdown[] bankTransferBankDDL = LocalPaymentBankDDL(sales.BankTransferBank);
                ViewData["BankTransferBankDropdown"] = new SelectList(bankTransferBankDDL, "val", "name", sales.BankTransferBank);

                Product sgd = _productsModel.FindCurrencyCode("SGD");
                string sgdFormat = GetDecimalFormat(sgd.Decimal);
                string rateFormat = GetRateFormat(rateDP);

                IList<SaleTransactionsData> transactions = new List<SaleTransactionsData>();

                int rowId = 1;
                decimal totalForeign = 0;
                decimal totalLocal = 0;
                Dropdown[] currency2 = CurrencyDDL(sales.TransactionType);
                foreach (SaleTransaction transaction in sales.SaleTransactions.OrderBy(e => e.ID))
                {
                    string currencyFormat = GetDecimalFormat(transaction.Products.Decimal);

                    SaleTransactionsData transactionData = new SaleTransactionsData();
                    transactionData.Denominations = new List<DenominationsData>();

                    int transactionId = transaction.ID;
                    string transactionID = transaction.TransactionID;
                    string type = transaction.TransactionType;
                    string vesselName = transaction.VesselName;

                    int productId = transaction.CurrencyId;
                    //Dropdown[] currency = CurrencyDDL(sales.TransactionType);
                    SelectList currencyDDL = new SelectList(currency2, "val", "name", productId);

                    string symbol = transaction.Products.Symbol;

                    string rate = transaction.Rate.ToString(rateFormat);
                    int unit = transaction.Unit;

                    string encashmentRate = "";
                    if (transaction.EncashmentRate != null)
                    {
                        encashmentRate = Convert.ToDecimal(transaction.EncashmentRate).ToString(rateFormat);
                    }

                    string crossRate = "";
                    if (transaction.CrossRate != null)
                    {
                        crossRate = Convert.ToDecimal(transaction.CrossRate).ToString(rateFormat);
                    }

                    Dropdown[] paymentMode = PaymentModeDDL(productId);
                    SelectList paymentModeDDL = new SelectList(paymentMode, "val", "name", transaction.PaymentMode);

                    string disabledCheque = "disabled";
                    string disabledBankTranfer = "disabled";
                    if (transaction.PaymentMode == "Cheque")
                    {
                        disabledCheque = "";
                    }
                    else if (transaction.PaymentMode == "Bank Transfer")
                    {
                        disabledBankTranfer = "";
                    }

                    string chequeNo = "";
                    if (!string.IsNullOrEmpty(transaction.ChequeNo))
                    {
                        chequeNo = transaction.ChequeNo;
                    }

                    string bankTransferNo = "";
                    if (!string.IsNullOrEmpty(transaction.BankTransferNo))
                    {
                        bankTransferNo = transaction.BankTransferNo;
                    }

                    string amountLocal = transaction.AmountLocal.ToString(sgdFormat);
                    string amountForeign = transaction.AmountForeign.ToString(currencyFormat);

                    if (sales.TransactionType == "Buy" || transaction.TransactionType == "Sell")
                    {
                        totalForeign += transaction.AmountForeign;
                        totalLocal += transaction.AmountLocal;
                    }

                    string denoCurrencyCode = "Currency";
                    string totalCalculatedForeign = "0.00";
                    string remainingForeign = "0.00";
                    string totalOrderForeign = "0.00";

                    if (transaction.SaleTransactionDenominations.Count > 0)
                    {
                        decimal foreignCalculated = 0;

                        foreach (SaleTransactionDenomination denomination in transaction.SaleTransactionDenominations)
                        {
                            DenominationsData denoData = new DenominationsData();

                            string denominationValue = "coins";
                            string pieces = "-";
                            if (denomination.Denomination != 0)
                            {
                                denominationValue = denomination.Denomination.ToString();
                                pieces = FormValidationHelper.AmountFormatter(Convert.ToDecimal(denomination.Pieces), 0);
                            }

                            string denoAmountForeign = denomination.AmountForeign.ToString(currencyFormat);

                            denoData.DenoId = denomination.ID.ToString();
                            denoData.DenominationValue = denominationValue;
                            denoData.Pieces = pieces;
                            denoData.AmountForeign = denoAmountForeign;
                            transactionData.Denominations.Add(denoData);

                            foreignCalculated += denomination.AmountForeign;
                        }

                        denoCurrencyCode = transaction.Products.CurrencyCode;
                        totalCalculatedForeign = foreignCalculated.ToString(currencyFormat);
                        remainingForeign = (transaction.AmountForeign - foreignCalculated).ToString(currencyFormat);
                        totalOrderForeign = transaction.AmountForeign.ToString(currencyFormat);
                    }

                    transactionData.RowId = rowId.ToString();
                    transactionData.ID = transactionId;
                    transactionData.TransactionID = transactionID;
                    transactionData.Type = type;
                    transactionData.VesselName = vesselName;
                    transactionData.CurrencyDDL = currencyDDL;
                    transactionData.Symbol = symbol;
                    transactionData.Rate = rate;
                    transactionData.Unit = unit;
                    transactionData.EncashmentRate = encashmentRate;
                    transactionData.CrossRate = crossRate;
                    transactionData.PaymentModeDDL = paymentModeDDL;
                    transactionData.DisabledChequeNo = disabledCheque;
                    transactionData.ChequeNo = chequeNo;
                    transactionData.DisabledBankTransferNo = disabledBankTranfer;
                    transactionData.BankTransferNo = bankTransferNo;
                    transactionData.AmountLocal = amountLocal;
                    transactionData.AmountForeign = amountForeign;
                    transactionData.DenominationCurrencyCode = denoCurrencyCode;
                    transactionData.DenominationTotalCalculatedForeign = totalCalculatedForeign;
                    transactionData.DenominationRemainingForeign = remainingForeign;
                    transactionData.DenominationTotalOrderForeign = totalOrderForeign;
                    transactions.Add(transactionData);

                    rowId++;
                }

                ViewData["SaleTransactionsData"] = transactions;

                ViewData["TotalForeign"] = totalForeign.ToString(GetRateFormat(8));
                ViewData["TotalLocal"] = totalLocal.ToString(sgdFormat);

                ViewData["Sale"] = sales;
                ViewData["SaleId"] = sales.ID;
                ViewData["PendingApproval"] = "No";
                if (sales.Status == "Pending GM Approval" || sales.Status == "Pending Delete GM Approval")
                {
                    ViewData["PendingApproval"] = "Yes";
                }
                ViewData["SaleTransactionType"] = sales.TransactionType;
                ViewData["Module"] = module;

                if (!string.IsNullOrEmpty(sales.DeliveryConfirmation))
                {
                    ViewData["DeliveryConfirmation"] = sales.DeliveryConfirmation.Split(',').ToList();
                    ViewData["DeliveryConfirmationDomain"] = ConfigurationManager.AppSettings["DeliveryConfirmationFolder"].ToString();
                }

                ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
                return View();
            }
            else
            {
                TempData.Add("Result", "error|Memo ID not found!");
            }

            return RedirectToAction("Listing", module, new { @page = page });
        }

        //POST: SaleApproval
        [HttpPost]
        public ActionResult SaleApproval(int id, Sale sales, FormCollection form, string module = "Sale", string SubmitType = "")
        {
            int page = 1;

            if (TempData["Page"] != null)
            {
                page = Convert.ToInt32(TempData["Page"]);
                ViewData["Page"] = page;
            }

            Sale oldData = _salesModel.GetSingle(id);
            string OldDataStatus = oldData.Status;

            ViewData["PendingChequeLog"] = form["PendingChequeLog"].ToString();
            ViewData["PendingBankTransferLog"] = form["PendingBankTransferLog"].ToString();

            ViewData["PendingLocalCheque1Log"] = form["PendingLocalCheque1Log"].ToString();
            ViewData["PendingLocalCheque2Log"] = form["PendingLocalCheque2Log"].ToString();
            ViewData["PendingLocalCheque3Log"] = form["PendingLocalCheque3Log"].ToString();
            ViewData["PendingLocalBankTransferLog"] = form["PendingLocalBankTransferLog"].ToString();

            //For rollback
            Sale rollBack_Sale = new Sale()
            {
                ID = oldData.ID,
                MemoID = oldData.MemoID,
                CustomerParticularId = oldData.CustomerParticularId,
                IssueDate = oldData.IssueDate,
                CollectionDate = oldData.CollectionDate,
                CollectionTime = oldData.CollectionTime,
                CreatedBy = oldData.CreatedBy,
                Urgent = oldData.Urgent,
                RequireDelivery = oldData.RequireDelivery,
                BagNo = oldData.BagNo,
                Remarks = oldData.Remarks,
                CustomerRemarks = oldData.CustomerRemarks,
                TransactionType = oldData.TransactionType,
                LocalPaymentMode = oldData.LocalPaymentMode,
                CashAmount = oldData.CashAmount,
                CashBank = oldData.CashBank,
                Cheque1No = oldData.Cheque1No,
                Cheque1Amount = oldData.Cheque1Amount,
                Cheque1Bank = oldData.Cheque1Bank,
                Cheque2No = oldData.Cheque2No,
                Cheque2Amount = oldData.Cheque2Amount,
                Cheque2Bank = oldData.Cheque2Bank,
                Cheque3No = oldData.Cheque3No,
                Cheque3Amount = oldData.Cheque3Amount,
                Cheque3Bank = oldData.Cheque3Bank,
                BankTransferNo = oldData.BankTransferNo,
                BankTransferAmount = oldData.BankTransferAmount,
                BankTransferBank = oldData.BankTransferBank,
                MemoBalance = oldData.MemoBalance,
                TotalAmountLocal = oldData.TotalAmountLocal,
                TotalAmountForeign = oldData.TotalAmountForeign,
                Status = oldData.Status,
                LastApprovalOn = oldData.LastApprovalOn,
                PendingDeliveryById = oldData.PendingDeliveryById,
                DeliveryConfirmation = oldData.DeliveryConfirmation,
                DisapprovedReason = oldData.DisapprovedReason
            };

            Dictionary<int, SaleTransaction> rollBack_saleTransactions = new Dictionary<int, SaleTransaction>();
            Dictionary<int, SaleTransactionDenomination> rollBack_saleTransactionDenos = new Dictionary<int, SaleTransactionDenomination>();
            Dictionary<int, ProductInventory> rollBack_ProductInventories = new Dictionary<int, ProductInventory>();
            List<int> rollBack_Inventories = new List<int>();

            if (oldData.Status == "Pending Accounts")
            {
                #region Pending Accounts
                sales.ID = oldData.ID;
                sales.MemoID = oldData.MemoID;
                sales.CustomerParticularId = oldData.CustomerParticularId;
                sales.IssueDate = oldData.IssueDate;
                sales.CreatedBy = oldData.CreatedBy;
                sales.Users = oldData.Users;
                sales.Urgent = oldData.Urgent;
                sales.RequireDelivery = oldData.RequireDelivery;
                sales.BagNo = oldData.BagNo;
                sales.CustomerRemarks = oldData.CustomerRemarks;
                sales.TransactionType = oldData.TransactionType;
                sales.Status = oldData.Status;
                sales.CashBank = oldData.CashBank;
                sales.DisapprovedReason = oldData.DisapprovedReason;
                sales.DeliveryConfirmation = oldData.DeliveryConfirmation;
                sales.TotalAmountForeign = oldData.TotalAmountForeign;
                sales.TotalAmountLocal = oldData.TotalAmountLocal;
                sales.SaleTransactions = oldData.SaleTransactions;

                foreach (string modelKey in ModelState.Keys)
                {
                    if (ModelState[modelKey].Errors.Count > 0)
                    {
                        ModelState[modelKey].Errors.Clear();
                    }
                }

                if (string.IsNullOrEmpty(form["sales.CollectionDate"]))
                {
                    ModelState.AddModelError("sales.CollectionDate", "Collection Date is required!");
                }
                else
                {
                    try
                    {
                        sales.CollectionDate = Convert.ToDateTime(form["sales.CollectionDate"]);
                    }
                    catch
                    {
                        ModelState.AddModelError("sales.CollectionDate", "Collection Date is not valid!");
                    }
                }

                if (string.IsNullOrEmpty(form["sales.CollectionTime"]))
                {
                    ModelState.AddModelError("sales.CollectionTime", "Collection Time is required!");
                }
                else
                {
                    //if not null, then check length
                    if (string.IsNullOrEmpty(form["sales.CollectionTime"].Trim()))
                    {
                        ModelState.AddModelError("sales.CollectionTime", "Collection Time is required!");
                    }
                    else
                    {
                        if (form["sales.CollectionTime"].ToString().Length > 40)
                        {
                            ModelState.AddModelError("sales.CollectionTime", "Collection Time cannot more than 40 characters!");
                        }
                    }
                }

                if (!string.IsNullOrEmpty(sales.TransactionType))
                {
                    if (sales.TransactionType == "Buy" || sales.TransactionType == "Sell")
                    {
                        //Memo Balance Validation
                        ModelState memoBalModel = ModelState["sales.MemoBalance"];
                        memoBalModel.Errors.Clear();

                        if (string.IsNullOrEmpty(form["sales.MemoBalance"]))
                        {
                            ModelState.AddModelError("sales.MemoBalance", "Memo Balance is required!");
                        }
                        else
                        {
                            bool checkFormat = FormValidationHelper.AmountValidation(form["sales.MemoBalance"]);

                            if (!checkFormat)
                            {
                                ModelState.AddModelError("sales.MemoBalance", "Memo Balance is not valid!");
                            }
                            else
                            {
                                sales.MemoBalance = Convert.ToDecimal(form["sales.MemoBalance"]);
                            }
                        }

                        if (string.IsNullOrEmpty(form["sales.LocalPaymentMode"]))
                        {
                            ModelState.AddModelError("sales.LocalPaymentMode", "Local Payment Mode is required!");
                        }
                        else
                        {
                            string[] paymentModes = form["sales.LocalPaymentMode"].ToString().Split(',');

                            if (paymentModes.Length > 4)
                            {
                                ModelState.AddModelError("sales.LocalPaymentMode", "Maximum FOUR Payment Modes only!");
                            }
                            decimal totalAmount = 0;

                            if (form["sales.LocalPaymentMode"].ToString().Contains("Cash"))
                            {
                                ModelState cashAmountModel = ModelState["sales.CashAmount"];
                                cashAmountModel.Errors.Clear();

                                if (string.IsNullOrEmpty(form["sales.CashAmount"]))
                                {
                                    ModelState.AddModelError("sales.CashAmount", "Cash Amount is required!");
                                }
                                else
                                {
                                    bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.CashAmount"].ToString());

                                    if (!checkFormat)
                                    {
                                        ModelState.AddModelError("sales.CashAmount", "Cash Amount is not valid!");
                                    }
                                    else
                                    {
                                        sales.CashAmount = Convert.ToDecimal(form["sales.CashAmount"].ToString().Replace(",", ""));
                                        totalAmount += Convert.ToDecimal(sales.CashAmount);
                                    }
                                }
                            }

                            if (form["sales.LocalPaymentMode"].ToString().Contains("Cheque 1"))
                            {
                                ModelState Cheque1AmountModel = ModelState["sales.Cheque1Amount"];
                                Cheque1AmountModel.Errors.Clear();

                                if (string.IsNullOrEmpty(form["sales.Cheque1Amount"]))
                                {
                                    ModelState.AddModelError("sales.Cheque1Amount", "Cheque 1 Amount is required!");
                                }
                                else
                                {
                                    bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.Cheque1Amount"].ToString());

                                    if (!checkFormat)
                                    {
                                        ModelState.AddModelError("sales.Cheque1Amount", "Cheque 1 Amount is not valid!");
                                    }
                                    else
                                    {
                                        sales.Cheque1Amount = Convert.ToDecimal(form["sales.Cheque1Amount"].ToString().Replace(",", ""));
                                        totalAmount += Convert.ToDecimal(sales.Cheque1Amount);
                                    }
                                }
                            }

                            if (form["sales.LocalPaymentMode"].ToString().Contains("Cheque 2"))
                            {
                                ModelState Cheque2AmountModel = ModelState["sales.Cheque2Amount"];
                                Cheque2AmountModel.Errors.Clear();

                                if (string.IsNullOrEmpty(form["sales.Cheque2Amount"]))
                                {
                                    ModelState.AddModelError("sales.Cheque2Amount", "Cheque 2 Amount is required!");
                                }
                                else
                                {
                                    bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.Cheque2Amount"].ToString());

                                    if (!checkFormat)
                                    {
                                        ModelState.AddModelError("sales.Cheque2Amount", "Cheque 2 Amount is not valid!");
                                    }
                                    else
                                    {
                                        sales.Cheque2Amount = Convert.ToDecimal(form["sales.Cheque2Amount"].ToString().Replace(",", ""));
                                        totalAmount += Convert.ToDecimal(sales.Cheque2Amount);
                                    }
                                }
                            }

                            if (form["sales.LocalPaymentMode"].ToString().Contains("Cheque 3"))
                            {
                                ModelState Cheque3AmountModel = ModelState["sales.Cheque3Amount"];
                                Cheque3AmountModel.Errors.Clear();

                                if (string.IsNullOrEmpty(form["sales.Cheque3Amount"]))
                                {
                                    ModelState.AddModelError("sales.Cheque3Amount", "Cheque 3 Amount is required!");
                                }
                                else
                                {
                                    bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.Cheque3Amount"].ToString());

                                    if (!checkFormat)
                                    {
                                        ModelState.AddModelError("sales.Cheque3Amount", "Cheque 3 Amount is not valid!");
                                    }
                                    else
                                    {
                                        sales.Cheque3Amount = Convert.ToDecimal(form["sales.Cheque3Amount"].ToString().Replace(",", ""));
                                        totalAmount += Convert.ToDecimal(sales.Cheque3Amount);
                                    }
                                }
                            }

                            if (form["sales.LocalPaymentMode"].ToString().Contains("Bank Transfer"))
                            {
                                ModelState bankTransferAmountModel = ModelState["sales.BankTransferAmount"];
                                bankTransferAmountModel.Errors.Clear();

                                if (string.IsNullOrEmpty(form["sales.BankTransferAmount"]))
                                {
                                    ModelState.AddModelError("sales.BankTransferAmount", "Bank Transfer Amount is required!");
                                }
                                else
                                {
                                    bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.BankTransferAmount"].ToString());

                                    if (!checkFormat)
                                    {
                                        ModelState.AddModelError("sales.BankTransferAmount", "Bank Transfer Amount is not valid!");
                                    }
                                    else
                                    {
                                        sales.BankTransferAmount = Convert.ToDecimal(form["sales.BankTransferAmount"].ToString().Replace(",", ""));
                                        totalAmount += Convert.ToDecimal(sales.BankTransferAmount);
                                    }
                                }
                            }

                            if (sales.MemoBalance != null)
                            {
                                totalAmount += Convert.ToDecimal(sales.MemoBalance);
                            }

                            if (totalAmount != sales.TotalAmountLocal)
                            {
                                ModelState.AddModelError("sales.LocalPaymentMode", "Local Payment Mode Amount and Total Amount (Local) not equal!");
                            }
                        }
                    }
                }

                List<string> transactionKeys = form.AllKeys.Where(e => e.Contains("Transaction_ID_")).ToList();

                foreach (string key in transactionKeys)
                {
                    string rowId = key.Split('_')[2];

                    if (string.IsNullOrEmpty(form["Transaction_PaymentMode_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_PaymentMode_" + rowId, "Payment Mode is not valid!");
                    }
                    else
                    {
                        if (form["Transaction_PaymentMode_" + rowId].ToString() == "Cheque")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
                            {
                                //ModelState.AddModelError("Transaction_ChequeNo_" + rowId, "Cheque No. is required!");
                            }
                        }
                        else if (form["Transaction_PaymentMode_" + rowId].ToString() == "Bank Transfer")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
                            {
                                //ModelState.AddModelError("Transaction_BankTransferNo_" + rowId, "Bank Transfer No. is not valid!");
                            }
                        }
                    }
                }

                if (ModelState.IsValid)
                {
                    try
                    {
                        if (sales.TransactionType == "Buy" || sales.TransactionType == "Sell")
                        {
                            sales.LocalPaymentMode = form["sales.LocalPaymentMode"].ToString();
                        }

                        if (SubmitType != "SaveChanges")
                        {
                            sales.Status = "Pending Packing";
                            sales.LastApprovalOn = DateTime.Now;
                        }

                        bool result = _salesModel.Update(sales.ID, sales);

                        if (result)
                        {
                            int userid = Convert.ToInt32(Session["UserId"]);
                            string tableAffected = "Sales";
                            string ActionType = "Approve";
                            string description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Approved Sale [" + sales.MemoID + "] " + "Status: " + "[ " + OldDataStatus + " - " + sales.Status + " ]";
                            string approvallog = "[" + Session["Username"].ToString() + "] Approved Sale [" + sales.MemoID + "]";
                            if (SubmitType == "SaveChanges")
                            {
                                ActionType = "Update";
                                description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Updated Sale [" + sales.MemoID + "]";
                                approvallog = "[" + Session["Username"].ToString() + "] Updated Sale [" + sales.MemoID + "]";
                            }

                            bool sale_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);

                            if (sale_log)
                            {
                                //Add Approval History
                                bool approval_history = _approvalHistorysModel.Add("Sale", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), ActionType, approvallog);

                                if (sales.TransactionType == "Buy")
                                {
                                    //Check the hidden Value
                                    if (ViewData["PendingChequeLog"].ToString() == "1")
                                    {
                                        bool chequelog = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque (Transaction Row) [" + sales.MemoID + "]");
                                    }

                                    //Check the hidden Value
                                    if (ViewData["PendingBankTransferLog"].ToString() == "1")
                                    {
                                        bool banktransferlog = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Bank Transfer (Transaction Row) [" + sales.MemoID + "]");
                                    }
                                }

                                if (sales.TransactionType == "Sell")
                                {
                                    //Check the hidden Value
                                    if (ViewData["PendingLocalCheque1Log"].ToString() == "1")
                                    {
                                        bool localcheque1log = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque 1 (Local Payment) [" + sales.MemoID + "]");
                                    }

                                    //Check the hidden Value
                                    if (ViewData["PendingLocalCheque2Log"].ToString() == "1")
                                    {
                                        bool localcheque2log = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque 2 (Local Payment) [" + sales.MemoID + "]");
                                    }

                                    //Check the hidden Value
                                    if (ViewData["PendingLocalCheque3Log"].ToString() == "1")
                                    {
                                        bool localcheque3log = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque 3 (Local Payment) [" + sales.MemoID + "]");
                                    }

                                    //Check the hidden Value
                                    if (ViewData["PendingLocalBankTransferLog"].ToString() == "1")
                                    {
                                        bool localbanktransferlog = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Bank Transfer (Local Payment) [" + sales.MemoID + "]");
                                    }
                                }
                            }

                            //Update Transaction Payment Mode
                            bool hasUpdateTransaction = false;

                            foreach (string key in transactionKeys)
                            {
                                string rowId = key.Split('_')[2];

                                int transactionId = Convert.ToInt32(form["Transaction_TransactionId_" + rowId]);

                                SaleTransaction oldTransaction = _saleTransactionsModel.GetSingle(transactionId);

                                if (!rollBack_saleTransactions.ContainsKey(oldTransaction.ID))
                                {
                                    rollBack_saleTransactions.Add(oldTransaction.ID, new SaleTransaction()
                                    {
                                        ID = oldTransaction.ID,
                                        SaleId = oldTransaction.SaleId,
                                        TransactionID = oldTransaction.TransactionID,
                                        TransactionType = oldTransaction.TransactionType,
                                        CurrencyId = oldTransaction.CurrencyId,
                                        Rate = oldTransaction.Rate,
                                        EncashmentRate = oldTransaction.EncashmentRate,
                                        CrossRate = oldTransaction.CrossRate,
                                        Unit = oldTransaction.Unit,
                                        AmountForeign = oldTransaction.AmountForeign,
                                        AmountLocal = oldTransaction.AmountLocal,
                                        PaymentMode = oldTransaction.PaymentMode,
                                        ChequeNo = oldTransaction.ChequeNo,
                                        BankTransferNo = oldTransaction.BankTransferNo,
                                        VesselName = oldTransaction.VesselName
                                    });
                                }

                                oldTransaction.PaymentMode = form["Transaction_PaymentMode_" + rowId].ToString();
                                if (oldTransaction.PaymentMode == "Pending" || oldTransaction.PaymentMode == "Cash")
                                {
                                    oldTransaction.ChequeNo = null;
                                    oldTransaction.BankTransferNo = null;
                                }
                                else if (oldTransaction.PaymentMode == "Cheque")
                                {
                                    oldTransaction.ChequeNo = form["Transaction_ChequeNo_" + rowId].ToString();
                                    oldTransaction.BankTransferNo = null;
                                }
                                else if (oldTransaction.PaymentMode == "Bank Transfer")
                                {
                                    oldTransaction.ChequeNo = null;
                                    oldTransaction.BankTransferNo = form["Transaction_BankTransferNo_" + rowId].ToString();
                                }

                                bool transaction_update_result = _saleTransactionsModel.Update(oldTransaction.ID, oldTransaction);

                                if (transaction_update_result)
                                {
                                    if (!hasUpdateTransaction)
                                    {
                                        hasUpdateTransaction = true;
                                    }
                                }
                            }

                            if (hasUpdateTransaction)
                            {
                                userid = Convert.ToInt32(Session["UserId"]);
                                tableAffected = "SaleTransactions";
                                description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Approved Sale Transactions [" + sales.MemoID + "] " + "Status: " + "[ " + OldDataStatus + " - " + sales.Status + " ]";

                                if (SubmitType == "SaveChanges")
                                {
                                    description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Updated Sale Transactions [" + sales.MemoID + "] " + "Status: " + "[ " + OldDataStatus + " - " + sales.Status + " ]";
                                }


                                bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                            }

                            if (SubmitType != "SaveChanges")
                            {
                                TempData["Result"] = "success|" + sales.MemoID + " has been successfully approved!";
                                //TempData.Add("Result", "success|" + sales.MemoID + " has been successfully approved!");
                            }
                            else
                            {
                                TempData["Result"] = "success|" + sales.MemoID + " has been successfully updated!";
                                //TempData.Add("Result", "success|" + sales.MemoID + " has been successfully updated!");
                            }

                            return RedirectToAction("Listing", module, new { @page = page });
                        }
                        else
                        {
                            TempData["Result"] = "danger|An error occured while approving sale record!";
                            //TempData.Add("Result", "danger|An error occured while approving sale record!");
                        }
                    }
                    catch (DbUpdateConcurrencyException e)
                    {
                        TempData["Result"] = "danger|An error occured while saving sale record! Please submit again!";
                        //TempData.Add("Result", "danger|An error occured while saving sale record! Please submit again!");
                        return RedirectToAction("Listing", module, new { @page = page });
                    }
                    catch (DbUpdateException e)
                    {
                        if (e.ToString().Contains("was deadlocked on lock resources with another process and has been chosen as the deadlock victim"))
                        {
                            //Roll back sale
                            _salesModel.Update(rollBack_Sale.ID, rollBack_Sale);

                            //Role back Transactions
                            foreach (int key in rollBack_saleTransactions.Keys)
                            {
                                _saleTransactionsModel.Update(key, rollBack_saleTransactions[key]);
                            }

                            TempData["Result"] = "danger|An error occured while saving sale record! Please submit again!";
                            //TempData.Add("Result", "danger|An error occured while saving sale record! Please submit again!");
                            return RedirectToAction("Listing", module, new { @page = page });
                        }
                        else
                        {
                            throw;
                        }
                    }
                    catch (Exception e)
                    {
                        //Roll back sale
                        _salesModel.Update(rollBack_Sale.ID, rollBack_Sale);

                        //Role back Transactions
                        foreach (int key in rollBack_saleTransactions.Keys)
                        {
                            _saleTransactionsModel.Update(key, rollBack_saleTransactions[key]);
                        }

                        TempData["Result"] = "danger|An error occured while saving sale record! " + e.Message + "!";
                        //TempData.Add("Result", "danger|An error occured while saving sale record! " + e.Message + "!");
                    }
                }
                else
                {
                    TempData["Result"] = "danger|There is something wrong in the form!";
                    //TempData.Add("Result", "danger|There is something wrong in the form!");
                }

                Dropdown[] customerDDL = CustomerDDL(sales.CustomerParticularId);
                ViewData["CustomerDropdown"] = new SelectList(customerDDL, "val", "name", sales.CustomerParticularId);

                CustomerParticular customer = _customerParticularsModel.GetSingle(sales.CustomerParticularId);

                ViewData["CustomerContact"] = "";
                ViewData["CustomerAddress"] = "";
                if (customer != null)
                {
                    string contact = "";
                    string address = "";

                    if (customer.CustomerType == "Corporate & Trading Company")
                    {
                        contact = customer.Company_TelNo;
                        if (!string.IsNullOrEmpty(customer.Company_BusinessAddress2))
                        {
                            address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_PostalCode;
                        }
                        else
                        {
                            address = customer.Company_BusinessAddress1 + ", " + customer.Company_PostalCode;
                        }

                    }
                    else
                    {
                        contact = customer.Natural_ContactNoM;
                        address = customer.Natural_PermanentAddress;
                    }

                    ViewData["CustomerContact"] = contact;
                    ViewData["CustomerAddress"] = address;
                }

                //Dropdown[] collectionTimeDDL = CollectionTimeDDL();
                //ViewData["CollectionTimeDropdown"] = new SelectList(collectionTimeDDL, "val", "name", sales.CollectionTime);

                ViewData["NonUrgentRadio"] = "";
                ViewData["UrgentRadio"] = "";
                if (sales.Urgent == "Non-Urgent")
                {
                    ViewData["NonUrgentRadio"] = "checked";
                }
                else
                {
                    ViewData["UrgentRadio"] = "checked";
                }

                ViewData["RequireDeliveryCheckbox"] = "";
                if (sales.RequireDelivery == "Yes")
                {
                    ViewData["RequireDeliveryCheckbox"] = "checked";
                }

                ViewData["TransactionTypeBuyRadio"] = "";
                ViewData["TransactionTypeSellRadio"] = "";
                ViewData["TransactionTypeEncashmentRadio"] = "";
                ViewData["TransactionTypeSwapRadio"] = "";
                ViewData["TransactionTypeCrossCurrencyRadio"] = "";

                if (!string.IsNullOrEmpty(sales.TransactionType))
                {
                    if (sales.TransactionType == "Buy")
                    {
                        ViewData["TransactionTypeBuyRadio"] = "checked";
                    }
                    else if (sales.TransactionType == "Sell")
                    {
                        ViewData["TransactionTypeSellRadio"] = "checked";
                    }
                    else if (sales.TransactionType == "Encashment")
                    {
                        ViewData["TransactionTypeEncashmentRadio"] = "checked";
                    }
                    else if (sales.TransactionType == "Swap")
                    {
                        ViewData["TransactionTypeSwapRadio"] = "checked";
                    }
                    else
                    {
                        ViewData["TransactionTypeCrossCurrencyRadio"] = "checked";
                    }
                }

                ViewData["LocalPaymentModeCashCheckbox"] = "";
                ViewData["LocalPaymentModeCheque1Checkbox"] = "";
                ViewData["LocalPaymentModeCheque2Checkbox"] = "";
                ViewData["LocalPaymentModeCheque3Checkbox"] = "";
                ViewData["LocalPaymentModeBankTransferCheckbox"] = "";
                if (!string.IsNullOrEmpty(form["sales.LocalPaymentMode"]))
                {
                    if (form["sales.LocalPaymentMode"].Contains("Cash"))
                    {
                        ViewData["LocalPaymentModeCashCheckbox"] = "checked";
                    }

                    if (form["sales.LocalPaymentMode"].Contains("Cheque 1"))
                    {
                        ViewData["LocalPaymentModeCheque1Checkbox"] = "checked";
                    }

                    if (form["sales.LocalPaymentMode"].Contains("Cheque 2"))
                    {
                        ViewData["LocalPaymentModeCheque2Checkbox"] = "checked";
                    }

                    if (form["sales.LocalPaymentMode"].Contains("Cheque 3"))
                    {
                        ViewData["LocalPaymentModeCheque3Checkbox"] = "checked";
                    }

                    if (form["sales.LocalPaymentMode"].Contains("Bank Transfer"))
                    {
                        ViewData["LocalPaymentModeBankTransferCheckbox"] = "checked";
                    }
                }

                Dropdown[] cashBankDDL = LocalPaymentBankDDL(oldData.CashBank);
                ViewData["CashBankDropdown"] = new SelectList(cashBankDDL, "val", "name", sales.CashBank);

                Dropdown[] cheque1BankDDL = LocalPaymentBankDDL(oldData.Cheque1Bank);
                ViewData["Cheque1BankDropdown"] = new SelectList(cheque1BankDDL, "val", "name", sales.Cheque1Bank);

                Dropdown[] cheque2BankDDL = LocalPaymentBankDDL(oldData.Cheque2Bank);
                ViewData["Cheque2BankDropdown"] = new SelectList(cheque2BankDDL, "val", "name", sales.Cheque2Bank);

                Dropdown[] cheque3BankDDL = LocalPaymentBankDDL(oldData.Cheque3Bank);
                ViewData["Cheque3BankDropdown"] = new SelectList(cheque3BankDDL, "val", "name", sales.Cheque3Bank);

                Dropdown[] bankTransferBankDDL = LocalPaymentBankDDL(oldData.BankTransferBank);
                ViewData["BankTransferBankDropdown"] = new SelectList(bankTransferBankDDL, "val", "name", sales.BankTransferBank);

                IList<SaleTransactionsData> transactions = new List<SaleTransactionsData>();

                int _rowId = 1;

                decimal totalForeign = 0;
                decimal totalLocal = 0;
                Dropdown[] currency2 = CurrencyDDL(sales.TransactionType);
                foreach (string key in transactionKeys)
                {
                    string rowId = key.Split('_')[2];

                    int _transactionId = Convert.ToInt32(form["Transaction_TransactionId_" + rowId]);

                    SaleTransaction transaction = _saleTransactionsModel.GetSingle(_transactionId);
                    transaction.PaymentMode = form["Transaction_PaymentMode_" + rowId];
                    if (transaction.PaymentMode == "Pending" || transaction.PaymentMode == "Cash")
                    {
                        transaction.ChequeNo = null;
                        transaction.BankTransferNo = null;
                    }
                    else if (transaction.PaymentMode == "Cheque")
                    {
                        transaction.ChequeNo = form["Transaction_ChequeNo_" + rowId];
                        transaction.BankTransferNo = null;
                    }
                    else if (transaction.PaymentMode == "Bank Transfer")
                    {
                        transaction.ChequeNo = null;
                        transaction.BankTransferNo = form["Transaction_BankTransferNo_" + rowId];
                    }

                    SaleTransactionsData transactionData = new SaleTransactionsData();
                    transactionData.Denominations = new List<DenominationsData>();

                    int transactionId = transaction.ID;
                    string transactionID = transaction.TransactionID;
                    string type = transaction.TransactionType;
                    string vesselName = transaction.VesselName;

                    int productId = transaction.CurrencyId;
                    //Dropdown[] currency = CurrencyDDL(sales.TransactionType);
                    SelectList currencyDDL = new SelectList(currency2, "val", "name", productId);

                    string symbol = transaction.Products.Symbol;

                    string rate = transaction.Rate.ToString(GetRateFormat(rateDP));
                    int unit = transaction.Unit;

                    string encashmentRate = "";
                    if (transaction.EncashmentRate != null)
                    {
                        encashmentRate = Convert.ToDecimal(transaction.EncashmentRate).ToString(GetRateFormat(rateDP));
                    }

                    string crossRate = "";
                    if (transaction.CrossRate != null)
                    {
                        crossRate = Convert.ToDecimal(transaction.CrossRate).ToString(GetRateFormat(rateDP));
                    }

                    Dropdown[] paymentMode = PaymentModeDDL(productId);
                    SelectList paymentModeDDL = new SelectList(paymentMode, "val", "name", transaction.PaymentMode);

                    string disabledCheque = "disabled";
                    string disabledBankTranfer = "disabled";
                    if (transaction.PaymentMode == "Cheque")
                    {
                        disabledCheque = "";
                    }
                    else if (transaction.PaymentMode == "Bank Transfer")
                    {
                        disabledBankTranfer = "";
                    }

                    string chequeNo = "";
                    if (!string.IsNullOrEmpty(transaction.ChequeNo))
                    {
                        chequeNo = transaction.ChequeNo;
                    }

                    string bankTransferNo = "";
                    if (!string.IsNullOrEmpty(transaction.BankTransferNo))
                    {
                        bankTransferNo = transaction.BankTransferNo;
                    }

                    string amountLocal = FormValidationHelper.AmountFormatter(transaction.AmountLocal, sgdDp);
                    string amountForeign = FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal);

                    totalLocal += transaction.AmountLocal;
                    totalForeign += transaction.AmountForeign;

                    string denoCurrencyCode = "Currency";
                    string totalCalculatedForeign = "0.00";
                    string remainingForeign = "0.00";
                    string totalOrderForeign = "0.00";

                    if (transaction.SaleTransactionDenominations.Count > 0)
                    {
                        decimal foreignCalculated = 0;

                        foreach (SaleTransactionDenomination denomination in transaction.SaleTransactionDenominations)
                        {
                            DenominationsData denoData = new DenominationsData();

                            string denominationValue = "coins";
                            string pieces = "-";
                            if (denomination.Denomination != 0)
                            {
                                denominationValue = denomination.Denomination.ToString();
                                pieces = FormValidationHelper.AmountFormatter(Convert.ToDecimal(denomination.Pieces), 0);
                            }

                            string denoAmountForeign = FormValidationHelper.AmountFormatter(denomination.AmountForeign, transaction.Products.Decimal);

                            denoData.DenoId = denomination.ID.ToString();
                            denoData.DenominationValue = denominationValue;
                            denoData.Pieces = pieces;
                            denoData.AmountForeign = denoAmountForeign;
                            transactionData.Denominations.Add(denoData);

                            foreignCalculated += denomination.AmountForeign;
                        }

                        denoCurrencyCode = transaction.Products.CurrencyCode;
                        totalCalculatedForeign = FormValidationHelper.AmountFormatter(foreignCalculated, transaction.Products.Decimal);
                        remainingForeign = FormValidationHelper.AmountFormatter(transaction.AmountForeign - foreignCalculated, transaction.Products.Decimal);
                        totalOrderForeign = FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal);
                    }

                    transactionData.RowId = _rowId.ToString();
                    transactionData.ID = transactionId;
                    transactionData.TransactionID = transactionID;
                    transactionData.Type = type;
                    transactionData.VesselName = vesselName;
                    transactionData.CurrencyDDL = currencyDDL;
                    transactionData.Symbol = symbol;
                    transactionData.Rate = rate;
                    transactionData.Unit = unit;
                    transactionData.EncashmentRate = encashmentRate;
                    transactionData.CrossRate = crossRate;
                    transactionData.PaymentModeDDL = paymentModeDDL;
                    transactionData.DisabledChequeNo = disabledCheque;
                    transactionData.ChequeNo = chequeNo;
                    transactionData.DisabledBankTransferNo = disabledBankTranfer;
                    transactionData.BankTransferNo = bankTransferNo;
                    transactionData.AmountLocal = amountLocal;
                    transactionData.AmountForeign = amountForeign;
                    transactionData.DenominationCurrencyCode = denoCurrencyCode;
                    transactionData.DenominationTotalCalculatedForeign = totalCalculatedForeign;
                    transactionData.DenominationRemainingForeign = remainingForeign;
                    transactionData.DenominationTotalOrderForeign = totalOrderForeign;
                    transactions.Add(transactionData);

                    _rowId++;
                }

                ViewData["SaleTransactionsData"] = transactions;

                Product sgd = _productsModel.FindCurrencyCode("SGD");

                ViewData["TotalForeign"] = totalForeign.ToString(GetRateFormat(8));
                ViewData["TotalLocal"] = totalLocal.ToString(GetDecimalFormat(sgd.Decimal));

                ViewData["Sale"] = sales;
                ViewData["SaleId"] = sales.ID;
                ViewData["SaleTransactionType"] = sales.TransactionType;
                ViewData["Module"] = module;

                if (!string.IsNullOrEmpty(sales.DeliveryConfirmation))
                {
                    ViewData["DeliveryConfirmation"] = sales.DeliveryConfirmation.Split(',').ToList();
                    ViewData["DeliveryConfirmationDomain"] = ConfigurationManager.AppSettings["DeliveryConfirmationFolder"].ToString();
                }

                ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
                return View();
                #endregion
            }
            else if (oldData.Status == "Pending Packing")
            {
                #region Pending Packing

                if (ModelState["sales.CollectionDate"] != null)
                {
                    if (ModelState["sales.CollectionDate"].Errors.Count > 0)
                    {
                        ModelState["sales.CollectionDate"].Errors.Clear();
                    }
                }

                if (ModelState["sales.CollectionTime"] != null)
                {
                    if (ModelState["sales.CollectionTime"].Errors.Count > 0)
                    {
                        ModelState["sales.CollectionTime"].Errors.Clear();
                    }
                }

                if (ModelState["sales.Urgent"] != null)
                {
                    if (ModelState["sales.Urgent"].Errors.Count > 0)
                    {
                        ModelState["sales.Urgent"].Errors.Clear();
                    }
                }

                if (ModelState["sales.TransactionType"] != null)
                {
                    if (ModelState["sales.TransactionType"].Errors.Count > 0)
                    {
                        ModelState["sales.TransactionType"].Errors.Clear();
                    }
                }

                if (ModelState["sales.CashAmount"] != null)
                {
                    if (ModelState["sales.CashAmount"].Errors.Count > 0)
                    {
                        ModelState["sales.CashAmount"].Errors.Clear();
                    }
                }

                if (ModelState["sales.Cheque1Amount"] != null)
                {
                    if (ModelState["sales.Cheque1Amount"].Errors.Count > 0)
                    {
                        ModelState["sales.Cheque1Amount"].Errors.Clear();
                    }
                }

                if (ModelState["sales.Cheque2Amount"] != null)
                {
                    if (ModelState["sales.Cheque2Amount"].Errors.Count > 0)
                    {
                        ModelState["sales.Cheque2Amount"].Errors.Clear();
                    }
                }

                if (ModelState["sales.Cheque3Amount"] != null)
                {
                    if (ModelState["sales.Cheque3Amount"].Errors.Count > 0)
                    {
                        ModelState["sales.Cheque3Amount"].Errors.Clear();
                    }
                }

                if (ModelState["sales.BankTransferAmount"] != null)
                {
                    if (ModelState["sales.BankTransferAmount"].Errors.Count > 0)
                    {
                        ModelState["sales.BankTransferAmount"].Errors.Clear();
                    }
                }

                if (string.IsNullOrEmpty(form["sales.CollectionDate"]))
                {
                    ModelState.AddModelError("sales.CollectionDate", "Collection Date is required!");
                }
                else
                {
                    try
                    {
                        sales.CollectionDate = Convert.ToDateTime(form["sales.CollectionDate"]);
                    }
                    catch
                    {
                        ModelState.AddModelError("sales.CollectionDate", "Collection Date is not valid!");
                    }
                }

                if (string.IsNullOrEmpty(form["sales.CollectionTime"]))
                {
                    ModelState.AddModelError("sales.CollectionTime", "Collection Time is required!");
                }
                else
                {
                    //if not null, then check length
                    if (string.IsNullOrEmpty(form["sales.CollectionTime"].Trim()))
                    {
                        ModelState.AddModelError("sales.CollectionTime", "Collection Time is required!");
                    }
                    else
                    {
                        if (form["sales.CollectionTime"].ToString().Length > 40)
                        {
                            ModelState.AddModelError("sales.CollectionTime", "Collection Time cannot more than 40 characters!");
                        }
                    }
                }

                string newBagNo = sales.BagNo;

                sales = oldData;
                sales.BagNo = newBagNo;

                List<string> transactionKeys = form.AllKeys.Where(e => e.Contains("Transaction_ID_")).ToList();

                if (transactionKeys.Count > 0)
                {
                    foreach (string key in transactionKeys)
                    {
                        string rowId = key.Split('_')[2];

                        //Validation for All Transaction Types
                        if (string.IsNullOrEmpty(form["Transaction_Type_" + rowId]))
                        {
                            ModelState.AddModelError("Transaction_Type_" + rowId, "Type is required!");
                        }

                        if (string.IsNullOrEmpty(form["Transaction_Currency_" + rowId]))
                        {
                            ModelState.AddModelError("Transaction_Currency_" + rowId, "Currency is required!");
                        }

                        if (string.IsNullOrEmpty(form["Transaction_AmountLocal_" + rowId]))
                        {
                            ModelState.AddModelError("Transaction_AmountLocal_" + rowId, "Amount (Local) is required!");
                        }
                        else
                        {
                            bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_AmountLocal_" + rowId]);

                            if (!checkAmountLocalFormat)
                            {
                                ModelState.AddModelError("Transaction_AmountLocal_" + rowId, "Amount (Local) is not valid!");
                            }
                        }

                        if (string.IsNullOrEmpty(form["Transaction_AmountForeign_" + rowId]))
                        {
                            ModelState.AddModelError("Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!");
                        }
                        else
                        {
                            bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_AmountForeign_" + rowId]);

                            if (!checkAmountLocalFormat)
                            {
                                ModelState.AddModelError("Transaction_AmountForeign_" + rowId, "Amount (Foreign) is not valid!");
                            }
                        }

                        if (sales.TransactionType == "Buy") //Perform Buy Validation
                        {
                            if (string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is required!");
                            }
                            else
                            {
                                bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                                if (checkRateFormat)
                                {
                                    if (sales.CustomerParticularId > 0 && !string.IsNullOrEmpty(form["Transaction_Currency_" + rowId]))
                                    {
                                        Product product = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));
                                        decimal buyRate = 0;
                                        decimal acceptable = product.AcceptableRange;

                                        CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(sales.CustomerParticularId, Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                                        if (acceptable > 0)
                                        {
                                            if (GetCustomRate != null)
                                            {
                                                if (GetCustomRate.BuyRate != 0 && GetCustomRate != null)
                                                {
                                                    if (product.BuyRate != 0 && product.BuyRate != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.BuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                        buyRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        if (product.AutomatedBuyRate != 0 && product.AutomatedBuyRate != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.AutomatedBuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                            buyRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.BuyRate != 0 && product.BuyRate != null)
                                                    {
                                                        if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.BuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                            buyRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            buyRate = Convert.ToDecimal(product.BuyRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (product.AutomatedBuyRate != 0 && product.AutomatedBuyRate != null)
                                                        {
                                                            if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                            {
                                                                decimal FinalRate = Convert.ToDecimal(product.AutomatedBuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                                buyRate = Convert.ToDecimal(FinalRate);
                                                            }
                                                            else
                                                            {
                                                                buyRate = Convert.ToDecimal(product.AutomatedBuyRate);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (product.BuyRate != 0 && product.BuyRate != null)
                                                {
                                                    if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.BuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                        buyRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        buyRate = Convert.ToDecimal(product.BuyRate);
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.AutomatedBuyRate != 0 && product.AutomatedBuyRate != null)
                                                    {
                                                        if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.AutomatedBuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                            buyRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            buyRate = Convert.ToDecimal(product.AutomatedBuyRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                    }
                                                }
                                            }

                                            //if (product.BuyRate != null)
                                            //{
                                            //    buyRate = Convert.ToDecimal(product.BuyRate);
                                            //}
                                            //else
                                            //{
                                            //    buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                            //}

                                            decimal upperLimit = buyRate * (1 + acceptable / 100);
                                            decimal lowerLimit = buyRate * (1 - acceptable / 100);
                                            decimal rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);

                                            if (rate < lowerLimit || rate > upperLimit)
                                            {
                                                ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is out of acceptable range!");
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is not valid!");
                                }
                            }

                            if (string.IsNullOrEmpty(form["Transaction_PaymentMode_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_PaymentMode_" + rowId, "Payment Mode is not valid!");
                            }
                            else
                            {
                                if (form["Transaction_PaymentMode_" + rowId].ToString() == "Cheque")
                                {
                                    if (string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
                                    {
                                        //ModelState.AddModelError("Transaction_ChequeNo_" + rowId, "Cheque No. is required!");
                                    }
                                }
                                else if (form["Transaction_PaymentMode_" + rowId].ToString() == "Bank Transfer")
                                {
                                    if (string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
                                    {
                                        //ModelState.AddModelError("Transaction_BankTransferNo_" + rowId, "Bank Transfer No. is required!");
                                    }
                                }
                            }
                        }
                        else if (sales.TransactionType == "Sell") //Perform Sell Validation
                        {
                            if (string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is required!");
                            }
                            else
                            {
                                bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                                if (checkRateFormat)
                                {
                                    if (sales.CustomerParticularId > 0 && !string.IsNullOrEmpty(form["Transaction_Currency_" + rowId]))
                                    {
                                        Product product = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));
                                        decimal sellRate = 0;
                                        decimal acceptable = product.AcceptableRange;

                                        CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(sales.CustomerParticularId, Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                                        if (acceptable > 0)
                                        {
                                            if (GetCustomRate != null)
                                            {
                                                if (GetCustomRate.SellRate != 0 && GetCustomRate != null)
                                                {
                                                    if (product.SellRate != 0 && product.SellRate != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                            sellRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.SellRate != 0 && product.SellRate != null)
                                                    {
                                                        if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                            sellRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(product.SellRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                        {
                                                            if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                            {
                                                                decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                                sellRate = Convert.ToDecimal(FinalRate);
                                                            }
                                                            else
                                                            {
                                                                sellRate = Convert.ToDecimal(product.AutomatedSellRate);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (product.SellRate != 0 && product.SellRate != null)
                                                {
                                                    if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(product.SellRate);
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                    {
                                                        if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                            sellRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(product.AutomatedSellRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                    }
                                                }
                                            }

                                            //if (product.SellRate != null)
                                            //{
                                            //    sellRate = Convert.ToDecimal(product.SellRate);
                                            //}
                                            //else
                                            //{
                                            //    sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                            //}

                                            decimal upperLimit = sellRate * (1 + acceptable / 100);
                                            decimal lowerLimit = sellRate * (1 - acceptable / 100);
                                            decimal rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);

                                            if (rate < lowerLimit || rate > upperLimit)
                                            {
                                                ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is out of acceptable range!");
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is not valid!");
                                }
                            }

                            if (string.IsNullOrEmpty(form["Transaction_PaymentMode_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_PaymentMode_" + rowId, "Payment Mode is not valid!");
                            }
                            else
                            {
                                if (form["Transaction_PaymentMode_" + rowId].ToString() == "Cheque")
                                {
                                    if (string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
                                    {
                                        //ModelState.AddModelError("Transaction_ChequeNo_" + rowId, "Cheque No. is required!");
                                    }
                                }
                                else if (form["Transaction_PaymentMode_" + rowId].ToString() == "Bank Transfer")
                                {
                                    if (string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
                                    {
                                        //ModelState.AddModelError("Transaction_BankTransferNo_" + rowId, "Bank Transfer No. is not valid!");
                                    }
                                }
                            }
                        }
                        else if (sales.TransactionType == "Encashment") //Perform Encashment Validation
                        {
                            if (form["Transaction_Type_" + rowId].ToString() == "Sell")
                            {
                                if (string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                                {
                                    ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is required!");
                                }
                                else
                                {
                                    bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                                    if (checkRateFormat)
                                    {
                                        if (sales.CustomerParticularId > 0 && !string.IsNullOrEmpty(form["Transaction_Currency_" + rowId]))
                                        {
                                            Product product = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));
                                            decimal sellRate = 0;
                                            decimal acceptable = product.AcceptableRange;

                                            CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(sales.CustomerParticularId, Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                                            if (acceptable > 0)
                                            {
                                                if (GetCustomRate != null)
                                                {
                                                    if (GetCustomRate.SellRate != 0 && GetCustomRate != null)
                                                    {
                                                        if (product.SellRate != 0 && product.SellRate != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                            sellRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                            {
                                                                decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                                sellRate = Convert.ToDecimal(FinalRate);
                                                            }
                                                            else
                                                            {
                                                                sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (product.SellRate != 0 && product.SellRate != null)
                                                        {
                                                            if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                            {
                                                                decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                                sellRate = Convert.ToDecimal(FinalRate);
                                                            }
                                                            else
                                                            {
                                                                sellRate = Convert.ToDecimal(product.SellRate);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                            {
                                                                if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                                {
                                                                    decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                                }
                                                                else
                                                                {
                                                                    sellRate = Convert.ToDecimal(product.AutomatedSellRate);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.SellRate != 0 && product.SellRate != null)
                                                    {
                                                        if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                            sellRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(product.SellRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                        {
                                                            if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                            {
                                                                decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                                sellRate = Convert.ToDecimal(FinalRate);
                                                            }
                                                            else
                                                            {
                                                                sellRate = Convert.ToDecimal(product.AutomatedSellRate);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                        }
                                                    }
                                                }

                                                //if (product.SellRate != null)
                                                //{
                                                //    sellRate = Convert.ToDecimal(product.SellRate);
                                                //}
                                                //else
                                                //{
                                                //    sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                //}

                                                decimal upperLimit = sellRate * (1 + acceptable / 100);
                                                decimal lowerLimit = sellRate * (1 - acceptable / 100);
                                                decimal rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);

                                                if (rate < lowerLimit || rate > upperLimit)
                                                {
                                                    ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is out of acceptable range!");
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is not valid!");
                                    }
                                }

                                if (string.IsNullOrEmpty(form["Transaction_EncashmentRate_" + rowId]))
                                {
                                    ModelState.AddModelError("Transaction_EncashmentRate_" + rowId, "Encashment Rate is required!");
                                }
                                else
                                {
                                    bool checkEncashmentRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                                    if (!checkEncashmentRateFormat)
                                    {
                                        ModelState.AddModelError("Transaction_EncashmentRate_" + rowId, "Encashment Rate is not valid!");
                                    }
                                }

                                if (string.IsNullOrEmpty(form["Transaction_PaymentMode_" + rowId]))
                                {
                                    ModelState.AddModelError("Transaction_PaymentMode_" + rowId, "Payment Mode is not valid!");
                                }
                                else
                                {
                                    if (form["Transaction_PaymentMode_" + rowId].ToString() == "Cheque")
                                    {
                                        if (string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
                                        {
                                            // ModelState.AddModelError("Transaction_ChequeNo_" + rowId, "Cheque No. is required!");
                                        }
                                    }
                                    else if (form["Transaction_PaymentMode_" + rowId].ToString() == "Bank Transfer")
                                    {
                                        if (string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
                                        {
                                            //ModelState.AddModelError("Transaction_BankTransferNo_" + rowId, "Bank Transfer No. is not valid!");
                                        }
                                    }
                                }
                            }
                        }
                        else if (sales.TransactionType == "Swap") //Perform Swap Validation
                        {
                            if (form["Transaction_Type_" + rowId].ToString() == "Buy")
                            {
                                if (string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                                {
                                    ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is required!");
                                }
                                else
                                {
                                    bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                                    if (checkRateFormat)
                                    {
                                        if (sales.CustomerParticularId > 0 && !string.IsNullOrEmpty(form["Transaction_Currency_" + rowId]))
                                        {
                                            Product product = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));
                                            decimal buyRate = 0;
                                            decimal acceptable = product.AcceptableRange;

                                            CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(sales.CustomerParticularId, Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                                            if (acceptable > 0)
                                            {

                                                if (GetCustomRate != null)
                                                {
                                                    if (GetCustomRate.BuyRate != 0 && GetCustomRate != null)
                                                    {
                                                        if (product.BuyRate != 0 && product.BuyRate != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.BuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                            buyRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            if (product.AutomatedBuyRate != 0 && product.AutomatedBuyRate != null)
                                                            {
                                                                decimal FinalRate = Convert.ToDecimal(product.AutomatedBuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                                buyRate = Convert.ToDecimal(FinalRate);
                                                            }
                                                            else
                                                            {
                                                                buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (product.BuyRate != 0 && product.BuyRate != null)
                                                        {
                                                            if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                            {
                                                                decimal FinalRate = Convert.ToDecimal(product.BuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                                buyRate = Convert.ToDecimal(FinalRate);
                                                            }
                                                            else
                                                            {
                                                                buyRate = Convert.ToDecimal(product.BuyRate);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (product.AutomatedBuyRate != 0 && product.AutomatedBuyRate != null)
                                                            {
                                                                if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                                {
                                                                    decimal FinalRate = Convert.ToDecimal(product.AutomatedBuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                                    buyRate = Convert.ToDecimal(FinalRate);
                                                                }
                                                                else
                                                                {
                                                                    buyRate = Convert.ToDecimal(product.AutomatedBuyRate);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.BuyRate != 0 && product.BuyRate != null)
                                                    {
                                                        if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.BuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                            buyRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            buyRate = Convert.ToDecimal(product.BuyRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (product.AutomatedBuyRate != 0 && product.AutomatedBuyRate != null)
                                                        {
                                                            if (product.BuyRateAdjustment != 0 && product.BuyRateAdjustment != null)
                                                            {
                                                                decimal FinalRate = Convert.ToDecimal(product.AutomatedBuyRate) * (1 - Convert.ToDecimal(product.BuyRateAdjustment));
                                                                buyRate = Convert.ToDecimal(FinalRate);
                                                            }
                                                            else
                                                            {
                                                                buyRate = Convert.ToDecimal(product.AutomatedBuyRate);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                        }
                                                    }
                                                }

                                                //if (product.BuyRate != null)
                                                //{
                                                //    buyRate = Convert.ToDecimal(product.BuyRate);
                                                //}
                                                //else
                                                //{
                                                //    buyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                //}

                                                decimal upperLimit = buyRate * (1 + acceptable / 100);
                                                decimal lowerLimit = buyRate * (1 - acceptable / 100);
                                                decimal rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);

                                                if (rate < lowerLimit || rate > upperLimit)
                                                {
                                                    ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is out of acceptable range!");
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is not valid!");
                                    }
                                }

                                if (string.IsNullOrEmpty(form["Transaction_EncashmentRate_" + rowId]))
                                {
                                    ModelState.AddModelError("Transaction_EncashmentRate_" + rowId, "Encashment Rate is required!");
                                }
                                else
                                {
                                    bool checkEncashmentRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                                    if (!checkEncashmentRateFormat)
                                    {
                                        ModelState.AddModelError("Transaction_EncashmentRate_" + rowId, "Encashment Rate is not valid!");
                                    }
                                }

                                if (string.IsNullOrEmpty(form["Transaction_PaymentMode_" + rowId]))
                                {
                                    ModelState.AddModelError("Transaction_PaymentMode_" + rowId, "Payment Mode is not valid!");
                                }
                                else
                                {
                                    if (form["Transaction_PaymentMode_" + rowId].ToString() == "Cheque")
                                    {
                                        if (string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
                                        {
                                            //ModelState.AddModelError("Transaction_ChequeNo_" + rowId, "Cheque No. is required!");
                                        }
                                    }
                                    else if (form["Transaction_PaymentMode_" + rowId].ToString() == "Bank Transfer")
                                    {
                                        if (string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
                                        {
                                            //ModelState.AddModelError("Transaction_BankTransferNo_" + rowId, "Bank Transfer No. is not valid!");
                                        }
                                    }
                                }
                            }
                        }
                        else //Perform Cross Currency Validation
                        {
                            if (string.IsNullOrEmpty(form["Transaction_PaymentMode_" + rowId]))
                            {
                                ModelState.AddModelError("Transaction_PaymentMode_" + rowId, "Payment Mode is not valid!");
                            }
                            else
                            {
                                if (form["Transaction_PaymentMode_" + rowId].ToString() == "Cheque")
                                {
                                    if (string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
                                    {
                                        //ModelState.AddModelError("Transaction_ChequeNo_" + rowId, "Cheque No. is required!");
                                    }
                                }
                                else if (form["Transaction_PaymentMode_" + rowId].ToString() == "Bank Transfer")
                                {
                                    if (string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
                                    {
                                        //ModelState.AddModelError("Transaction_BankTransferNo_" + rowId, "Bank Transfer No. is not valid!");
                                    }
                                }
                            }

                            if (form["Transaction_Type_" + rowId].ToString() == "Buy")
                            {
                                if (string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                                {
                                    ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is required!");
                                }
                                else
                                {
                                    bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                                    if (!checkRateFormat)
                                    {
                                        ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is not valid!");
                                    }
                                }
                            }
                            else
                            {
                                if (string.IsNullOrEmpty(form["Transaction_Rate_" + rowId]))
                                {
                                    ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is required!");
                                }
                                else
                                {
                                    bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_Rate_" + rowId]);

                                    if (checkRateFormat)
                                    {
                                        if (sales.CustomerParticularId > 0 && !string.IsNullOrEmpty(form["Transaction_Currency_" + rowId]))
                                        {
                                            Product product = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));
                                            decimal sellRate = 0;
                                            decimal acceptable = product.AcceptableRange;

                                            CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(sales.CustomerParticularId, Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                                            if (acceptable > 0)
                                            {

                                                if (GetCustomRate != null)
                                                {
                                                    if (GetCustomRate.SellRate != 0 && GetCustomRate != null)
                                                    {
                                                        if (product.SellRate != 0 && product.SellRate != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                            sellRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                            {
                                                                decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                                sellRate = Convert.ToDecimal(FinalRate);
                                                            }
                                                            else
                                                            {
                                                                sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (product.SellRate != 0 && product.SellRate != null)
                                                        {
                                                            if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                            {
                                                                decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                                sellRate = Convert.ToDecimal(FinalRate);
                                                            }
                                                            else
                                                            {
                                                                sellRate = Convert.ToDecimal(product.SellRate);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                            {
                                                                if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                                {
                                                                    decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                                }
                                                                else
                                                                {
                                                                    sellRate = Convert.ToDecimal(product.AutomatedSellRate);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (product.SellRate != 0 && product.SellRate != null)
                                                    {
                                                        if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(product.SellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                            sellRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(product.SellRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (product.AutomatedSellRate != 0 && product.AutomatedSellRate != null)
                                                        {
                                                            if (product.SellRateAdjustment != 0 && product.SellRateAdjustment != null)
                                                            {
                                                                decimal FinalRate = Convert.ToDecimal(product.AutomatedSellRate) * (1 + Convert.ToDecimal(product.SellRateAdjustment));
                                                                sellRate = Convert.ToDecimal(FinalRate);
                                                            }
                                                            else
                                                            {
                                                                sellRate = Convert.ToDecimal(product.AutomatedSellRate);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                        }
                                                    }
                                                }

                                                //if (product.SellRate != null)
                                                //{
                                                //    sellRate = Convert.ToDecimal(product.SellRate);
                                                //}
                                                //else
                                                //{
                                                //    sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                //}

                                                decimal upperLimit = sellRate * (1 + acceptable / 100);
                                                decimal lowerLimit = sellRate * (1 - acceptable / 100);
                                                decimal rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);

                                                if (rate < lowerLimit || rate > upperLimit)
                                                {
                                                    ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is out of acceptable range!");
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        ModelState.AddModelError("Transaction_Rate_" + rowId, "Rate is not valid!");
                                    }
                                }

                                if (string.IsNullOrEmpty(form["Transaction_CrossRate_" + rowId]))
                                {
                                    ModelState.AddModelError("Transaction_CrossRate_" + rowId, "Cross Rate is required!");
                                }
                                else
                                {
                                    bool checkCrossRateFormat = FormValidationHelper.NonNegativeAmountValidation(form["Transaction_CrossRate_" + rowId]);

                                    if (!checkCrossRateFormat)
                                    {
                                        ModelState.AddModelError("Transaction_CrossRate_" + rowId, "Cross Rate is not valid!");
                                    }
                                }
                            }
                        }

                        //Validation for Outgoing Denomination
                        List<string> denominationKeys = form.AllKeys.Where(e => e.Contains("Denomination_Value_" + rowId + "_")).ToList();
                        bool denominationError = false;

                        foreach (string denoKey in denominationKeys)
                        {
                            string denoId = denoKey.Split('_')[3];

                            if (string.IsNullOrEmpty(form[denoKey]))
                            {
                                ModelState.AddModelError(denoKey, "Denomination Value is required!");
                                denominationError = true;
                            }

                            if (!string.IsNullOrEmpty(form["Denomination_Value_Pieces_" + rowId + "_" + denoId]))
                            {
                                bool checkPieces = FormValidationHelper.IntegerValidation(form["Denomination_Value_Pieces_" + rowId + "_" + denoId].ToString().Replace(",", ""));

                                if (!checkPieces)
                                {
                                    ModelState.AddModelError("Denomination_Value_Pieces_" + rowId + "_" + denoId, "Pieces is not valid!");
                                    denominationError = true;
                                }
                            }

                            if (!string.IsNullOrEmpty(form["Denomination_Value_AmountForeign_" + rowId + "_" + denoId]))
                            {
                                bool checkAmountForeign = FormValidationHelper.NonNegativeAmountValidation(form["Denomination_Value_AmountForeign_" + rowId + "_" + denoId].ToString());

                                if (!checkAmountForeign)
                                {
                                    ModelState.AddModelError("Denomination_Value_AmountForeign_" + rowId + "_" + denoId, "Amount (Foreign) is not valid!");
                                    denominationError = true;
                                }
                            }
                        }

                        if (denominationKeys.Count > 0)
                        {
                            decimal totalCalculatedForeign = Convert.ToDecimal(form["Denomination_Total_Calculated_Foreign_" + rowId]);
                            decimal totalOrderForeign = Convert.ToDecimal(form["Denomination_Total_Order_Foreign_" + rowId]);

                            if (totalCalculatedForeign != totalOrderForeign)
                            {
                                ModelState.AddModelError("Denomination_Total_Calculated_Foreign_" + rowId, "Total Calculated Amount (Foreign) and Total Order Amount (Foreign) not equal!");
                                denominationError = true;
                            }
                        }

                        if (denominationError)
                        {
                            ModelState.AddModelError("Transaction_Denomination_" + rowId, "Outgoing Denomination has error!");
                        }
                    }

                    if (sales.TransactionType == "Buy" || sales.TransactionType == "Sell")
                    {
                        decimal localPaymentAmount = 0;

                        if (sales.CashAmount != null)
                        {
                            bool checkCashAmountFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.CashAmount"]);

                            if (!checkCashAmountFormat)
                            {
                                ModelState.AddModelError("sales.CashAmount", "Cash Amount is not valid!");
                            }
                            else
                            {
                                localPaymentAmount += Convert.ToDecimal(sales.CashAmount);
                            }
                        }

                        if (sales.Cheque1Amount != null)
                        {
                            bool checkCheque1AmountFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.Cheque1Amount"]);

                            if (!checkCheque1AmountFormat)
                            {
                                ModelState.AddModelError("sales.Cheque1Amount", "Cheque 1 Amount is not valid!");
                            }
                            else
                            {
                                localPaymentAmount += Convert.ToDecimal(sales.Cheque1Amount);
                            }
                        }

                        if (sales.Cheque2Amount != null)
                        {
                            bool checkCheque2AmountFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.Cheque2Amount"]);

                            if (!checkCheque2AmountFormat)
                            {
                                ModelState.AddModelError("sales.Cheque2Amount", "Cheque 2 Amount is not valid!");
                            }
                            else
                            {
                                localPaymentAmount += Convert.ToDecimal(sales.Cheque2Amount);
                            }
                        }

                        if (sales.Cheque3Amount != null)
                        {
                            bool checkCheque3AmountFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.Cheque3Amount"]);

                            if (!checkCheque3AmountFormat)
                            {
                                ModelState.AddModelError("sales.Cheque3Amount", "Cheque 3 Amount is not valid!");
                            }
                            else
                            {
                                localPaymentAmount += Convert.ToDecimal(sales.Cheque3Amount);
                            }
                        }

                        if (sales.BankTransferAmount != null)
                        {
                            bool checkBankTransferAmountFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.BankTransferAmount"]);

                            if (!checkBankTransferAmountFormat)
                            {
                                ModelState.AddModelError("sales.BankTransferAmount", "Bank Transfer Amount is not valid!");
                            }
                            else
                            {
                                localPaymentAmount += Convert.ToDecimal(sales.BankTransferAmount);
                            }
                        }

                        if (sales.MemoBalance != null)
                        {
                            localPaymentAmount += Convert.ToDecimal(sales.MemoBalance);
                        }

                        if (localPaymentAmount != sales.TotalAmountLocal)
                        {
                            ModelState.AddModelError("sales.LocalPaymentMode", "Local Payment Mode Amount and Total Amount (Local) not equal!");
                        }
                    }
                }
                else
                {
                    ModelState.AddModelError("Transaction", "Please add at least ONE transaction!");
                }

                if (ModelState.IsValid)
                {
                    List<int> rollBack_saleTransactionsAdded = new List<int>();
                    List<int> rollBack_saleTransactionsDenosAdded = new List<int>();

                    try
                    {
                        Sale getLatestStatus = _salesModel.GetSingle2(id);

                        sales.CollectionDate = Convert.ToDateTime(form["sales.CollectionDate"]);
                        sales.CollectionTime = form["sales.CollectionTime"];
                        sales.Remarks = form["sales.Remarks"];
                        sales.Sale_ContactPerson = form["sales.Sale_ContactPerson"];
                        sales.Sale_DeliveryRemarks = form["sales.Sale_DeliveryRemarks"];

                        if (SubmitType != "SaveChanges")
                        {
                            if (sales.RequireDelivery == "Yes")
                            {
                                sales.Status = "Pending Assign Delivery";
                            }
                            else
                            {
                                sales.Status = "Pending Cashier";
                            }
                            sales.LastApprovalOn = DateTime.Now;
                        }

                        bool result = _salesModel.Update(id, sales);

                        if (result)
                        {
                            int userid = Convert.ToInt32(Session["UserId"]);
                            string tableAffected = "Sales";
                            string description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Approved Sale [" + sales.MemoID + "] " + "Status: " + "[ " + OldDataStatus + " - " + sales.Status + " ]";
                            string ActionType = "Approve";
                            string approvallog = "[" + Session["Username"].ToString() + "] Approved Sale [" + sales.MemoID + "]";

                            if (SubmitType == "SaveChanges")
                            {
                                ActionType = "Update";
                                approvallog = "[" + Session["Username"].ToString() + "] Updated Sale [" + sales.MemoID + "]";
                                description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Updated Sale [" + sales.MemoID + "]";
                            }

                            bool sale_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);

                            if (sale_log)
                            {
                                //Add Approval History
                                bool approval_history = _approvalHistorysModel.Add("Sale", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), ActionType, approvallog);

                                if (sales.TransactionType == "Buy")
                                {
                                    //Check the hidden Value
                                    if (ViewData["PendingChequeLog"].ToString() == "1")
                                    {
                                        bool chequelog = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque (Transaction Row) [" + sales.MemoID + "]");
                                    }

                                    //Check the hidden Value
                                    if (ViewData["PendingBankTransferLog"].ToString() == "1")
                                    {
                                        bool banktransferlog = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Bank Transfer (Transaction Row) [" + sales.MemoID + "]");
                                    }
                                }

                                if (sales.TransactionType == "Sell")
                                {
                                    //Check the hidden Value
                                    if (ViewData["PendingLocalCheque1Log"].ToString() == "1")
                                    {
                                        bool localcheque1log = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque 1 (Local Payment) [" + sales.MemoID + "]");
                                    }

                                    //Check the hidden Value
                                    if (ViewData["PendingLocalCheque2Log"].ToString() == "1")
                                    {
                                        bool localcheque2log = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque 2 (Local Payment) [" + sales.MemoID + "]");
                                    }

                                    //Check the hidden Value
                                    if (ViewData["PendingLocalCheque3Log"].ToString() == "1")
                                    {
                                        bool localcheque3log = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque 3 (Local Payment) [" + sales.MemoID + "]");
                                    }

                                    //Check the hidden Value
                                    if (ViewData["PendingLocalBankTransferLog"].ToString() == "1")
                                    {
                                        bool localbanktransferlog = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Bank Transfer (Local Payment) [" + sales.MemoID + "]");
                                    }
                                }

                            }

                            //Delete Old Transactions
                            if (oldData.SaleTransactions.Count > 0)
                            {
                                bool del_transaction = false;
                                bool del_denomination = false;

                                foreach (SaleTransaction transaction in oldData.SaleTransactions)
                                {
                                    if (!rollBack_saleTransactions.ContainsKey(transaction.ID))
                                    {
                                        rollBack_saleTransactions.Add(transaction.ID, new SaleTransaction()
                                        {
                                            SaleId = transaction.SaleId,
                                            TransactionID = transaction.TransactionID,
                                            TransactionType = transaction.TransactionType,
                                            CurrencyId = transaction.CurrencyId,
                                            Rate = transaction.Rate,
                                            EncashmentRate = transaction.EncashmentRate,
                                            CrossRate = transaction.CrossRate,
                                            Unit = transaction.Unit,
                                            AmountForeign = transaction.AmountForeign,
                                            AmountLocal = transaction.AmountLocal,
                                            PaymentMode = transaction.PaymentMode,
                                            ChequeNo = transaction.ChequeNo,
                                            BankTransferNo = transaction.BankTransferNo,
                                            VesselName = transaction.VesselName
                                        });
                                    }

                                    int productId = transaction.CurrencyId;
                                    string transactionType = transaction.TransactionType;
                                    decimal amountLocal = transaction.AmountLocal;
                                    decimal amountForeign = transaction.AmountForeign;

                                    if (transaction.SaleTransactionDenominations.Count > 0)
                                    {
                                        foreach (SaleTransactionDenomination denomination in transaction.SaleTransactionDenominations)
                                        {
                                            if (!rollBack_saleTransactionDenos.ContainsKey(denomination.ID))
                                            {
                                                rollBack_saleTransactionDenos.Add(denomination.ID, new SaleTransactionDenomination()
                                                {
                                                    ID = denomination.ID,
                                                    SaleTransactionId = denomination.SaleTransactionId,
                                                    Denomination = denomination.Denomination,
                                                    Pieces = denomination.Pieces,
                                                    AmountForeign = denomination.AmountForeign
                                                });
                                            }

                                            bool delete_denomination = _saleTransactionDenominationsModel.Delete(denomination.ID);

                                            if (delete_denomination)
                                            {
                                                if (!del_denomination)
                                                {
                                                    del_denomination = true;
                                                }
                                            }
                                        }
                                    }

                                    bool delete_transaction = _saleTransactionsModel.Delete(transaction.ID);

                                    if (delete_transaction)
                                    {
                                        if (!del_transaction)
                                        {
                                            del_transaction = true;
                                        }
                                    }
                                }

                                if (del_transaction)
                                {
                                    userid = Convert.ToInt32(Session["UserId"]);
                                    tableAffected = "SaleTransactions";
                                    description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Deleted Sale Transactions [" + sales.MemoID + "]";

                                    bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                }

                                if (del_denomination)
                                {
                                    userid = Convert.ToInt32(Session["UserId"]);
                                    tableAffected = "SaleTransactionDenominations";
                                    description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Deleted Sale Transaction Denominations [" + sales.MemoID + "]";

                                    bool denomination_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                }
                            }

                            //Add New Transactions
                            if (transactionKeys.Count > 0)
                            {
                                bool add_transaction = false;
                                bool add_denomination = false;
                                bool checkExistItem = false;

                                foreach (string key in transactionKeys)
                                {
                                    string rowId = key.Substring(15);

                                    SaleTransaction transaction = new SaleTransaction();
                                    transaction.SaleId = id;
                                    transaction.TransactionID = form[key].ToString();
                                    transaction.TransactionType = form["Transaction_Type_" + rowId].ToString();
                                    transaction.VesselName = form["Transaction_VesselName_" + rowId];
                                    transaction.CurrencyId = Convert.ToInt32(form["Transaction_Currency_" + rowId]);
                                    transaction.Rate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                    if (!string.IsNullOrEmpty(form["Transaction_EncashmentRate_" + rowId]))
                                    {
                                        transaction.EncashmentRate = Convert.ToDecimal(form["Transaction_EncashmentRate_" + rowId]);
                                    }
                                    if (!string.IsNullOrEmpty(form["Transaction_CrossRate_" + rowId]))
                                    {
                                        transaction.CrossRate = Convert.ToDecimal(form["Transaction_CrossRate_" + rowId]);
                                    }
                                    transaction.Unit = Convert.ToInt32(form["Transaction_Unit_" + rowId].Replace(",", ""));
                                    transaction.PaymentMode = form["Transaction_PaymentMode_" + rowId];
                                    if (!string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
                                    {
                                        transaction.ChequeNo = form["Transaction_ChequeNo_" + rowId].ToString();
                                    }
                                    if (!string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
                                    {
                                        transaction.BankTransferNo = form["Transaction_BankTransferNo_" + rowId].ToString();
                                    }
                                    transaction.AmountLocal = Convert.ToDecimal(form["Transaction_AmountLocal_" + rowId]);
                                    transaction.AmountForeign = Convert.ToDecimal(form["Transaction_AmountForeign_" + rowId]);

                                    checkExistItem = false;

                                    //Check have duplicate items or not first.
                                    using (var context = new DataAccess.GreatEastForex())
                                    {
                                        var checkExist = context.SaleTransactions.Where(e => e.SaleId == transaction.SaleId && e.TransactionID == transaction.TransactionID && e.TransactionType == transaction.TransactionType && e.CurrencyId == transaction.CurrencyId).Select(e => new { e.ID, e.SaleId, e.TransactionID, e.TransactionType }).FirstOrDefault();

                                        if (checkExist != null)
                                        {
                                            checkExistItem = true;
                                        }
                                    }

                                    bool result_transaction = false;

                                    if (!checkExistItem)
                                    {
                                        result_transaction = _saleTransactionsModel.Add(transaction);
                                    }

                                    if (result_transaction)
                                    {
                                        rollBack_saleTransactionsAdded.Add(transaction.ID);

                                        if (!add_transaction)
                                        {
                                            add_transaction = true;
                                        }

                                        List<string> denominationKeys = form.AllKeys.Where(e => e.Contains("Denomination_Value_" + rowId + "_")).ToList();

                                        if (denominationKeys.Count > 0)
                                        {
                                            foreach (string denoKey in denominationKeys)
                                            {
                                                string denoId = denoKey.Substring(20 + rowId.Length);

                                                SaleTransactionDenomination denomination = new SaleTransactionDenomination();
                                                denomination.SaleTransactionId = transaction.ID;
                                                denomination.Denomination = 0;
                                                string deno = form[denoKey].ToString();
                                                if (deno != "coins")
                                                {
                                                    denomination.Denomination = Convert.ToInt32(deno);
                                                }
                                                denomination.Pieces = 0;
                                                if (!string.IsNullOrEmpty(form["Denomination_Value_Pieces_" + rowId + "_" + denoId]))
                                                {
                                                    denomination.Pieces = Convert.ToInt32(form["Denomination_Value_Pieces_" + rowId + "_" + denoId].ToString().Replace(",", ""));
                                                }
                                                denomination.AmountForeign = 0;
                                                if (!string.IsNullOrEmpty(form["Denomination_Value_AmountForeign_" + rowId + "_" + denoId]))
                                                {
                                                    denomination.AmountForeign = Convert.ToDecimal(form["Denomination_Value_AmountForeign_" + rowId + "_" + denoId]);
                                                }

                                                bool result_denomination = _saleTransactionDenominationsModel.Add(denomination);

                                                if (result_denomination)
                                                {
                                                    rollBack_saleTransactionsDenosAdded.Add(denomination.ID);

                                                    if (!add_denomination)
                                                    {
                                                        add_denomination = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                if (add_transaction)
                                {
                                    userid = Convert.ToInt32(Session["UserId"]);
                                    tableAffected = "SaleTransactions";
                                    description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Created Sale Transactions [" + sales.MemoID + "]";

                                    bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                }

                                if (add_denomination)
                                {
                                    userid = Convert.ToInt32(Session["UserId"]);
                                    tableAffected = "SaleTransactionDenominations";
                                    description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Created Sale Transaction Denominations [" + sales.MemoID + "]";

                                    bool denomination_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                }
                            }

                            if (SubmitType == "SaveChanges")
                            {
                                TempData["Result"] = "success|" + sales.MemoID + " has been successfully updated!";
                                //TempData.Add("Result", "success|" + sales.MemoID + " has been successfully updated!");
                            }
                            else
                            {
                                TempData["Result"] = "success|" + sales.MemoID + " has been successfully approved!";
                                //TempData.Add("Result", "success|" + sales.MemoID + " has been successfully approved!");
                            }

                            return RedirectToAction("Listing", module, new { @page = page });
                        }
                        else
                        {
                            if (SubmitType == "SaveChanges")
                            {
                                TempData["Result"] = "danger|AN error occured while saving sale record!";
                                //TempData.Add("Result", "danger|AN error occured while saving sale record!");
                            }
                            else
                            {
                                TempData["Result"] = "danger|AN error occured while approving sale record!";
                                //TempData.Add("Result", "danger|AN error occured while approving sale record!");
                            }
                        }
                    }
                    catch (DbUpdateException e)
                    {
                        if (e.ToString().Contains("was deadlocked on lock resources with another process and has been chosen as the deadlock victim"))
                        {
                            //Roll back sale
                            _salesModel.Update(rollBack_Sale.ID, rollBack_Sale);

                            //Role back Transactions
                            foreach (int key in rollBack_saleTransactions.Keys)
                            {
                                _saleTransactionsModel.Add(rollBack_saleTransactions[key]);
                            }

                            //Role back Transaction Denominations
                            foreach (int key in rollBack_saleTransactionDenos.Keys)
                            {
                                SaleTransactionDenomination denomination = rollBack_saleTransactionDenos[key];

                                if (rollBack_saleTransactions.ContainsKey(denomination.SaleTransactionId))
                                {
                                    denomination.SaleTransactionId = rollBack_saleTransactions[denomination.SaleTransactionId].ID;

                                    _saleTransactionDenominationsModel.Add(denomination);
                                }
                            }

                            //Roll back Added Transactions
                            foreach (int key in rollBack_saleTransactionsAdded)
                            {
                                _saleTransactionsModel.Delete(key);
                            }

                            //Roll back Added Transaction Denomminations
                            foreach (int key in rollBack_saleTransactionsDenosAdded)
                            {
                                _saleTransactionDenominationsModel.Delete(key);
                            }

                            TempData["Result"] = "danger|An error occured while saving sale record! Please submit again!";
                            //TempData.Add("Result", "danger|An error occured while saving sale record! Please submit again!");
                            return RedirectToAction("Listing", module, new { @page = page });
                        }
                        else
                        {
                            throw;
                        }
                    }
                    catch (Exception e)
                    {
                        //Roll back sale
                        _salesModel.Update(rollBack_Sale.ID, rollBack_Sale);

                        //Role back Transactions
                        foreach (int key in rollBack_saleTransactions.Keys)
                        {
                            _saleTransactionsModel.Add(rollBack_saleTransactions[key]);
                        }

                        //Role back Transaction Denominations
                        foreach (int key in rollBack_saleTransactionDenos.Keys)
                        {
                            SaleTransactionDenomination denomination = rollBack_saleTransactionDenos[key];

                            if (rollBack_saleTransactions.ContainsKey(denomination.SaleTransactionId))
                            {
                                denomination.SaleTransactionId = rollBack_saleTransactions[denomination.SaleTransactionId].ID;

                                _saleTransactionDenominationsModel.Add(denomination);
                            }
                        }

                        using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["GreatEastForex"].ConnectionString))
                        {
                            var connection = ConfigurationManager.ConnectionStrings["GreatEastForex"].ConnectionString.ToString();
                            string queryString = "SELECT ID FROM SaleTransactions WHERE SaleId = " + rollBack_Sale.ID + " AND id not in (select max(id) from SaleTransactions WHERE SaleId = " + rollBack_Sale.ID + " group by TransactionID)";
                            List<int> transactionID = new List<int>();
                            List<int> transactionDenoID = new List<int>();
                            int TID, TDID;

                            SqlCommand cmd = new SqlCommand(queryString, con);
                            con.Open();
                            SqlDataReader reader = cmd.ExecuteReader();
                            try
                            {
                                while (reader.Read())
                                {
                                    TID = Convert.ToInt32(reader["ID"]);
                                    transactionID.Add(TID);
                                }
                            }
                            finally
                            {
                                // Always call Close when done reading.
                                reader.Close();
                            }

                            if (transactionID.Count > 0)
                            {
                                //string string_id = String.Join(", ", transactionID);
                                cmd = new SqlCommand("SELECT ID FROM dbo.SaleTransactionDenominations WHERE SaleTransactionId IN (" + String.Join(", ", transactionID) + ")", con);
                                reader = cmd.ExecuteReader();
                                try
                                {
                                    while (reader.Read())
                                    {
                                        TDID = Convert.ToInt32(reader["ID"]);
                                        transactionDenoID.Add(TDID);
                                    }
                                }
                                finally
                                {
                                    // Always call Close when done reading.
                                    reader.Close();
                                }
                            }
                            queryString = "";
                            if (transactionDenoID.Count > 0)
                            {
                                queryString = "DELETE FROM SaleTransactionDenominations WHERE ID IN(" + String.Join(", ", transactionDenoID) + ") ";
                            }

                            if (transactionID.Count > 0)
                            {
                                queryString = queryString + " DELETE FROM SaleTransactions WHERE ID IN(" + String.Join(", ", transactionID) + ");";
                            }

                            if (!string.IsNullOrEmpty(queryString))
                            {
                                //Delete All related Item
                                cmd = new SqlCommand(queryString, con);
                                reader = cmd.ExecuteReader();
                            }
                            con.Close();
                        }

                        //Roll back Added Transactions
                        //foreach (int key in rollBack_saleTransactionsAdded)
                        //{
                        //    _saleTransactionsModel.Delete(key);
                        //}

                        ////Roll back Added Transaction Denomminations
                        //foreach (int key in rollBack_saleTransactionsDenosAdded)
                        //{
                        //    _saleTransactionDenominationsModel.Delete(key);
                        //}

                        TempData["Result"] = "danger|An error occured while saving sale record! " + e.Message + "!";
                        //TempData.Add("Result", "danger|An error occured while saving sale record! " + e.Message + "!");
                    }
                }
                else
                {
                    TempData["Result"] = "danger|There is something wrong in the form!";
                    //TempData.Add("Result", "danger|There is something wrong in the form!");
                }

                Dropdown[] customerDDL = CustomerDDL(sales.CustomerParticularId);
                ViewData["CustomerDropdown"] = new SelectList(customerDDL, "val", "name", sales.CustomerParticularId);

                CustomerParticular customer = _customerParticularsModel.GetSingle(sales.CustomerParticularId);

                ViewData["CustomerContact"] = "";
                ViewData["CustomerAddress"] = "";
                if (customer != null)
                {
                    string contact = "";
                    string address = "";

                    if (customer.CustomerType == "Corporate & Trading Company")
                    {
                        contact = customer.Company_TelNo;
                        if (!string.IsNullOrEmpty(customer.Company_BusinessAddress2))
                        {
                            address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_PostalCode;
                        }
                        else
                        {
                            address = customer.Company_BusinessAddress1 + ", " + customer.Company_PostalCode;
                        }

                    }
                    else
                    {
                        contact = customer.Natural_ContactNoM;
                        address = customer.Natural_PermanentAddress;
                    }

                    ViewData["CustomerContact"] = contact;
                    ViewData["CustomerAddress"] = address;
                }

                //Dropdown[] collectionTimeDDL = CollectionTimeDDL();
                //ViewData["CollectionTimeDropdown"] = new SelectList(collectionTimeDDL, "val", "name", sales.CollectionTime);

                ViewData["NonUrgentRadio"] = "";
                ViewData["UrgentRadio"] = "";
                if (sales.Urgent == "Non-Urgent")
                {
                    ViewData["NonUrgentRadio"] = "checked";
                }
                else
                {
                    ViewData["UrgentRadio"] = "checked";
                }

                ViewData["RequireDeliveryCheckbox"] = "";
                if (sales.RequireDelivery == "Yes")
                {
                    ViewData["RequireDeliveryCheckbox"] = "checked";
                }

                ViewData["TransactionTypeBuyRadio"] = "";
                ViewData["TransactionTypeSellRadio"] = "";
                ViewData["TransactionTypeEncashmentRadio"] = "";
                ViewData["TransactionTypeSwapRadio"] = "";
                ViewData["TransactionTypeCrossCurrencyRadio"] = "";

                if (!string.IsNullOrEmpty(sales.TransactionType))
                {
                    if (sales.TransactionType == "Buy")
                    {
                        ViewData["TransactionTypeBuyRadio"] = "checked";
                    }
                    else if (sales.TransactionType == "Sell")
                    {
                        ViewData["TransactionTypeSellRadio"] = "checked";
                    }
                    else if (sales.TransactionType == "Encashment")
                    {
                        ViewData["TransactionTypeEncashmentRadio"] = "checked";
                    }
                    else if (sales.TransactionType == "Swap")
                    {
                        ViewData["TransactionTypeSwapRadio"] = "checked";
                    }
                    else
                    {
                        ViewData["TransactionTypeCrossCurrencyRadio"] = "checked";
                    }
                }

                ViewData["LocalPaymentModeCashCheckbox"] = "";
                ViewData["LocalPaymentModeCheque1Checkbox"] = "";
                ViewData["LocalPaymentModeCheque2Checkbox"] = "";
                ViewData["LocalPaymentModeCheque3Checkbox"] = "";
                ViewData["LocalPaymentModeBankTransferCheckbox"] = "";
                if (!string.IsNullOrEmpty(sales.LocalPaymentMode))
                {
                    if (sales.LocalPaymentMode.Contains("Cash"))
                    {
                        ViewData["LocalPaymentModeCashCheckbox"] = "checked";
                    }

                    if (sales.LocalPaymentMode.Contains("Cheque 1"))
                    {
                        ViewData["LocalPaymentModeCheque1Checkbox"] = "checked";
                    }

                    if (sales.LocalPaymentMode.Contains("Cheque 2"))
                    {
                        ViewData["LocalPaymentModeCheque2Checkbox"] = "checked";
                    }

                    if (sales.LocalPaymentMode.Contains("Cheque 3"))
                    {
                        ViewData["LocalPaymentModeCheque3Checkbox"] = "checked";
                    }

                    if (sales.LocalPaymentMode.Contains("Bank Transfer"))
                    {
                        ViewData["LocalPaymentModeBankTransferCheckbox"] = "checked";
                    }
                }

                Dropdown[] cashBankDDL = LocalPaymentBankDDL(oldData.CashBank);
                ViewData["CashBankDropdown"] = new SelectList(cashBankDDL, "val", "name", sales.CashBank);

                Dropdown[] cheque1BankDDL = LocalPaymentBankDDL(oldData.Cheque1Bank);
                ViewData["Cheque1BankDropdown"] = new SelectList(cheque1BankDDL, "val", "name", sales.Cheque1Bank);

                Dropdown[] cheque2BankDDL = LocalPaymentBankDDL(oldData.Cheque2Bank);
                ViewData["Cheque2BankDropdown"] = new SelectList(cheque2BankDDL, "val", "name", sales.Cheque2Bank);

                Dropdown[] cheque3BankDDL = LocalPaymentBankDDL(oldData.Cheque3Bank);
                ViewData["Cheque3BankDropdown"] = new SelectList(cheque3BankDDL, "val", "name", sales.Cheque3Bank);

                Dropdown[] bankTransferBankDDL = LocalPaymentBankDDL(oldData.BankTransferBank);
                ViewData["BankTransferBankDropdown"] = new SelectList(bankTransferBankDDL, "val", "name", sales.BankTransferBank);

                IList<SaleTransactionsData> transactions = new List<SaleTransactionsData>();

                decimal totalForeign = 0;
                decimal totalLocal = 0;
                Dropdown[] currency2 = CurrencyDDL(sales.TransactionType);
                foreach (string key in transactionKeys)
                {
                    SaleTransactionsData transactionData = new SaleTransactionsData();
                    transactionData.Denominations = new List<DenominationsData>();

                    string rowId = key.Substring(15);
                    int transactionId = Convert.ToInt32(form["Transaction_TransactionId_" + rowId]);
                    string transactionID = rowId.PadLeft(3, '0');
                    string type = form["Transaction_Type_" + rowId].ToString();
                    string vesselName = "";
                    if (!string.IsNullOrEmpty(form["Transaction_VesselName_" + rowId]))
                    {
                        vesselName = form["Transaction_VesselName_" + rowId].ToString();
                    }

                    string productId = form["Transaction_Currency_" + rowId].ToString();
                    //Dropdown[] currency = CurrencyDDL(sales.TransactionType);
                    SelectList currencyDDL = new SelectList(currency2, "val", "name", productId);

                    string symbol = _productsModel.GetSingle(Convert.ToInt32(productId)).Symbol;
                    string rate = form["Transaction_Rate_" + rowId].ToString();
                    int unit = Convert.ToInt32(form["Transaction_Unit_" + rowId]);

                    string encashmentRate = "";
                    if (!string.IsNullOrEmpty(form["Transaction_EncashmentRate_" + rowId]))
                    {
                        encashmentRate = form["Transaction_EncashmentRate_" + rowId].ToString();
                    }

                    string crossRate = "";
                    if (!string.IsNullOrEmpty(form["Transaction_CrossRate_" + rowId]))
                    {
                        crossRate = form["Transaction_CrossRate_" + rowId].ToString();
                    }

                    string paymentModeVal = "";
                    if (!string.IsNullOrEmpty(form["Transaction_PaymentMode_" + rowId]))
                    {
                        paymentModeVal = form["Transaction_PaymentMode_" + rowId].ToString();
                    }
                    Dropdown[] paymentMode = PaymentModeDDL(Convert.ToInt32(productId));
                    SelectList paymentModeDDL = new SelectList(paymentMode, "val", "name", paymentModeVal);

                    string disabledCheque = "disabled";
                    string disabledBankTranfer = "disabled";
                    if (paymentModeVal == "Cheque")
                    {
                        disabledCheque = "";
                    }
                    else if (paymentModeVal == "Bank Transfer")
                    {
                        disabledBankTranfer = "";
                    }

                    string chequeNo = "";
                    if (!string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
                    {
                        chequeNo = form["Transaction_ChequeNo_" + rowId].ToString();
                    }

                    string bankTransferNo = "";
                    if (!string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
                    {
                        bankTransferNo = form["Transaction_BankTransferNo_" + rowId].ToString();
                    }

                    string amountLocal = "";
                    if (!string.IsNullOrEmpty(form["Transaction_AmountLocal_" + rowId]))
                    {
                        amountLocal = form["Transaction_AmountLocal_" + rowId].ToString();
                        totalLocal += Convert.ToDecimal(form["Transaction_AmountLocal_" + rowId]);
                    }

                    string amountForeign = "";
                    if (!string.IsNullOrEmpty(form["Transaction_AmountForeign_" + rowId]))
                    {
                        amountForeign = form["Transaction_AmountForeign_" + rowId].ToString();

                        try
                        {
                            amountForeign = FormValidationHelper.AmountFormatter(Convert.ToDecimal(amountForeign), sgdDp);
                            totalForeign += Convert.ToDecimal(amountForeign);
                        }
                        catch
                        {

                        }
                    }

                    List<string> denominationKeys = form.AllKeys.Where(e => e.Contains("Denomination_Value_" + rowId + "_")).ToList();

                    foreach (string denoKey in denominationKeys)
                    {
                        DenominationsData denoData = new DenominationsData();

                        string denoId = denoKey.Substring(20 + rowId.Length);
                        string denominationValue = "coins";
                        if (form["Denomination_Value_" + rowId + "_" + denoId].ToString() != "0")
                        {
                            denominationValue = form["Denomination_Value_" + rowId + "_" + denoId].ToString();
                        }

                        string pieces = "-";
                        if (!string.IsNullOrEmpty(form["Denomination_Value_Pieces_" + rowId + "_" + denoId]))
                        {
                            pieces = form["Denomination_Value_Pieces_" + rowId + "_" + denoId].ToString();
                        }
                        else
                        {
                            if (form["Denomination_Value_" + rowId + "_" + denoId].ToString() != "0")
                            {
                                pieces = "";
                            }
                        }

                        string denoAmountForeign = "";
                        if (!string.IsNullOrEmpty(form["Denomination_Value_AmountForeign_" + rowId + "_" + denoId]))
                        {
                            try
                            {
                                int dp = form["Denomination_Value_AmountForeign_" + rowId + "_" + denoId].ToString().Split('.')[1].Length;
                                denoAmountForeign = FormValidationHelper.AmountFormatter(Convert.ToDecimal(form["Denomination_Value_AmountForeign_" + rowId + "_" + denoId].ToString()), sgdDp);
                            }
                            catch
                            {
                                denoAmountForeign = form["Denomination_Value_AmountForeign_" + rowId + "_" + denoId].ToString();
                            }
                        }

                        denoData.DenoId = denoId;
                        denoData.DenominationValue = denominationValue;
                        denoData.Pieces = pieces;
                        denoData.AmountForeign = denoAmountForeign;
                        transactionData.Denominations.Add(denoData);
                    }

                    string denoCurrencyCode = "Currency";
                    string totalCalculatedForeign = "0.00";
                    string remainingForeign = "0.00";
                    string totalOrderForeign = "0.00";

                    if (denominationKeys.Count > 0)
                    {
                        denoCurrencyCode = _productsModel.GetSingle(Convert.ToInt32(productId)).CurrencyCode;
                        totalCalculatedForeign = FormValidationHelper.AmountFormatter(Convert.ToDecimal(form["Denomination_Total_Calculated_Foreign_" + rowId].ToString()), sgdDp);
                        remainingForeign = FormValidationHelper.AmountFormatter(Convert.ToDecimal(form["Denomination_Remaining_Foreign_" + rowId].ToString()), sgdDp);
                        totalOrderForeign = FormValidationHelper.AmountFormatter(Convert.ToDecimal(form["Denomination_Total_Order_Foreign_" + rowId].ToString()), sgdDp);
                    }

                    transactionData.RowId = rowId;
                    transactionData.ID = transactionId;
                    transactionData.TransactionID = transactionID;
                    transactionData.Type = type;
                    transactionData.VesselName = vesselName;
                    transactionData.CurrencyDDL = currencyDDL;
                    transactionData.Symbol = symbol;
                    transactionData.Rate = rate;
                    transactionData.EncashmentRate = encashmentRate;
                    transactionData.CrossRate = crossRate;
                    transactionData.Unit = unit;
                    transactionData.PaymentModeDDL = paymentModeDDL;
                    transactionData.DisabledChequeNo = disabledCheque;
                    transactionData.ChequeNo = chequeNo;
                    transactionData.DisabledBankTransferNo = disabledBankTranfer;
                    transactionData.BankTransferNo = bankTransferNo;
                    transactionData.AmountLocal = amountLocal;
                    transactionData.AmountForeign = amountForeign;
                    transactionData.DenominationCurrencyCode = denoCurrencyCode;
                    transactionData.DenominationTotalCalculatedForeign = totalCalculatedForeign;
                    transactionData.DenominationRemainingForeign = remainingForeign;
                    transactionData.DenominationTotalOrderForeign = totalOrderForeign;
                    transactions.Add(transactionData);
                }

                ViewData["SaleTransactionsData"] = transactions;

                Product sgd = _productsModel.FindCurrencyCode("SGD");

                ViewData["TotalForeign"] = totalForeign.ToString(GetRateFormat(8));
                ViewData["TotalLocal"] = totalLocal.ToString(GetDecimalFormat(sgd.Decimal));

                ViewData["Sale"] = sales;
                ViewData["SaleId"] = sales.ID;
                ViewData["SaleTransactionType"] = sales.TransactionType;
                ViewData["Module"] = module;

                if (!string.IsNullOrEmpty(sales.DeliveryConfirmation))
                {
                    ViewData["DeliveryConfirmation"] = sales.DeliveryConfirmation.Split(',').ToList();
                    ViewData["DeliveryConfirmationDomain"] = ConfigurationManager.AppSettings["DeliveryConfirmationFolder"].ToString();
                }

                ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
                return View();
                #endregion
            }
            else if (oldData.Status.Contains("Pending Delivery by"))
            {
                #region Pending Delivery

                if (ModelState["sales.CollectionDate"] != null)
                {
                    if (ModelState["sales.CollectionDate"].Errors.Count > 0)
                    {
                        ModelState["sales.CollectionDate"].Errors.Clear();
                    }
                }

                if (ModelState["sales.CollectionTime"] != null)
                {
                    if (ModelState["sales.CollectionTime"].Errors.Count > 0)
                    {
                        ModelState["sales.CollectionTime"].Errors.Clear();
                    }
                }


                if (ModelState["sales.Urgent"] != null)
                {
                    if (ModelState["sales.Urgent"].Errors.Count > 0)
                    {
                        ModelState["sales.Urgent"].Errors.Clear();
                    }
                }


                if (ModelState["sales.TransactionType"] != null)
                {
                    if (ModelState["sales.TransactionType"].Errors.Count > 0)
                    {
                        ModelState["sales.TransactionType"].Errors.Clear();
                    }
                }

                string deliveryConfirmation = sales.DeliveryConfirmation;

                sales = oldData;
                sales.DeliveryConfirmation = deliveryConfirmation;

                if (string.IsNullOrEmpty(sales.DeliveryConfirmation))
                {
                    ModelState.AddModelError("sales.DeliveryConfirmation", "Delivery Confirmation is required!");
                }

                if (ModelState.IsValid)
                {

                    Sale getLatestStatus = _salesModel.GetSingle2(id);

                    int pendingDeliveryID = 0;

                    if (sales.PendingDeliveryById != null)
                    {
                        pendingDeliveryID = Convert.ToInt32(sales.PendingDeliveryById);
                    }

                    User getPendingDeliveryID = _usersModel.GetSingle(pendingDeliveryID);

                    if (SubmitType != "SaveChanges")
                    {
                        if (getPendingDeliveryID != null)
                        {
                            sales.Status = "Pending Incoming Delivery by " + getPendingDeliveryID.Name;
                        }
                        else
                        {
                            sales.Status = "Pending Incoming Delivery by ";
                        }
                    }

                    bool result = _salesModel.Update(sales.ID, sales);

                    if (result)
                    {
                        int userid = Convert.ToInt32(Session["UserId"]);
                        string tableAffected = "Sales";

                        string description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Approved Sale [" + sales.MemoID + "] " + "Status: " + "[ " + OldDataStatus + " - " + sales.Status + " ]";
                        string ActionType = "Approve";
                        string approvallog = "[" + Session["Username"].ToString() + "] Approved Sale [" + sales.MemoID + "]";

                        if (SubmitType == "SaveChanges")
                        {
                            ActionType = "Update";
                            approvallog = "[" + Session["Username"].ToString() + "] Updated Sale [" + sales.MemoID + "]";
                            description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Updated Sale [" + sales.MemoID + "]";
                        }

                        bool sale_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);

                        if (sale_log)
                        {
                            //Add Approval History
                            bool approval_history = _approvalHistorysModel.Add("Sale", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), ActionType, approvallog);
                        }

                        //Move Upload Confirmation Files
                        string[] confirmationFiles = sales.DeliveryConfirmation.Split(',');

                        foreach (string file in confirmationFiles)
                        {
                            string sourceFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), file);
                            string destinationFile = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["DeliveryConfirmationFolder"].ToString()), file);

                            System.IO.File.Move(sourceFile, destinationFile);
                        }

                        TempData["Result"] = "success|" + sales.MemoID + " has been successfully updated!";
                        //TempData.Add("Result", "success|" + sales.MemoID + " has been successfully updated!");

                        return RedirectToAction("Listing", module, new { @page = page });
                    }
                    else
                    {
                        TempData["Result"] = "danger|Error while updating sale record!";
                        //TempData.Add("Result", "danger|Error while updating sale record!");
                    }

                }
                else
                {
                    TempData["Result"] = "danger|There is something wrong in the form!";
                    //TempData.Add("Result", "danger|There is something wrong in the form!");
                }

                Dropdown[] customerDDL = CustomerDDL(sales.CustomerParticularId);
                ViewData["CustomerDropdown"] = new SelectList(customerDDL, "val", "name", sales.CustomerParticularId);

                CustomerParticular customer = _customerParticularsModel.GetSingle(sales.CustomerParticularId);

                ViewData["CustomerContact"] = "";
                ViewData["CustomerAddress"] = "";
                if (customer != null)
                {
                    string contact = "";
                    string address = "";

                    if (customer.CustomerType == "Corporate & Trading Company")
                    {
                        contact = customer.Company_TelNo;
                        if (!string.IsNullOrEmpty(customer.Company_BusinessAddress2))
                        {
                            address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_PostalCode;
                        }
                        else
                        {
                            address = customer.Company_BusinessAddress1 + ", " + customer.Company_PostalCode;
                        }

                    }
                    else
                    {
                        contact = customer.Natural_ContactNoM;
                        address = customer.Natural_PermanentAddress;
                    }

                    ViewData["CustomerContact"] = contact;
                    ViewData["CustomerAddress"] = address;
                }

                //Dropdown[] collectionTimeDDL = CollectionTimeDDL();
                //ViewData["CollectionTimeDropdown"] = new SelectList(collectionTimeDDL, "val", "name", sales.CollectionTime);

                ViewData["NonUrgentRadio"] = "";
                ViewData["UrgentRadio"] = "";
                if (sales.Urgent == "Non-Urgent")
                {
                    ViewData["NonUrgentRadio"] = "checked";
                }
                else
                {
                    ViewData["UrgentRadio"] = "checked";
                }

                ViewData["RequireDeliveryCheckbox"] = "";
                if (sales.RequireDelivery == "Yes")
                {
                    ViewData["RequireDeliveryCheckbox"] = "checked";
                }

                ViewData["TransactionTypeBuyRadio"] = "";
                ViewData["TransactionTypeSellRadio"] = "";
                ViewData["TransactionTypeEncashmentRadio"] = "";
                ViewData["TransactionTypeSwapRadio"] = "";
                ViewData["TransactionTypeCrossCurrencyRadio"] = "";

                if (!string.IsNullOrEmpty(sales.TransactionType))
                {
                    if (sales.TransactionType == "Buy")
                    {
                        ViewData["TransactionTypeBuyRadio"] = "checked";
                    }
                    else if (sales.TransactionType == "Sell")
                    {
                        ViewData["TransactionTypeSellRadio"] = "checked";
                    }
                    else if (sales.TransactionType == "Encashment")
                    {
                        ViewData["TransactionTypeEncashmentRadio"] = "checked";
                    }
                    else if (sales.TransactionType == "Swap")
                    {
                        ViewData["TransactionTypeSwapRadio"] = "checked";
                    }
                    else
                    {
                        ViewData["TransactionTypeCrossCurrencyRadio"] = "checked";
                    }
                }

                ViewData["LocalPaymentModeCashCheckbox"] = "";
                ViewData["LocalPaymentModeCheque1Checkbox"] = "";
                ViewData["LocalPaymentModeCheque2Checkbox"] = "";
                ViewData["LocalPaymentModeCheque3Checkbox"] = "";
                ViewData["LocalPaymentModeBankTransferCheckbox"] = "";
                if (!string.IsNullOrEmpty(sales.LocalPaymentMode))
                {
                    if (sales.LocalPaymentMode.Contains("Cash"))
                    {
                        ViewData["LocalPaymentModeCashCheckbox"] = "checked";
                    }

                    if (sales.LocalPaymentMode.Contains("Cheque 1"))
                    {
                        ViewData["LocalPaymentModeCheque1Checkbox"] = "checked";
                    }

                    if (sales.LocalPaymentMode.Contains("Cheque 2"))
                    {
                        ViewData["LocalPaymentModeCheque2Checkbox"] = "checked";
                    }

                    if (sales.LocalPaymentMode.Contains("Cheque 3"))
                    {
                        ViewData["LocalPaymentModeCheque3Checkbox"] = "checked";
                    }

                    if (sales.LocalPaymentMode.Contains("Bank Transfer"))
                    {
                        ViewData["LocalPaymentModeBankTransferCheckbox"] = "checked";
                    }
                }

                Dropdown[] cashBankDDL = LocalPaymentBankDDL(oldData.CashBank);
                ViewData["CashBankDropdown"] = new SelectList(cashBankDDL, "val", "name", sales.CashBank);

                Dropdown[] cheque1BankDDL = LocalPaymentBankDDL(oldData.Cheque1Bank);
                ViewData["Cheque1BankDropdown"] = new SelectList(cheque1BankDDL, "val", "name", sales.Cheque1Bank);

                Dropdown[] cheque2BankDDL = LocalPaymentBankDDL(oldData.Cheque2Bank);
                ViewData["Cheque2BankDropdown"] = new SelectList(cheque2BankDDL, "val", "name", sales.Cheque2Bank);

                Dropdown[] cheque3BankDDL = LocalPaymentBankDDL(oldData.Cheque3Bank);
                ViewData["Cheque3BankDropdown"] = new SelectList(cheque3BankDDL, "val", "name", sales.Cheque3Bank);

                Dropdown[] bankTransferBankDDL = LocalPaymentBankDDL(oldData.BankTransferBank);
                ViewData["BankTransferBankDropdown"] = new SelectList(bankTransferBankDDL, "val", "name", sales.BankTransferBank);

                IList<SaleTransactionsData> transactions = new List<SaleTransactionsData>();

                int rowId = 1;

                decimal totalForeign = 0;
                decimal totalLocal = 0;
                Dropdown[] currency2 = CurrencyDDL(sales.TransactionType);
                foreach (SaleTransaction transaction in sales.SaleTransactions.OrderBy(e => e.ID))
                {
                    SaleTransactionsData transactionData = new SaleTransactionsData();
                    transactionData.Denominations = new List<DenominationsData>();

                    string transactionID = transaction.TransactionID;
                    int transactionId = transaction.ID;
                    string type = transaction.TransactionType;
                    string vesselName = transaction.VesselName;

                    int productId = transaction.CurrencyId;
                    //Dropdown[] currency = CurrencyDDL(sales.TransactionType);
                    SelectList currencyDDL = new SelectList(currency2, "val", "name", productId);

                    string symbol = transaction.Products.Symbol;

                    string rate = transaction.Rate.ToString(GetRateFormat(rateDP));
                    int unit = transaction.Unit;

                    string encashmentRate = "";
                    if (transaction.EncashmentRate != null)
                    {
                        encashmentRate = Convert.ToDecimal(transaction.EncashmentRate).ToString(GetRateFormat(rateDP));
                    }

                    string crossRate = "";
                    if (transaction.CrossRate != null)
                    {
                        crossRate = Convert.ToDecimal(transaction.CrossRate).ToString(GetRateFormat(rateDP));
                    }

                    Dropdown[] paymentMode = PaymentModeDDL(productId);
                    SelectList paymentModeDDL = new SelectList(paymentMode, "val", "name", transaction.PaymentMode);

                    string disabledCheque = "disabled";
                    string disabledBankTranfer = "disabled";
                    if (transaction.PaymentMode == "Cheque")
                    {
                        disabledCheque = "";
                    }
                    else if (transaction.PaymentMode == "Bank Transfer")
                    {
                        disabledBankTranfer = "";
                    }

                    string chequeNo = "";
                    if (!string.IsNullOrEmpty(transaction.ChequeNo))
                    {
                        chequeNo = transaction.ChequeNo;
                    }

                    string bankTransferNo = "";
                    if (!string.IsNullOrEmpty(transaction.BankTransferNo))
                    {
                        bankTransferNo = transaction.BankTransferNo;
                    }

                    string amountLocal = FormValidationHelper.AmountFormatter(transaction.AmountLocal, sgdDp);
                    string amountForeign = FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal);

                    totalLocal += transaction.AmountLocal;
                    totalForeign += transaction.AmountForeign;

                    string denoCurrencyCode = "Currency";
                    string totalCalculatedForeign = "0.00";
                    string remainingForeign = "0.00";
                    string totalOrderForeign = "0.00";

                    if (transaction.SaleTransactionDenominations.Count > 0)
                    {
                        decimal foreignCalculated = 0;

                        foreach (SaleTransactionDenomination denomination in transaction.SaleTransactionDenominations)
                        {
                            DenominationsData denoData = new DenominationsData();

                            string denominationValue = "coins";
                            string pieces = "-";
                            if (denomination.Denomination != 0)
                            {
                                denominationValue = denomination.Denomination.ToString();
                                pieces = FormValidationHelper.AmountFormatter(Convert.ToDecimal(denomination.Pieces), 0);
                            }

                            string denoAmountForeign = FormValidationHelper.AmountFormatter(denomination.AmountForeign, transaction.Products.Decimal);

                            denoData.DenoId = denomination.ID.ToString();
                            denoData.DenominationValue = denominationValue;
                            denoData.Pieces = pieces;
                            denoData.AmountForeign = denoAmountForeign;
                            transactionData.Denominations.Add(denoData);

                            foreignCalculated += denomination.AmountForeign;
                        }

                        denoCurrencyCode = transaction.Products.CurrencyCode;
                        totalCalculatedForeign = FormValidationHelper.AmountFormatter(foreignCalculated, transaction.Products.Decimal);
                        remainingForeign = FormValidationHelper.AmountFormatter(transaction.AmountForeign - foreignCalculated, transaction.Products.Decimal);
                        totalOrderForeign = FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal);
                    }

                    transactionData.RowId = rowId.ToString();
                    transactionData.ID = transactionId;
                    transactionData.TransactionID = transactionID;
                    transactionData.Type = type;
                    transactionData.VesselName = vesselName;
                    transactionData.CurrencyDDL = currencyDDL;
                    transactionData.Symbol = symbol;
                    transactionData.Rate = rate;
                    transactionData.Unit = unit;
                    transactionData.EncashmentRate = encashmentRate;
                    transactionData.CrossRate = crossRate;
                    transactionData.PaymentModeDDL = paymentModeDDL;
                    transactionData.DisabledChequeNo = disabledCheque;
                    transactionData.ChequeNo = chequeNo;
                    transactionData.DisabledBankTransferNo = disabledBankTranfer;
                    transactionData.BankTransferNo = bankTransferNo;
                    transactionData.AmountLocal = amountLocal;
                    transactionData.AmountForeign = amountForeign;
                    transactionData.DenominationCurrencyCode = denoCurrencyCode;
                    transactionData.DenominationTotalCalculatedForeign = totalCalculatedForeign;
                    transactionData.DenominationRemainingForeign = remainingForeign;
                    transactionData.DenominationTotalOrderForeign = totalOrderForeign;
                    transactions.Add(transactionData);

                    rowId++;
                }

                ViewData["SaleTransactionsData"] = transactions;

                Product sgd = _productsModel.FindCurrencyCode("SGD");

                ViewData["TotalForeign"] = totalForeign.ToString(GetRateFormat(8));
                ViewData["TotalLocal"] = totalLocal.ToString(GetDecimalFormat(sgd.Decimal));

                ViewData["Sale"] = sales;
                ViewData["SaleId"] = sales.ID;
                ViewData["SaleTransactionType"] = sales.TransactionType;
                ViewData["Module"] = module;

                if (!string.IsNullOrEmpty(sales.DeliveryConfirmation))
                {
                    ViewData["DeliveryConfirmation"] = sales.DeliveryConfirmation.Split(',').ToList();
                }

                ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
                return View();
                #endregion
            }
            else if (oldData.Status == "Pending Cashier")
            {
                #region Pending Cashier

                foreach (string modelKey in ModelState.Keys)
                {
                    if (ModelState[modelKey].Errors.Count > 0)
                    {
                        ModelState[modelKey].Errors.Clear();
                    }
                }

                sales.ID = oldData.ID;
                sales.MemoID = oldData.MemoID;
                sales.CustomerParticularId = oldData.CustomerParticularId;
                sales.IssueDate = oldData.IssueDate;
                sales.CollectionDate = oldData.CollectionDate;
                sales.CollectionTime = oldData.CollectionTime;
                sales.CreatedBy = oldData.CreatedBy;
                sales.Users = oldData.Users;
                sales.Urgent = oldData.Urgent;
                sales.RequireDelivery = oldData.RequireDelivery;
                sales.BagNo = oldData.BagNo;
                sales.Remarks = oldData.Remarks;
                sales.CustomerRemarks = oldData.CustomerRemarks;
                sales.TransactionType = oldData.TransactionType;
                sales.Status = oldData.Status;
                sales.CashBank = oldData.CashBank;
                sales.DisapprovedReason = oldData.DisapprovedReason;
                sales.DeliveryConfirmation = oldData.DeliveryConfirmation;
                sales.TotalAmountForeign = oldData.TotalAmountForeign;
                sales.TotalAmountLocal = oldData.TotalAmountLocal;
                sales.SaleTransactions = oldData.SaleTransactions;

                if (!string.IsNullOrEmpty(sales.TransactionType))
                {
                    if (sales.TransactionType == "Buy" || sales.TransactionType == "Sell")
                    {
                        if (string.IsNullOrEmpty(form["sales.LocalPaymentMode"]))
                        {
                            ModelState.AddModelError("sales.LocalPaymentMode", "Local Payment Mode is required!");
                        }
                        else
                        {
                            string[] paymentModes = form["sales.LocalPaymentMode"].ToString().Split(',');

                            if (paymentModes.Length > 4)
                            {
                                ModelState.AddModelError("sales.LocalPaymentMode", "Maximum FOUR Payment Modes only!");
                            }
                            decimal totalAmount = 0;

                            if (form["sales.LocalPaymentMode"].ToString().Contains("Cash"))
                            {
                                ModelState cashAmountModel = ModelState["sales.CashAmount"];
                                cashAmountModel.Errors.Clear();

                                if (string.IsNullOrEmpty(form["sales.CashAmount"]))
                                {
                                    ModelState.AddModelError("sales.CashAmount", "Cash Amount is required!");
                                }
                                else
                                {
                                    bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.CashAmount"].ToString());

                                    if (!checkFormat)
                                    {
                                        ModelState.AddModelError("sales.CashAmount", "Cash Amount is not valid!");
                                    }
                                    else
                                    {
                                        sales.CashAmount = Convert.ToDecimal(form["sales.CashAmount"].ToString().Replace(",", ""));
                                        totalAmount += Convert.ToDecimal(sales.CashAmount);
                                    }
                                }
                            }

                            if (form["sales.LocalPaymentMode"].ToString().Contains("Cheque 1"))
                            {
                                ModelState Cheque1AmountModel = ModelState["sales.Cheque1Amount"];
                                Cheque1AmountModel.Errors.Clear();

                                if (string.IsNullOrEmpty(form["sales.Cheque1Amount"]))
                                {
                                    ModelState.AddModelError("sales.Cheque1Amount", "Cheque 1 Amount is required!");
                                }
                                else
                                {
                                    bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.Cheque1Amount"].ToString());

                                    if (!checkFormat)
                                    {
                                        ModelState.AddModelError("sales.Cheque1Amount", "Cheque 1 Amount is not valid!");
                                    }
                                    else
                                    {
                                        sales.Cheque1Amount = Convert.ToDecimal(form["sales.Cheque1Amount"].ToString().Replace(",", ""));
                                        totalAmount += Convert.ToDecimal(sales.Cheque1Amount);
                                    }
                                }
                            }

                            if (form["sales.LocalPaymentMode"].ToString().Contains("Cheque 2"))
                            {
                                ModelState Cheque2AmountModel = ModelState["sales.Cheque2Amount"];
                                Cheque2AmountModel.Errors.Clear();

                                if (string.IsNullOrEmpty(form["sales.Cheque2Amount"]))
                                {
                                    ModelState.AddModelError("sales.Cheque2Amount", "Cheque 2 Amount is required!");
                                }
                                else
                                {
                                    bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.Cheque2Amount"].ToString());

                                    if (!checkFormat)
                                    {
                                        ModelState.AddModelError("sales.Cheque2Amount", "Cheque 2 Amount is not valid!");
                                    }
                                    else
                                    {
                                        sales.Cheque2Amount = Convert.ToDecimal(form["sales.Cheque2Amount"].ToString().Replace(",", ""));
                                        totalAmount += Convert.ToDecimal(sales.Cheque2Amount);
                                    }
                                }
                            }

                            if (form["sales.LocalPaymentMode"].ToString().Contains("Cheque 3"))
                            {
                                ModelState Cheque3AmountModel = ModelState["sales.Cheque3Amount"];
                                Cheque3AmountModel.Errors.Clear();

                                if (string.IsNullOrEmpty(form["sales.Cheque3Amount"]))
                                {
                                    ModelState.AddModelError("sales.Cheque3Amount", "Cheque 3 Amount is required!");
                                }
                                else
                                {
                                    bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.Cheque3Amount"].ToString());

                                    if (!checkFormat)
                                    {
                                        ModelState.AddModelError("sales.Cheque3Amount", "Cheque 3 Amount is not valid!");
                                    }
                                    else
                                    {
                                        sales.Cheque3Amount = Convert.ToDecimal(form["sales.Cheque3Amount"].ToString().Replace(",", ""));
                                        totalAmount += Convert.ToDecimal(sales.Cheque3Amount);
                                    }
                                }
                            }

                            if (form["sales.LocalPaymentMode"].ToString().Contains("Bank Transfer"))
                            {
                                ModelState bankTransferAmountModel = ModelState["sales.BankTransferAmount"];
                                bankTransferAmountModel.Errors.Clear();

                                if (string.IsNullOrEmpty(form["sales.BankTransferAmount"]))
                                {
                                    ModelState.AddModelError("sales.BankTransferAmount", "Bank Transfer Amount is required!");
                                }
                                else
                                {
                                    bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(form["sales.BankTransferAmount"].ToString());

                                    if (!checkFormat)
                                    {
                                        ModelState.AddModelError("sales.BankTransferAmount", "Bank Transfer Amount is not valid!");
                                    }
                                    else
                                    {
                                        sales.BankTransferAmount = Convert.ToDecimal(form["sales.BankTransferAmount"].ToString().Replace(",", ""));
                                        totalAmount += Convert.ToDecimal(sales.BankTransferAmount);
                                    }
                                }
                            }

                            //Memo Balance Validation
                            ModelState memoBalModel = ModelState["sales.MemoBalance"];
                            memoBalModel.Errors.Clear();

                            if (string.IsNullOrEmpty(form["sales.MemoBalance"]))
                            {
                                ModelState.AddModelError("sales.MemoBalance", "Memo Balance is required!");
                            }
                            else
                            {
                                bool checkFormat = FormValidationHelper.AmountValidation(form["sales.MemoBalance"]);

                                if (!checkFormat)
                                {
                                    ModelState.AddModelError("sales.MemoBalance", "Memo Balance is not valid!");
                                }
                                else
                                {
                                    sales.MemoBalance = Convert.ToDecimal(form["sales.MemoBalance"]);
                                }
                            }

                            if (sales.MemoBalance != null)
                            {
                                totalAmount += Convert.ToDecimal(sales.MemoBalance);
                            }

                            if (totalAmount != sales.TotalAmountLocal)
                            {
                                ModelState.AddModelError("sales.LocalPaymentMode", "Local Payment Mode Amount and Total Amount (Local) not equal!");
                            }
                        }
                    }
                }

                List<string> transactionKeys = form.AllKeys.Where(e => e.Contains("Transaction_ID_")).ToList();

                foreach (string key in transactionKeys)
                {
                    string rowId = key.Split('_')[2];

                    if (string.IsNullOrEmpty(form["Transaction_PaymentMode_" + rowId]))
                    {
                        ModelState.AddModelError("Transaction_PaymentMode_" + rowId, "Payment Mode is not valid!");
                    }
                    else
                    {
                        if (form["Transaction_PaymentMode_" + rowId].ToString() == "Cheque")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_ChequeNo_" + rowId]))
                            {
                                //ModelState.AddModelError("Transaction_ChequeNo_" + rowId, "Cheque No. is required!");
                            }
                        }
                        else if (form["Transaction_PaymentMode_" + rowId].ToString() == "Bank Transfer")
                        {
                            if (string.IsNullOrEmpty(form["Transaction_BankTransferNo_" + rowId]))
                            {
                                //ModelState.AddModelError("Transaction_BankTransferNo_" + rowId, "Bank Transfer No. is not valid!");
                            }
                        }
                    }
                }

                //lock (LockObject)
                //{
                //check again the status
                //               Sale checkStatus = null;
                //               using (var context = new DataAccess.GreatEastForex())
                //               {
                //                   checkStatus = context.Sales.Where(e => e.ID == id).FirstOrDefault();
                //               }

                //int checkKey = 0;

                //               if (checkStatus != null)
                //               {
                //                   if (checkStatus.Status == "Pending Cashier")
                //                   {
                //                       checkKey = 1;
                //                   }
                //               }
                //               else
                //               {
                //                   //the status is not same already.
                //                   TempData["Result"] = "danger|An error occured while saving sale record! Please submit again!";
                //                   return RedirectToAction("Listing", module, new { @page = page });
                //               }

                //if (checkKey == 1)
                //{
                if (ModelState.IsValid)
                {
                    try
                    {
                        if (sales.TransactionType == "Buy" || sales.TransactionType == "Sell")
                        {
                            sales.LocalPaymentMode = form["sales.LocalPaymentMode"].ToString();
                        }

                        if (SubmitType != "SaveChanges")
                        {
                            sales.Status = "Completed";
                            sales.LastApprovalOn = DateTime.Now;
                        }

                        bool result = _salesModel.Update(sales.ID, sales);
                        DateTime CheckUpdateTime = sales.LastApprovalOn;

                        if (result)
                        {
                            //Get the status check again
                            Sale CheckStatus = null;
                            using (var context = new DataAccess.GreatEastForex())
                            {
                                CheckStatus = context.Sales.Where(e => e.ID == id).FirstOrDefault();
                            }
                            var CheckError = false;

                            if (CheckStatus != null)
                            {
                                if (CheckUpdateTime != CheckStatus.LastApprovalOn)
                                {
                                    CheckError = true;
                                }
                            }

                            if (!CheckError)
                            {
                                //Update Transaction Payment Mode
                                bool hasUpdateTransaction = false;

                                bool add_productInventory = false;
                                bool deduct_productInventory = false;

                                bool add_inventory = false;
                                bool deduct_inventory = false;

                                List<TotalInAccountModel> ListOfTotalInAccount = new List<TotalInAccountModel>();
                                TotalInAccountModel SingleItem = new TotalInAccountModel();

                                List<Inventory> ListOfInventory = new List<Inventory>();
                                Inventory SingleInventory = new Inventory();

                                foreach (string key in transactionKeys)
                                {
                                    string rowId = key.Split('_')[2];

                                    int transactionId = Convert.ToInt32(form["Transaction_TransactionId_" + rowId]);

                                    SaleTransaction oldTransaction = _saleTransactionsModel.GetSingle(transactionId);

                                    if (!rollBack_saleTransactions.ContainsKey(oldTransaction.ID))
                                    {
                                        rollBack_saleTransactions.Add(oldTransaction.ID, new SaleTransaction()
                                        {
                                            ID = oldTransaction.ID,
                                            SaleId = oldTransaction.SaleId,
                                            TransactionID = oldTransaction.TransactionID,
                                            TransactionType = oldTransaction.TransactionType,
                                            CurrencyId = oldTransaction.CurrencyId,
                                            Rate = oldTransaction.Rate,
                                            EncashmentRate = oldTransaction.EncashmentRate,
                                            CrossRate = oldTransaction.CrossRate,
                                            Unit = oldTransaction.Unit,
                                            AmountForeign = oldTransaction.AmountForeign,
                                            AmountLocal = oldTransaction.AmountLocal,
                                            PaymentMode = oldTransaction.PaymentMode,
                                            ChequeNo = oldTransaction.ChequeNo,
                                            BankTransferNo = oldTransaction.BankTransferNo,
                                            VesselName = oldTransaction.VesselName
                                        });
                                    }

                                    oldTransaction.PaymentMode = form["Transaction_PaymentMode_" + rowId].ToString();
                                    if (oldTransaction.PaymentMode == "Pending" || oldTransaction.PaymentMode == "Cash")
                                    {
                                        oldTransaction.ChequeNo = null;
                                        oldTransaction.BankTransferNo = null;
                                    }
                                    else if (oldTransaction.PaymentMode == "Cheque")
                                    {
                                        oldTransaction.ChequeNo = form["Transaction_ChequeNo_" + rowId].ToString();
                                        oldTransaction.BankTransferNo = null;
                                    }
                                    else if (oldTransaction.PaymentMode == "Bank Transfer")
                                    {
                                        oldTransaction.ChequeNo = null;
                                        oldTransaction.BankTransferNo = form["Transaction_BankTransferNo_" + rowId].ToString();
                                    }

                                    bool transaction_update_result = _saleTransactionsModel.Update(oldTransaction.ID, oldTransaction);

                                    if (transaction_update_result)
                                    {
                                        if (!hasUpdateTransaction)
                                        {
                                            hasUpdateTransaction = true;
                                        }
                                    }

                                    if (SubmitType != "SaveChanges")
                                    {
                                        if (oldTransaction.TransactionType == "Buy")
                                        {
                                            Product addProducts = _productsModel.GetSingle(oldTransaction.CurrencyId);

                                            if (!rollBack_ProductInventories.ContainsKey(addProducts.ProductInventories[0].ID))
                                            {
                                                rollBack_ProductInventories.Add(addProducts.ProductInventories[0].ID, new ProductInventory()
                                                {
                                                    ID = addProducts.ProductInventories[0].ID,
                                                    ProductId = addProducts.ProductInventories[0].ProductId,
                                                    TotalInAccount = addProducts.ProductInventories[0].TotalInAccount,
                                                    CreatedOn = addProducts.ProductInventories[0].CreatedOn,
                                                    UpdatedOn = addProducts.ProductInventories[0].UpdatedOn,
                                                    IsDeleted = addProducts.ProductInventories[0].IsDeleted
                                                });
                                            }

                                            SingleItem = new TotalInAccountModel();

                                            SingleItem.id = addProducts.ProductInventories[0].ID;
                                            SingleItem.Amount = oldTransaction.AmountForeign;
                                            SingleItem.TransactionType = "plus";

                                            ListOfTotalInAccount.Add(SingleItem);

                                            //addProducts.ProductInventories[0].TotalInAccount += oldTransaction.AmountForeign;
                                            //bool result_addProductInventory = _productInventoriesModel.Update(addProducts.ProductInventories[0].ID, addProducts.ProductInventories[0]);

                                            //if (result_addProductInventory)
                                            //{
                                            //Inventory inventory = new Inventory();
                                            //inventory.ProductId = addProducts.ID;
                                            //inventory.Type = "Add";
                                            //inventory.Amount = oldTransaction.AmountForeign;
                                            //inventory.Description = "Sale Transaction [MemoID: " + sales.MemoID + "]";

                                            SingleInventory = new Inventory();
                                            SingleInventory.ProductId = addProducts.ID;
                                            SingleInventory.Type = "Add";
                                            SingleInventory.Amount = oldTransaction.AmountForeign;
                                            SingleInventory.Description = "Sale Transaction [MemoID: " + sales.MemoID + "]";

                                            ListOfInventory.Add(SingleInventory);

                                            //bool result_inventory = _inventoriesModel.Add(inventory);

                                            //if (result_inventory)
                                            //{
                                            //rollBack_Inventories.Add(SingleInventory.ID);

                                            //if (!add_inventory)
                                            //{
                                            //	add_inventory = true;
                                            //}
                                            //}

                                            //if (!add_productInventory)
                                            //{
                                            //	add_productInventory = true;
                                            //}
                                            //}

                                            Product deductProducts = _productsModel.FindCurrencyCode("SGD");

                                            if (!rollBack_ProductInventories.ContainsKey(deductProducts.ProductInventories[0].ID))
                                            {
                                                rollBack_ProductInventories.Add(deductProducts.ProductInventories[0].ID, new ProductInventory()
                                                {
                                                    ID = deductProducts.ProductInventories[0].ID,
                                                    ProductId = deductProducts.ProductInventories[0].ProductId,
                                                    TotalInAccount = deductProducts.ProductInventories[0].TotalInAccount,
                                                    CreatedOn = deductProducts.ProductInventories[0].CreatedOn,
                                                    UpdatedOn = deductProducts.ProductInventories[0].UpdatedOn,
                                                    IsDeleted = deductProducts.ProductInventories[0].IsDeleted
                                                });
                                            }

                                            //deductProducts.ProductInventories[0].TotalInAccount -= oldTransaction.AmountLocal;
                                            //bool result_deductProductInventory = _productInventoriesModel.Update(deductProducts.ProductInventories[0].ID, deductProducts.ProductInventories[0]);

                                            //if (result_deductProductInventory)
                                            //{
                                            //Inventory inventory = new Inventory();
                                            //inventory.ProductId = deductProducts.ID;
                                            //inventory.Type = "Deduct";
                                            //inventory.Amount = oldTransaction.AmountLocal;
                                            //inventory.Description = "Sale Transaction [MemoID: " + sales.MemoID + "]";
                                            //bool result_inventory = _inventoriesModel.Add(inventory);

                                            SingleItem = new TotalInAccountModel();

                                            SingleItem.id = deductProducts.ProductInventories[0].ID;
                                            SingleItem.Amount = oldTransaction.AmountLocal;
                                            SingleItem.TransactionType = "minus";

                                            ListOfTotalInAccount.Add(SingleItem);

                                            SingleInventory = new Inventory();
                                            SingleInventory.ProductId = deductProducts.ID;
                                            SingleInventory.Type = "Deduct";
                                            SingleInventory.Amount = oldTransaction.AmountLocal;
                                            SingleInventory.Description = "Sale Transaction [MemoID: " + sales.MemoID + "]";

                                            ListOfInventory.Add(SingleInventory);

                                            //if (result_inventory)
                                            //{
                                            //	rollBack_Inventories.Add(inventory.ID);

                                            //	if (!deduct_inventory)
                                            //	{
                                            //		deduct_inventory = true;
                                            //	}
                                            //}

                                            //if (!deduct_productInventory)
                                            //{
                                            //	deduct_productInventory = true;
                                            //}
                                            //}
                                        }
                                        else
                                        {
                                            Product deductProducts = _productsModel.GetSingle(oldTransaction.CurrencyId);

                                            if (!rollBack_ProductInventories.ContainsKey(deductProducts.ProductInventories[0].ID))
                                            {
                                                rollBack_ProductInventories.Add(deductProducts.ProductInventories[0].ID, new ProductInventory()
                                                {
                                                    ID = deductProducts.ProductInventories[0].ID,
                                                    ProductId = deductProducts.ProductInventories[0].ProductId,
                                                    TotalInAccount = deductProducts.ProductInventories[0].TotalInAccount,
                                                    CreatedOn = deductProducts.ProductInventories[0].CreatedOn,
                                                    UpdatedOn = deductProducts.ProductInventories[0].UpdatedOn,
                                                    IsDeleted = deductProducts.ProductInventories[0].IsDeleted
                                                });
                                            }

                                            SingleItem = new TotalInAccountModel();
                                            SingleItem.id = deductProducts.ProductInventories[0].ID;
                                            SingleItem.Amount = oldTransaction.AmountForeign;
                                            SingleItem.TransactionType = "minus";

                                            ListOfTotalInAccount.Add(SingleItem);

                                            //deductProducts.ProductInventories[0].TotalInAccount -= oldTransaction.AmountForeign;
                                            //bool result_deductProductInventory = _productInventoriesModel.Update(deductProducts.ProductInventories[0].ID, deductProducts.ProductInventories[0]);

                                            //if (result_deductProductInventory)
                                            //{
                                            SingleInventory = new Inventory();
                                            SingleInventory.ProductId = deductProducts.ID;
                                            SingleInventory.Type = "Deduct";
                                            SingleInventory.Amount = oldTransaction.AmountForeign;
                                            SingleInventory.Description = "Sale Transaction [MemoID: " + sales.MemoID + "]";
                                            //bool result_inventory = _inventoriesModel.Add(inventory);

                                            ListOfInventory.Add(SingleInventory);

                                            //if (result_inventory)
                                            //{
                                            //	rollBack_Inventories.Add(inventory.ID);

                                            //	if (!deduct_inventory)
                                            //	{
                                            //		deduct_inventory = true;
                                            //	}
                                            //}

                                            //if (!deduct_productInventory)
                                            //{
                                            //	deduct_productInventory = true;
                                            //}
                                            //}

                                            Product addProducts = _productsModel.FindCurrencyCode("SGD");

                                            if (!rollBack_ProductInventories.ContainsKey(addProducts.ProductInventories[0].ID))
                                            {
                                                rollBack_ProductInventories.Add(addProducts.ProductInventories[0].ID, new ProductInventory()
                                                {
                                                    ID = addProducts.ProductInventories[0].ID,
                                                    ProductId = addProducts.ProductInventories[0].ProductId,
                                                    TotalInAccount = addProducts.ProductInventories[0].TotalInAccount,
                                                    CreatedOn = addProducts.ProductInventories[0].CreatedOn,
                                                    UpdatedOn = addProducts.ProductInventories[0].UpdatedOn,
                                                    IsDeleted = addProducts.ProductInventories[0].IsDeleted
                                                });
                                            }

                                            SingleItem = new TotalInAccountModel();
                                            SingleItem.id = addProducts.ProductInventories[0].ID;
                                            SingleItem.Amount = oldTransaction.AmountLocal;
                                            SingleItem.TransactionType = "plus";

                                            ListOfTotalInAccount.Add(SingleItem);

                                            //addProducts.ProductInventories[0].TotalInAccount += oldTransaction.AmountLocal;
                                            //bool result_addProductInventory = _productInventoriesModel.Update(addProducts.ProductInventories[0].ID, addProducts.ProductInventories[0]);

                                            //if (result_addProductInventory)
                                            //{
                                            SingleInventory = new Inventory();
                                            SingleInventory.ProductId = addProducts.ID;
                                            SingleInventory.Type = "Add";
                                            SingleInventory.Amount = oldTransaction.AmountLocal;
                                            SingleInventory.Description = "Sale Transaction [MemoID: " + sales.MemoID + "]";
                                            //bool result_inventory = _inventoriesModel.Add(inventory);

                                            ListOfInventory.Add(SingleInventory);

                                            //if (result_inventory)
                                            //{
                                            //	rollBack_Inventories.Add(inventory.ID);

                                            //	if (!add_inventory)
                                            //	{
                                            //		add_inventory = true;
                                            //	}
                                            //}

                                            //if (!add_productInventory)
                                            //{
                                            //	add_productInventory = true;
                                            //}
                                            //}
                                        }
                                    }
                                }

                                var GetSalesStatus = _salesModel.GetSingle(sales.ID);

                                if (GetSalesStatus != null)
                                {
                                    if (CheckUpdateTime == GetSalesStatus.LastApprovalOn)
                                    {
                                        foreach (TotalInAccountModel total in ListOfTotalInAccount)
                                        {
                                            SingleInventory = new Inventory();
                                            if (total.TransactionType == "plus")
                                            {
                                                bool result_addProductInventory = _productInventoriesModel.Update2(total.id, total.Amount, total.TransactionType);

                                                if (result_addProductInventory)
                                                {
                                                    add_productInventory = true;
                                                    var ProductFinalAmount = _productInventoriesModel.GetSingle(total.id).TotalInAccount;
                                                    if (ListOfInventory.Count > 0)
                                                    {
                                                        if (ListOfInventory.Where(e => e.ProductId == total.id && e.Type == "Add" && e.Amount == total.Amount && e.ID == 0).FirstOrDefault() != null)
                                                        {
                                                            SingleInventory = ListOfInventory.Where(e => e.ProductId == total.id && e.Type == "Add" && e.Amount == total.Amount && e.ID == 0).FirstOrDefault();
                                                            SingleInventory.Description = SingleInventory.Description + " [After Bal: " + ProductFinalAmount + "]";
                                                            bool result_inventory = _inventoriesModel.Add(SingleInventory);

                                                            if (result_inventory)
                                                            {
                                                                add_inventory = true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else if (total.TransactionType == "minus")
                                            {
                                                bool result_deductProductInventory = _productInventoriesModel.Update2(total.id, total.Amount, total.TransactionType);

                                                if (result_deductProductInventory)
                                                {
                                                    deduct_productInventory = true;
                                                    var ProductFinalAmount = _productInventoriesModel.GetSingle(total.id).TotalInAccount;
                                                    if (ListOfInventory.Count > 0)
                                                    {
                                                        if (ListOfInventory.Where(e => e.ProductId == total.id && e.Type == "Deduct" && e.Amount == total.Amount && e.ID == 0).FirstOrDefault() != null)
                                                        {
                                                            SingleInventory = ListOfInventory.Where(e => e.ProductId == total.id && e.Type == "Deduct" && e.Amount == total.Amount && e.ID == 0).FirstOrDefault();
                                                            SingleInventory.Description = SingleInventory.Description + " [After Bal: " + ProductFinalAmount + "]";
                                                            bool result_inventory = _inventoriesModel.Add(SingleInventory);

                                                            if (result_inventory)
                                                            {
                                                                deduct_inventory = true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                        int userid = Convert.ToInt32(Session["UserId"]);
                                        string tableAffected = "Sales";
                                        string description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Approved Sale [" + sales.MemoID + "] " + "Status: " + "[ " + OldDataStatus + " - " + sales.Status + " ]";
                                        string ActionType = "Approve";
                                        string approvallog = "[" + Session["Username"].ToString() + "] Approved Sale [" + sales.MemoID + "]";

                                        if (SubmitType == "SaveChanges")
                                        {
                                            ActionType = "Update";
                                            approvallog = "[" + Session["Username"].ToString() + "] Updated Sale [" + sales.MemoID + "]";
                                            description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Updated Sale [" + sales.MemoID + "]";
                                        }

                                        bool sale_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);

                                        if (sale_log)
                                        {
                                            //Add Approval History
                                            bool approval_history = _approvalHistorysModel.Add("Sale", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), ActionType, approvallog);

                                            if (sales.TransactionType == "Buy")
                                            {
                                                //Check the hidden Value
                                                if (ViewData["PendingChequeLog"].ToString() == "1")
                                                {
                                                    bool chequelog = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque (Transaction Row) [" + sales.MemoID + "]");
                                                }

                                                //Check the hidden Value
                                                if (ViewData["PendingBankTransferLog"].ToString() == "1")
                                                {
                                                    bool banktransferlog = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Bank Transfer (Transaction Row) [" + sales.MemoID + "]");
                                                }
                                            }

                                            if (sales.TransactionType == "Sell")
                                            {
                                                //Check the hidden Value
                                                if (ViewData["PendingLocalCheque1Log"].ToString() == "1")
                                                {
                                                    bool localcheque1log = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque 1 (Local Payment) [" + sales.MemoID + "]");
                                                }

                                                //Check the hidden Value
                                                if (ViewData["PendingLocalCheque2Log"].ToString() == "1")
                                                {
                                                    bool localcheque2log = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque 2 (Local Payment) [" + sales.MemoID + "]");
                                                }

                                                //Check the hidden Value
                                                if (ViewData["PendingLocalCheque3Log"].ToString() == "1")
                                                {
                                                    bool localcheque3log = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Cheque 3 (Local Payment) [" + sales.MemoID + "]");
                                                }

                                                //Check the hidden Value
                                                if (ViewData["PendingLocalBankTransferLog"].ToString() == "1")
                                                {
                                                    bool localbanktransferlog = _approvalHistorysModel.Add("Sale_TransactionItem", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Update", "[" + Session["Username"].ToString() + "] Checked Transaction Bank Transfer (Local Payment) [" + sales.MemoID + "]");
                                                }
                                            }
                                        }

                                        if (hasUpdateTransaction)
                                        {
                                            userid = Convert.ToInt32(Session["UserId"]);
                                            tableAffected = "SaleTransactions";
                                            description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Approved Sale Transactions [" + sales.MemoID + "]";

                                            if (SubmitType == "SaveChanges")
                                            {
                                                description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Updated Sale Transactions [" + sales.MemoID + "]";
                                            }

                                            bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                        }

                                        if (add_productInventory)
                                        {
                                            userid = Convert.ToInt32(Session["UserId"]);
                                            tableAffected = "ProductInventories";
                                            description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Added Product Inventories [" + sales.MemoID + "]";

                                            bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                        }

                                        if (add_inventory)
                                        {
                                            userid = Convert.ToInt32(Session["UserId"]);
                                            tableAffected = "Inventories";
                                            description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Added Inventories [" + sales.MemoID + "]";

                                            bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                        }

                                        if (deduct_productInventory)
                                        {
                                            userid = Convert.ToInt32(Session["UserId"]);
                                            tableAffected = "ProductInventories";
                                            description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Deducted Product Inventories [" + sales.MemoID + "]";

                                            bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                        }

                                        if (deduct_inventory)
                                        {
                                            userid = Convert.ToInt32(Session["UserId"]);
                                            tableAffected = "Inventories";
                                            description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Deducted Inventories [" + sales.MemoID + "]";

                                            bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                        }

                                        if (SubmitType != "SaveChanges")
                                        {
                                            TempData["Result"] = "success|" + sales.MemoID + " has been successfully approved!";
                                            //TempData.Add("Result", "success|" + sales.MemoID + " has been successfully approved!");
                                        }
                                        else
                                        {
                                            TempData["Result"] = "success|" + sales.MemoID + " has been successfully updated!";
                                            //TempData.Add("Result", "success|" + sales.MemoID + " has been successfully updated!");
                                        }

                                        return RedirectToAction("Listing", module, new { @page = page });
                                    }
                                    else
                                    {
                                        TempData["Result"] = "danger| This record is been updated by someone.";
                                    }
                                }
                                else
                                {
                                    TempData["Result"] = "danger| This record is been updated by someone.";
                                }
                            }
                            else
                            {
                                TempData["Result"] = "danger| This record is been updated by someone.";
                            }
                        }
                        else
                        {
                            if (SubmitType != "SaveChanges")
                            {
                                TempData["Result"] = "danger|An error occured while approving sale record!";
                                //TempData.Add("Result", "danger|An error occured while approving sale record!");
                            }
                            else
                            {
                                TempData["Result"] = "danger|An error occured while updating sale record!";
                                //TempData.Add("Result", "danger|An error occured while updating sale record!");
                            }
                        }
                    }
                    catch (DbUpdateConcurrencyException e)
                    {
                        TempData["Result"] = "danger|Operation failed because another user has updated this [" + sales.MemoID + "] record. Your changes have been lost. Please review their changes before trying again.";
                        return RedirectToAction("Listing", module, new { @page = page });
                    }
                    catch (DbUpdateException e)
                    {
                        if (e.ToString().Contains("was deadlocked on lock resources with another process and has been chosen as the deadlock victim"))
                        {
                            //Roll back sale
                            _salesModel.Update(rollBack_Sale.ID, rollBack_Sale);

                            //Role back Transactions
                            foreach (int key in rollBack_saleTransactions.Keys)
                            {
                                _saleTransactionsModel.Update(key, rollBack_saleTransactions[key]);
                            }

                            //Roll back product inventories
                            foreach (int key in rollBack_ProductInventories.Keys)
                            {
                                _productInventoriesModel.Update(key, rollBack_ProductInventories[key]);
                            }

                            //Roll back Inventories
                            foreach (int key in rollBack_Inventories)
                            {
                                _inventoriesModel.Delete(key);
                            }

                            TempData["Result"] = "danger|An error occured while saving sale record! Please submit again!";
                            //TempData.Add("Result", "danger|An error occured while saving sale record! Please submit again!");
                            return RedirectToAction("Listing", module, new { @page = page });
                        }
                        else
                        {
                            throw;
                        }
                    }
                    catch (Exception e)
                    {

                        //Roll back sale
                        _salesModel.Update(rollBack_Sale.ID, rollBack_Sale);

                        //Role back Transactions
                        foreach (int key in rollBack_saleTransactions.Keys)
                        {
                            _saleTransactionsModel.Update(key, rollBack_saleTransactions[key]);
                        }

                        //Roll back product inventories
                        foreach (int key in rollBack_ProductInventories.Keys)
                        {
                            _productInventoriesModel.Update(key, rollBack_ProductInventories[key]);
                        }

                        //Roll back Inventories
                        foreach (int key in rollBack_Inventories)
                        {
                            _inventoriesModel.Delete(key);
                        }

                        TempData["Result"] = "danger|An error occured while saving sale record! " + e.Message + "!";
                        //TempData.Add("Result", 
                    }
                }
                else
                {
                    TempData["Result"] = "danger|There is something wrong in the form!";
                    //TempData.Add("Result", "danger|There is something wrong in the form!");
                }
                //}
                //else
                //{
                //the status is not same already.
                //	TempData["Result"] = "danger|Operation failed because another user has updated this [" + sales.MemoID + "] record. Your changes have been lost. Please review their changes before trying again.";
                //	return RedirectToAction("Listing", module, new { @page = page });
                //}
                //}

                Dropdown[] customerDDL = CustomerDDL(sales.CustomerParticularId);
                ViewData["CustomerDropdown"] = new SelectList(customerDDL, "val", "name", sales.CustomerParticularId);

                CustomerParticular customer = _customerParticularsModel.GetSingle(sales.CustomerParticularId);

                ViewData["CustomerContact"] = "";
                ViewData["CustomerAddress"] = "";
                if (customer != null)
                {
                    string contact = "";
                    string address = "";

                    if (customer.CustomerType == "Corporate & Trading Company")
                    {
                        contact = customer.Company_TelNo;
                        if (!string.IsNullOrEmpty(customer.Company_BusinessAddress2))
                        {
                            address = customer.Company_BusinessAddress1 + ", " + customer.Company_BusinessAddress2 + ", " + customer.Company_PostalCode;
                        }
                        else
                        {
                            address = customer.Company_BusinessAddress1 + ", " + customer.Company_PostalCode;
                        }
                    }
                    else
                    {
                        contact = customer.Natural_ContactNoM;
                        address = customer.Natural_PermanentAddress;
                    }

                    ViewData["CustomerContact"] = contact;
                    ViewData["CustomerAddress"] = address;
                }

                //Dropdown[] collectionTimeDDL = CollectionTimeDDL();
                //ViewData["CollectionTimeDropdown"] = new SelectList(collectionTimeDDL, "val", "name", sales.CollectionTime);

                ViewData["NonUrgentRadio"] = "";
                ViewData["UrgentRadio"] = "";
                if (sales.Urgent == "Non-Urgent")
                {
                    ViewData["NonUrgentRadio"] = "checked";
                }
                else
                {
                    ViewData["UrgentRadio"] = "checked";
                }

                ViewData["RequireDeliveryCheckbox"] = "";
                if (sales.RequireDelivery == "Yes")
                {
                    ViewData["RequireDeliveryCheckbox"] = "checked";
                }

                ViewData["TransactionTypeBuyRadio"] = "";
                ViewData["TransactionTypeSellRadio"] = "";
                ViewData["TransactionTypeEncashmentRadio"] = "";
                ViewData["TransactionTypeSwapRadio"] = "";
                ViewData["TransactionTypeCrossCurrencyRadio"] = "";

                if (!string.IsNullOrEmpty(sales.TransactionType))
                {
                    if (sales.TransactionType == "Buy")
                    {
                        ViewData["TransactionTypeBuyRadio"] = "checked";
                    }
                    else if (sales.TransactionType == "Sell")
                    {
                        ViewData["TransactionTypeSellRadio"] = "checked";
                    }
                    else if (sales.TransactionType == "Encashment")
                    {
                        ViewData["TransactionTypeEncashmentRadio"] = "checked";
                    }
                    else if (sales.TransactionType == "Swap")
                    {
                        ViewData["TransactionTypeSwapRadio"] = "checked";
                    }
                    else
                    {
                        ViewData["TransactionTypeCrossCurrencyRadio"] = "checked";
                    }
                }

                ViewData["LocalPaymentModeCashCheckbox"] = "";
                ViewData["LocalPaymentModeCheque1Checkbox"] = "";
                ViewData["LocalPaymentModeCheque2Checkbox"] = "";
                ViewData["LocalPaymentModeCheque3Checkbox"] = "";
                ViewData["LocalPaymentModeBankTransferCheckbox"] = "";
                if (!string.IsNullOrEmpty(form["sales.LocalPaymentMode"]))
                {
                    if (form["sales.LocalPaymentMode"].Contains("Cash"))
                    {
                        ViewData["LocalPaymentModeCashCheckbox"] = "checked";
                    }

                    if (form["sales.LocalPaymentMode"].Contains("Cheque 1"))
                    {
                        ViewData["LocalPaymentModeCheque1Checkbox"] = "checked";
                    }

                    if (form["sales.LocalPaymentMode"].Contains("Cheque 2"))
                    {
                        ViewData["LocalPaymentModeCheque2Checkbox"] = "checked";
                    }

                    if (form["sales.LocalPaymentMode"].Contains("Cheque 3"))
                    {
                        ViewData["LocalPaymentModeCheque3Checkbox"] = "checked";
                    }

                    if (form["sales.LocalPaymentMode"].Contains("Bank Transfer"))
                    {
                        ViewData["LocalPaymentModeBankTransferCheckbox"] = "checked";
                    }
                }

                Dropdown[] cashBankDDL = LocalPaymentBankDDL(oldData.CashBank);
                ViewData["CashBankDropdown"] = new SelectList(cashBankDDL, "val", "name", sales.CashBank);

                Dropdown[] cheque1BankDDL = LocalPaymentBankDDL(oldData.Cheque1Bank);
                ViewData["Cheque1BankDropdown"] = new SelectList(cheque1BankDDL, "val", "name", sales.Cheque1Bank);

                Dropdown[] cheque2BankDDL = LocalPaymentBankDDL(oldData.Cheque2Bank);
                ViewData["Cheque2BankDropdown"] = new SelectList(cheque2BankDDL, "val", "name", sales.Cheque2Bank);

                Dropdown[] cheque3BankDDL = LocalPaymentBankDDL(oldData.Cheque3Bank);
                ViewData["Cheque3BankDropdown"] = new SelectList(cheque3BankDDL, "val", "name", sales.Cheque3Bank);

                Dropdown[] bankTransferBankDDL = LocalPaymentBankDDL(oldData.BankTransferBank);
                ViewData["BankTransferBankDropdown"] = new SelectList(bankTransferBankDDL, "val", "name", sales.BankTransferBank);

                IList<SaleTransactionsData> transactions = new List<SaleTransactionsData>();

                int _rowId = 1;

                decimal totalLocal = 0;
                decimal totalForeign = 0;
                Dropdown[] currency2 = CurrencyDDL(sales.TransactionType);
                foreach (string key in transactionKeys)
                {
                    string rowId = key.Split('_')[2];

                    int _transactionId = Convert.ToInt32(form["Transaction_TransactionId_" + rowId]);

                    SaleTransaction transaction = _saleTransactionsModel.GetSingle(_transactionId);
                    transaction.PaymentMode = form["Transaction_PaymentMode_" + rowId];
                    if (transaction.PaymentMode == "Pending" || transaction.PaymentMode == "Cash")
                    {
                        transaction.ChequeNo = null;
                        transaction.BankTransferNo = null;
                    }
                    else if (transaction.PaymentMode == "Cheque")
                    {
                        transaction.ChequeNo = form["Transaction_ChequeNo_" + rowId];
                        transaction.BankTransferNo = null;
                    }
                    else if (transaction.PaymentMode == "Bank Transfer")
                    {
                        transaction.ChequeNo = null;
                        transaction.BankTransferNo = form["Transaction_BankTransferNo_" + rowId];
                    }

                    SaleTransactionsData transactionData = new SaleTransactionsData();
                    transactionData.Denominations = new List<DenominationsData>();

                    int transactionId = transaction.ID;
                    string transactionID = transaction.TransactionID;
                    string type = transaction.TransactionType;
                    string vesselName = transaction.VesselName;

                    int productId = transaction.CurrencyId;
                    //Dropdown[] currency = CurrencyDDL(sales.TransactionType);
                    SelectList currencyDDL = new SelectList(currency2, "val", "name", productId);

                    string symbol = transaction.Products.Symbol;

                    string rate = transaction.Rate.ToString(GetRateFormat(rateDP));
                    int unit = transaction.Unit;

                    string encashmentRate = "";
                    if (transaction.EncashmentRate != null)
                    {
                        encashmentRate = Convert.ToDecimal(transaction.EncashmentRate).ToString(GetRateFormat(rateDP));
                    }

                    string crossRate = "";
                    if (transaction.CrossRate != null)
                    {
                        crossRate = Convert.ToDecimal(transaction.CrossRate).ToString(GetRateFormat(rateDP));
                    }

                    Dropdown[] paymentMode = PaymentModeDDL(productId);
                    SelectList paymentModeDDL = new SelectList(paymentMode, "val", "name", transaction.PaymentMode);

                    string disabledCheque = "disabled";
                    string disabledBankTranfer = "disabled";
                    if (transaction.PaymentMode == "Cheque")
                    {
                        disabledCheque = "";
                    }
                    else if (transaction.PaymentMode == "Bank Transfer")
                    {
                        disabledBankTranfer = "";
                    }

                    string chequeNo = "";
                    if (!string.IsNullOrEmpty(transaction.ChequeNo))
                    {
                        chequeNo = transaction.ChequeNo;
                    }

                    string bankTransferNo = "";
                    if (!string.IsNullOrEmpty(transaction.BankTransferNo))
                    {
                        bankTransferNo = transaction.BankTransferNo;
                    }

                    string amountLocal = FormValidationHelper.AmountFormatter(transaction.AmountLocal, sgdDp);
                    string amountForeign = FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal);

                    totalLocal += transaction.AmountLocal;
                    totalForeign += transaction.AmountForeign;

                    string denoCurrencyCode = "Currency";
                    string totalCalculatedForeign = "0.00";
                    string remainingForeign = "0.00";
                    string totalOrderForeign = "0.00";

                    if (transaction.SaleTransactionDenominations.Count > 0)
                    {
                        decimal foreignCalculated = 0;

                        foreach (SaleTransactionDenomination denomination in transaction.SaleTransactionDenominations)
                        {
                            DenominationsData denoData = new DenominationsData();

                            string denominationValue = "coins";
                            string pieces = "-";
                            if (denomination.Denomination != 0)
                            {
                                denominationValue = denomination.Denomination.ToString();
                                pieces = FormValidationHelper.AmountFormatter(Convert.ToDecimal(denomination.Pieces), 0);
                            }

                            string denoAmountForeign = FormValidationHelper.AmountFormatter(denomination.AmountForeign, transaction.Products.Decimal);

                            denoData.DenoId = denomination.ID.ToString();
                            denoData.DenominationValue = denominationValue;
                            denoData.Pieces = pieces;
                            denoData.AmountForeign = denoAmountForeign;
                            transactionData.Denominations.Add(denoData);

                            foreignCalculated += denomination.AmountForeign;
                        }

                        denoCurrencyCode = transaction.Products.CurrencyCode;
                        totalCalculatedForeign = FormValidationHelper.AmountFormatter(foreignCalculated, transaction.Products.Decimal);
                        remainingForeign = FormValidationHelper.AmountFormatter(transaction.AmountForeign - foreignCalculated, transaction.Products.Decimal);
                        totalOrderForeign = FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal);
                    }

                    transactionData.RowId = _rowId.ToString();
                    transactionData.ID = transactionId;
                    transactionData.TransactionID = transactionID;
                    transactionData.Type = type;
                    transactionData.VesselName = vesselName;
                    transactionData.CurrencyDDL = currencyDDL;
                    transactionData.Symbol = symbol;
                    transactionData.Rate = rate;
                    transactionData.Unit = unit;
                    transactionData.EncashmentRate = encashmentRate;
                    transactionData.CrossRate = crossRate;
                    transactionData.PaymentModeDDL = paymentModeDDL;
                    transactionData.DisabledChequeNo = disabledCheque;
                    transactionData.ChequeNo = chequeNo;
                    transactionData.DisabledBankTransferNo = disabledBankTranfer;
                    transactionData.BankTransferNo = bankTransferNo;
                    transactionData.AmountLocal = amountLocal;
                    transactionData.AmountForeign = amountForeign;
                    transactionData.DenominationCurrencyCode = denoCurrencyCode;
                    transactionData.DenominationTotalCalculatedForeign = totalCalculatedForeign;
                    transactionData.DenominationRemainingForeign = remainingForeign;
                    transactionData.DenominationTotalOrderForeign = totalOrderForeign;
                    transactions.Add(transactionData);

                    _rowId++;
                }

                ViewData["SaleTransactionsData"] = transactions;

                Product sgd = _productsModel.FindCurrencyCode("SGD");

                ViewData["TotalForeign"] = totalForeign.ToString(GetRateFormat(8));
                ViewData["TotalLocal"] = totalLocal.ToString(GetDecimalFormat(sgd.Decimal));

                ViewData["Sale"] = sales;
                ViewData["SaleId"] = sales.ID;
                ViewData["SaleTransactionType"] = sales.TransactionType;
                ViewData["Module"] = module;

                if (!string.IsNullOrEmpty(sales.DeliveryConfirmation))
                {
                    ViewData["DeliveryConfirmation"] = sales.DeliveryConfirmation.Split(',').ToList();
                }

                ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
                return View();
                #endregion
            }
            else
            {
                TempData["Result"] = "danger|Operation failed because another user has updated this [" + oldData.MemoID + "] record. Your changes have been lost. Please review their changes before trying again.";
                return RedirectToAction("Listing", module, new { @page = page });
                //TempData["Result"] = "danger| Someone is updated this record or this sales is completed.";
                //return RedirectToAction("Edit", new { @id = id, @module = module });
            }
        }

        //POST: GetCustomerDetail
        [HttpPost]
        public string GetCustomerDetail(int cid)
        {
            string result = "";

            try
            {
                CustomerParticular customerParticulars = _customerParticularsModel.GetSingle(cid);

                if (customerParticulars != null)
                {
                    string contact = "";
                    string address = "";
                    string remarks = "";

                    if (customerParticulars.CustomerType == "Corporate & Trading Company")
                    {
                        contact = customerParticulars.Company_TelNo;
                        if (!string.IsNullOrEmpty(customerParticulars.Company_BusinessAddress2))
                        {
                            address = customerParticulars.Company_BusinessAddress1 + ", " + customerParticulars.Company_BusinessAddress2 + ", " + customerParticulars.Company_PostalCode;
                        }
                        else
                        {
                            address = customerParticulars.Company_BusinessAddress1 + ", " + customerParticulars.Company_PostalCode;
                        }

                    }
                    else
                    {
                        contact = customerParticulars.Natural_ContactNoM;
                        address = customerParticulars.Natural_PermanentAddress;
                    }

                    remarks = customerParticulars.Others[0].SalesRemarks;

                    if (!string.IsNullOrEmpty(remarks))
                    {
                        remarks = remarks.Replace("\r", "\\r").Replace("\n", "\\n");
                    }

                    result = "{\"Result\":true,\"CustomerContact\":\"" + contact + "\",\"CustomerAddress\":\"" + address + "\",\"CustomerRemarks\":\"" + remarks + "\"}";
                }
                else
                {
                    result = "{\"Result\":false,\"ErrorMessage\":\"Customer record not found!\"}";
                }
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: AddNewTransaction
        [HttpPost]
        public string AddNewTransaction(int cid, string type, int rowId)
        {
            string result = "";

            try
            {
                if (type == "Buy")
                {
                    #region Buy Transaction Type
                    ViewData["RowId"] = rowId;
                    ViewData["TransactionID"] = rowId.ToString().PadLeft(3, '0');

                    Dropdown[] currencyDDL = CurrencyDDL("Buy");
                    ViewData["CurrencyDropdown"] = new SelectList(currencyDDL, "val", "name");

                    int pid = Convert.ToInt32(currencyDDL[0].val);
                    Product products = _productsModel.GetSingle(pid);

                    ViewData["Symbol"] = products.Symbol;

                    //Check Custom Buy Rate
                    CustomerCustomRate customBuyRate = _customerCustomRatesModel.GetCustomerProductRate(cid, pid);

                    if (customBuyRate != null)
                    {
                        if (customBuyRate.BuyRate != null && customBuyRate.BuyRate != 0)
                        {
                            if (products.BuyRate != null && products.BuyRate != 0)
                            {
                                // Number(OriginalValue) * (Number(1) - Number(InputValue));
                                decimal FinalRate = Convert.ToDecimal(products.BuyRate) * (1 - Convert.ToDecimal(customBuyRate.BuyRate));
                                ViewData["TransactionRate"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                            }
                            else
                            {
                                if (products.AutomatedBuyRate != null && products.AutomatedBuyRate != 0)
                                {
                                    decimal FinalRate = Convert.ToDecimal(customBuyRate.BuyRate) * (1 - Convert.ToDecimal(products.AutomatedBuyRate));
                                    ViewData["TransactionRate"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                                }
                                else
                                {
                                    //Default Buy Rate, API Rate empty
                                    ViewData["TransactionRate"] = "0";
                                }
                            }
                        }
                        else
                        {
                            if (products.BuyRate != null && products.BuyRate != 0)
                            {
                                if (products.BuyRateAdjustment != null && products.BuyRateAdjustment != 0)
                                {
                                    decimal FinalRate = Convert.ToDecimal(products.BuyRate) * (1 - Convert.ToDecimal(products.BuyRateAdjustment));
                                    ViewData["TransactionRate"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                                }
                                else
                                {
                                    //No Product adjustment
                                    ViewData["TransactionRate"] = Convert.ToDecimal(products.BuyRate).ToString(GetRateFormat(rateDP));
                                }
                            }
                            else
                            {
                                if (products.AutomatedBuyRate != null && products.AutomatedBuyRate != 0)
                                {
                                    if (products.BuyRateAdjustment != null && products.BuyRateAdjustment != 0)
                                    {
                                        decimal FinalRate = Convert.ToDecimal(products.AutomatedBuyRate) * (1 - Convert.ToDecimal(products.BuyRateAdjustment));
                                        ViewData["TransactionRate"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                                    }
                                    else
                                    {
                                        ViewData["TransactionRate"] = Convert.ToDecimal(products.AutomatedBuyRate).ToString(GetRateFormat(rateDP));
                                    }
                                }
                                else
                                {
                                    ViewData["TransactionRate"] = "0"; //Get from internet rate
                                }
                            }
                        }
                    }
                    else
                    {
                        if (products.BuyRate != null && products.BuyRate != 0)
                        {
                            if (products.BuyRateAdjustment != null && products.BuyRateAdjustment != 0)
                            {
                                decimal FinalRate = Convert.ToDecimal(products.BuyRate) * (1 - Convert.ToDecimal(products.BuyRateAdjustment));
                                ViewData["TransactionRate"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                            }
                            else
                            {
                                //No Product adjustment
                                ViewData["TransactionRate"] = Convert.ToDecimal(products.BuyRate).ToString(GetRateFormat(rateDP));
                            }
                        }
                        else
                        {
                            if (products.AutomatedBuyRate != null && products.AutomatedBuyRate != 0)
                            {
                                if (products.BuyRateAdjustment != null && products.BuyRateAdjustment != 0)
                                {
                                    decimal FinalRate = Convert.ToDecimal(products.AutomatedBuyRate) * (1 - Convert.ToDecimal(products.BuyRateAdjustment));
                                    ViewData["TransactionRate"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                                }
                                else
                                {
                                    ViewData["TransactionRate"] = Convert.ToDecimal(products.AutomatedBuyRate).ToString(GetRateFormat(rateDP));
                                }
                            }
                            else
                            {
                                ViewData["TransactionRate"] = "0"; //Get from internet rate
                            }
                        }
                    }

                    ViewData["ProductUnit"] = products.Unit;

                    Dropdown[] paymentModeDDL = PaymentModeDDL(pid);
                    ViewData["PaymentModeDropdown"] = new SelectList(paymentModeDDL, "val", "name");

                    bool disableChequeNo = true;
                    bool disableBankTransferNo = true;

                    if (paymentModeDDL.FirstOrDefault().val == "Cheque")
                    {
                        disableChequeNo = false;
                    }
                    else if (paymentModeDDL.FirstOrDefault().val == "Bank Transfer")
                    {
                        disableBankTransferNo = false;
                    }

                    ViewData["DisableChequeNo"] = disableChequeNo;
                    ViewData["DisableBankTransferNo"] = disableBankTransferNo;

                    string view = "";

                    using (var sw = new StringWriter())
                    {
                        var viewResult = ViewEngines.Engines.FindPartialView(ControllerContext, "TransactionTypeBuy");
                        var viewContext = new ViewContext(ControllerContext, viewResult.View, ViewData, TempData, sw);
                        viewResult.View.Render(viewContext, sw);
                        viewResult.ViewEngine.ReleaseView(ControllerContext, viewResult.View);
                        view = sw.GetStringBuilder().ToString();
                    }

                    view = JsonConvert.SerializeObject(view);

                    result = "{\"Result\":\"true\",\"View\":" + view + "}";
                    #endregion
                }
                else if (type == "Sell")
                {
                    #region Sell Transaction Type
                    ViewData["RowId"] = rowId;
                    ViewData["TransactionID"] = rowId.ToString().PadLeft(3, '0');

                    Dropdown[] currencyDDL = CurrencyDDL("Sell");
                    ViewData["CurrencyDropdown"] = new SelectList(currencyDDL, "val", "name");

                    int pid = Convert.ToInt32(currencyDDL[0].val);
                    Product products = _productsModel.GetSingle(pid);

                    ViewData["Symbol"] = products.Symbol;

                    //Check Custom Sell Rate
                    CustomerCustomRate customSellRate = _customerCustomRatesModel.GetCustomerProductRate(cid, pid);

                    if (customSellRate != null)
                    {
                        if (customSellRate.SellRate != null && customSellRate.SellRate != 0)
                        {
                            if (products.SellRate != null && products.SellRate != 0)
                            {
                                // Number(OriginalValue) * (Number(1) + Number(InputValue));
                                decimal FinalRate = Convert.ToDecimal(products.SellRate) * (1 + Convert.ToDecimal(customSellRate.SellRate));
                                ViewData["TransactionRate"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                            }
                            else
                            {
                                if (products.SellRateAdjustment != null && products.SellRateAdjustment != 0)
                                {
                                    decimal FinalRate = Convert.ToDecimal(products.SellRate) * (1 + Convert.ToDecimal(customSellRate.SellRate));
                                    ViewData["TransactionRate"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                                }
                                else
                                {
                                    //Default Sell Rate, API Rate empty
                                    ViewData["TransactionRate"] = "0";
                                }
                            }
                        }
                        else
                        {
                            if (products.SellRate != null && products.SellRate != 0)
                            {
                                if (products.SellRateAdjustment != null && products.SellRateAdjustment != 0)
                                {
                                    decimal FinalRate = Convert.ToDecimal(products.SellRate) * (1 + Convert.ToDecimal(products.SellRateAdjustment));
                                    ViewData["TransactionRate"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                                }
                                else
                                {
                                    //No Product adjustment
                                    ViewData["TransactionRate"] = Convert.ToDecimal(products.SellRate).ToString(GetRateFormat(rateDP));
                                }
                            }
                            else
                            {
                                if (products.AutomatedSellRate != null && products.AutomatedSellRate != 0)
                                {
                                    if (products.SellRateAdjustment != null && products.SellRateAdjustment != 0)
                                    {
                                        decimal FinalRate = Convert.ToDecimal(products.AutomatedSellRate) * (1 + Convert.ToDecimal(products.SellRateAdjustment));
                                        ViewData["TransactionRate"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                                    }
                                    else
                                    {
                                        ViewData["TransactionRate"] = Convert.ToDecimal(products.AutomatedSellRate).ToString(GetRateFormat(rateDP));
                                    }
                                }
                                else
                                {
                                    ViewData["TransactionRate"] = "0"; //Get from internet rate
                                }
                            }
                        }
                    }
                    else
                    {
                        if (products.SellRate != null && products.SellRate != 0)
                        {
                            if (products.SellRateAdjustment != null && products.SellRateAdjustment != 0)
                            {
                                decimal FinalRate = Convert.ToDecimal(products.SellRate) * (1 + Convert.ToDecimal(products.SellRateAdjustment));
                                ViewData["TransactionRate"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                            }
                            else
                            {
                                //No Product adjustment
                                ViewData["TransactionRate"] = Convert.ToDecimal(products.SellRate).ToString(GetRateFormat(rateDP));
                            }
                        }
                        else
                        {
                            if (products.AutomatedSellRate != null && products.AutomatedSellRate != 0)
                            {
                                if (products.SellRateAdjustment != null && products.SellRateAdjustment != 0)
                                {
                                    decimal FinalRate = Convert.ToDecimal(products.AutomatedSellRate) * (1 + Convert.ToDecimal(products.SellRateAdjustment));
                                    ViewData["TransactionRate"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                                }
                                else
                                {
                                    ViewData["TransactionRate"] = Convert.ToDecimal(products.AutomatedSellRate).ToString(GetRateFormat(rateDP));
                                }
                            }
                            else
                            {
                                ViewData["TransactionRate"] = "0"; //Get from internet rate
                            }
                        }
                    }

                    //if (customSellRate != null)
                    //{
                    //	if (customSellRate.SellRate != null && customSellRate.SellRate != 0)
                    //	{
                    //		ViewData["TransactionRate"] = Convert.ToDecimal(customSellRate.SellRate).ToString(GetRateFormat(rateDP));
                    //	}
                    //	else
                    //	{
                    //		if (products.SellRate != null)
                    //		{
                    //			ViewData["TransactionRate"] = Convert.ToDecimal(products.SellRate).ToString(GetRateFormat(rateDP));
                    //		}
                    //		else
                    //		{
                    //			if (products.AutomatedSellRate != null)
                    //			{
                    //				ViewData["TransactionRate"] = Convert.ToDecimal(products.AutomatedSellRate).ToString(GetRateFormat(rateDP));
                    //			}
                    //			else
                    //			{
                    //				ViewData["TransactionRate"] = "0"; //Get from internet rate
                    //			}
                    //		}
                    //	}
                    //}
                    //else
                    //{
                    //	if (products.SellRate != null)
                    //	{
                    //		ViewData["TransactionRate"] = Convert.ToDecimal(products.SellRate).ToString(GetRateFormat(rateDP));
                    //	}
                    //	else
                    //	{
                    //		if (products.AutomatedSellRate != null)
                    //		{
                    //			ViewData["TransactionRate"] = Convert.ToDecimal(products.AutomatedSellRate).ToString(GetRateFormat(rateDP));
                    //		}
                    //		else
                    //		{
                    //			ViewData["TransactionRate"] = "0"; //Get from internet rate
                    //		}
                    //	}
                    //}

                    ViewData["ProductUnit"] = products.Unit;

                    Dropdown[] paymentModeDDL = PaymentModeDDL(pid);
                    ViewData["PaymentModeDropdown"] = new SelectList(paymentModeDDL, "val", "name");

                    bool disableChequeNo = true;
                    bool disableBankTransferNo = true;

                    if (paymentModeDDL.FirstOrDefault().val == "Cheque")
                    {
                        disableChequeNo = false;
                    }
                    else if (paymentModeDDL.FirstOrDefault().val == "Bank Transfer")
                    {
                        disableBankTransferNo = false;
                    }

                    ViewData["DisableChequeNo"] = disableChequeNo;
                    ViewData["DisableBankTransferNo"] = disableBankTransferNo;

                    string view = "";

                    using (var sw = new StringWriter())
                    {
                        var viewResult = ViewEngines.Engines.FindPartialView(ControllerContext, "TransactionTypeSell");
                        var viewContext = new ViewContext(ControllerContext, viewResult.View, ViewData, TempData, sw);
                        viewResult.View.Render(viewContext, sw);
                        viewResult.ViewEngine.ReleaseView(ControllerContext, viewResult.View);
                        view = sw.GetStringBuilder().ToString();
                    }

                    view = JsonConvert.SerializeObject(view);

                    result = "{\"Result\":\"true\",\"View\":" + view + "}";
                    #endregion
                }
                else if (type == "Encashment")
                {
                    #region Encashment Transaction Type
                    //Sell Type
                    ViewData["RowIdSell"] = rowId;
                    ViewData["TransactionIDSell"] = rowId.ToString().PadLeft(3, '0');

                    Dropdown[] currencyDDL = CurrencyDDL("Encashment");
                    ViewData["CurrencyDropdownSell"] = new SelectList(currencyDDL, "val", "name");

                    int pidSell = Convert.ToInt32(currencyDDL[0].val);
                    Product productSell = _productsModel.GetSingle(pidSell);
                    CustomerCustomRate customRateSell = _customerCustomRatesModel.GetCustomerProductRate(cid, pidSell);

                    ViewData["SymbolSell"] = productSell.Symbol;

                    if (customRateSell != null)
                    {
                        if (customRateSell.EncashmentRate != null && customRateSell.EncashmentRate != 0)
                        {
                            ViewData["EncashmentRateSell"] = customRateSell.EncashmentRate.Value.ToString(GetRateFormat(rateDP));
                        }
                        else
                        {
                            ViewData["EncashmentRateSell"] = productSell.EncashmentRate.ToString(GetRateFormat(rateDP));
                        }
                    }
                    else
                    {
                        ViewData["EncashmentRateSell"] = productSell.EncashmentRate.ToString(GetRateFormat(rateDP));
                    }

                    //Check Custom Sell Rate
                    if (customRateSell != null)
                    {
                        if (customRateSell.SellRate != null && customRateSell.SellRate != 0)
                        {
                            if (productSell.SellRate != null && productSell.SellRate != 0)
                            {
                                // Number(OriginalValue) * (Number(1) + Number(InputValue));
                                decimal FinalRate = Convert.ToDecimal(productSell.SellRate) * (1 + Convert.ToDecimal(customRateSell.SellRate));
                                ViewData["TransactionRateSell"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                            }
                            else
                            {
                                if (productSell.SellRateAdjustment != null && productSell.SellRateAdjustment != 0)
                                {
                                    decimal FinalRate = Convert.ToDecimal(productSell.SellRate) * (1 + Convert.ToDecimal(customRateSell.SellRate));
                                    ViewData["TransactionRateSell"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                                }
                                else
                                {
                                    //Default Sell Rate, API Rate empty
                                    ViewData["TransactionRateSell"] = "0";
                                }
                            }
                        }
                        else
                        {
                            if (productSell.SellRate != null && productSell.SellRate != 0)
                            {
                                if (productSell.SellRateAdjustment != null && productSell.SellRateAdjustment != 0)
                                {
                                    decimal FinalRate = Convert.ToDecimal(productSell.SellRate) * (1 + Convert.ToDecimal(productSell.SellRateAdjustment));
                                    ViewData["TransactionRateSell"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                                }
                                else
                                {
                                    //No Product adjustment
                                    ViewData["TransactionRateSell"] = Convert.ToDecimal(productSell.SellRate).ToString(GetRateFormat(rateDP));
                                }
                            }
                            else
                            {
                                if (productSell.AutomatedSellRate != null && productSell.AutomatedSellRate != 0)
                                {
                                    if (productSell.SellRateAdjustment != null && productSell.SellRateAdjustment != 0)
                                    {
                                        decimal FinalRate = Convert.ToDecimal(productSell.AutomatedSellRate) * (1 + Convert.ToDecimal(productSell.SellRateAdjustment));
                                        ViewData["TransactionRateSell"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                                    }
                                    else
                                    {
                                        ViewData["TransactionRateSell"] = Convert.ToDecimal(productSell.AutomatedSellRate).ToString(GetRateFormat(rateDP));
                                    }
                                }
                                else
                                {
                                    ViewData["TransactionRateSell"] = "0"; //Get from internet rate
                                }
                            }
                        }
                    }
                    else
                    {
                        if (productSell.SellRate != null && productSell.SellRate != 0)
                        {
                            if (productSell.SellRateAdjustment != null && productSell.SellRateAdjustment != 0)
                            {
                                decimal FinalRate = Convert.ToDecimal(productSell.SellRate) * (1 + Convert.ToDecimal(productSell.SellRateAdjustment));
                                ViewData["TransactionRateSell"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                            }
                            else
                            {
                                //No Product adjustment
                                ViewData["TransactionRateSell"] = Convert.ToDecimal(productSell.SellRate).ToString(GetRateFormat(rateDP));
                            }
                        }
                        else
                        {
                            if (productSell.AutomatedSellRate != null && productSell.AutomatedSellRate != 0)
                            {
                                if (productSell.SellRateAdjustment != null && productSell.SellRateAdjustment != 0)
                                {
                                    decimal FinalRate = Convert.ToDecimal(productSell.AutomatedSellRate) * (1 + Convert.ToDecimal(productSell.SellRateAdjustment));
                                    ViewData["TransactionRateSell"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                                }
                                else
                                {
                                    ViewData["TransactionRateSell"] = Convert.ToDecimal(productSell.AutomatedSellRate).ToString(GetRateFormat(rateDP));
                                }
                            }
                            else
                            {
                                ViewData["TransactionRateSell"] = "0"; //Get from internet rate
                            }
                        }
                    }

                    //if (customRateSell != null)
                    //{
                    //	if (customRateSell.SellRate != null && customRateSell.SellRate != 0)
                    //	{
                    //		ViewData["TransactionRateSell"] = Convert.ToDecimal(customRateSell.SellRate).ToString(GetRateFormat(rateDP));
                    //	}
                    //	else
                    //	{
                    //		if (productSell.SellRate != null)
                    //		{
                    //			ViewData["TransactionRateSell"] = Convert.ToDecimal(productSell.SellRate).ToString(GetRateFormat(rateDP));
                    //		}
                    //		else
                    //		{
                    //			if (productSell.AutomatedSellRate != null)
                    //			{
                    //				ViewData["TransactionRateSell"] = Convert.ToDecimal(productSell.AutomatedSellRate).ToString(GetRateFormat(rateDP));
                    //			}
                    //			else
                    //			{
                    //				ViewData["TransactionRateSell"] = "0"; //Get from internet rate
                    //			}
                    //		}
                    //	}
                    //}
                    //else
                    //{
                    //	if (productSell.SellRate != null)
                    //	{
                    //		ViewData["TransactionRateSell"] = Convert.ToDecimal(productSell.SellRate).ToString(GetRateFormat(rateDP));
                    //	}
                    //	else
                    //	{
                    //		if (productSell.AutomatedSellRate != null)
                    //		{
                    //			ViewData["TransactionRateSell"] = Convert.ToDecimal(productSell.AutomatedSellRate).ToString(GetRateFormat(rateDP));
                    //		}
                    //		else
                    //		{
                    //			ViewData["TransactionRateSell"] = "0"; //Get from internet rate
                    //		}
                    //	}
                    //}

                    ViewData["ProductUnitSell"] = productSell.Unit;

                    Dropdown[] paymentModeSellDDL = PaymentModeDDL(pidSell);
                    ViewData["PaymentModeDropdownSell"] = new SelectList(paymentModeSellDDL, "val", "name");

                    bool disableChequeNoSell = true;
                    bool disableBankTransferNoSell = true;

                    if (paymentModeSellDDL.FirstOrDefault().val == "Cheque")
                    {
                        disableChequeNoSell = false;
                    }
                    else if (paymentModeSellDDL.FirstOrDefault().val == "Bank Transfer")
                    {
                        disableBankTransferNoSell = false;
                    }

                    ViewData["DisableChequeNoSell"] = disableChequeNoSell;
                    ViewData["DisableBankTransferNoSell"] = disableBankTransferNoSell;

                    //Buy Type
                    rowId++;

                    ViewData["RowIdBuy"] = rowId;
                    ViewData["TransactionIDBuy"] = rowId.ToString().PadLeft(3, '0');

                    int buyIndex = 1;
                    if (currencyDDL.Count() == buyIndex)
                    {
                        buyIndex--;
                    }
                    ViewData["CurrencyDropdownBuy"] = new SelectList(currencyDDL, "val", "name", currencyDDL[buyIndex].val);

                    int pidBuy = Convert.ToInt32(currencyDDL[buyIndex].val);
                    Product productBuy = _productsModel.GetSingle(pidBuy);

                    ViewData["SymbolBuy"] = productBuy.Symbol;
                    ViewData["ProductUnitBuy"] = productBuy.Unit;

                    Dropdown[] paymentModeBuyDDL = PaymentModeDDL(pidBuy);
                    ViewData["PaymentModeDropdownBuy"] = new SelectList(paymentModeBuyDDL, "val", "name");

                    bool disableChequeNoBuy = true;
                    bool disableBankTransferNoBuy = true;

                    if (paymentModeBuyDDL.FirstOrDefault().val == "Cheque")
                    {
                        disableChequeNoBuy = false;
                    }
                    else if (paymentModeBuyDDL.FirstOrDefault().val == "Bank Transfer")
                    {
                        disableBankTransferNoBuy = false;
                    }

                    ViewData["DisableChequeNoBuy"] = disableChequeNoBuy;
                    ViewData["DisableBankTransferNoBuy"] = disableBankTransferNoBuy;

                    string view = "";

                    using (var sw = new StringWriter())
                    {
                        var viewResult = ViewEngines.Engines.FindPartialView(ControllerContext, "TransactionTypeEncashment");
                        var viewContext = new ViewContext(ControllerContext, viewResult.View, ViewData, TempData, sw);
                        viewResult.View.Render(viewContext, sw);
                        viewResult.ViewEngine.ReleaseView(ControllerContext, viewResult.View);
                        view = sw.GetStringBuilder().ToString();
                    }

                    view = JsonConvert.SerializeObject(view);

                    result = "{\"Result\":\"true\",\"View\":" + view + "}";
                    #endregion
                }
                else if (type == "Swap")
                {
                    #region Swap Transaction Type
                    //Buy Type
                    ViewData["RowIdBuy"] = rowId;
                    ViewData["TransactionIDBuy"] = rowId.ToString().PadLeft(3, '0');

                    Dropdown[] currencyDDL = CurrencyDDL("Swap");
                    ViewData["CurrencyDropdownBuy"] = new SelectList(currencyDDL, "val", "name");

                    if (currencyDDL.Count() >= 2)
                    {
                        int pidBuy = Convert.ToInt32(currencyDDL[0].val);
                        Product productBuy = _productsModel.GetSingle(pidBuy);
                        CustomerCustomRate customRateBuy = _customerCustomRatesModel.GetCustomerProductRate(cid, pidBuy);

                        ViewData["SymbolBuy"] = productBuy.Symbol;

                        if (customRateBuy != null)
                        {
                            if (customRateBuy.EncashmentRate != null && customRateBuy.EncashmentRate != 0)
                            {
                                ViewData["EncashmentRateBuy"] = customRateBuy.EncashmentRate.Value.ToString(GetRateFormat(rateDP));
                            }
                            else
                            {
                                ViewData["EncashmentRateBuy"] = productBuy.EncashmentRate.ToString(GetRateFormat(rateDP));
                            }
                        }
                        else
                        {
                            ViewData["EncashmentRateBuy"] = productBuy.EncashmentRate.ToString(GetRateFormat(rateDP));
                        }

                        //Check Custom Sell Rate
                        if (customRateBuy != null)
                        {
                            if (customRateBuy.SellRate != null && customRateBuy.SellRate != 0)
                            {
                                if (productBuy.SellRate != null && productBuy.SellRate != 0)
                                {
                                    // Number(OriginalValue) * (Number(1) + Number(InputValue));
                                    decimal FinalRate = Convert.ToDecimal(productBuy.SellRate) * (1 + Convert.ToDecimal(customRateBuy.SellRate));
                                    ViewData["TransactionRateBuy"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                                }
                                else
                                {
                                    if (productBuy.SellRateAdjustment != null && productBuy.SellRateAdjustment != 0)
                                    {
                                        decimal FinalRate = Convert.ToDecimal(productBuy.SellRate) * (1 + Convert.ToDecimal(customRateBuy.SellRate));
                                        ViewData["TransactionRateBuy"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                                    }
                                    else
                                    {
                                        //Default Sell Rate, API Rate empty
                                        ViewData["TransactionRateBuy"] = "0";
                                    }
                                }
                            }
                            else
                            {
                                if (productBuy.SellRate != null && productBuy.SellRate != 0)
                                {
                                    if (productBuy.SellRateAdjustment != null && productBuy.SellRateAdjustment != 0)
                                    {
                                        decimal FinalRate = Convert.ToDecimal(productBuy.SellRate) * (1 + Convert.ToDecimal(productBuy.SellRateAdjustment));
                                        ViewData["TransactionRateBuy"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                                    }
                                    else
                                    {
                                        //No Product adjustment
                                        ViewData["TransactionRateBuy"] = Convert.ToDecimal(productBuy.SellRate).ToString(GetRateFormat(rateDP));
                                    }
                                }
                                else
                                {
                                    if (productBuy.AutomatedSellRate != null && productBuy.AutomatedSellRate != 0)
                                    {
                                        if (productBuy.SellRateAdjustment != null && productBuy.SellRateAdjustment != 0)
                                        {
                                            decimal FinalRate = Convert.ToDecimal(productBuy.AutomatedSellRate) * (1 + Convert.ToDecimal(productBuy.SellRateAdjustment));
                                            ViewData["TransactionRateBuy"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                                        }
                                        else
                                        {
                                            ViewData["TransactionRateBuy"] = Convert.ToDecimal(productBuy.AutomatedSellRate).ToString(GetRateFormat(rateDP));
                                        }
                                    }
                                    else
                                    {
                                        ViewData["TransactionRateBuy"] = "0"; //Get from internet rate
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (productBuy.SellRate != null && productBuy.SellRate != 0)
                            {
                                if (productBuy.SellRateAdjustment != null && productBuy.SellRateAdjustment != 0)
                                {
                                    decimal FinalRate = Convert.ToDecimal(productBuy.SellRate) * (1 + Convert.ToDecimal(productBuy.SellRateAdjustment));
                                    ViewData["TransactionRateBuy"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                                }
                                else
                                {
                                    //No Product adjustment
                                    ViewData["TransactionRateBuy"] = Convert.ToDecimal(productBuy.SellRate).ToString(GetRateFormat(rateDP));
                                }
                            }
                            else
                            {
                                if (productBuy.AutomatedSellRate != null && productBuy.AutomatedSellRate != 0)
                                {
                                    if (productBuy.SellRateAdjustment != null && productBuy.SellRateAdjustment != 0)
                                    {
                                        decimal FinalRate = Convert.ToDecimal(productBuy.AutomatedSellRate) * (1 + Convert.ToDecimal(productBuy.SellRateAdjustment));
                                        ViewData["TransactionRateBuy"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                                    }
                                    else
                                    {
                                        ViewData["TransactionRateBuy"] = Convert.ToDecimal(productBuy.AutomatedSellRate).ToString(GetRateFormat(rateDP));
                                    }
                                }
                                else
                                {
                                    ViewData["TransactionRateBuy"] = "0"; //Get from internet rate
                                }
                            }
                        }


                        //if (customRateBuy != null)
                        //{
                        //	if (customRateBuy.SellRate != null && customRateBuy.SellRate != 0)
                        //	{
                        //		ViewData["TransactionRateBuy"] = Convert.ToDecimal(customRateBuy.SellRate).ToString(GetRateFormat(rateDP));
                        //	}
                        //	else
                        //	{
                        //		if (productBuy.SellRate != null)
                        //		{
                        //			ViewData["TransactionRateBuy"] = Convert.ToDecimal(productBuy.SellRate).ToString(GetRateFormat(rateDP));
                        //		}
                        //		else
                        //		{
                        //			if (productBuy.AutomatedSellRate != null)
                        //			{
                        //				ViewData["TransactionRateBuy"] = Convert.ToDecimal(productBuy.AutomatedSellRate).ToString(GetRateFormat(rateDP));
                        //			}
                        //			else
                        //			{
                        //				ViewData["TransactionRateBuy"] = "0"; //Get from internet rate
                        //			}
                        //		}
                        //	}
                        //}
                        //else
                        //{
                        //	if (productBuy.SellRate != null)
                        //	{
                        //		ViewData["TransactionRateBuy"] = Convert.ToDecimal(productBuy.SellRate).ToString(GetRateFormat(rateDP));
                        //	}
                        //	else
                        //	{
                        //		if (productBuy.AutomatedSellRate != null)
                        //		{
                        //			ViewData["TransactionRateBuy"] = Convert.ToDecimal(productBuy.AutomatedSellRate).ToString(GetRateFormat(rateDP));
                        //		}
                        //		else
                        //		{
                        //			ViewData["TransactionRateBuy"] = "0"; //Get from internet rate
                        //		}
                        //	}
                        //}

                        ViewData["ProductUnitBuy"] = productBuy.Unit;

                        Dropdown[] paymentModeBuyDDL = PaymentModeDDL(pidBuy);
                        ViewData["PaymentModeDropdownBuy"] = new SelectList(paymentModeBuyDDL, "val", "name");

                        bool disableChequeNoBuy = true;
                        bool disableBankTransferNoBuy = true;

                        if (paymentModeBuyDDL.FirstOrDefault().val == "Cheque")
                        {
                            disableChequeNoBuy = false;
                        }
                        else if (paymentModeBuyDDL.FirstOrDefault().val == "Bank Transfer")
                        {
                            disableBankTransferNoBuy = false;
                        }

                        ViewData["DisableChequeNoBuy"] = disableChequeNoBuy;
                        ViewData["DisableBankTransferNoBuy"] = disableBankTransferNoBuy;

                        //Sell Type
                        rowId++;

                        ViewData["RowIdSell"] = rowId;
                        ViewData["TransactionIDSell"] = rowId.ToString().PadLeft(3, '0');

                        int sellIndex = 1;
                        if (currencyDDL.Count() == sellIndex)
                        {
                            sellIndex--;
                        }
                        ViewData["CurrencyDropdownSell"] = new SelectList(currencyDDL, "val", "name", currencyDDL[sellIndex].val);

                        int pidSell = Convert.ToInt32(currencyDDL[sellIndex].val);
                        Product productSell = _productsModel.GetSingle(pidSell);

                        ViewData["SymbolSell"] = productSell.Symbol;
                        ViewData["ProductUnitSell"] = productSell.Unit;

                        Dropdown[] paymentModeSellDDL = PaymentModeDDL(pidSell);
                        ViewData["PaymentModeDropdownSell"] = new SelectList(paymentModeSellDDL, "val", "name");

                        bool disableChequeNoSell = true;
                        bool disableBankTransferNoSell = true;

                        if (paymentModeSellDDL.FirstOrDefault().val == "Cheque")
                        {
                            disableChequeNoSell = false;
                        }
                        else if (paymentModeSellDDL.FirstOrDefault().val == "Bank Transfer")
                        {
                            disableBankTransferNoSell = false;
                        }

                        ViewData["DisableChequeNoSell"] = disableChequeNoSell;
                        ViewData["DisableBankTransferNoSell"] = disableBankTransferNoSell;

                        string view = "";

                        using (var sw = new StringWriter())
                        {
                            var viewResult = ViewEngines.Engines.FindPartialView(ControllerContext, "TransactionTypeSwap");
                            var viewContext = new ViewContext(ControllerContext, viewResult.View, ViewData, TempData, sw);
                            viewResult.View.Render(viewContext, sw);
                            viewResult.ViewEngine.ReleaseView(ControllerContext, viewResult.View);
                            view = sw.GetStringBuilder().ToString();
                        }

                        view = JsonConvert.SerializeObject(view);

                        result = "{\"Result\":\"true\",\"View\":" + view + "}";
                    }
                    else
                    {
                        result = "{\"Result\":false,\"ErrorMessage\":\"No Paired Swap Currency\"}";
                    }
                    #endregion
                }
                else if (type == "CrossCurrency")
                {
                    #region Cross Currency Transaction Type
                    //Sell Type
                    ViewData["RowIdSell"] = rowId;
                    ViewData["TransactionIDSell"] = rowId.ToString().PadLeft(3, '0');

                    Dropdown[] currencyDDL = CurrencyDDL("Cross Currency");
                    ViewData["CurrencyDropdownSell"] = new SelectList(currencyDDL, "val", "name");

                    int pidSell = Convert.ToInt32(currencyDDL[0].val);
                    Product productSell = _productsModel.GetSingle(pidSell);

                    ViewData["SymbolSell"] = productSell.Symbol;

                    //Check Custom Sell Rate
                    CustomerCustomRate customSellRate = _customerCustomRatesModel.GetCustomerProductRate(cid, pidSell);

                    if (customSellRate != null)
                    {
                        if (customSellRate.SellRate != null && customSellRate.SellRate != 0)
                        {
                            if (productSell.SellRate != null && productSell.SellRate != 0)
                            {
                                // Number(OriginalValue) * (Number(1) + Number(InputValue));
                                decimal FinalRate = Convert.ToDecimal(productSell.SellRate) * (1 + Convert.ToDecimal(customSellRate.SellRate));
                                ViewData["TransactionRateSell"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                            }
                            else
                            {
                                if (productSell.SellRateAdjustment != null && productSell.SellRateAdjustment != 0)
                                {
                                    decimal FinalRate = Convert.ToDecimal(productSell.SellRate) * (1 + Convert.ToDecimal(customSellRate.SellRate));
                                    ViewData["TransactionRateSell"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                                }
                                else
                                {
                                    //Default Sell Rate, API Rate empty
                                    ViewData["TransactionRateSell"] = "0";
                                }
                            }
                        }
                        else
                        {
                            if (productSell.SellRate != null && productSell.SellRate != 0)
                            {
                                if (productSell.SellRateAdjustment != null && productSell.SellRateAdjustment != 0)
                                {
                                    decimal FinalRate = Convert.ToDecimal(productSell.SellRate) * (1 + Convert.ToDecimal(productSell.SellRateAdjustment));
                                    ViewData["TransactionRateSell"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                                }
                                else
                                {
                                    //No Product adjustment
                                    ViewData["TransactionRateSell"] = Convert.ToDecimal(productSell.SellRate).ToString(GetRateFormat(rateDP));
                                }
                            }
                            else
                            {
                                if (productSell.AutomatedSellRate != null && productSell.AutomatedSellRate != 0)
                                {
                                    if (productSell.SellRateAdjustment != null && productSell.SellRateAdjustment != 0)
                                    {
                                        decimal FinalRate = Convert.ToDecimal(productSell.AutomatedSellRate) * (1 + Convert.ToDecimal(productSell.SellRateAdjustment));
                                        ViewData["TransactionRateSell"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                                    }
                                    else
                                    {
                                        ViewData["TransactionRateSell"] = Convert.ToDecimal(productSell.AutomatedSellRate).ToString(GetRateFormat(rateDP));
                                    }
                                }
                                else
                                {
                                    ViewData["TransactionRateSell"] = "0"; //Get from internet rate
                                }
                            }
                        }
                    }
                    else
                    {
                        if (productSell.SellRate != null && productSell.SellRate != 0)
                        {
                            if (productSell.SellRateAdjustment != null && productSell.SellRateAdjustment != 0)
                            {
                                decimal FinalRate = Convert.ToDecimal(productSell.SellRate) * (1 + Convert.ToDecimal(productSell.SellRateAdjustment));
                                ViewData["TransactionRateSell"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                            }
                            else
                            {
                                //No Product adjustment
                                ViewData["TransactionRateSell"] = Convert.ToDecimal(productSell.SellRate).ToString(GetRateFormat(rateDP));
                            }
                        }
                        else
                        {
                            if (productSell.AutomatedSellRate != null && productSell.AutomatedSellRate != 0)
                            {
                                if (productSell.SellRateAdjustment != null && productSell.SellRateAdjustment != 0)
                                {
                                    decimal FinalRate = Convert.ToDecimal(productSell.AutomatedSellRate) * (1 + Convert.ToDecimal(productSell.SellRateAdjustment));
                                    ViewData["TransactionRateSell"] = Convert.ToDecimal(FinalRate).ToString(GetRateFormat(rateDP));
                                }
                                else
                                {
                                    ViewData["TransactionRateSell"] = Convert.ToDecimal(productSell.AutomatedSellRate).ToString(GetRateFormat(rateDP));
                                }
                            }
                            else
                            {
                                ViewData["TransactionRateSell"] = "0"; //Get from internet rate
                            }
                        }
                    }

                    //if (customSellRate != null)
                    //{
                    //	if (customSellRate.SellRate != null && customSellRate.SellRate != 0)
                    //	{
                    //		ViewData["TransactionRateSell"] = Convert.ToDecimal(customSellRate.SellRate).ToString(GetRateFormat(rateDP));
                    //	}
                    //	else
                    //	{
                    //		if (productSell.SellRate != null)
                    //		{
                    //			ViewData["TransactionRateSell"] = Convert.ToDecimal(productSell.SellRate).ToString(GetRateFormat(rateDP));
                    //		}
                    //		else
                    //		{
                    //			if (productSell.AutomatedSellRate != null)
                    //			{
                    //				ViewData["TransactionRateSell"] = Convert.ToDecimal(productSell.AutomatedSellRate).ToString(GetRateFormat(rateDP));
                    //			}
                    //			else
                    //			{
                    //				ViewData["TransactionRateSell"] = "0"; //Get from internet rate
                    //			}
                    //		}
                    //	}
                    //}
                    //else
                    //{
                    //	if (productSell.SellRate != null)
                    //	{
                    //		ViewData["TransactionRateSell"] = Convert.ToDecimal(productSell.SellRate).ToString(GetRateFormat(rateDP));
                    //	}
                    //	else
                    //	{
                    //		if (productSell.AutomatedSellRate != null)
                    //		{
                    //			ViewData["TransactionRateSell"] = Convert.ToDecimal(productSell.AutomatedSellRate).ToString(GetRateFormat(rateDP));
                    //		}
                    //		else
                    //		{
                    //			ViewData["TransactionRateSell"] = "0"; //Get from internet rate
                    //		}
                    //	}
                    //}

                    ViewData["ProductUnitSell"] = productSell.Unit;

                    Dropdown[] paymentModeSellDDL = PaymentModeDDL(pidSell);
                    ViewData["PaymentModeDropdownSell"] = new SelectList(paymentModeSellDDL, "val", "name");

                    bool disableChequeNoSell = true;
                    bool disableBankTransferNoSell = true;

                    if (paymentModeSellDDL.FirstOrDefault().val == "Cheque")
                    {
                        disableChequeNoSell = false;
                    }
                    else if (paymentModeSellDDL.FirstOrDefault().val == "Bank Transfer")
                    {
                        disableBankTransferNoSell = false;
                    }

                    ViewData["DisableChequeNoSell"] = disableChequeNoSell;
                    ViewData["DisableBankTransferNoSell"] = disableBankTransferNoSell;

                    //Buy Type
                    rowId++;

                    ViewData["RowIdBuy"] = rowId;
                    ViewData["TransactionIDBuy"] = rowId.ToString().PadLeft(3, '0');

                    int buyIndex = 1;
                    if (currencyDDL.Count() == buyIndex)
                    {
                        buyIndex--;
                    }
                    ViewData["CurrencyDropdownBuy"] = new SelectList(currencyDDL, "val", "name", currencyDDL[buyIndex].val);

                    int pidBuy = Convert.ToInt32(currencyDDL[buyIndex].val);
                    Product productBuy = _productsModel.GetSingle(pidBuy);

                    ViewData["SymbolBuy"] = productBuy.Symbol;
                    ViewData["ProductUnitBuy"] = productBuy.Unit;

                    Dropdown[] paymentModeBuyDDL = PaymentModeDDL(pidBuy);
                    ViewData["PaymentModeDropdownBuy"] = new SelectList(paymentModeBuyDDL, "val", "name");

                    bool disableChequeNoBuy = true;
                    bool disableBankTransferNoBuy = true;

                    if (paymentModeBuyDDL.FirstOrDefault().val == "Cheque")
                    {
                        disableChequeNoBuy = false;
                    }
                    else if (paymentModeBuyDDL.FirstOrDefault().val == "Bank Transfer")
                    {
                        disableBankTransferNoBuy = false;
                    }

                    ViewData["DisableChequeNoBuy"] = disableChequeNoBuy;
                    ViewData["DisableBankTransferNoBuy"] = disableBankTransferNoBuy;

                    string view = "";

                    using (var sw = new StringWriter())
                    {
                        var viewResult = ViewEngines.Engines.FindPartialView(ControllerContext, "TransactionTypeCrossCurrency");
                        var viewContext = new ViewContext(ControllerContext, viewResult.View, ViewData, TempData, sw);
                        viewResult.View.Render(viewContext, sw);
                        viewResult.ViewEngine.ReleaseView(ControllerContext, viewResult.View);
                        view = sw.GetStringBuilder().ToString();
                    }

                    view = JsonConvert.SerializeObject(view);

                    result = "{\"Result\":\"true\",\"View\":" + view + "}";
                    #endregion
                }
                else
                {
                    result = "{\"Result\":false,\"ErrorMessage\":\"Invalid Transaction Type!\"}";
                }
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: CurrencyChange
        [HttpPost]
        public string CurrencyChange(int rowId, string type, FormCollection form, int cid = 0, string pairedCurrency = null)
        {
            string result = "";

            try
            {
                Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                if (currencyChanged != null)
                {
                    Product sgd = _productsModel.FindCurrencyCode("SGD");

                    if (type == "Buy" || type == "Sell")
                    {
                        #region Buy/Sell Transaction Type
                        List<string[]> modelErrors = new List<string[]>();

                        string symbol = currencyChanged.Symbol;
                        string amountForeign_str = form["Transaction_AmountForeign_" + rowId];
                        decimal rate = 0;

                        //Get CustomRate
                        CustomerCustomRate getCustomRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                        if (getCustomRate != null)
                        {
                            if (type == "Buy")
                            {
                                if (getCustomRate.BuyRate != 0 && getCustomRate.BuyRate != null)
                                {
                                    if (currencyChanged.BuyRate != null && currencyChanged.BuyRate != 0)
                                    {
                                        decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(getCustomRate.BuyRate));
                                        rate = Convert.ToDecimal(FinalRate);
                                    }
                                    else
                                    {
                                        if (currencyChanged.AutomatedBuyRate != null && currencyChanged.AutomatedBuyRate != 0)
                                        {
                                            decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(getCustomRate.BuyRate));
                                            rate = Convert.ToDecimal(FinalRate);
                                        }
                                        else
                                        {
                                            rate = 0;
                                        }
                                    }
                                    //rate = Convert.ToDecimal(getCustomRate.BuyRate);
                                }
                                else
                                {
                                    if (currencyChanged.BuyRate != null && currencyChanged.BuyRate != 0)
                                    {
                                        if (currencyChanged.BuyRateAdjustment != null && currencyChanged.BuyRateAdjustment != 0)
                                        {
                                            decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                            rate = Convert.ToDecimal(FinalRate);
                                        }
                                        else
                                        {
                                            rate = Convert.ToDecimal(currencyChanged.BuyRate);
                                        }
                                        //rate = Convert.ToDecimal(currencyChanged.BuyRate);
                                    }
                                    else
                                    {
                                        if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                        {
                                            if (currencyChanged.BuyRateAdjustment != null && currencyChanged.BuyRateAdjustment != 0)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                                rate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                rate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                            }
                                        }
                                        else
                                        {
                                            rate = 0;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                //sell rate
                                if (getCustomRate.SellRate != 0 && getCustomRate.SellRate != null)
                                {
                                    if (currencyChanged.SellRate != null && currencyChanged.SellRate != 0)
                                    {
                                        decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(getCustomRate.SellRate));
                                        rate = Convert.ToDecimal(FinalRate);
                                    }
                                    else
                                    {
                                        if (currencyChanged.AutomatedSellRate != null && currencyChanged.AutomatedSellRate != 0)
                                        {
                                            decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(getCustomRate.SellRate));
                                            rate = Convert.ToDecimal(FinalRate);
                                        }
                                        else
                                        {
                                            rate = 0;
                                        }
                                    }
                                }
                                else
                                {
                                    if (currencyChanged.SellRate != null && currencyChanged.SellRate != 0)
                                    {
                                        if (currencyChanged.SellRateAdjustment != null && currencyChanged.SellRateAdjustment != 0)
                                        {
                                            decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                            rate = Convert.ToDecimal(FinalRate);
                                        }
                                        else
                                        {
                                            rate = Convert.ToDecimal(currencyChanged.SellRate);
                                        }
                                    }
                                    else
                                    {
                                        if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                        {
                                            if (currencyChanged.SellRateAdjustment != null && currencyChanged.SellRateAdjustment != 0)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                rate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                rate = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                            }
                                        }
                                        else
                                        {
                                            rate = 0;
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (type == "Buy")
                            {
                                if (currencyChanged.BuyRate != null && currencyChanged.BuyRate != 0)
                                {
                                    if (currencyChanged.BuyRateAdjustment != null && currencyChanged.BuyRateAdjustment != 0)
                                    {
                                        decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                        rate = Convert.ToDecimal(FinalRate);
                                    }
                                    else
                                    {
                                        rate = Convert.ToDecimal(currencyChanged.BuyRate);
                                    }
                                    //rate = Convert.ToDecimal(currencyChanged.BuyRate);
                                }
                                else
                                {
                                    if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    {
                                        if (currencyChanged.BuyRateAdjustment != null && currencyChanged.BuyRateAdjustment != 0)
                                        {
                                            decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                            rate = Convert.ToDecimal(FinalRate);
                                        }
                                        else
                                        {
                                            rate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                        }
                                    }
                                    else
                                    {
                                        rate = 0;
                                    }
                                }
                            }
                            else if (type == "Sell")
                            {
                                if (currencyChanged.SellRate != null && currencyChanged.SellRate != 0)
                                {
                                    if (currencyChanged.SellRateAdjustment != null && currencyChanged.SellRateAdjustment != 0)
                                    {
                                        decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                        rate = Convert.ToDecimal(FinalRate);
                                    }
                                    else
                                    {
                                        rate = Convert.ToDecimal(currencyChanged.SellRate);
                                    }
                                }
                                else
                                {
                                    if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                    {
                                        if (currencyChanged.SellRateAdjustment != null && currencyChanged.SellRateAdjustment != 0)
                                        {
                                            decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                            rate = Convert.ToDecimal(FinalRate);
                                        }
                                        else
                                        {
                                            rate = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                        }
                                    }
                                    else
                                    {
                                        rate = 0;
                                    }
                                }
                            }
                            //if (currencyChanged.BuyRate != null && type == "Buy")
                            //{
                            //	rate = Convert.ToDecimal(currencyChanged.BuyRate);
                            //}
                            //else if (currencyChanged.SellRate != null && type == "Sell")
                            //{
                            //	rate = Convert.ToDecimal(currencyChanged.SellRate);
                            //}
                        }

                        int unit = currencyChanged.Unit;
                        decimal amountLocal = 0;

                        string[] paymentModes = currencyChanged.PaymentModeAllowed.Split(',');
                        string paymentModesDDL = "<select>";
                        foreach (string paymentMode in paymentModes)
                        {
                            paymentModesDDL += "<option value='" + paymentMode + "'>" + paymentMode + "</option>";
                        }
                        paymentModesDDL += "</select>";

                        string disableChequeNo = "true";
                        string disableBankTransferNo = "true";

                        if (paymentModes.FirstOrDefault() == "Cheque")
                        {
                            disableChequeNo = "false";
                        }
                        else if (paymentModes.FirstOrDefault() == "Bank Transfer")
                        {
                            disableBankTransferNo = "false";
                        }

                        decimal totalForeign = 0;
                        decimal totalLocal = 0;

                        if (!string.IsNullOrEmpty(amountForeign_str))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str);

                            if (checkAmountForeignFormat)
                            {
                                amountForeign_str = Convert.ToDecimal(amountForeign_str).ToString(GetDecimalFormat(currencyChanged.Decimal));

                                decimal amountForeign = Convert.ToDecimal(amountForeign_str);
                                amountLocal = Convert.ToDecimal(amountForeign) * rate / unit; // Transaction Calculation Formula

                                totalForeign += amountForeign;
                                totalLocal += amountLocal;
                            }
                            else
                            {
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeign_str) });
                            }
                        }
                        else
                        {
                            //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "" });
                        }

                        //Calculate Total Amount
                        List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + rowId).ToList();

                        foreach (string key in amountForeignKeys)
                        {
                            string rid = key.Split('_')[2];

                            string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                            if (!string.IsNullOrEmpty(amountForeign_str1))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                if (checkAmountForeignFormat)
                                {
                                    totalForeign += Convert.ToDecimal(amountForeign_str1);
                                }
                            }

                            string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                            if (!string.IsNullOrEmpty(amountLocal_str))
                            {
                                bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                if (checkAmountLocalFormat)
                                {
                                    totalLocal += Convert.ToDecimal(amountLocal_str);
                                }
                            }
                        }

                        if (modelErrors.Count == 0)
                        {
                            result = "{\"IsValid\":true,";
                        }
                        else
                        {
                            result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                        }

                        result += "\"Result\":true,"
                            + "\"Symbol\":\"" + symbol + "\","
                            + "\"Rate\":\"" + rate.ToString(GetRateFormat(rateDP)) + "\","
                            + "\"Unit\":\"" + unit.ToString(GetDecimalFormat(0)) + "\","
                            + "\"AmountForeign\":\"" + amountForeign_str + "\","
                            + "\"AmountLocal\":\"" + amountLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                            + "\"PaymentModesDDL\":\"" + paymentModesDDL + "\","
                            + "\"DisableChequeNo\":" + disableChequeNo + ","
                            + "\"DisableBankTransferNo\":" + disableBankTransferNo + ","
                            + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                            + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                        #endregion
                    }
                    else if (type == "Encashment")
                    {
                        #region Encashment Transaction Type
                        string transactionType = form["Transaction_Type_" + rowId];

                        if (transactionType == "Sell")
                        {
                            List<string[]> modelErrors = new List<string[]>();

                            //Sell Type
                            string symbolSell = currencyChanged.Symbol;
                            string amountForeignSell_str = form["Transaction_AmountForeign_" + rowId];
                            decimal rateSell = 0;

                            //if (currencyChanged.SellRate != null)
                            //{
                            //	rateSell = Convert.ToDecimal(currencyChanged.SellRate);
                            //}

                            decimal encashmentRateSell = currencyChanged.EncashmentRate;
                            CustomerCustomRate customRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                            if (customRate != null)
                            {
                                if (customRate.EncashmentRate != null && customRate.EncashmentRate != 0)
                                {
                                    encashmentRateSell = customRate.EncashmentRate.Value;
                                }
                            }

                            //Get Custom Sell Rate Check
                            if (customRate != null)
                            {
                                if (customRate.SellRate != 0 && customRate.SellRate != null)
                                {
                                    if (currencyChanged.SellRate != null && currencyChanged.SellRate != 0)
                                    {
                                        decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(customRate.SellRate));
                                        rateSell = Convert.ToDecimal(FinalRate);
                                    }
                                    else
                                    {
                                        if (currencyChanged.AutomatedSellRate != null && currencyChanged.AutomatedSellRate != 0)
                                        {
                                            decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(customRate.SellRate));
                                            rateSell = Convert.ToDecimal(FinalRate);
                                        }
                                        else
                                        {
                                            rateSell = 0;
                                        }
                                    }
                                    //rateSell = Convert.ToDecimal(customRate.SellRate);
                                }
                                else
                                {
                                    if (currencyChanged.SellRate != null && currencyChanged.SellRate != 0)
                                    {
                                        if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                        {
                                            decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                            rateSell = Convert.ToDecimal(FinalRate);
                                        }
                                        else
                                        {
                                            rateSell = Convert.ToDecimal(currencyChanged.SellRate);
                                        }
                                    }
                                    else
                                    {
                                        if (currencyChanged.AutomatedSellRate != null && currencyChanged.AutomatedSellRate != 0)
                                        {
                                            if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                rateSell = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                rateSell = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                            }
                                        }
                                        else
                                        {
                                            rateSell = 0;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (currencyChanged.SellRate != null && currencyChanged.SellRate != 0)
                                {
                                    if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                    {
                                        decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                        rateSell = Convert.ToDecimal(FinalRate);
                                    }
                                    else
                                    {
                                        rateSell = Convert.ToDecimal(currencyChanged.SellRate);
                                    }
                                }
                                else
                                {
                                    if (currencyChanged.AutomatedSellRate != null && currencyChanged.AutomatedSellRate != 0)
                                    {
                                        if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                        {
                                            decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                            rateSell = Convert.ToDecimal(FinalRate);
                                        }
                                        else
                                        {
                                            rateSell = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                        }
                                    }
                                    else
                                    {
                                        rateSell = 0;
                                    }
                                }
                            }

                            int unitSell = currencyChanged.Unit;
                            decimal amountLocalSell = 0;

                            string[] paymentModesSell = currencyChanged.PaymentModeAllowed.Split(',');
                            string paymentModesDDLSell = "<select>";
                            foreach (string paymentMode in paymentModesSell)
                            {
                                paymentModesDDLSell += "<option value='" + paymentMode + "'>" + paymentMode + "</option>";
                            }
                            paymentModesDDLSell += "</select>";

                            string disableChequeNoSell = "true";
                            string disableBankTransferNoSell = "true";

                            if (paymentModesSell.FirstOrDefault() == "Cheque")
                            {
                                disableChequeNoSell = "false";
                            }
                            else if (paymentModesSell.FirstOrDefault() == "Bank Transfer")
                            {
                                disableBankTransferNoSell = "false";
                            }

                            decimal amountForeignBuy = 0;
                            decimal rateBuy = 0;
                            decimal amountLocalBuy = 0;

                            decimal totalForeign = 0;
                            decimal totalLocal = 0;

                            if (!string.IsNullOrEmpty(amountForeignSell_str))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignSell_str);

                                if (checkAmountForeignFormat)
                                {
                                    amountForeignSell_str = Convert.ToDecimal(amountForeignSell_str).ToString(GetDecimalFormat(currencyChanged.Decimal));
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignSell_str) });
                                }
                            }
                            else
                            {
                                //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "" });
                            }

                            //Buy Type
                            string searchString = currencyChanged.CurrencyCode;
                            string closestString = SearchClosestString(searchString, pairedCurrency);

                            Product buyCurrency = _productsModel.FindCurrencyCode(closestString);

                            string symbolbuy = buyCurrency.Symbol;

                            int unitBuy = buyCurrency.Unit;

                            string[] paymentModesBuy = buyCurrency.PaymentModeAllowed.Split(',');
                            string paymentModesDDLBuy = "<select>";
                            foreach (string paymentMode in paymentModesBuy)
                            {
                                paymentModesDDLBuy += "<option value='" + paymentMode + "'>" + paymentMode + "</option>";
                            }
                            paymentModesDDLBuy += "</select>";

                            string disableChequeNoBuy = "true";
                            string disableBankTransferNoBuy = "true";

                            if (paymentModesBuy.FirstOrDefault() == "Cheque")
                            {
                                disableChequeNoBuy = "false";
                            }
                            else if (paymentModesBuy.FirstOrDefault() == "Bank Transfer")
                            {
                                disableBankTransferNoBuy = "false";
                            }

                            //Calculate Total Amount
                            List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + rowId).ToList();

                            foreach (string key in amountForeignKeys)
                            {
                                string rid = key.Split('_')[2];

                                string transactionType1 = form["Transaction_Type_" + rid];

                                if (transactionType1 == "Sell")
                                {
                                    string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                                    if (!string.IsNullOrEmpty(amountForeign_str1))
                                    {
                                        bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                        if (checkAmountForeignFormat)
                                        {
                                            totalForeign += Convert.ToDecimal(amountForeign_str1);
                                        }
                                    }

                                    string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                                    if (!string.IsNullOrEmpty(amountLocal_str))
                                    {
                                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                        if (checkAmountLocalFormat)
                                        {
                                            totalLocal += Convert.ToDecimal(amountLocal_str);
                                        }
                                    }
                                }
                            }

                            if (modelErrors.Count == 0)
                            {
                                amountLocalSell = Convert.ToDecimal((Convert.ToDecimal(amountForeignSell_str) * rateSell / currencyChanged.Unit).ToString(GetDecimalFormat(currencyChanged.Decimal)));// Transaction Calculation Formula

                                amountForeignBuy = Convert.ToDecimal((Convert.ToDecimal(amountForeignSell_str) * encashmentRateSell).ToString(GetDecimalFormat(buyCurrency.Decimal)));// Transaction Calculation Formula

                                if (amountForeignBuy != 0)
                                {
                                    rateBuy = amountLocalSell / amountForeignBuy;// Transaction Calculation Formula
                                }

                                amountLocalBuy = amountLocalSell;

                                totalForeign += Convert.ToDecimal(amountForeignSell_str);
                                totalLocal += amountLocalSell;

                                result = "{\"IsValid\":true,";
                            }
                            else
                            {
                                result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                            }

                            result += "\"Result\":true,"
                                + "\"RowChanged\":\"Sell\","
                                + "\"RowIdSell\":" + rowId + ","
                                + "\"SymbolSell\":\"" + symbolSell + "\","
                                + "\"AmountForeignSell\":\"" + amountForeignSell_str + "\","
                                + "\"RateSell\":\"" + rateSell.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"EncashmentRateSell\":\"" + encashmentRateSell.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"UnitSell\":\"" + unitSell.ToString(GetDecimalFormat(0)) + "\","
                                + "\"AmountLocalSell\":\"" + amountLocalSell.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                                + "\"PaymentModesDDLSell\":\"" + paymentModesDDLSell + "\","
                                + "\"DisableChequeNoSell\":" + disableChequeNoSell + ","
                                + "\"DisableBankTransferNoSell\":" + disableBankTransferNoSell + ","
                                + "\"RowIdBuy\":" + (rowId + 1) + ","
                                + "\"CurrencyIdBuy\":" + buyCurrency.ID + ","
                                + "\"CurrencyCodeBuy\":\"" + buyCurrency.CurrencyCode + "\","
                                + "\"SymbolBuy\":\"" + buyCurrency.Symbol + "\","
                                + "\"AmountForeignBuy\":\"" + amountForeignBuy.ToString(GetDecimalFormat(buyCurrency.Decimal)) + "\","
                                + "\"RateBuy\":\"" + rateBuy.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"UnitBuy\":\"" + unitBuy.ToString(GetDecimalFormat(0)) + "\","
                                + "\"AmountLocalBuy\":\"" + amountLocalBuy.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                                + "\"PaymentModesDDLBuy\":\"" + paymentModesDDLBuy + "\","
                                + "\"DisableChequeNoBuy\":" + disableChequeNoBuy + ","
                                + "\"DisableBankTransferNoBuy\":" + disableBankTransferNoBuy + ","
                                + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                                + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                        }
                        else
                        {
                            //Sell Type
                            List<string[]> modelErrors = new List<string[]>();

                            int rowIdSell = rowId - 1;

                            Product sellCurrency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowIdSell]));

                            string amountForeignSell_str = form["Transaction_AmountForeign_" + rowIdSell];
                            if (!string.IsNullOrEmpty(amountForeignSell_str))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignSell_str);

                                if (checkAmountForeignFormat)
                                {
                                    amountForeignSell_str = Convert.ToDecimal(amountForeignSell_str).ToString(GetDecimalFormat(sellCurrency.Decimal));
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignSell_str) });
                                }
                            }
                            else
                            {
                                //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "" });
                            }

                            string rateSell_str = form["Transaction_Rate_" + rowIdSell];
                            if (!string.IsNullOrEmpty(rateSell_str))
                            {
                                bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rateSell_str);
                                decimal rateSell = 0;

                                if (checkRateFormat)
                                {
                                    if (sellCurrency.AcceptableRange > 0)
                                    {
                                        CustomerCustomRate customRate = _customerCustomRatesModel.GetCustomerProductRate(cid, sellCurrency.ID);

                                        //Get Custom Sell Rate Check
                                        if (customRate != null)
                                        {
                                            if (customRate.SellRate != 0 && customRate.SellRate != null)
                                            {
                                                if (sellCurrency.SellRate != null && sellCurrency.SellRate != 0)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(sellCurrency.SellRate) * (1 + Convert.ToDecimal(customRate.SellRate));
                                                    rateSell = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    if (sellCurrency.AutomatedSellRate != null && sellCurrency.AutomatedSellRate != 0)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(sellCurrency.AutomatedSellRate) * (1 + Convert.ToDecimal(customRate.SellRate));
                                                        rateSell = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        rateSell = 0;
                                                    }
                                                }
                                                //rateSell = Convert.ToDecimal(customRate.SellRate);
                                            }
                                            else
                                            {
                                                if (sellCurrency.SellRate != null && sellCurrency.SellRate != 0)
                                                {
                                                    if (sellCurrency.SellRateAdjustment != 0 && sellCurrency.SellRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(sellCurrency.SellRate) * (1 + Convert.ToDecimal(sellCurrency.SellRateAdjustment));
                                                        rateSell = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        rateSell = Convert.ToDecimal(sellCurrency.SellRate);
                                                    }
                                                }
                                                else
                                                {
                                                    if (sellCurrency.AutomatedSellRate != null && sellCurrency.AutomatedSellRate != 0)
                                                    {
                                                        if (sellCurrency.SellRateAdjustment != 0 && sellCurrency.SellRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(sellCurrency.AutomatedSellRate) * (1 + Convert.ToDecimal(sellCurrency.SellRateAdjustment));
                                                            rateSell = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            rateSell = Convert.ToDecimal(sellCurrency.AutomatedSellRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        rateSell = 0;
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (sellCurrency.SellRate != null && sellCurrency.SellRate != 0)
                                            {
                                                if (sellCurrency.SellRateAdjustment != 0 && sellCurrency.SellRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(sellCurrency.SellRate) * (1 + Convert.ToDecimal(sellCurrency.SellRateAdjustment));
                                                    rateSell = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    rateSell = Convert.ToDecimal(sellCurrency.SellRate);
                                                }
                                            }
                                            else
                                            {
                                                if (sellCurrency.AutomatedSellRate != null && sellCurrency.AutomatedSellRate != 0)
                                                {
                                                    if (sellCurrency.SellRateAdjustment != 0 && sellCurrency.SellRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(sellCurrency.AutomatedSellRate) * (1 + Convert.ToDecimal(sellCurrency.SellRateAdjustment));
                                                        rateSell = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        rateSell = Convert.ToDecimal(sellCurrency.AutomatedSellRate);
                                                    }
                                                }
                                                else
                                                {
                                                    rateSell = 0;
                                                }
                                            }
                                        }


                                        decimal upperLimit = rateSell * (1 + sellCurrency.AcceptableRange / 100);
                                        decimal lowerLimit = rateSell * (1 - sellCurrency.AcceptableRange / 100);
                                        decimal rate = Convert.ToDecimal(rateSell_str);

                                        if (rate < lowerLimit || rate > upperLimit)
                                        {
                                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rateSell_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                        }
                                    }

                                    rateSell_str = Convert.ToDecimal(rateSell_str).ToString(GetRateFormat(rateDP));
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, String.Format("'{0}' is not a valid Rate!", rateSell_str) });
                                }
                            }
                            else
                            {
                                modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, "Rate is required!" });
                            }

                            string encashmentRateSell_str = form["Transaction_EncashmentRate_" + rowIdSell];
                            if (!string.IsNullOrEmpty(encashmentRateSell_str))
                            {
                                bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(encashmentRateSell_str);

                                if (checkRateFormat)
                                {
                                    encashmentRateSell_str = Convert.ToDecimal(encashmentRateSell_str).ToString(GetRateFormat(rateDP));
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowIdSell, String.Format("'{0}' is not a valid Encashment Rate!", encashmentRateSell_str) });
                                }
                            }
                            else
                            {
                                modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowIdSell, "Encashment Rate is required!" });
                            }

                            //Buy Type
                            string symbolbuy = currencyChanged.Symbol;

                            int unitBuy = currencyChanged.Unit;

                            string[] paymentModesBuy = currencyChanged.PaymentModeAllowed.Split(',');
                            string paymentModesDDLBuy = "<select>";
                            foreach (string paymentMode in paymentModesBuy)
                            {
                                paymentModesDDLBuy += "<option value='" + paymentMode + "'>" + paymentMode + "</option>";
                            }
                            paymentModesDDLBuy += "</select>";

                            string disableChequeNoBuy = "true";
                            string disableBankTransferNoBuy = "true";

                            if (paymentModesBuy.FirstOrDefault() == "Cheque")
                            {
                                disableChequeNoBuy = "false";
                            }
                            else if (paymentModesBuy.FirstOrDefault() == "Bank Transfer")
                            {
                                disableBankTransferNoBuy = "false";
                            }

                            decimal amountLocalSell = 0;
                            decimal amountForeignBuy = 0;
                            decimal rateBuy = 0;
                            decimal amountLocalBuy = 0;

                            decimal totalForeign = 0;
                            decimal totalLocal = 0;

                            if (modelErrors.Count == 0)
                            {
                                amountLocalSell = Convert.ToDecimal((Convert.ToDecimal(amountForeignSell_str) * Convert.ToDecimal(rateSell_str) / sellCurrency.Unit).ToString(GetDecimalFormat(sgd.Decimal)));

                                amountForeignBuy = Convert.ToDecimal((Convert.ToDecimal(amountForeignSell_str) * Convert.ToDecimal(encashmentRateSell_str)).ToString(GetDecimalFormat(currencyChanged.Decimal)));

                                if (amountForeignBuy != 0)
                                {
                                    rateBuy = amountLocalSell / amountForeignBuy;
                                }

                                amountLocalBuy = amountLocalSell;

                                totalForeign += Convert.ToDecimal(amountForeignSell_str);
                                totalLocal += amountLocalSell;

                                result = "{\"IsValid\":true,";
                            }
                            else
                            {
                                result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                            }

                            //Calculate Total Amount
                            List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + rowIdSell).ToList();

                            foreach (string key in amountForeignKeys)
                            {
                                string rid = key.Split('_')[2];

                                string transactionType1 = form["Transaction_Type_" + rid];

                                if (transactionType1 == "Sell")
                                {
                                    string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                                    if (!string.IsNullOrEmpty(amountForeign_str1))
                                    {
                                        bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                        if (checkAmountForeignFormat)
                                        {
                                            totalForeign += Convert.ToDecimal(amountForeign_str1);
                                        }
                                    }

                                    string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                                    if (!string.IsNullOrEmpty(amountLocal_str))
                                    {
                                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                        if (checkAmountLocalFormat)
                                        {
                                            totalLocal += Convert.ToDecimal(amountLocal_str);
                                        }
                                    }
                                }
                            }

                            result += "\"Result\":true,"
                                + "\"RowChanged\":\"Buy\","
                                + "\"RowIdSell\":" + rowIdSell + ","
                                + "\"AmountForeignSell\":\"" + amountForeignSell_str + "\","
                                + "\"RateSell\":\"" + rateSell_str + "\","
                                + "\"EncashmentRateSell\":\"" + encashmentRateSell_str + "\","
                                + "\"AmountLocalSell\":\"" + amountLocalSell.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                                + "\"RowIdBuy\":" + rowId + ","
                                + "\"SymbolBuy\":\"" + currencyChanged.Symbol + "\","
                                + "\"AmountForeignBuy\":\"" + amountForeignBuy.ToString(GetDecimalFormat(currencyChanged.Decimal)) + "\","
                                + "\"RateBuy\":\"" + rateBuy.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"UnitBuy\":\"" + unitBuy.ToString(GetDecimalFormat(0)) + "\","
                                + "\"AmountLocalBuy\":\"" + amountLocalBuy.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                                + "\"PaymentModesDDLBuy\":\"" + paymentModesDDLBuy + "\","
                                + "\"DisableChequeNoBuy\":" + disableChequeNoBuy + ","
                                + "\"DisableBankTransferNoBuy\":" + disableBankTransferNoBuy + ","
                                + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                                + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                        }
                        #endregion
                    }
                    else if (type == "Swap")
                    {
                        #region Swap Transaction Type
                        string transactionType = form["Transaction_Type_" + rowId];

                        if (transactionType == "Buy")
                        {
                            List<string[]> modelErrors = new List<string[]>();

                            //Buy Type
                            string symbolBuy = currencyChanged.Symbol;
                            string amountForeignBuy_str = form["Transaction_AmountForeign_" + rowId];
                            decimal rateBuy = 0;

                            //if (currencyChanged.BuyRate != null)
                            //{
                            //	rateBuy = Convert.ToDecimal(currencyChanged.BuyRate);
                            //}

                            decimal encashmentRateBuy = currencyChanged.EncashmentRate;
                            CustomerCustomRate customRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                            if (customRate != null)
                            {
                                if (customRate.EncashmentRate != null && customRate.EncashmentRate != 0)
                                {
                                    encashmentRateBuy = customRate.EncashmentRate.Value;
                                }
                            }

                            if (customRate != null)
                            {
                                if (customRate.BuyRate != 0 && customRate != null)
                                {
                                    if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    {
                                        decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(customRate.BuyRate));
                                        rateBuy = Convert.ToDecimal(FinalRate);
                                    }
                                    else
                                    {
                                        if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                        {
                                            decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(customRate.BuyRate));
                                            rateBuy = Convert.ToDecimal(FinalRate);
                                        }
                                        else
                                        {
                                            rateBuy = 0;
                                        }
                                    }
                                    //rateBuy = Convert.ToDecimal(customRate.BuyRate);
                                }
                                else
                                {
                                    if (currencyChanged.BuyRate != null && currencyChanged.BuyRate != 0)
                                    {
                                        if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                        {
                                            decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                            rateBuy = Convert.ToDecimal(FinalRate);
                                        }
                                        else
                                        {
                                            rateBuy = Convert.ToDecimal(currencyChanged.BuyRate);
                                        }
                                    }
                                    else
                                    {
                                        if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                        {
                                            if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                                rateBuy = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                rateBuy = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                            }
                                        }
                                        else
                                        {
                                            rateBuy = 0;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (currencyChanged.BuyRate != null && currencyChanged.BuyRate != 0)
                                {
                                    if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                    {
                                        decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                        rateBuy = Convert.ToDecimal(FinalRate);
                                    }
                                    else
                                    {
                                        rateBuy = Convert.ToDecimal(currencyChanged.BuyRate);
                                    }
                                }
                                else
                                {
                                    if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    {
                                        if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                        {
                                            decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                            rateBuy = Convert.ToDecimal(FinalRate);
                                        }
                                        else
                                        {
                                            rateBuy = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                        }
                                    }
                                    else
                                    {
                                        rateBuy = 0;
                                    }
                                }
                            }

                            int unitBuy = currencyChanged.Unit;
                            decimal amountLocalBuy = 0;

                            string[] paymentModesBuy = currencyChanged.PaymentModeAllowed.Split(',');
                            string paymentModesDDLBuy = "<select>";
                            foreach (string paymentMode in paymentModesBuy)
                            {
                                paymentModesDDLBuy += "<option value='" + paymentMode + "'>" + paymentMode + "</option>";
                            }
                            paymentModesDDLBuy += "</select>";

                            string disableChequeNoBuy = "true";
                            string disableBankTransferNoBuy = "true";

                            if (paymentModesBuy.FirstOrDefault() == "Cheque")
                            {
                                disableChequeNoBuy = "false";
                            }
                            else if (paymentModesBuy.FirstOrDefault() == "Bank Transfer")
                            {
                                disableBankTransferNoBuy = "false";
                            }

                            if (!string.IsNullOrEmpty(amountForeignBuy_str))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignBuy_str);

                                if (checkAmountForeignFormat)
                                {
                                    amountForeignBuy_str = Convert.ToDecimal(amountForeignBuy_str).ToString(GetDecimalFormat(currencyChanged.Decimal));
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignBuy_str) });
                                }
                            }
                            else
                            {
                                //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "" });
                            }

                            //Sell Type
                            string searchString = currencyChanged.CurrencyCode;
                            string closestString = SearchClosestString(searchString, pairedCurrency);

                            Product sellCurrency = _productsModel.FindCurrencyCode(closestString);

                            string symbolSell = sellCurrency.Symbol;

                            int unitSell = sellCurrency.Unit;

                            string[] paymentModesSell = sellCurrency.PaymentModeAllowed.Split(',');
                            string paymentModesDDLSell = "<select>";
                            foreach (string paymentMode in paymentModesSell)
                            {
                                paymentModesDDLSell += "<option value='" + paymentMode + "'>" + paymentMode + "</option>";
                            }
                            paymentModesDDLSell += "</select>";

                            string disableChequeNoSell = "true";
                            string disableBankTransferNoSell = "true";

                            if (paymentModesSell.FirstOrDefault() == "Cheque")
                            {
                                disableChequeNoSell = "false";
                            }
                            else if (paymentModesSell.FirstOrDefault() == "Bank Transfer")
                            {
                                disableBankTransferNoSell = "false";
                            }

                            decimal amountForeignSell = 0;
                            decimal rateSell = 0;
                            decimal amountLocalSell = 0;

                            decimal totalForeign = 0;
                            decimal totalLocal = 0;

                            if (modelErrors.Count == 0)
                            {
                                amountLocalBuy = Convert.ToDecimal((Convert.ToDecimal(amountForeignBuy_str) * rateBuy / currencyChanged.Unit).ToString(GetDecimalFormat(currencyChanged.Decimal)));// Transaction Calculation Formula

                                amountForeignSell = Convert.ToDecimal((Convert.ToDecimal(amountForeignBuy_str) * encashmentRateBuy).ToString(GetDecimalFormat(sellCurrency.Decimal)));// Transaction Calculation Formula

                                if (amountForeignSell != 0)
                                {
                                    rateSell = amountLocalBuy / amountForeignSell;// Transaction Calculation Formula
                                }

                                amountLocalSell = amountLocalBuy;

                                totalForeign += amountForeignSell;
                                totalLocal += amountLocalSell;

                                result = "{\"IsValid\":true,";
                            }
                            else
                            {
                                result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                            }

                            //Calculate Total Amount
                            List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + (rowId + 1)).ToList();

                            foreach (string key in amountForeignKeys)
                            {
                                string rid = key.Split('_')[2];

                                string transactionType1 = form["Transaction_Type_" + rid];

                                if (transactionType1 == "Sell")
                                {
                                    string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                                    if (!string.IsNullOrEmpty(amountForeign_str1))
                                    {
                                        bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                        if (checkAmountForeignFormat)
                                        {
                                            totalForeign += Convert.ToDecimal(amountForeign_str1);
                                        }
                                    }

                                    string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                                    if (!string.IsNullOrEmpty(amountLocal_str))
                                    {
                                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                        if (checkAmountLocalFormat)
                                        {
                                            totalLocal += Convert.ToDecimal(amountLocal_str);
                                        }
                                    }
                                }
                            }

                            result += "\"Result\":true,"
                                + "\"RowChanged\":\"Buy\","
                                + "\"RowIdBuy\":" + rowId + ","
                                + "\"SymbolBuy\":\"" + symbolBuy + "\","
                                + "\"AmountForeignBuy\":\"" + amountForeignBuy_str + "\","
                                + "\"RateBuy\":\"" + rateBuy.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"EncashmentRateBuy\":\"" + encashmentRateBuy.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"UnitBuy\":\"" + unitBuy.ToString(GetDecimalFormat(0)) + "\","
                                + "\"AmountLocalBuy\":\"" + amountLocalBuy.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                                + "\"PaymentModesDDLBuy\":\"" + paymentModesDDLBuy + "\","
                                + "\"DisableChequeNoBuy\":" + disableChequeNoBuy + ","
                                + "\"DisableBankTransferNoBuy\":" + disableBankTransferNoBuy + ","
                                + "\"RowIdSell\":" + (rowId + 1) + ","
                                + "\"CurrencyIdSell\":" + sellCurrency.ID + ","
                                + "\"CurrencyCodeSell\":\"" + sellCurrency.CurrencyCode + "\","
                                + "\"SymbolSell\":\"" + sellCurrency.Symbol + "\","
                                + "\"AmountForeignSell\":\"" + amountForeignSell.ToString(GetDecimalFormat(sellCurrency.Decimal)) + "\","
                                + "\"RateSell\":\"" + rateSell.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"UnitSell\":\"" + unitSell.ToString(GetDecimalFormat(0)) + "\","
                                + "\"AmountLocalSell\":\"" + amountLocalSell.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                                + "\"PaymentModesDDLSell\":\"" + paymentModesDDLSell + "\","
                                + "\"DisableChequeNoSell\":" + disableChequeNoSell + ","
                                + "\"DisableBankTransferNoSell\":" + disableBankTransferNoSell + ","
                                + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                                + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                        }
                        else
                        {
                            List<string[]> modelErrors = new List<string[]>();

                            //Buy Type
                            int rowIdBuy = rowId - 1;

                            Product buyCurrency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowIdBuy]));

                            string amountForeignBuy_str = form["Transaction_AmountForeign_" + rowIdBuy];
                            if (!string.IsNullOrEmpty(amountForeignBuy_str))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignBuy_str);

                                if (checkAmountForeignFormat)
                                {
                                    amountForeignBuy_str = Convert.ToDecimal(amountForeignBuy_str).ToString(GetDecimalFormat(currencyChanged.Decimal));
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignBuy_str) });
                                }
                            }
                            else
                            {
                                //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, "Amount (Foreign) is required!" });
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, "" });
                            }

                            string rateBuy_str = form["Transaction_Rate_" + rowIdBuy];
                            if (!string.IsNullOrEmpty(rateBuy_str))
                            {
                                bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rateBuy_str);

                                if (checkRateFormat)
                                {
                                    if (buyCurrency.AcceptableRange > 0)
                                    {
                                        decimal upperLimit = Convert.ToDecimal(buyCurrency.SellRate) * (1 + buyCurrency.AcceptableRange / 100);
                                        decimal lowerLimit = Convert.ToDecimal(buyCurrency.SellRate) * (1 - buyCurrency.AcceptableRange / 100);
                                        decimal rate = Convert.ToDecimal(rateBuy_str);

                                        if (rate < lowerLimit || rate > upperLimit)
                                        {
                                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdBuy, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rateBuy_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                        }
                                    }

                                    rateBuy_str = Convert.ToDecimal(rateBuy_str).ToString(GetRateFormat(rateDP));
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdBuy, String.Format("'{0}' is not a valid Rate!", rateBuy_str) });
                                }
                            }
                            else
                            {
                                modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdBuy, "Rate is required!" });
                            }

                            string encashmentRateBuy_str = form["Transaction_EncashmentRate_" + rowIdBuy];
                            if (!string.IsNullOrEmpty(encashmentRateBuy_str))
                            {
                                bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(encashmentRateBuy_str);

                                if (checkRateFormat)
                                {
                                    encashmentRateBuy_str = Convert.ToDecimal(encashmentRateBuy_str).ToString(GetRateFormat(rateDP));
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowIdBuy, String.Format("'{0}' is not a valid Encashment Rate!", encashmentRateBuy_str) });
                                }
                            }
                            else
                            {
                                modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowIdBuy, "Encashment Rate is required!" });
                            }

                            //Sell Type
                            string symbolSell = currencyChanged.Symbol;

                            int unitSell = currencyChanged.Unit;

                            string[] paymentModesSell = currencyChanged.PaymentModeAllowed.Split(',');
                            string paymentModesDDLSell = "<select>";
                            foreach (string paymentMode in paymentModesSell)
                            {
                                paymentModesDDLSell += "<option value='" + paymentMode + "'>" + paymentMode + "</option>";
                            }
                            paymentModesDDLSell += "</select>";

                            string disableChequeNoSell = "true";
                            string disableBankTransferNoSell = "true";

                            if (paymentModesSell.FirstOrDefault() == "Cheque")
                            {
                                disableChequeNoSell = "false";
                            }
                            else if (paymentModesSell.FirstOrDefault() == "Bank Transfer")
                            {
                                disableBankTransferNoSell = "false";
                            }

                            decimal amountLocalBuy = 0;
                            decimal amountForeignSell = 0;
                            decimal rateSell = 0;
                            decimal amountLocalSell = 0;

                            decimal totalForeign = 0;
                            decimal totalLocal = 0;

                            if (modelErrors.Count == 0)
                            {
                                amountLocalBuy = Convert.ToDecimal((Convert.ToDecimal(amountForeignBuy_str) * Convert.ToDecimal(rateBuy_str) / buyCurrency.Unit).ToString(GetDecimalFormat(buyCurrency.Decimal)));

                                amountForeignSell = Convert.ToDecimal((Convert.ToDecimal(amountForeignBuy_str) * Convert.ToDecimal(encashmentRateBuy_str)).ToString(GetDecimalFormat(currencyChanged.Decimal)));

                                if (amountForeignSell != 0)
                                {
                                    rateSell = amountLocalBuy / amountForeignSell;
                                }

                                amountLocalSell = amountLocalBuy;

                                totalForeign += amountForeignSell;
                                totalLocal += amountLocalSell;

                                result = "{\"IsValid\":true,";
                            }
                            else
                            {
                                result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                            }

                            //Calculate Total Amount
                            List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + rowId).ToList();

                            foreach (string key in amountForeignKeys)
                            {
                                string rid = key.Split('_')[2];

                                string transactionType1 = form["Transaction_Type_" + rid];

                                if (transactionType1 == "Sell")
                                {
                                    string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                                    if (!string.IsNullOrEmpty(amountForeign_str1))
                                    {
                                        bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                        if (checkAmountForeignFormat)
                                        {
                                            totalForeign += Convert.ToDecimal(amountForeign_str1);
                                        }
                                    }

                                    string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                                    if (!string.IsNullOrEmpty(amountLocal_str))
                                    {
                                        bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                        if (checkAmountLocalFormat)
                                        {
                                            totalLocal += Convert.ToDecimal(amountLocal_str);
                                        }
                                    }
                                }
                            }

                            result += "\"Result\":true,"
                                + "\"RowChanged\":\"Sell\","
                                + "\"RowIdBuy\":" + rowId + ","
                                + "\"AmountForeignBuy\":\"" + amountForeignBuy_str + "\","
                                + "\"RateBuy\":\"" + rateBuy_str + "\","
                                + "\"EncashmentRateBuy\":\"" + encashmentRateBuy_str + "\","
                                + "\"AmountLocalBuy\":\"" + amountLocalBuy.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                                + "\"RowIdSell\":" + rowId + ","
                                + "\"SymbolSell\":\"" + currencyChanged.Symbol + "\","
                                + "\"AmountForeignSell\":\"" + amountForeignSell.ToString(GetDecimalFormat(currencyChanged.Decimal)) + "\","
                                + "\"UnitSell\":\"" + unitSell.ToString(GetDecimalFormat(0)) + "\","
                                + "\"PaymentModesDDLSell\":\"" + paymentModesDDLSell + "\","
                                + "\"DisableChequeNoSell\":" + disableChequeNoSell + ","
                                + "\"DisableBankTransferNoSell\":" + disableBankTransferNoSell + ","
                                + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                                + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                        }
                        #endregion
                    }
                    else if (type == "CrossCurrency")
                    {
                        #region Cross Currency Transaction Type
                        string transactionType = form["Transaction_Type_" + rowId];

                        if (transactionType == "Sell")
                        {
                            List<string[]> modelErrors = new List<string[]>();

                            //Sell Type
                            int rowIdSell = rowId;
                            string symbolSell = currencyChanged.Symbol;

                            string amountForeignSell_str = form["Transaction_AmountForeign_" + rowId];
                            if (!string.IsNullOrEmpty(amountForeignSell_str))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignSell_str);

                                if (checkAmountForeignFormat)
                                {
                                    amountForeignSell_str = Convert.ToDecimal(amountForeignSell_str).ToString(GetDecimalFormat(currencyChanged.Decimal));
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignSell_str) });
                                }
                            }
                            else
                            {
                                //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "" });
                            }

                            decimal rateSell = 0;

                            CustomerCustomRate getCustomRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                            if (getCustomRate != null)
                            {
                                if (getCustomRate.SellRate != 0 && getCustomRate != null)
                                {
                                    if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                    {
                                        decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(getCustomRate.SellRate));
                                        rateSell = Convert.ToDecimal(FinalRate);
                                    }
                                    else
                                    {
                                        if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                        {
                                            decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(getCustomRate.SellRate));
                                            rateSell = Convert.ToDecimal(FinalRate);
                                        }
                                        else
                                        {
                                            rateSell = 0;
                                        }
                                    }
                                    //rateSell = Convert.ToDecimal(getCustomRate.SellRate);
                                }
                                else
                                {
                                    if (currencyChanged.SellRate != null && currencyChanged.SellRate != 0)
                                    {
                                        if (currencyChanged.SellRateAdjustment != null && currencyChanged.SellRateAdjustment != 0)
                                        {
                                            decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                            rateSell = Convert.ToDecimal(FinalRate);
                                        }
                                        else
                                        {
                                            rateSell = Convert.ToDecimal(currencyChanged.SellRate);
                                        }
                                    }
                                    else
                                    {
                                        if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                        {
                                            if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                rateSell = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                rateSell = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                            }
                                        }
                                        else
                                        {
                                            rateSell = 0;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (currencyChanged.SellRate != null && currencyChanged.SellRate != 0)
                                {
                                    if (currencyChanged.SellRateAdjustment != null && currencyChanged.SellRateAdjustment != 0)
                                    {
                                        decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                        rateSell = Convert.ToDecimal(FinalRate);
                                    }
                                    else
                                    {
                                        rateSell = Convert.ToDecimal(currencyChanged.SellRate);
                                    }
                                }
                                else
                                {
                                    if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                    {
                                        if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                        {
                                            decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                            rateSell = Convert.ToDecimal(FinalRate);
                                        }
                                        else
                                        {
                                            rateSell = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                        }
                                    }
                                    else
                                    {
                                        rateSell = 0;
                                    }
                                }
                            }

                            //if (currencyChanged.SellRate != null)
                            //{
                            //	rateSell = Convert.ToDecimal(currencyChanged.SellRate);
                            //}

                            int unitSell = currencyChanged.Unit;

                            string[] paymentModesSell = currencyChanged.PaymentModeAllowed.Split(',');
                            string paymentModesDDLSell = "<select>";
                            foreach (string paymentMode in paymentModesSell)
                            {
                                paymentModesDDLSell += "<option value='" + paymentMode + "'>" + paymentMode + "</option>";
                            }
                            paymentModesDDLSell += "</select>";

                            string disableChequeNoSell = "true";
                            string disableBankTransferNoSell = "true";

                            if (paymentModesSell.FirstOrDefault() == "Cheque")
                            {
                                disableChequeNoSell = "false";
                            }
                            else if (paymentModesSell.FirstOrDefault() == "Bank Transfer")
                            {
                                disableBankTransferNoSell = "false";
                            }

                            //Buy Type
                            int rowIdBuy = ++rowId;

                            Product buyCurrency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowIdBuy]));

                            string amountForeignBuy_str = form["Transaction_AmountForeign_" + rowIdBuy];
                            if (!string.IsNullOrEmpty(amountForeignBuy_str))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignBuy_str);

                                if (checkAmountForeignFormat)
                                {
                                    amountForeignBuy_str = Convert.ToDecimal(amountForeignBuy_str).ToString(GetDecimalFormat(buyCurrency.Decimal));
                                }
                                else
                                {
                                    //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignBuy_str) });
                                    modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, "" });
                                }
                            }
                            else
                            {
                                //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, "Amount (Foreign) is required!" });
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, "" });
                            }

                            decimal crossRateSell = 0;
                            decimal amountLocalSell = 0;
                            decimal rateBuy = 0;
                            decimal amountLocalBuy = 0;

                            decimal totalForeign = 0;
                            decimal totalLocal = 0;

                            if (modelErrors.Count == 0)
                            {
                                decimal actualRateSell = rateSell / unitSell;

                                amountLocalSell = Convert.ToDecimal((Convert.ToDecimal(amountForeignSell_str) * actualRateSell).ToString(GetDecimalFormat(sgd.Decimal)));// Transaction Calculation Formula

                                if (Convert.ToDecimal(amountForeignBuy_str) != 0)
                                {
                                    rateBuy = Convert.ToDecimal((amountLocalSell / Convert.ToDecimal(amountForeignBuy_str)).ToString(GetRateFormat(rateDP)));// Transaction Calculation Formula
                                }

                                amountLocalBuy = amountLocalSell;

                                if (rateBuy != 0)
                                {
                                    crossRateSell = Convert.ToDecimal((actualRateSell / rateBuy).ToString(GetRateFormat(rateDP)));// Transaction Calculation Formula
                                }

                                totalForeign += Convert.ToDecimal(amountForeignSell_str);
                                totalLocal += amountLocalSell;

                                result = "{\"IsValid\":true,";
                            }
                            else
                            {
                                result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                            }

                            result += "\"Result\":true,"
                                + "\"RowChanged\":\"Sell\","
                                + "\"RowIdSell\":" + rowIdSell + ","
                                + "\"SymbolSell\":\"" + symbolSell + "\","
                                + "\"AmountForeignSell\":\"" + amountForeignSell_str + "\","
                                + "\"RateSell\":\"" + rateSell.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"CrossRateSell\":\"" + crossRateSell.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"UnitSell\":\"" + unitSell.ToString(GetDecimalFormat(0)) + "\","
                                + "\"AmountLocalSell\":\"" + amountLocalSell.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                                + "\"PaymentModesDDLSell\":\"" + paymentModesDDLSell + "\","
                                + "\"DisableChequeNoSell\":" + disableChequeNoSell + ","
                                + "\"DisableBankTransferNoSell\":" + disableBankTransferNoSell + ","
                                + "\"RowIdBuy\":" + rowIdBuy + ","
                                + "\"CurrencyIdBuy\":" + buyCurrency.ID + ","
                                + "\"CurrencyCodeBuy\":\"" + buyCurrency.CurrencyCode + "\","
                                + "\"AmountForeignBuy\":\"" + amountForeignBuy_str + "\","
                                + "\"RateBuy\":\"" + rateBuy.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"AmountLocalBuy\":\"" + amountLocalBuy.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                                + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                                + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                        }
                        else
                        {
                            List<string[]> modelErrors = new List<string[]>();

                            //Sell Type
                            int rowIdSell = rowId - 1;

                            Product sellCurrency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowIdSell]));

                            string amountForeignSell_str = form["Transaction_AmountForeign_" + rowIdSell];
                            if (!string.IsNullOrEmpty(amountForeignSell_str))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignSell_str);

                                if (checkAmountForeignFormat)
                                {
                                    amountForeignSell_str = Convert.ToDecimal(amountForeignSell_str).ToString(GetDecimalFormat(sellCurrency.Decimal));
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdSell, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignSell_str) });
                                }
                            }
                            else
                            {
                                //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdSell, "Amount (Foreign) is required!" });
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdSell, "" });
                            }

                            string rateSell_str = form["Transaction_Rate_" + rowIdSell];

                            if (!string.IsNullOrEmpty(rateSell_str))
                            {
                                bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rateSell_str);

                                if (checkRateFormat)
                                {
                                    if (currencyChanged.AcceptableRange > 0)
                                    {
                                        decimal getBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);

                                        //get CustomRate
                                        CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                                        //if (GetCustomRate != null)
                                        //{
                                        //	if (GetCustomRate.BuyRate != 0 && GetCustomRate.BuyRate != null)
                                        //	{
                                        //		getBuyRate = Convert.ToDecimal(GetCustomRate.BuyRate);
                                        //	}
                                        //}

                                        if (GetCustomRate != null)
                                        {
                                            if (GetCustomRate.BuyRate != 0 && GetCustomRate != null)
                                            {
                                                if (sellCurrency.BuyRate != 0 && sellCurrency.BuyRate != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(sellCurrency.BuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                    getBuyRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    if (sellCurrency.AutomatedBuyRate != 0 && sellCurrency.AutomatedBuyRate != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(sellCurrency.AutomatedBuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                        getBuyRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        getBuyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowIdSell]);
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (sellCurrency.BuyRate != 0 && sellCurrency.BuyRate != null)
                                                {
                                                    if (sellCurrency.BuyRateAdjustment != 0 && sellCurrency.BuyRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(sellCurrency.BuyRate) * (1 - Convert.ToDecimal(sellCurrency.BuyRateAdjustment));
                                                        getBuyRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        getBuyRate = Convert.ToDecimal(sellCurrency.BuyRate);
                                                    }
                                                }
                                                else
                                                {
                                                    if (sellCurrency.AutomatedBuyRate != 0 && sellCurrency.AutomatedBuyRate != null)
                                                    {
                                                        if (sellCurrency.BuyRateAdjustment != 0 && sellCurrency.BuyRateAdjustment != null)
                                                        {
                                                            decimal FinalRate = Convert.ToDecimal(sellCurrency.AutomatedBuyRate) * (1 - Convert.ToDecimal(sellCurrency.BuyRateAdjustment));
                                                            getBuyRate = Convert.ToDecimal(FinalRate);
                                                        }
                                                        else
                                                        {
                                                            getBuyRate = Convert.ToDecimal(sellCurrency.AutomatedBuyRate);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        getBuyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowIdSell]);
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (sellCurrency.BuyRate != 0 && sellCurrency.BuyRate != null)
                                            {
                                                if (sellCurrency.BuyRateAdjustment != 0 && sellCurrency.BuyRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(sellCurrency.BuyRate) * (1 - Convert.ToDecimal(sellCurrency.BuyRateAdjustment));
                                                    getBuyRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    getBuyRate = Convert.ToDecimal(sellCurrency.BuyRate);
                                                }
                                            }
                                            else
                                            {
                                                if (sellCurrency.AutomatedBuyRate != 0 && sellCurrency.AutomatedBuyRate != null)
                                                {
                                                    if (sellCurrency.BuyRateAdjustment != 0 && sellCurrency.BuyRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(sellCurrency.AutomatedBuyRate) * (1 - Convert.ToDecimal(sellCurrency.BuyRateAdjustment));
                                                        getBuyRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        getBuyRate = Convert.ToDecimal(sellCurrency.AutomatedBuyRate);
                                                    }
                                                }
                                                else
                                                {
                                                    getBuyRate = Convert.ToDecimal(form["Transaction_Rate_" + rowIdSell]);
                                                }
                                            }
                                        }

                                        decimal upperLimit = getBuyRate * (1 + currencyChanged.AcceptableRange / 100);
                                        decimal lowerLimit = getBuyRate * (1 - currencyChanged.AcceptableRange / 100);
                                        decimal rate = Convert.ToDecimal(rateSell_str);

                                        if (rate < lowerLimit || rate > upperLimit)
                                        {
                                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rateSell_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                        }
                                        else
                                        {
                                            rateSell_str = Convert.ToDecimal(rateSell_str).ToString(GetRateFormat(rateDP));
                                        }
                                    }
                                    else
                                    {
                                        rateSell_str = Convert.ToDecimal(rateSell_str).ToString(GetRateFormat(rateDP));
                                    }
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, String.Format("'{0}' is not a valid Rate!", rateSell_str) });
                                }
                            }
                            else
                            {
                                modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, "Rate is required!" });
                            }

                            //Buy Type
                            int rowIdBuy = rowId;

                            string amountForeignBuy_str = form["Transaction_AmountForeign_" + rowIdBuy];
                            if (!string.IsNullOrEmpty(amountForeignBuy_str))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignBuy_str);

                                if (checkAmountForeignFormat)
                                {
                                    amountForeignBuy_str = Convert.ToDecimal(amountForeignBuy_str).ToString(GetDecimalFormat(currencyChanged.Decimal));
                                }
                                else
                                {
                                    modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignBuy_str) });
                                }
                            }
                            else
                            {
                                //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, "Amount (Foreign) is required!" });
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, "" });
                            }

                            string[] paymentModesBuy = currencyChanged.PaymentModeAllowed.Split(',');
                            string paymentModesDDLBuy = "<select>";
                            foreach (string paymentMode in paymentModesBuy)
                            {
                                paymentModesDDLBuy += "<option value='" + paymentMode + "'>" + paymentMode + "</option>";
                            }
                            paymentModesDDLBuy += "</select>";

                            string disableChequeNoBuy = "true";
                            string disableBankTransferNoBuy = "true";

                            if (paymentModesBuy.FirstOrDefault() == "Cheque")
                            {
                                disableChequeNoBuy = "false";
                            }
                            else if (paymentModesBuy.FirstOrDefault() == "Bank Transfer")
                            {
                                disableBankTransferNoBuy = "false";
                            }

                            decimal crossRateSell = 0;
                            decimal amountLocalSell = 0;
                            decimal rateBuy = 0;
                            decimal amountLocalBuy = 0;

                            decimal totalForeign = 0;
                            decimal totalLocal = 0;

                            if (modelErrors.Count == 0)
                            {
                                decimal rateSell = Convert.ToDecimal(rateSell_str) / sellCurrency.Unit;

                                amountLocalSell = Convert.ToDecimal((Convert.ToDecimal(amountForeignSell_str) * rateSell).ToString(GetDecimalFormat(sgd.Decimal)));

                                if (Convert.ToDecimal(amountForeignBuy_str) != 0)
                                {
                                    rateBuy = Convert.ToDecimal((amountLocalSell / Convert.ToDecimal(amountForeignBuy_str)).ToString(GetRateFormat(rateDP)));
                                }

                                amountLocalBuy = amountLocalSell;

                                if (rateBuy != 0)
                                {
                                    crossRateSell = Convert.ToDecimal((rateSell / rateBuy).ToString(GetRateFormat(rateDP)));
                                }

                                //if (crossRateSell != 0)
                                //{
                                //    crossRateSell = Convert.ToDecimal((sellCurrency.Unit / crossRateSell).ToString(GetRateFormat(rateDP)));
                                //}

                                totalForeign += Convert.ToDecimal(amountForeignSell_str);
                                totalLocal += amountLocalSell;

                                result = "{\"IsValid\":true,";
                            }
                            else
                            {
                                result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                            }

                            result += "\"Result\":true,"
                                + "\"RowChanged\":\"Buy\","
                                + "\"RowIdSell\":" + rowIdSell + ","
                                + "\"AmountForeignSell\":\"" + amountForeignSell_str + "\","
                                + "\"RateSell\":\"" + rateSell_str + "\","
                                + "\"CrossRateSell\":\"" + crossRateSell.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"AmountLocalSell\":\"" + amountLocalSell.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                                + "\"RowIdBuy\":" + rowIdBuy + ","
                                + "\"SymbolBuy\":\"" + currencyChanged.Symbol + "\","
                                + "\"AmountForeignBuy\":\"" + amountForeignBuy_str + "\","
                                + "\"RateBuy\":\"" + rateBuy.ToString(GetRateFormat(rateDP)) + "\","
                                + "\"UnitBuy\":" + currencyChanged.Unit + ","
                                + "\"AmountLocalBuy\":\"" + amountLocalBuy.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                                + "\"PaymentModesDDLBuy\":\"" + paymentModesDDLBuy + "\","
                                + "\"DisableChequeNoBuy\":" + disableChequeNoBuy + ","
                                + "\"DisableBankTransferNoBuy\":" + disableBankTransferNoBuy + ","
                                + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                                + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                        }
                        #endregion
                    }
                }
                else
                {
                    result = "{\"Result\":false,\"ErrorMessage\":\"Currency record not found!\"}";
                }
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: AmountForeignChange
        [HttpPost]
        public string AmountForeignChange(int rowId, string type, FormCollection form, int cid = 0)
        {
            string result = "";

            try
            {
                if (type == "Buy" || type == "Sell")
                {
                    #region Buy/Sell Transaction Type
                    Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                    List<string[]> modelErrors = new List<string[]>();

                    string amountForeign_str = form["Transaction_AmountForeign_" + rowId];

                    if (!string.IsNullOrEmpty(amountForeign_str))
                    {
                        bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str);

                        if (!checkAmountForeignFormat)
                        {
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeign_str) });
                        }
                        else
                        {
                            amountForeign_str = Convert.ToDecimal(amountForeign_str).ToString(GetDecimalFormat(currencyChanged.Decimal));
                        }
                    }
                    else
                    {
                        modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                    }

                    string rate_str = form["Transaction_Rate_" + rowId];
                    if (!string.IsNullOrEmpty(rate_str))
                    {
                        bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rate_str);

                        if (!checkRateFormat)
                        {
                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is not a valid Rate!", rate_str) });
                        }
                        else
                        {
                            if (type == "Buy")
                            {
                                if (currencyChanged.AcceptableRange > 0)
                                {
                                    decimal GetBuyRate = 0;//Convert.ToDecimal(currencyChanged.BuyRate);

                                    //if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //{
                                    //	GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                    //}
                                    //else
                                    //{
                                    //	if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //	{
                                    //		GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                    //	}
                                    //}

                                    CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                                    if (GetCustomRate != null)
                                    {
                                        if (GetCustomRate.BuyRate != 0 && GetCustomRate.BuyRate != null)
                                        {
                                            if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                GetBuyRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                    GetBuyRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    GetBuyRate = 0;
                                                }
                                            }
                                            //GetBuyRate = Convert.ToDecimal(GetCustomRate.BuyRate);
                                        }
                                        else
                                        {
                                            if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                            {
                                                if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                                    GetBuyRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                                }
                                            }
                                            else
                                            {
                                                if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                                {
                                                    if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                                        GetBuyRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                                    }
                                                }
                                                else
                                                {
                                                    GetBuyRate = 0;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                        {
                                            if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                                GetBuyRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                            }
                                        }
                                        else
                                        {
                                            if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                            {
                                                if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                                    GetBuyRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                                }
                                            }
                                            else
                                            {
                                                GetBuyRate = 0;
                                            }
                                        }
                                    }

                                    decimal upperLimit = GetBuyRate * (1 + currencyChanged.AcceptableRange / 100);
                                    decimal lowerLimit = GetBuyRate * (1 - currencyChanged.AcceptableRange / 100);
                                    decimal rate = Convert.ToDecimal(rate_str);

                                    if (rate < lowerLimit || rate > upperLimit)
                                    {
                                        modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rate_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                    }
                                }
                            }
                            else
                            {
                                if (currencyChanged.AcceptableRange > 0)
                                {
                                    decimal sellRate = 0;

                                    CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                                    if (GetCustomRate != null)
                                    {
                                        if (GetCustomRate.SellRate != 0 && GetCustomRate != null)
                                        {
                                            if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                sellRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                            {
                                                if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(currencyChanged.SellRate);
                                                }
                                            }
                                            else
                                            {
                                                if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                                {
                                                    if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                                    }
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                        {
                                            if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                sellRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                sellRate = Convert.ToDecimal(currencyChanged.SellRate);
                                            }
                                        }
                                        else
                                        {
                                            if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                            {
                                                if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                                }
                                            }
                                            else
                                            {
                                                sellRate = Convert.ToDecimal(form["Transaction_Rate_" + rowId]);
                                            }
                                        }
                                    }

                                    decimal upperLimit = sellRate * (1 + currencyChanged.AcceptableRange / 100);
                                    decimal lowerLimit = sellRate * (1 - currencyChanged.AcceptableRange / 100);
                                    decimal rate = Convert.ToDecimal(rate_str);

                                    if (rate < lowerLimit || rate > upperLimit)
                                    {
                                        modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rate_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, "Rate is required!" });
                    }

                    Product sgd = _productsModel.FindCurrencyCode("SGD");

                    decimal amountLocal = 0;

                    decimal denoTotalCalculated = 0;
                    decimal denoTotalRemaining = 0;
                    decimal denoTotalOrder = 0;

                    decimal totalForeign = 0;
                    decimal totalLocal = 0;

                    if (modelErrors.Count == 0)
                    {
                        amountLocal = Convert.ToDecimal((Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(rate_str) / currencyChanged.Unit).ToString(GetDecimalFormat(sgd.Decimal)));// Transaction Calculation Formula

                        denoTotalOrder = Convert.ToDecimal(amountForeign_str);

                        totalForeign += Convert.ToDecimal(amountForeign_str);
                        totalLocal += amountLocal;

                        result = "{\"IsValid\":true,";
                    }
                    else
                    {
                        result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                    }

                    //Calculate Denominations
                    List<string> denoKeys = form.AllKeys.Where(e => e.Contains("Denomination_Value_AmountForeign_" + rowId + "_")).ToList();

                    foreach (string key in denoKeys)
                    {
                        string deno_amountForeign_str = form[key];

                        if (!string.IsNullOrEmpty(deno_amountForeign_str))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(deno_amountForeign_str);

                            if (checkAmountForeignFormat)
                            {
                                denoTotalCalculated += Convert.ToDecimal(deno_amountForeign_str);
                            }
                        }
                    }

                    denoTotalRemaining = denoTotalOrder - denoTotalCalculated;

                    //Calculate Total Amount
                    List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + rowId).ToList();

                    foreach (string key in amountForeignKeys)
                    {
                        string rid = key.Split('_')[2];

                        string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                        if (!string.IsNullOrEmpty(amountForeign_str1))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                            if (checkAmountForeignFormat)
                            {
                                totalForeign += Convert.ToDecimal(amountForeign_str1);
                            }
                        }

                        string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                        if (!string.IsNullOrEmpty(amountLocal_str))
                        {
                            bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                            if (checkAmountLocalFormat)
                            {
                                totalLocal += Convert.ToDecimal(amountLocal_str);
                            }
                        }
                    }

                    result += "\"Result\":true,"
                        + "\"AmountForeign\":\"" + amountForeign_str + "\","
                        + "\"AmountLocal\":\"" + amountLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                        + "\"DenoTotalCalculated\":\"" + denoTotalCalculated.ToString(GetDecimalFormat(currencyChanged.Decimal)) + "\","
                        + "\"DenoTotalRemaining\":\"" + denoTotalRemaining.ToString(GetDecimalFormat(currencyChanged.Decimal)) + "\","
                        + "\"DenoTotalOrder\":\"" + denoTotalOrder.ToString(GetDecimalFormat(currencyChanged.Decimal)) + "\","
                        + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                        + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                    #endregion
                }
                else if (type == "Encashment")
                {
                    #region Encashment Transaction Type
                    string transactionType = form["Transaction_Type_" + rowId];

                    if (transactionType == "Sell")
                    {
                        Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                        List<string[]> modelErrors = new List<string[]>();

                        string amountForeign_str = form["Transaction_AmountForeign_" + rowId];

                        if (!string.IsNullOrEmpty(amountForeign_str))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str);

                            if (!checkAmountForeignFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeign_str) });
                            }
                            else
                            {
                                amountForeign_str = Convert.ToDecimal(amountForeign_str).ToString(GetDecimalFormat(currencyChanged.Decimal));
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                        }

                        string rate_str = form["Transaction_Rate_" + rowId];

                        if (!string.IsNullOrEmpty(rate_str))
                        {
                            bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rate_str);

                            if (!checkRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is not a valid Rate!", rate_str) });
                            }
                            else
                            {
                                if (currencyChanged.AcceptableRange > 0)
                                {

                                    decimal sellRate = 0;//Convert.ToDecimal(currencyChanged.BuyRate);
                                    CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                                    if (GetCustomRate != null)
                                    {
                                        if (GetCustomRate.SellRate != 0 && GetCustomRate != null)
                                        {
                                            if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                sellRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                            {
                                                if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(currencyChanged.SellRate);
                                                }
                                            }
                                            else
                                            {
                                                if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                                {
                                                    if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                                    }
                                                }
                                                else
                                                {
                                                    sellRate = 0;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                        {
                                            if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                sellRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                sellRate = Convert.ToDecimal(currencyChanged.SellRate);
                                            }
                                        }
                                        else
                                        {
                                            if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                            {
                                                if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                                }
                                            }
                                            else
                                            {
                                                sellRate = 0;
                                            }
                                        }
                                    }

                                    //if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //{
                                    //	GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                    //}
                                    //else
                                    //{
                                    //	if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //	{
                                    //		GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                    //	}
                                    //	else
                                    //	{
                                    //		GetBuyRate = 0;
                                    //	}
                                    //}

                                    //CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                                    //if (GetCustomRate != null)
                                    //{
                                    //	if (GetCustomRate.SellRate != 0 && GetCustomRate.SellRate != null)
                                    //	{
                                    //		if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                    //		{
                                    //			decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                    //			GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //		}
                                    //		else
                                    //		{
                                    //			if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //			{
                                    //				decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                    //				GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = 0;
                                    //			}
                                    //		}
                                    //		//GetBuyRate = Convert.ToDecimal(GetCustomRate.BuyRate);
                                    //	}
                                    //	else
                                    //	{
                                    //		if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //		{
                                    //			if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                    //			{
                                    //				decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                    //				GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                    //			}
                                    //		}
                                    //		else
                                    //		{
                                    //			if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //			{
                                    //				if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                    //				{
                                    //					decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                    //					GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //				}
                                    //				else
                                    //				{
                                    //					GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                    //				}
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = 0;
                                    //			}
                                    //		}
                                    //	}
                                    //}
                                    //else
                                    //{
                                    //	if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //	{
                                    //		if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                    //		{
                                    //			decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                    //			GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //		}
                                    //		else
                                    //		{
                                    //			GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                    //		}
                                    //	}
                                    //	else
                                    //	{
                                    //		if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //		{
                                    //			if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                    //			{
                                    //				decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                    //				GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                    //			}
                                    //		}
                                    //		else
                                    //		{
                                    //			GetBuyRate = 0;
                                    //		}
                                    //	}
                                    //}

                                    decimal upperLimit = sellRate * (1 + currencyChanged.AcceptableRange / 100);
                                    decimal lowerLimit = sellRate * (1 - currencyChanged.AcceptableRange / 100);
                                    decimal rate = Convert.ToDecimal(rate_str);

                                    if (rate < lowerLimit || rate > upperLimit)
                                    {
                                        modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rate_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                    }
                                }
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, "Rate is required!" });
                        }

                        string encashmentRate_str = form["Transaction_EncashmentRate_" + rowId];

                        if (!string.IsNullOrEmpty(encashmentRate_str))
                        {
                            bool checkEncashmentRateFormat = FormValidationHelper.NonNegativeAmountValidation(encashmentRate_str);

                            if (!checkEncashmentRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowId, String.Format("'{0}' is not a valid Rate!", encashmentRate_str) });
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowId, "Encashment Rate is required!" });
                        }

                        Product sgd = _productsModel.FindCurrencyCode("SGD");
                        Product buyCurrency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + (rowId + 1)]));

                        decimal amountLocalSell = 0;
                        decimal amountForeignBuy = 0;
                        decimal rateBuy = 0;
                        decimal amountLocalBuy = 0;

                        decimal denoTotalCalculated = 0;
                        decimal denoTotalRemaining = 0;
                        decimal denoTotalOrder = 0;

                        decimal totalForeign = 0;
                        decimal totalLocal = 0;

                        if (modelErrors.Count == 0)
                        {
                            amountLocalSell = Convert.ToDecimal((Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(rate_str) / currencyChanged.Unit).ToString(GetDecimalFormat(sgd.Decimal)));// Transaction Calculation Formula

                            amountForeignBuy = Convert.ToDecimal((Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(encashmentRate_str)).ToString(GetDecimalFormat(buyCurrency.Decimal)));// Transaction Calculation Formula

                            if (amountForeignBuy != 0)
                            {
                                rateBuy = Convert.ToDecimal((amountLocalSell / amountForeignBuy).ToString(GetRateFormat(rateDP)));// Transaction Calculation Formula
                            }

                            amountLocalBuy = amountLocalSell;

                            denoTotalOrder = Convert.ToDecimal(amountForeign_str);

                            totalForeign += Convert.ToDecimal(amountForeign_str);
                            totalLocal += amountLocalSell;

                            result = "{\"IsValid\":true,";
                        }
                        else
                        {
                            result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                        }

                        //Calculate Denominations
                        List<string> denoKeys = form.AllKeys.Where(e => e.Contains("Denomination_Value_AmountForeign_" + rowId + "_")).ToList();

                        foreach (string key in denoKeys)
                        {
                            string deno_amountForeign_str = form[key];

                            if (!string.IsNullOrEmpty(deno_amountForeign_str))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(deno_amountForeign_str);

                                if (checkAmountForeignFormat)
                                {
                                    denoTotalCalculated += Convert.ToDecimal(deno_amountForeign_str);
                                }
                            }
                        }

                        denoTotalRemaining = denoTotalOrder - denoTotalCalculated;

                        //Calculate Total Amount
                        List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + rowId).ToList();

                        foreach (string key in amountForeignKeys)
                        {
                            string rid = key.Split('_')[2];

                            string transactionType1 = form["Transaction_Type_" + rid];

                            if (transactionType1 == "Sell")
                            {
                                string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                                if (!string.IsNullOrEmpty(amountForeign_str1))
                                {
                                    bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                    if (checkAmountForeignFormat)
                                    {
                                        totalForeign += Convert.ToDecimal(amountForeign_str1);
                                    }
                                }

                                string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                                if (!string.IsNullOrEmpty(amountLocal_str))
                                {
                                    bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                    if (checkAmountLocalFormat)
                                    {
                                        totalLocal += Convert.ToDecimal(amountLocal_str);
                                    }
                                }
                            }
                        }

                        rowId++;

                        //amountLocalBuy = amountLocalBuy / buyCurrency.Unit;

                        result += "\"Result\":true,"
                            + "\"AmountForeign\":\"" + amountForeign_str + "\","
                            + "\"AmountLocal\":\"" + amountLocalSell.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                            + "\"RowIdBuy\":" + rowId + ","
                            + "\"AmountForeignBuy\":\"" + amountForeignBuy.ToString(GetDecimalFormat(buyCurrency.Decimal)) + "\","
                            + "\"RateBuy\":\"" + rateBuy.ToString(GetRateFormat(rateDP)) + "\","
                            + "\"AmountLocalBuy\":\"" + amountLocalBuy.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                            + "\"DenoTotalCalculated\":\"" + denoTotalCalculated.ToString(GetDecimalFormat(currencyChanged.Decimal)) + "\","
                            + "\"DenoTotalRemaining\":\"" + denoTotalRemaining.ToString(GetDecimalFormat(currencyChanged.Decimal)) + "\","
                            + "\"DenoTotalOrder\":\"" + denoTotalOrder.ToString(GetDecimalFormat(currencyChanged.Decimal)) + "\","
                            + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                            + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                    }
                    else
                    {
                        result = "{\"Result\":false,\"ErrorMessage\":\"Amount (Foreign) can only be changed for Sell Type!\"}";
                    }
                    #endregion
                }
                else if (type == "Swap")
                {
                    #region Swap Transaction Type
                    string transactionType = form["Transaction_Type_" + rowId];

                    if (transactionType == "Buy")
                    {
                        Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                        List<string[]> modelErrors = new List<string[]>();

                        string amountForeign_str = form["Transaction_AmountForeign_" + rowId];

                        if (!string.IsNullOrEmpty(amountForeign_str))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str);

                            if (!checkAmountForeignFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeign_str) });
                            }
                            else
                            {
                                amountForeign_str = Convert.ToDecimal(amountForeign_str).ToString(GetDecimalFormat(currencyChanged.Decimal));
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                        }

                        string rate_str = form["Transaction_Rate_" + rowId];

                        if (!string.IsNullOrEmpty(rate_str))
                        {
                            bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rate_str);

                            if (!checkRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is not a valid Rate!", rate_str) });
                            }
                            else
                            {
                                if (currencyChanged.AcceptableRange > 0)
                                {
                                    decimal GetBuyRate = 0;//Convert.ToDecimal(currencyChanged.BuyRate);

                                    //if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //{
                                    //	GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                    //}
                                    //else
                                    //{
                                    //	if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //	{
                                    //		GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                    //	}
                                    //	else
                                    //	{
                                    //		GetBuyRate = 0;
                                    //	}
                                    //}

                                    CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                                    if (GetCustomRate != null)
                                    {
                                        if (GetCustomRate.BuyRate != 0 && GetCustomRate.BuyRate != null)
                                        {
                                            if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                GetBuyRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                    GetBuyRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    GetBuyRate = 0;
                                                }
                                            }
                                            //GetBuyRate = Convert.ToDecimal(GetCustomRate.BuyRate);
                                        }
                                        else
                                        {
                                            if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                            {
                                                if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                                    GetBuyRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                                }
                                            }
                                            else
                                            {
                                                if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                                {
                                                    if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                                        GetBuyRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                                    }
                                                }
                                                else
                                                {
                                                    GetBuyRate = 0;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                        {
                                            if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                                GetBuyRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                            }
                                        }
                                        else
                                        {
                                            if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                            {
                                                if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                                    GetBuyRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                                }
                                            }
                                            else
                                            {
                                                GetBuyRate = 0;
                                            }
                                        }
                                    }

                                    //if (GetCustomRate != null)
                                    //{
                                    //	if (GetCustomRate.BuyRate != 0 && GetCustomRate.BuyRate != null)
                                    //	{
                                    //		GetBuyRate = Convert.ToDecimal(GetCustomRate.BuyRate);
                                    //	}
                                    //}

                                    decimal upperLimit = GetBuyRate * (1 + currencyChanged.AcceptableRange / 100);
                                    decimal lowerLimit = GetBuyRate * (1 - currencyChanged.AcceptableRange / 100);
                                    decimal rate = Convert.ToDecimal(rate_str);

                                    if (rate < lowerLimit || rate > upperLimit)
                                    {
                                        modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rate_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                    }
                                }
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, "Rate is required!" });
                        }

                        string encashmentRate_str = form["Transaction_EncashmentRate_" + rowId];

                        if (!string.IsNullOrEmpty(encashmentRate_str))
                        {
                            bool checkEncashmentRateFormat = FormValidationHelper.NonNegativeAmountValidation(encashmentRate_str);

                            if (!checkEncashmentRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowId, String.Format("'{0}' is not a valid Rate!", encashmentRate_str) });
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowId, "Encashment Rate is required!" });
                        }

                        Product sgd = _productsModel.FindCurrencyCode("SGD");
                        Product sellCurrency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + (rowId + 1)]));

                        decimal amountLocalBuy = 0;
                        decimal amountForeignSell = 0;
                        decimal rateSell = 0;
                        decimal amountLocalSell = 0;

                        decimal denoTotalCalculated = 0;
                        decimal denoTotalRemaining = 0;
                        decimal denoTotalOrder = 0;

                        decimal totalForeign = 0;
                        decimal totalLocal = 0;

                        if (modelErrors.Count == 0)
                        {
                            amountLocalBuy = Convert.ToDecimal((Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(rate_str) / currencyChanged.Unit).ToString(GetDecimalFormat(sgd.Decimal)));// Transaction Calculation Formula

                            amountForeignSell = Convert.ToDecimal((Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(encashmentRate_str)).ToString(GetDecimalFormat(sellCurrency.Decimal)));// Transaction Calculation Formula

                            if (amountForeignSell != 0)
                            {
                                rateSell = Convert.ToDecimal((amountLocalBuy / amountForeignSell).ToString(GetRateFormat(rateDP)));// Transaction Calculation Formula
                            }

                            amountLocalSell = amountLocalBuy;

                            denoTotalOrder = Convert.ToDecimal(amountForeign_str);

                            totalForeign += amountForeignSell;
                            totalLocal += amountLocalSell;

                            result = "{\"IsValid\":true,";
                        }
                        else
                        {
                            result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                        }

                        //Calculate Denominations
                        List<string> denoKeys = form.AllKeys.Where(e => e.Contains("Denomination_Value_AmountForeign_" + rowId + "_")).ToList();

                        foreach (string key in denoKeys)
                        {
                            string deno_amountForeign_str = form[key];

                            if (!string.IsNullOrEmpty(deno_amountForeign_str))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(deno_amountForeign_str);

                                if (checkAmountForeignFormat)
                                {
                                    denoTotalCalculated += Convert.ToDecimal(deno_amountForeign_str);
                                }
                            }
                        }

                        denoTotalRemaining = denoTotalOrder - denoTotalCalculated;

                        //Calculate Total Amount
                        List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + (rowId + 1)).ToList();

                        foreach (string key in amountForeignKeys)
                        {
                            string rid = key.Split('_')[2];

                            string transactionType1 = form["Transaction_Type_" + rid];

                            if (transactionType1 == "Sell")
                            {
                                string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                                if (!string.IsNullOrEmpty(amountForeign_str1))
                                {
                                    bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                    if (checkAmountForeignFormat)
                                    {
                                        totalForeign += Convert.ToDecimal(amountForeign_str1);
                                    }
                                }

                                string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                                if (!string.IsNullOrEmpty(amountLocal_str))
                                {
                                    bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                    if (checkAmountLocalFormat)
                                    {
                                        totalLocal += Convert.ToDecimal(amountLocal_str);
                                    }
                                }
                            }
                        }

                        rowId++;

                        //amountLocalBuy = amountLocalBuy / buyCurrency.Unit;

                        result += "\"Result\":true,"
                            + "\"AmountForeign\":\"" + amountForeign_str + "\","
                            + "\"AmountLocal\":\"" + amountLocalBuy.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                            + "\"RowIdSell\":" + rowId + ","
                            + "\"AmountForeignSell\":\"" + amountForeignSell.ToString(GetDecimalFormat(sellCurrency.Decimal)) + "\","
                            + "\"RateSell\":\"" + rateSell.ToString(GetRateFormat(rateDP)) + "\","
                            + "\"AmountLocalSell\":\"" + amountLocalSell.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                            + "\"DenoTotalCalculated\":\"" + denoTotalCalculated.ToString(GetDecimalFormat(currencyChanged.Decimal)) + "\","
                            + "\"DenoTotalRemaining\":\"" + denoTotalRemaining.ToString(GetDecimalFormat(currencyChanged.Decimal)) + "\","
                            + "\"DenoTotalOrder\":\"" + denoTotalOrder.ToString(GetDecimalFormat(currencyChanged.Decimal)) + "\","
                            + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                            + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                    }
                    else
                    {
                        result = "{\"Result\":false,\"ErrorMessage\":\"Amount (Foreign) can only be changed for Buy Type!\"}";
                    }
                    #endregion
                }
                else if (type == "CrossCurrency")
                {
                    #region Cross Currency Transaction Type
                    string transactionType = form["Transaction_Type_" + rowId];

                    Product sgd = _productsModel.FindCurrencyCode("SGD");
                    Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                    if (transactionType == "Sell")
                    {
                        List<string[]> modelErrors = new List<string[]>();

                        //Sell Type
                        int rowIdSell = rowId;

                        string amountForeignSell_str = form["Transaction_AmountForeign_" + rowIdSell];
                        if (!string.IsNullOrEmpty(amountForeignSell_str))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignSell_str);

                            if (checkAmountForeignFormat)
                            {
                                amountForeignSell_str = Convert.ToDecimal(amountForeignSell_str).ToString(GetDecimalFormat(currencyChanged.Decimal));
                            }
                            else
                            {
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdSell, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignSell_str) });
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdSell, "Amount (Foreign) is required!" });
                        }

                        string rateSell_str = form["Transaction_Rate_" + rowIdSell];

                        if (!string.IsNullOrEmpty(rateSell_str))
                        {
                            bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rateSell_str);

                            if (!checkRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, String.Format("'{0}' is not a valid Rate!", rateSell_str) });
                            }
                            else
                            {
                                if (currencyChanged.AcceptableRange > 0)
                                {
                                    //decimal GetBuyRate = 0;//Convert.ToDecimal(currencyChanged.BuyRate);

                                    //if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //{
                                    //	GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                    //}
                                    //else
                                    //{
                                    //	if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //	{
                                    //		GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                    //	}
                                    //	else
                                    //	{
                                    //		GetBuyRate = 0;
                                    //	}
                                    //}

                                    decimal sellRate = 0;//Convert.ToDecimal(currencyChanged.BuyRate);
                                    CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                                    if (GetCustomRate != null)
                                    {
                                        if (GetCustomRate.SellRate != 0 && GetCustomRate != null)
                                        {
                                            if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                sellRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                            {
                                                if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(currencyChanged.SellRate);
                                                }
                                            }
                                            else
                                            {
                                                if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                                {
                                                    if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                                    }
                                                }
                                                else
                                                {
                                                    sellRate = 0;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                        {
                                            if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                sellRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                sellRate = Convert.ToDecimal(currencyChanged.SellRate);
                                            }
                                        }
                                        else
                                        {
                                            if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                            {
                                                if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                                }
                                            }
                                            else
                                            {
                                                sellRate = 0;
                                            }
                                        }
                                    }

                                    //CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                                    //if (GetCustomRate != null)
                                    //{
                                    //	if (GetCustomRate.BuyRate != 0 && GetCustomRate.BuyRate != null)
                                    //	{
                                    //		if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //		{
                                    //			decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                    //			GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //		}
                                    //		else
                                    //		{
                                    //			if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //			{
                                    //				decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                    //				GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = 0;
                                    //			}
                                    //		}
                                    //		//GetBuyRate = Convert.ToDecimal(GetCustomRate.BuyRate);
                                    //	}
                                    //	else
                                    //	{
                                    //		if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //		{
                                    //			if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                    //			{
                                    //				decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                    //				GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                    //			}
                                    //		}
                                    //		else
                                    //		{
                                    //			if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //			{
                                    //				if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                    //				{
                                    //					decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                    //					GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //				}
                                    //				else
                                    //				{
                                    //					GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                    //				}
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = 0;
                                    //			}
                                    //		}
                                    //	}
                                    //}
                                    //else
                                    //{
                                    //	if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //	{
                                    //		if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                    //		{
                                    //			decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                    //			GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //		}
                                    //		else
                                    //		{
                                    //			GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                    //		}
                                    //	}
                                    //	else
                                    //	{
                                    //		if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //		{
                                    //			if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                    //			{
                                    //				decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                    //				GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                    //			}
                                    //		}
                                    //		else
                                    //		{
                                    //			GetBuyRate = 0;
                                    //		}
                                    //	}
                                    //}

                                    //if (GetCustomRate != null)
                                    //{
                                    //	if (GetCustomRate.BuyRate != 0 && GetCustomRate.BuyRate != null)
                                    //	{
                                    //		GetBuyRate = Convert.ToDecimal(GetCustomRate.BuyRate);
                                    //	}
                                    //}

                                    decimal upperLimit = sellRate * (1 + currencyChanged.AcceptableRange / 100);
                                    decimal lowerLimit = sellRate * (1 - currencyChanged.AcceptableRange / 100);
                                    decimal rate = Convert.ToDecimal(rateSell_str);

                                    if (rate < lowerLimit || rate > upperLimit)
                                    {
                                        modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rateSell_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                    }
                                }
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, "Rate is required!" });
                        }

                        //Buy Type
                        int rowIdBuy = ++rowId;

                        Product buyCurrency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowIdBuy]));

                        string amountForeignBuy_str = form["Transaction_AmountForeign_" + rowIdBuy];
                        if (!string.IsNullOrEmpty(amountForeignBuy_str))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignBuy_str);

                            if (checkAmountForeignFormat)
                            {
                                amountForeignBuy_str = Convert.ToDecimal(amountForeignBuy_str).ToString(GetDecimalFormat(buyCurrency.Decimal));
                            }
                            else
                            {
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignBuy_str) });
                            }
                        }
                        else
                        {
                            //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, "Amount (Foreign) is required!" });
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, "" });
                        }

                        decimal crossRateSell = 0;
                        decimal amountLocalSell = 0;
                        decimal rateBuy = 0;
                        decimal amountLocalBuy = 0;

                        decimal denoTotalCalculatedSell = 0;
                        decimal denoTotalRemainingSell = 0;
                        decimal denoTotalOrderSell = 0;

                        decimal totalForeign = 0;
                        decimal totalLocal = 0;

                        if (modelErrors.Count == 0)
                        {
                            decimal rateSell = Convert.ToDecimal(rateSell_str) / currencyChanged.Unit;

                            amountLocalSell = Convert.ToDecimal((Convert.ToDecimal(amountForeignSell_str) * rateSell).ToString(GetDecimalFormat(sgd.Decimal)));// Transaction Calculation Formula

                            if (Convert.ToDecimal(amountForeignBuy_str) != 0)
                            {
                                rateBuy = Convert.ToDecimal((amountLocalSell / Convert.ToDecimal(amountForeignBuy_str)).ToString(GetRateFormat(rateDP)));// Transaction Calculation Formula
                            }

                            amountLocalBuy = amountLocalSell;

                            if (rateBuy != 0)
                            {
                                crossRateSell = Convert.ToDecimal((rateSell / rateBuy).ToString(GetRateFormat(rateDP)));// Transaction Calculation Formula
                            }

                            denoTotalOrderSell = Convert.ToDecimal(amountForeignSell_str);

                            totalForeign += Convert.ToDecimal(amountForeignSell_str);
                            totalLocal += amountLocalSell;

                            result = "{\"IsValid\":true,";
                        }
                        else
                        {
                            result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                        }

                        //Calculate Denominations
                        List<string> denoKeys = form.AllKeys.Where(e => e.Contains("Denomination_Value_AmountForeign_" + rowIdSell + "_")).ToList();

                        foreach (string key in denoKeys)
                        {
                            string deno_amountForeign_str = form[key];

                            if (!string.IsNullOrEmpty(deno_amountForeign_str))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(deno_amountForeign_str);

                                if (checkAmountForeignFormat)
                                {
                                    denoTotalCalculatedSell += Convert.ToDecimal(deno_amountForeign_str);
                                }
                            }
                        }

                        denoTotalRemainingSell = denoTotalOrderSell - denoTotalCalculatedSell;

                        //Calculate Total Amount
                        List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + rowIdSell).ToList();

                        foreach (string key in amountForeignKeys)
                        {
                            string rid = key.Split('_')[2];

                            string transactionType1 = form["Transaction_Type_" + rid];

                            if (transactionType1 == "Sell")
                            {
                                string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                                if (!string.IsNullOrEmpty(amountForeign_str1))
                                {
                                    bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                    if (checkAmountForeignFormat)
                                    {
                                        totalForeign += Convert.ToDecimal(amountForeign_str1);
                                    }
                                }

                                string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                                if (!string.IsNullOrEmpty(amountLocal_str))
                                {
                                    bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                    if (checkAmountLocalFormat)
                                    {
                                        totalLocal += Convert.ToDecimal(amountLocal_str);
                                    }
                                }
                            }
                        }

                        result += "\"Result\":true,"
                            + "\"RowChanged\":\"Sell\","
                            + "\"RowIdSell\":" + rowIdSell + ","
                            + "\"AmountForeign\":\"" + amountForeignSell_str + "\","
                            + "\"AmountLocal\":\"" + amountLocalSell.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                            + "\"RateSell\":\"" + rateSell_str + "\","
                            + "\"CrossRateSell\":\"" + crossRateSell.ToString(GetRateFormat(rateDP)) + "\","
                            + "\"DenoTotalCalculated\":\"" + denoTotalCalculatedSell.ToString(GetDecimalFormat(currencyChanged.Decimal)) + "\","
                            + "\"DenoTotalRemaining\":\"" + denoTotalRemainingSell.ToString(GetDecimalFormat(currencyChanged.Decimal)) + "\","
                            + "\"DenoTotalOrder\":\"" + denoTotalOrderSell.ToString(GetDecimalFormat(currencyChanged.Decimal)) + "\","
                            + "\"RowIdBuy\":" + rowIdBuy + ","
                            + "\"AmountForeignBuy\":\"" + amountForeignBuy_str + "\","
                            + "\"RateBuy\":\"" + rateBuy.ToString(GetRateFormat(rateDP)) + "\","
                            + "\"AmountLocalBuy\":\"" + amountLocalBuy.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                            + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                            + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                    }
                    else
                    {
                        List<string[]> modelErrors = new List<string[]>();

                        //Sell Type
                        int rowIdSell = rowId - 1;

                        Product sellCurrency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowIdSell]));

                        string amountForeignSell_str = form["Transaction_AmountForeign_" + rowIdSell];
                        if (!string.IsNullOrEmpty(amountForeignSell_str))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignSell_str);

                            if (checkAmountForeignFormat)
                            {
                                amountForeignSell_str = Convert.ToDecimal(amountForeignSell_str).ToString(GetDecimalFormat(sellCurrency.Decimal));
                            }
                            else
                            {
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdSell, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignSell_str) });
                            }
                        }
                        else
                        {
                            //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdSell, "Amount (Foreign) is required!" });
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdSell, "" });
                        }

                        string rateSell_str = form["Transaction_Rate_" + rowIdSell];

                        if (!string.IsNullOrEmpty(rateSell_str))
                        {
                            bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rateSell_str);

                            if (!checkRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, String.Format("'{0}' is not a valid Rate!", rateSell_str) });
                            }
                            else
                            {
                                if (sellCurrency.AcceptableRange > 0)
                                {
                                    //decimal GetBuyRate = 0;//Convert.ToDecimal(sellCurrency.BuyRate);

                                    //CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(cid, sellCurrency.ID);

                                    //if (GetCustomRate != null)
                                    //{
                                    //	if (GetCustomRate.BuyRate != 0 && GetCustomRate.BuyRate != null)
                                    //	{
                                    //		if (sellCurrency.BuyRate != 0 && sellCurrency.BuyRate != null)
                                    //		{
                                    //			decimal FinalRate = Convert.ToDecimal(sellCurrency.BuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                    //			GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //		}
                                    //		else
                                    //		{
                                    //			if (sellCurrency.AutomatedBuyRate != 0 && sellCurrency.AutomatedBuyRate != null)
                                    //			{
                                    //				decimal FinalRate = Convert.ToDecimal(sellCurrency.AutomatedBuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                    //				GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = 0;
                                    //			}
                                    //		}
                                    //		//GetBuyRate = Convert.ToDecimal(GetCustomRate.BuyRate);
                                    //	}
                                    //	else
                                    //	{
                                    //		if (sellCurrency.BuyRate != 0 && sellCurrency.BuyRate != null)
                                    //		{
                                    //			if (sellCurrency.BuyRateAdjustment != 0 && sellCurrency.BuyRateAdjustment != null)
                                    //			{
                                    //				decimal FinalRate = Convert.ToDecimal(sellCurrency.BuyRate) * (1 - Convert.ToDecimal(sellCurrency.BuyRateAdjustment));
                                    //				GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = Convert.ToDecimal(sellCurrency.BuyRate);
                                    //			}
                                    //		}
                                    //		else
                                    //		{
                                    //			if (sellCurrency.AutomatedBuyRate != 0 && sellCurrency.AutomatedBuyRate != null)
                                    //			{
                                    //				if (sellCurrency.BuyRateAdjustment != 0 && sellCurrency.BuyRateAdjustment != null)
                                    //				{
                                    //					decimal FinalRate = Convert.ToDecimal(sellCurrency.AutomatedBuyRate) * (1 - Convert.ToDecimal(sellCurrency.BuyRateAdjustment));
                                    //					GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //				}
                                    //				else
                                    //				{
                                    //					GetBuyRate = Convert.ToDecimal(sellCurrency.AutomatedBuyRate);
                                    //				}
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = 0;
                                    //			}
                                    //		}
                                    //	}
                                    //}
                                    //else
                                    //{
                                    //	if (sellCurrency.BuyRate != 0 && sellCurrency.BuyRate != null)
                                    //	{
                                    //		if (sellCurrency.BuyRateAdjustment != 0 && sellCurrency.BuyRateAdjustment != null)
                                    //		{
                                    //			decimal FinalRate = Convert.ToDecimal(sellCurrency.BuyRate) * (1 - Convert.ToDecimal(sellCurrency.BuyRateAdjustment));
                                    //			GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //		}
                                    //		else
                                    //		{
                                    //			GetBuyRate = Convert.ToDecimal(sellCurrency.BuyRate);
                                    //		}
                                    //	}
                                    //	else
                                    //	{
                                    //		if (sellCurrency.AutomatedBuyRate != 0 && sellCurrency.AutomatedBuyRate != null)
                                    //		{
                                    //			if (sellCurrency.BuyRateAdjustment != 0 && sellCurrency.BuyRateAdjustment != null)
                                    //			{
                                    //				decimal FinalRate = Convert.ToDecimal(sellCurrency.AutomatedBuyRate) * (1 - Convert.ToDecimal(sellCurrency.BuyRateAdjustment));
                                    //				GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = Convert.ToDecimal(sellCurrency.AutomatedBuyRate);
                                    //			}
                                    //		}
                                    //		else
                                    //		{
                                    //			GetBuyRate = 0;
                                    //		}
                                    //	}
                                    //}

                                    //if (GetCustomRate.BuyRate != null)
                                    //{
                                    //	if (GetCustomRate.BuyRate != 0 && GetCustomRate.BuyRate != null)
                                    //	{
                                    //		GetBuyRate = Convert.ToDecimal(GetCustomRate.BuyRate);
                                    //	}
                                    //}

                                    decimal sellRate = 0;//Convert.ToDecimal(currencyChanged.BuyRate);
                                    CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                                    if (GetCustomRate != null)
                                    {
                                        if (GetCustomRate.SellRate != 0 && GetCustomRate != null)
                                        {
                                            if (sellCurrency.SellRate != 0 && sellCurrency.SellRate != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(sellCurrency.SellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                sellRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                if (sellCurrency.AutomatedSellRate != 0 && sellCurrency.AutomatedSellRate != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(sellCurrency.AutomatedSellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(sellCurrency.AutomatedSellRate);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (sellCurrency.SellRate != 0 && sellCurrency.SellRate != null)
                                            {
                                                if (sellCurrency.SellRateAdjustment != 0 && sellCurrency.SellRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(sellCurrency.SellRate) * (1 + Convert.ToDecimal(sellCurrency.SellRateAdjustment));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(sellCurrency.SellRate);
                                                }
                                            }
                                            else
                                            {
                                                if (sellCurrency.AutomatedSellRate != 0 && sellCurrency.AutomatedSellRate != null)
                                                {
                                                    if (sellCurrency.SellRateAdjustment != 0 && sellCurrency.SellRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(sellCurrency.AutomatedSellRate) * (1 + Convert.ToDecimal(sellCurrency.SellRateAdjustment));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(sellCurrency.AutomatedSellRate);
                                                    }
                                                }
                                                else
                                                {
                                                    sellRate = 0;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (sellCurrency.SellRate != 0 && sellCurrency.SellRate != null)
                                        {
                                            if (sellCurrency.SellRateAdjustment != 0 && sellCurrency.SellRateAdjustment != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(sellCurrency.SellRate) * (1 + Convert.ToDecimal(sellCurrency.SellRateAdjustment));
                                                sellRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                sellRate = Convert.ToDecimal(sellCurrency.SellRate);
                                            }
                                        }
                                        else
                                        {
                                            if (sellCurrency.AutomatedSellRate != 0 && sellCurrency.AutomatedSellRate != null)
                                            {
                                                if (sellCurrency.SellRateAdjustment != 0 && sellCurrency.SellRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(sellCurrency.AutomatedSellRate) * (1 + Convert.ToDecimal(sellCurrency.SellRateAdjustment));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(sellCurrency.AutomatedSellRate);
                                                }
                                            }
                                            else
                                            {
                                                sellRate = 0;
                                            }
                                        }
                                    }

                                    decimal upperLimit = sellRate * (1 + sellCurrency.AcceptableRange / 100);
                                    decimal lowerLimit = sellRate * (1 - sellCurrency.AcceptableRange / 100);
                                    decimal rate = Convert.ToDecimal(rateSell_str);

                                    if (rate < lowerLimit || rate > upperLimit)
                                    {
                                        modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rateSell_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                    }
                                }
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, "Rate is required!" });
                        }

                        //Buy Type
                        int rowIdBuy = rowId;

                        string amountForeignBuy_str = form["Transaction_AmountForeign_" + rowIdBuy];
                        if (!string.IsNullOrEmpty(amountForeignBuy_str))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignBuy_str);

                            if (checkAmountForeignFormat)
                            {
                                amountForeignBuy_str = Convert.ToDecimal(amountForeignBuy_str).ToString(GetDecimalFormat(currencyChanged.Decimal));
                            }
                            else
                            {
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignBuy_str) });
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, "Amount (Foreign) is required!" });
                        }

                        decimal crossRateSell = 0;
                        decimal amountLocalSell = 0;
                        decimal rateBuy = 0;
                        decimal amountLocalBuy = 0;

                        decimal denoTotalCalculatedBuy = 0;
                        decimal denoTotalRemainingBuy = 0;
                        decimal denoTotalOrderBuy = 0;

                        decimal totalForeign = 0;
                        decimal totalLocal = 0;

                        if (modelErrors.Count == 0)
                        {
                            decimal rateSell = Convert.ToDecimal(rateSell_str) / sellCurrency.Unit;

                            amountLocalSell = Convert.ToDecimal((Convert.ToDecimal(amountForeignSell_str) * rateSell).ToString(GetDecimalFormat(sgd.Decimal)));

                            if (Convert.ToDecimal(amountForeignBuy_str) != 0)
                            {
                                rateBuy = Convert.ToDecimal((amountLocalSell / Convert.ToDecimal(amountForeignBuy_str)).ToString(GetRateFormat(rateDP)));
                            }

                            amountLocalBuy = amountLocalSell;

                            if (rateBuy != 0)
                            {
                                crossRateSell = Convert.ToDecimal((rateSell / rateBuy).ToString(GetRateFormat(rateDP)));
                            }

                            //if (crossRateSell != 0)
                            //{
                            //    crossRateSell = Convert.ToDecimal((sellCurrency.Unit / crossRateSell).ToString(GetRateFormat(rateDP)));
                            //}

                            denoTotalOrderBuy = Convert.ToDecimal(amountForeignBuy_str);

                            totalForeign += Convert.ToDecimal(amountForeignSell_str);
                            totalLocal += amountLocalSell;

                            result = "{\"IsValid\":true,";
                        }
                        else
                        {
                            result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                        }

                        //Calculate Denominations
                        List<string> denoKeys = form.AllKeys.Where(e => e.Contains("Denomination_Value_AmountForeign_" + rowIdBuy + "_")).ToList();

                        foreach (string key in denoKeys)
                        {
                            string deno_amountForeign_str = form[key];

                            if (!string.IsNullOrEmpty(deno_amountForeign_str))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(deno_amountForeign_str);

                                if (checkAmountForeignFormat)
                                {
                                    denoTotalCalculatedBuy += Convert.ToDecimal(deno_amountForeign_str);
                                }
                            }
                        }

                        denoTotalRemainingBuy = denoTotalOrderBuy - denoTotalCalculatedBuy;

                        //Calculate Total Amount
                        List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + rowIdSell).ToList();

                        foreach (string key in amountForeignKeys)
                        {
                            string rid = key.Split('_')[2];

                            string transactionType1 = form["Transaction_Type_" + rid];

                            if (transactionType1 == "Sell")
                            {
                                string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                                if (!string.IsNullOrEmpty(amountForeign_str1))
                                {
                                    bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                    if (checkAmountForeignFormat)
                                    {
                                        totalForeign += Convert.ToDecimal(amountForeign_str1);
                                    }
                                }

                                string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                                if (!string.IsNullOrEmpty(amountLocal_str))
                                {
                                    bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                    if (checkAmountLocalFormat)
                                    {
                                        totalLocal += Convert.ToDecimal(amountLocal_str);
                                    }
                                }
                            }
                        }

                        result += "\"Result\":true,"
                            + "\"RowChanged\":\"Buy\","
                            + "\"RowIdSell\":" + rowIdSell + ","
                            + "\"AmountForeignSell\":\"" + amountForeignSell_str + "\","
                            + "\"AmountLocalSell\":\"" + amountLocalSell.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                            + "\"RateSell\":\"" + rateSell_str + "\","
                            + "\"CrossRateSell\":\"" + crossRateSell.ToString(GetRateFormat(rateDP)) + "\","
                            + "\"RowIdBuy\":" + rowIdBuy + ","
                            + "\"AmountForeign\":\"" + amountForeignBuy_str + "\","
                            + "\"RateBuy\":\"" + rateBuy.ToString(GetRateFormat(rateDP)) + "\","
                            + "\"AmountLocal\":\"" + amountLocalBuy.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                            + "\"DenoTotalCalculated\":\"" + denoTotalCalculatedBuy.ToString(GetDecimalFormat(currencyChanged.Decimal)) + "\","
                            + "\"DenoTotalRemaining\":\"" + denoTotalRemainingBuy.ToString(GetDecimalFormat(currencyChanged.Decimal)) + "\","
                            + "\"DenoTotalOrder\":\"" + denoTotalOrderBuy.ToString(GetDecimalFormat(currencyChanged.Decimal)) + "\","
                            + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                            + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                    }
                    #endregion
                }
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: RateChange
        [HttpPost]
        public string RateChange(int rowId, string type, FormCollection form, int cid = 0)
        {
            string result = "";

            try
            {
                if (type == "Buy")
                {
                    #region Buy/Sell Transaction Type
                    List<string[]> modelErrors = new List<string[]>();

                    Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                    string rate_str = form["Transaction_Rate_" + rowId];

                    if (!string.IsNullOrEmpty(rate_str))
                    {
                        bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rate_str);

                        if (!checkRateFormat)
                        {
                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is not a valid Rate!", rate_str) });
                        }
                        else
                        {
                            if (currencyChanged.AcceptableRange > 0)
                            {
                                decimal GetBuyRate = 0;//Convert.ToDecimal(currencyChanged.BuyRate);

                                //if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                //{
                                //	GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                //}
                                //else
                                //{
                                //	if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                //	{
                                //		GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                //	}
                                //	else
                                //	{
                                //		GetBuyRate = 0;
                                //	}
                                //}

                                CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                                if (GetCustomRate != null)
                                {
                                    if (GetCustomRate.BuyRate != 0 && GetCustomRate.BuyRate != null)
                                    {
                                        if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                        {
                                            decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                            GetBuyRate = Convert.ToDecimal(FinalRate);
                                        }
                                        else
                                        {
                                            if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                GetBuyRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                GetBuyRate = 0;
                                            }
                                        }
                                        //GetBuyRate = Convert.ToDecimal(GetCustomRate.BuyRate);
                                    }
                                    else
                                    {
                                        if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                        {
                                            if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                                GetBuyRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                            }
                                        }
                                        else
                                        {
                                            if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                            {
                                                if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                                    GetBuyRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                                }
                                            }
                                            else
                                            {
                                                GetBuyRate = 0;
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    {
                                        if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                        {
                                            decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                            GetBuyRate = Convert.ToDecimal(FinalRate);
                                        }
                                        else
                                        {
                                            GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                        }
                                    }
                                    else
                                    {
                                        if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                        {
                                            if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                                GetBuyRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                            }
                                        }
                                        else
                                        {
                                            GetBuyRate = 0;
                                        }
                                    }
                                }

                                //if (GetCustomRate != null)
                                //{
                                //	if (GetCustomRate.BuyRate != 0 && GetCustomRate.BuyRate != null)
                                //	{
                                //		GetBuyRate = Convert.ToDecimal(GetCustomRate.BuyRate);
                                //	}
                                //}

                                decimal upperLimit = GetBuyRate * (1 + currencyChanged.AcceptableRange / 100);
                                decimal lowerLimit = GetBuyRate * (1 - currencyChanged.AcceptableRange / 100);
                                decimal rate = Convert.ToDecimal(rate_str);

                                if (rate < lowerLimit || rate > upperLimit)
                                {
                                    modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rate_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                }
                            }
                            else
                            {
                                rate_str = Convert.ToDecimal(rate_str).ToString(GetRateFormat(rateDP));
                            }
                        }
                    }
                    else
                    {
                        modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, "Rate is required!" });
                    }

                    string amountForeign_str = form["Transaction_AmountForeign_" + rowId];

                    if (!string.IsNullOrEmpty(amountForeign_str))
                    {
                        bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str);

                        if (!checkAmountForeignFormat)
                        {
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeign_str) });
                        }
                    }
                    else
                    {
                        //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                        modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "" });
                    }

                    Product sgd = _productsModel.FindCurrencyCode("SGD");

                    decimal amountLocal = 0;

                    decimal totalForeign = 0;
                    decimal totalLocal = 0;

                    if (modelErrors.Count == 0)
                    {
                        amountLocal = Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(rate_str) / currencyChanged.Unit;// Transaction Calculation Formula

                        totalForeign += Convert.ToDecimal(amountForeign_str);
                        totalLocal += amountLocal;

                        result = "{\"IsValid\":true,";
                    }
                    else
                    {
                        result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                    }

                    //Calculate Total Amount
                    List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + rowId).ToList();

                    foreach (string key in amountForeignKeys)
                    {
                        string rid = key.Split('_')[2];

                        string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                        if (!string.IsNullOrEmpty(amountForeign_str1))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                            if (checkAmountForeignFormat)
                            {
                                totalForeign += Convert.ToDecimal(amountForeign_str1);
                            }
                        }

                        string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                        if (!string.IsNullOrEmpty(amountLocal_str))
                        {
                            bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                            if (checkAmountLocalFormat)
                            {
                                totalLocal += Convert.ToDecimal(amountLocal_str);
                            }
                        }
                    }

                    result += "\"Result\":true,"
                        + "\"Rate\":\"" + rate_str + "\","
                        + "\"AmountLocal\":\"" + amountLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                        + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                        + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                    #endregion
                }
                else if (type == "Sell")
                {
                    #region Sell Transaction Type
                    List<string[]> modelErrors = new List<string[]>();

                    Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                    string rate_str = form["Transaction_Rate_" + rowId];

                    if (!string.IsNullOrEmpty(rate_str))
                    {
                        bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rate_str);

                        if (!checkRateFormat)
                        {
                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is not a valid Rate!", rate_str) });
                        }
                        else
                        {
                            if (currencyChanged.AcceptableRange > 0)
                            {
                                //decimal GetBuyRate = 0;//Convert.ToDecimal(currencyChanged.BuyRate);

                                //if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                //{
                                //	GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                //}
                                //else
                                //{
                                //	if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                //	{
                                //		GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                //	}
                                //	else
                                //	{
                                //		GetBuyRate = 0;
                                //	}
                                //}

                                decimal sellRate = 0;//Convert.ToDecimal(currencyChanged.BuyRate);
                                CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                                if (GetCustomRate != null)
                                {
                                    if (GetCustomRate.SellRate != 0 && GetCustomRate != null)
                                    {
                                        if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                        {
                                            decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                            sellRate = Convert.ToDecimal(FinalRate);
                                        }
                                        else
                                        {
                                            if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                sellRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                sellRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                        {
                                            if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                sellRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                sellRate = Convert.ToDecimal(currencyChanged.SellRate);
                                            }
                                        }
                                        else
                                        {
                                            if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                            {
                                                if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                                }
                                            }
                                            else
                                            {
                                                sellRate = 0;
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                    {
                                        if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                        {
                                            decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                            sellRate = Convert.ToDecimal(FinalRate);
                                        }
                                        else
                                        {
                                            sellRate = Convert.ToDecimal(currencyChanged.SellRate);
                                        }
                                    }
                                    else
                                    {
                                        if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                        {
                                            if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                sellRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                sellRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                            }
                                        }
                                        else
                                        {
                                            sellRate = 0;
                                        }
                                    }
                                }

                                //if (GetCustomRate != null)
                                //{
                                //	if (GetCustomRate.BuyRate != 0 && GetCustomRate.BuyRate != null)
                                //	{
                                //		GetBuyRate = Convert.ToDecimal(GetCustomRate.BuyRate);
                                //	}
                                //}

                                decimal upperLimit = sellRate * (1 + currencyChanged.AcceptableRange / 100);
                                decimal lowerLimit = sellRate * (1 - currencyChanged.AcceptableRange / 100);
                                decimal rate = Convert.ToDecimal(rate_str);

                                if (rate < lowerLimit || rate > upperLimit)
                                {
                                    modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rate_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                }
                            }
                            else
                            {
                                rate_str = Convert.ToDecimal(rate_str).ToString(GetRateFormat(rateDP));
                            }
                        }
                    }
                    else
                    {
                        modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, "Rate is required!" });
                    }

                    string amountForeign_str = form["Transaction_AmountForeign_" + rowId];

                    if (!string.IsNullOrEmpty(amountForeign_str))
                    {
                        bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str);

                        if (!checkAmountForeignFormat)
                        {
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeign_str) });
                        }
                    }
                    else
                    {
                        //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                        modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "" });
                    }

                    Product sgd = _productsModel.FindCurrencyCode("SGD");

                    decimal amountLocal = 0;

                    decimal totalForeign = 0;
                    decimal totalLocal = 0;

                    if (modelErrors.Count == 0)
                    {
                        amountLocal = Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(rate_str) / currencyChanged.Unit;// Transaction Calculation Formula

                        totalForeign += Convert.ToDecimal(amountForeign_str);
                        totalLocal += amountLocal;

                        result = "{\"IsValid\":true,";
                    }
                    else
                    {
                        result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                    }

                    //Calculate Total Amount
                    List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + rowId).ToList();

                    foreach (string key in amountForeignKeys)
                    {
                        string rid = key.Split('_')[2];

                        string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                        if (!string.IsNullOrEmpty(amountForeign_str1))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                            if (checkAmountForeignFormat)
                            {
                                totalForeign += Convert.ToDecimal(amountForeign_str1);
                            }
                        }

                        string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                        if (!string.IsNullOrEmpty(amountLocal_str))
                        {
                            bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                            if (checkAmountLocalFormat)
                            {
                                totalLocal += Convert.ToDecimal(amountLocal_str);
                            }
                        }
                    }

                    result += "\"Result\":true,"
                        + "\"Rate\":\"" + rate_str + "\","
                        + "\"AmountLocal\":\"" + amountLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                        + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                        + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                    #endregion
                }
                else if (type == "Encashment")
                {
                    #region Encashment Transaction Type
                    string transactionType = form["Transaction_Type_" + rowId];

                    if (transactionType == "Sell")
                    {
                        Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                        List<string[]> modelErrors = new List<string[]>();

                        string amountForeign_str = form["Transaction_AmountForeign_" + rowId];

                        if (!string.IsNullOrEmpty(amountForeign_str))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str);

                            if (!checkAmountForeignFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeign_str) });
                            }
                        }
                        else
                        {
                            //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "" });
                        }

                        string rate_str = form["Transaction_Rate_" + rowId];

                        if (!string.IsNullOrEmpty(rate_str))
                        {
                            bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rate_str);

                            if (!checkRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is not a valid Rate!", rate_str) });
                            }
                            else
                            {
                                if (currencyChanged.AcceptableRange > 0)
                                {
                                    //decimal GetBuyRate = 0;//Convert.ToDecimal(currencyChanged.BuyRate);

                                    //if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //{
                                    //	GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                    //}
                                    //else
                                    //{
                                    //	if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //	{
                                    //		GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                    //	}
                                    //	else
                                    //	{
                                    //		GetBuyRate = 0;
                                    //	}
                                    //}

                                    decimal sellRate = 0;//Convert.ToDecimal(currencyChanged.BuyRate);
                                    CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                                    if (GetCustomRate != null)
                                    {
                                        if (GetCustomRate.SellRate != 0 && GetCustomRate != null)
                                        {
                                            if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                sellRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                            {
                                                if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(currencyChanged.SellRate);
                                                }
                                            }
                                            else
                                            {
                                                if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                                {
                                                    if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                                    }
                                                }
                                                else
                                                {
                                                    sellRate = 0;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                        {
                                            if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                sellRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                sellRate = Convert.ToDecimal(currencyChanged.SellRate);
                                            }
                                        }
                                        else
                                        {
                                            if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                            {
                                                if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                                }
                                            }
                                            else
                                            {
                                                sellRate = 0;
                                            }
                                        }
                                    }

                                    //CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                                    //if (GetCustomRate != null)
                                    //{
                                    //	if (GetCustomRate.BuyRate != 0 && GetCustomRate.BuyRate != null)
                                    //	{
                                    //		if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //		{
                                    //			decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                    //			GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //		}
                                    //		else
                                    //		{
                                    //			if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //			{
                                    //				decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                    //				GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = 0;
                                    //			}
                                    //		}
                                    //		//GetBuyRate = Convert.ToDecimal(GetCustomRate.BuyRate);
                                    //	}
                                    //	else
                                    //	{
                                    //		if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //		{
                                    //			if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                    //			{
                                    //				decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                    //				GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                    //			}
                                    //		}
                                    //		else
                                    //		{
                                    //			if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //			{
                                    //				if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                    //				{
                                    //					decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                    //					GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //				}
                                    //				else
                                    //				{
                                    //					GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                    //				}
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = 0;
                                    //			}
                                    //		}
                                    //	}
                                    //}
                                    //else
                                    //{
                                    //	if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //	{
                                    //		if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                    //		{
                                    //			decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                    //			GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //		}
                                    //		else
                                    //		{
                                    //			GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                    //		}
                                    //	}
                                    //	else
                                    //	{
                                    //		if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //		{
                                    //			if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                    //			{
                                    //				decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                    //				GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                    //			}
                                    //		}
                                    //		else
                                    //		{
                                    //			GetBuyRate = 0;
                                    //		}
                                    //	}
                                    //}

                                    //if (GetCustomRate != null)
                                    //{
                                    //	if (GetCustomRate.BuyRate != 0 && GetCustomRate.BuyRate != null)
                                    //	{
                                    //		GetBuyRate = Convert.ToDecimal(GetCustomRate.BuyRate);
                                    //	}
                                    //}

                                    decimal upperLimit = sellRate * (1 + currencyChanged.AcceptableRange / 100);
                                    decimal lowerLimit = sellRate * (1 - currencyChanged.AcceptableRange / 100);
                                    decimal rate = Convert.ToDecimal(rate_str);

                                    if (rate < lowerLimit || rate > upperLimit)
                                    {
                                        modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rate_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                    }
                                }
                                else
                                {
                                    rate_str = Convert.ToDecimal(rate_str).ToString(GetRateFormat(rateDP));
                                }
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, "Rate is required!" });
                        }

                        string encashmentRate_str = form["Transaction_EncashmentRate_" + rowId];

                        if (!string.IsNullOrEmpty(encashmentRate_str))
                        {
                            bool checkEncashmentRateFormat = FormValidationHelper.NonNegativeAmountValidation(encashmentRate_str);

                            if (!checkEncashmentRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowId, String.Format("'{0}' is not a valid Rate!", encashmentRate_str) });
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowId, "Encashment Rate is required!" });
                        }

                        Product sgd = _productsModel.FindCurrencyCode("SGD");

                        decimal amountLocalSell = 0;
                        decimal amountForeignBuy = 0;
                        decimal rateBuy = 0;
                        decimal amountLocalBuy = 0;

                        decimal totalForeign = 0;
                        decimal totalLocal = 0;

                        if (modelErrors.Count == 0)
                        {
                            amountLocalSell = Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(rate_str) / currencyChanged.Unit;// Transaction Calculation Formula

                            amountForeignBuy = Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(encashmentRate_str);// Transaction Calculation Formula

                            if (amountForeignBuy != 0)
                            {
                                rateBuy = amountLocalSell / amountForeignBuy;// Transaction Calculation Formula
                            }

                            amountLocalBuy = amountLocalSell;

                            totalForeign += Convert.ToDecimal(amountForeign_str);
                            totalLocal += amountLocalSell;

                            result = "{\"IsValid\":true,";
                        }
                        else
                        {
                            result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                        }

                        //Calculate Total Amount
                        List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + rowId).ToList();

                        foreach (string key in amountForeignKeys)
                        {
                            string rid = key.Split('_')[2];

                            string transactionType1 = form["Transaction_Type_" + rid];

                            if (transactionType1 == "Sell")
                            {
                                string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                                if (!string.IsNullOrEmpty(amountForeign_str1))
                                {
                                    bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                    if (checkAmountForeignFormat)
                                    {
                                        totalForeign += Convert.ToDecimal(amountForeign_str1);
                                    }
                                }

                                string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                                if (!string.IsNullOrEmpty(amountLocal_str))
                                {
                                    bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                    if (checkAmountLocalFormat)
                                    {
                                        totalLocal += Convert.ToDecimal(amountLocal_str);
                                    }
                                }
                            }
                        }

                        rowId++;

                        Product buyCurrency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                        //amountLocalBuy = amountLocalBuy / buyCurrency.Unit;

                        result += "\"Result\":true,"
                            + "\"Rate\":\"" + rate_str + "\","
                            + "\"AmountLocal\":\"" + amountLocalSell.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                            + "\"RowIdBuy\":" + rowId + ","
                            + "\"AmountForeignBuy\":\"" + amountForeignBuy.ToString(GetDecimalFormat(buyCurrency.Decimal)) + "\","
                            + "\"RateBuy\":\"" + rateBuy.ToString(GetRateFormat(rateDP)) + "\","
                            + "\"AmountLocalBuy\":\"" + amountLocalBuy.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                            + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                            + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                    }
                    else
                    {
                        result = "{\"Result\":false,\"ErrorMessage\":\"Rate can only be changed for Sell Type!\"}";
                    }
                    #endregion
                }
                else if (type == "Swap")
                {
                    #region Swap Transaction Type
                    string transactionType = form["Transaction_Type_" + rowId];

                    if (transactionType == "Buy")
                    {
                        Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                        List<string[]> modelErrors = new List<string[]>();

                        string amountForeign_str = form["Transaction_AmountForeign_" + rowId];

                        if (!string.IsNullOrEmpty(amountForeign_str))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str);

                            if (!checkAmountForeignFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeign_str) });
                            }
                        }
                        else
                        {
                            //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "" });
                        }

                        string rate_str = form["Transaction_Rate_" + rowId];

                        if (!string.IsNullOrEmpty(rate_str))
                        {
                            bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rate_str);

                            if (!checkRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is not a valid Rate!", rate_str) });
                            }
                            else
                            {
                                if (currencyChanged.AcceptableRange > 0)
                                {
                                    decimal GetBuyRate = 0;//Convert.ToDecimal(currencyChanged.BuyRate);

                                    //if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //{
                                    //	GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                    //}
                                    //else
                                    //{
                                    //	if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //	{
                                    //		GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                    //	}
                                    //	else
                                    //	{
                                    //		GetBuyRate = 0;
                                    //	}
                                    //}

                                    CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                                    if (GetCustomRate != null)
                                    {
                                        if (GetCustomRate.BuyRate != 0 && GetCustomRate.BuyRate != null)
                                        {
                                            if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                GetBuyRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                    GetBuyRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    GetBuyRate = 0;
                                                }
                                            }
                                            //GetBuyRate = Convert.ToDecimal(GetCustomRate.BuyRate);
                                        }
                                        else
                                        {
                                            if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                            {
                                                if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                                    GetBuyRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                                }
                                            }
                                            else
                                            {
                                                if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                                {
                                                    if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                                        GetBuyRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                                    }
                                                }
                                                else
                                                {
                                                    GetBuyRate = 0;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                        {
                                            if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                                GetBuyRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                            }
                                        }
                                        else
                                        {
                                            if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                            {
                                                if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                                    GetBuyRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                                }
                                            }
                                            else
                                            {
                                                GetBuyRate = 0;
                                            }
                                        }
                                    }

                                    //if (GetCustomRate != null)
                                    //{
                                    //	if (GetCustomRate.BuyRate != 0 && GetCustomRate.BuyRate != null)
                                    //	{
                                    //		GetBuyRate = Convert.ToDecimal(GetCustomRate.BuyRate);
                                    //	}
                                    //}

                                    decimal upperLimit = GetBuyRate * (1 + currencyChanged.AcceptableRange / 100);
                                    decimal lowerLimit = GetBuyRate * (1 - currencyChanged.AcceptableRange / 100);
                                    decimal rate = Convert.ToDecimal(rate_str);

                                    if (rate < lowerLimit || rate > upperLimit)
                                    {
                                        modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rate_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                    }
                                }
                                else
                                {
                                    rate_str = Convert.ToDecimal(rate_str).ToString(GetRateFormat(rateDP));
                                }
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, "Rate is required!" });
                        }

                        string encashmentRate_str = form["Transaction_EncashmentRate_" + rowId];

                        if (!string.IsNullOrEmpty(encashmentRate_str))
                        {
                            bool checkEncashmentRateFormat = FormValidationHelper.NonNegativeAmountValidation(encashmentRate_str);

                            if (!checkEncashmentRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowId, String.Format("'{0}' is not a valid Rate!", encashmentRate_str) });
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowId, "Encashment Rate is required!" });
                        }

                        Product sgd = _productsModel.FindCurrencyCode("SGD");

                        decimal amountLocalBuy = 0;
                        decimal amountForeignSell = 0;
                        decimal rateSell = 0;
                        decimal amountLocalSell = 0;

                        decimal totalForeign = 0;
                        decimal totalLocal = 0;

                        if (modelErrors.Count == 0)
                        {
                            amountLocalBuy = Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(rate_str) / currencyChanged.Unit;// Transaction Calculation Formula

                            amountForeignSell = Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(encashmentRate_str);// Transaction Calculation Formula

                            if (amountForeignSell != 0)
                            {
                                rateSell = amountLocalBuy / amountForeignSell;// Transaction Calculation Formula
                            }

                            amountLocalSell = amountLocalBuy;

                            totalForeign += amountForeignSell;
                            totalLocal += amountLocalSell;

                            result = "{\"IsValid\":true,";
                        }
                        else
                        {
                            result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                        }

                        //Calculate Total Amount
                        List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + (rowId + 1)).ToList();

                        foreach (string key in amountForeignKeys)
                        {
                            string rid = key.Split('_')[2];

                            string transactionType1 = form["Transaction_Type_" + rid];

                            if (transactionType1 == "Sell")
                            {
                                string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                                if (!string.IsNullOrEmpty(amountForeign_str1))
                                {
                                    bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                    if (checkAmountForeignFormat)
                                    {
                                        totalForeign += Convert.ToDecimal(amountForeign_str1);
                                    }
                                }

                                string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                                if (!string.IsNullOrEmpty(amountLocal_str))
                                {
                                    bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                    if (checkAmountLocalFormat)
                                    {
                                        totalLocal += Convert.ToDecimal(amountLocal_str);
                                    }
                                }
                            }
                        }

                        rowId++;

                        Product sellCurrency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                        //amountLocalBuy = amountLocalBuy / buyCurrency.Unit;

                        result += "\"Result\":true,"
                            + "\"Rate\":\"" + rate_str + "\","
                            + "\"AmountLocal\":\"" + amountLocalBuy.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                            + "\"RowIdSell\":" + rowId + ","
                            + "\"AmountForeignSell\":\"" + amountForeignSell.ToString(GetDecimalFormat(sellCurrency.Decimal)) + "\","
                            + "\"RateSell\":\"" + rateSell.ToString(GetRateFormat(rateDP)) + "\","
                            + "\"AmountLocalSell\":\"" + amountLocalSell.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                            + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                            + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                    }
                    else
                    {
                        result = "{\"Result\":false,\"ErrorMessage\":\"Rate can only be changed for Buy Type!\"}";
                    }
                    #endregion
                }
                else if (type == "CrossCurrency")
                {
                    #region Cross Currency Transaction Type
                    string transactionType = form["Transaction_Type_" + rowId];

                    Product sgd = _productsModel.FindCurrencyCode("SGD");
                    Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                    if (transactionType == "Sell")
                    {
                        List<string[]> modelErrors = new List<string[]>();

                        //Sell Type
                        int rowIdSell = rowId;

                        string amountForeignSell_str = form["Transaction_AmountForeign_" + rowIdSell];
                        if (!string.IsNullOrEmpty(amountForeignSell_str))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignSell_str);

                            if (checkAmountForeignFormat)
                            {
                                amountForeignSell_str = Convert.ToDecimal(amountForeignSell_str).ToString(GetDecimalFormat(currencyChanged.Decimal));
                            }
                            else
                            {
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdSell, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignSell_str) });
                            }
                        }
                        else
                        {
                            //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdSell, "Amount (Foreign) is required!" });
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdSell, "" });
                        }

                        string rateSell_str = form["Transaction_Rate_" + rowIdSell];

                        if (!string.IsNullOrEmpty(rateSell_str))
                        {
                            bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rateSell_str);

                            if (!checkRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, String.Format("'{0}' is not a valid Rate!", rateSell_str) });
                            }
                            else
                            {
                                if (currencyChanged.AcceptableRange > 0)
                                {
                                    //decimal GetBuyRate = 0;//Convert.ToDecimal(currencyChanged.BuyRate);

                                    //if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //{
                                    //	GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                    //}
                                    //else
                                    //{
                                    //	if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //	{
                                    //		GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                    //	}
                                    //	else
                                    //	{
                                    //		GetBuyRate = 0;
                                    //	}
                                    //}

                                    decimal sellRate = 0;//Convert.ToDecimal(currencyChanged.BuyRate);
                                    CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                                    if (GetCustomRate != null)
                                    {
                                        if (GetCustomRate.SellRate != 0 && GetCustomRate != null)
                                        {
                                            if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                sellRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                            {
                                                if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(currencyChanged.SellRate);
                                                }
                                            }
                                            else
                                            {
                                                if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                                {
                                                    if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                                    }
                                                }
                                                else
                                                {
                                                    sellRate = 0;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                        {
                                            if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                sellRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                sellRate = Convert.ToDecimal(currencyChanged.SellRate);
                                            }
                                        }
                                        else
                                        {
                                            if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                            {
                                                if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                                }
                                            }
                                            else
                                            {
                                                sellRate = 0;
                                            }
                                        }
                                    }

                                    //CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                                    //if (GetCustomRate != null)
                                    //{
                                    //	if (GetCustomRate.BuyRate != 0 && GetCustomRate.BuyRate != null)
                                    //	{
                                    //		if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //		{
                                    //			decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                    //			GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //		}
                                    //		else
                                    //		{
                                    //			if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //			{
                                    //				decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                    //				GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = 0;
                                    //			}
                                    //		}
                                    //		//GetBuyRate = Convert.ToDecimal(GetCustomRate.BuyRate);
                                    //	}
                                    //	else
                                    //	{
                                    //		if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //		{
                                    //			if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                    //			{
                                    //				decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                    //				GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                    //			}
                                    //		}
                                    //		else
                                    //		{
                                    //			if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //			{
                                    //				if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                    //				{
                                    //					decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                    //					GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //				}
                                    //				else
                                    //				{
                                    //					GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                    //				}
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = 0;
                                    //			}
                                    //		}
                                    //	}
                                    //}
                                    //else
                                    //{
                                    //	if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //	{
                                    //		if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                    //		{
                                    //			decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                    //			GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //		}
                                    //		else
                                    //		{
                                    //			GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                    //		}
                                    //	}
                                    //	else
                                    //	{
                                    //		if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //		{
                                    //			if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                    //			{
                                    //				decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                    //				GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                    //			}
                                    //		}
                                    //		else
                                    //		{
                                    //			GetBuyRate = 0;
                                    //		}
                                    //	}
                                    //}

                                    //if (GetCustomRate != null)
                                    //{
                                    //	if (GetCustomRate.BuyRate != 0 && GetCustomRate.BuyRate != null)
                                    //	{
                                    //		GetBuyRate = Convert.ToDecimal(GetCustomRate.BuyRate);
                                    //	}
                                    //}

                                    decimal upperLimit = sellRate * (1 + currencyChanged.AcceptableRange / 100);
                                    decimal lowerLimit = sellRate * (1 - currencyChanged.AcceptableRange / 100);
                                    decimal rate = Convert.ToDecimal(rateSell_str);

                                    if (rate < lowerLimit || rate > upperLimit)
                                    {
                                        modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rateSell_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                    }
                                    else
                                    {
                                        rateSell_str = Convert.ToDecimal(rateSell_str).ToString(GetRateFormat(rateDP));
                                    }
                                }
                                else
                                {
                                    rateSell_str = Convert.ToDecimal(rateSell_str).ToString(GetRateFormat(rateDP));
                                }
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowIdSell, "Rate is required!" });
                        }

                        //Buy Type
                        int rowIdBuy = ++rowId;

                        Product buyCurrency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowIdBuy]));

                        string amountForeignBuy_str = form["Transaction_AmountForeign_" + rowIdBuy];
                        if (!string.IsNullOrEmpty(amountForeignBuy_str))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeignBuy_str);

                            if (checkAmountForeignFormat)
                            {
                                amountForeignBuy_str = Convert.ToDecimal(amountForeignBuy_str).ToString(GetDecimalFormat(buyCurrency.Decimal));
                            }
                            else
                            {
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeignBuy_str) });
                            }
                        }
                        else
                        {
                            //modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, "Amount (Foreign) is required!" });
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowIdBuy, "" });
                        }

                        decimal crossRateSell = 0;
                        decimal amountLocalSell = 0;
                        decimal rateBuy = 0;
                        decimal amountLocalBuy = 0;

                        decimal totalForeign = 0;
                        decimal totalLocal = 0;

                        if (modelErrors.Count == 0)
                        {
                            decimal rateSell = Convert.ToDecimal(rateSell_str) / currencyChanged.Unit;

                            amountLocalSell = Convert.ToDecimal((Convert.ToDecimal(amountForeignSell_str) * rateSell).ToString(GetDecimalFormat(sgd.Decimal)));// Transaction Calculation Formula

                            if (Convert.ToDecimal(amountForeignBuy_str) != 0)
                            {
                                rateBuy = Convert.ToDecimal((amountLocalSell / Convert.ToDecimal(amountForeignBuy_str)).ToString(GetRateFormat(rateDP)));// Transaction Calculation Formula
                            }

                            amountLocalBuy = amountLocalSell;

                            if (rateBuy != 0)
                            {
                                crossRateSell = Convert.ToDecimal((rateSell / rateBuy).ToString(GetRateFormat(rateDP)));// Transaction Calculation Formula
                            }

                            totalForeign += Convert.ToDecimal(amountForeignSell_str);
                            totalLocal += amountLocalSell;

                            result = "{\"IsValid\":true,";
                        }
                        else
                        {
                            result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                        }

                        //Calculate Total Amount
                        List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + rowIdSell).ToList();

                        foreach (string key in amountForeignKeys)
                        {
                            string rid = key.Split('_')[2];

                            string transactionType1 = form["Transaction_Type_" + rid];

                            if (transactionType1 == "Sell")
                            {
                                string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                                if (!string.IsNullOrEmpty(amountForeign_str1))
                                {
                                    bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                    if (checkAmountForeignFormat)
                                    {
                                        totalForeign += Convert.ToDecimal(amountForeign_str1);
                                    }
                                }

                                string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                                if (!string.IsNullOrEmpty(amountLocal_str))
                                {
                                    bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                    if (checkAmountLocalFormat)
                                    {
                                        totalLocal += Convert.ToDecimal(amountLocal_str);
                                    }
                                }
                            }
                        }

                        result += "\"Result\":true,"
                            + "\"RowChanged\":\"Sell\","
                            + "\"RowIdSell\":" + rowIdSell + ","
                            + "\"AmountForeign\":\"" + amountForeignSell_str + "\","
                            + "\"AmountLocal\":\"" + amountLocalSell.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                            + "\"Rate\":\"" + rateSell_str + "\","
                            + "\"CrossRateSell\":\"" + crossRateSell.ToString(GetRateFormat(rateDP)) + "\","
                            + "\"RowIdBuy\":" + rowIdBuy + ","
                            + "\"AmountForeignBuy\":\"" + amountForeignBuy_str + "\","
                            + "\"RateBuy\":\"" + rateBuy.ToString(GetRateFormat(rateDP)) + "\","
                            + "\"AmountLocalBuy\":\"" + amountLocalBuy.ToString(GetDecimalFormat(sgd.Decimal)) + "\","
                            + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                            + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                    }
                    else
                    {
                        result = "{\"Result\":false,\"ErrorMessage\":\"Rate can only be changed for Sell Type!\"}";
                    }
                    #endregion
                }
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: EncashmentRateChange
        [HttpPost]
        public string EncashmentRateChange(int rowId, string type, FormCollection form, int cid = 0)
        {
            string result = "";

            try
            {
                if (type == "Encashment")
                {
                    #region Encashment Transaction Type
                    string transactionType = form["Transaction_Type_" + rowId];

                    if (transactionType == "Sell")
                    {
                        Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                        List<string[]> modelErrors = new List<string[]>();

                        string amountForeign_str = form["Transaction_AmountForeign_" + rowId];

                        if (!string.IsNullOrEmpty(amountForeign_str))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str);

                            if (!checkAmountForeignFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeign_str) });
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                        }

                        string rate_str = form["Transaction_Rate_" + rowId];

                        if (!string.IsNullOrEmpty(rate_str))
                        {
                            bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rate_str);

                            if (!checkRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is not a valid Rate!", rate_str) });
                            }
                            else
                            {
                                if (currencyChanged.AcceptableRange > 0)
                                {
                                    //decimal GetBuyRate = 0;//Convert.ToDecimal(currencyChanged.BuyRate);

                                    //if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //{
                                    //	GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                    //}
                                    //else
                                    //{
                                    //	if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //	{
                                    //		GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                    //	}
                                    //	else
                                    //	{
                                    //		GetBuyRate = 0;
                                    //	}
                                    //}

                                    //CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                                    //if (GetCustomRate != null)
                                    //{
                                    //	if (GetCustomRate.BuyRate != 0 && GetCustomRate.BuyRate != null)
                                    //	{
                                    //		if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //		{
                                    //			decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                    //			GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //		}
                                    //		else
                                    //		{
                                    //			if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //			{
                                    //				decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                    //				GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = 0;
                                    //			}
                                    //		}
                                    //		//GetBuyRate = Convert.ToDecimal(GetCustomRate.BuyRate);
                                    //	}
                                    //	else
                                    //	{
                                    //		if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //		{
                                    //			if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                    //			{
                                    //				decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                    //				GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                    //			}
                                    //		}
                                    //		else
                                    //		{
                                    //			if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //			{
                                    //				if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                    //				{
                                    //					decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                    //					GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //				}
                                    //				else
                                    //				{
                                    //					GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                    //				}
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = 0;
                                    //			}
                                    //		}
                                    //	}
                                    //}
                                    //else
                                    //{
                                    //	if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //	{
                                    //		if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                    //		{
                                    //			decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                    //			GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //		}
                                    //		else
                                    //		{
                                    //			GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                    //		}
                                    //	}
                                    //	else
                                    //	{
                                    //		if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //		{
                                    //			if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                    //			{
                                    //				decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                    //				GetBuyRate = Convert.ToDecimal(FinalRate);
                                    //			}
                                    //			else
                                    //			{
                                    //				GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                    //			}
                                    //		}
                                    //		else
                                    //		{
                                    //			GetBuyRate = 0;
                                    //		}
                                    //	}
                                    //}

                                    decimal sellRate = 0;//Convert.ToDecimal(currencyChanged.BuyRate);
                                    CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                                    if (GetCustomRate != null)
                                    {
                                        if (GetCustomRate.SellRate != 0 && GetCustomRate != null)
                                        {
                                            if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                sellRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(GetCustomRate.SellRate));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                            {
                                                if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(currencyChanged.SellRate);
                                                }
                                            }
                                            else
                                            {
                                                if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                                {
                                                    if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                        sellRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        sellRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                                    }
                                                }
                                                else
                                                {
                                                    sellRate = 0;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (currencyChanged.SellRate != 0 && currencyChanged.SellRate != null)
                                        {
                                            if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.SellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                sellRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                sellRate = Convert.ToDecimal(currencyChanged.SellRate);
                                            }
                                        }
                                        else
                                        {
                                            if (currencyChanged.AutomatedSellRate != 0 && currencyChanged.AutomatedSellRate != null)
                                            {
                                                if (currencyChanged.SellRateAdjustment != 0 && currencyChanged.SellRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate) * (1 + Convert.ToDecimal(currencyChanged.SellRateAdjustment));
                                                    sellRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    sellRate = Convert.ToDecimal(currencyChanged.AutomatedSellRate);
                                                }
                                            }
                                            else
                                            {
                                                sellRate = 0;
                                            }
                                        }
                                    }

                                    //if (GetCustomRate != null)
                                    //{
                                    //	if (GetCustomRate.BuyRate != 0 && GetCustomRate.BuyRate != null)
                                    //	{
                                    //		GetBuyRate = Convert.ToDecimal(GetCustomRate.BuyRate);
                                    //	}
                                    //}

                                    decimal upperLimit = sellRate * (1 + currencyChanged.AcceptableRange / 100);
                                    decimal lowerLimit = sellRate * (1 - currencyChanged.AcceptableRange / 100);
                                    decimal rate = Convert.ToDecimal(rate_str);

                                    if (rate < lowerLimit || rate > upperLimit)
                                    {
                                        modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rate_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                    }
                                }
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, "Rate is required!" });
                        }

                        string encashmentRate_str = form["Transaction_EncashmentRate_" + rowId];

                        if (!string.IsNullOrEmpty(encashmentRate_str))
                        {
                            bool checkEncashmentRateFormat = FormValidationHelper.NonNegativeAmountValidation(encashmentRate_str);

                            if (!checkEncashmentRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowId, String.Format("'{0}' is not a valid Encashment Rate!", encashmentRate_str) });
                            }
                            else
                            {
                                encashmentRate_str = Convert.ToDecimal(encashmentRate_str).ToString(GetRateFormat(rateDP));
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowId, "Encashment Rate is required!" });
                        }

                        Product sgd = _productsModel.FindCurrencyCode("SGD");

                        decimal amountLocalSell = 0;
                        decimal amountForeignBuy = 0;
                        decimal rateBuy = 0;
                        decimal amountLocalBuy = 0;

                        if (modelErrors.Count == 0)
                        {
                            amountLocalSell = Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(rate_str) / currencyChanged.Unit;// Transaction Calculation Formula

                            amountForeignBuy = Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(encashmentRate_str);// Transaction Calculation Formula

                            if (amountForeignBuy != 0)
                            {
                                rateBuy = amountLocalSell / amountForeignBuy;// Transaction Calculation Formula
                            }

                            amountLocalBuy = amountLocalSell;

                            result = "{\"IsValid\":true,";
                        }
                        else
                        {
                            result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                        }

                        rowId++;

                        Product buyCurrency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                        result += "\"Result\":true,"
                            + "\"EncashmentRate\":\"" + encashmentRate_str + "\","
                            + "\"RowIdBuy\":" + rowId + ","
                            + "\"AmountForeignBuy\":\"" + amountForeignBuy.ToString(GetDecimalFormat(buyCurrency.Decimal)) + "\","
                            + "\"RateBuy\":\"" + rateBuy.ToString(GetRateFormat(rateDP)) + "\"}";
                    }
                    else
                    {
                        result = "{\"Result\":false,\"ErrorMessage\":\"Encashment Rate can only be changed for Sell Type!\"}";
                    }
                    #endregion
                }
                else if (type == "Swap")
                {
                    #region Swap Transaction Type
                    string transactionType = form["Transaction_Type_" + rowId];

                    if (transactionType == "Buy")
                    {
                        Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                        List<string[]> modelErrors = new List<string[]>();

                        string amountForeign_str = form["Transaction_AmountForeign_" + rowId];

                        if (!string.IsNullOrEmpty(amountForeign_str))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str);

                            if (!checkAmountForeignFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, String.Format("'{0}' is not a valid Amount (Foreign)!", amountForeign_str) });
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_AmountForeign_" + rowId, "Amount (Foreign) is required!" });
                        }

                        string rate_str = form["Transaction_Rate_" + rowId];

                        if (!string.IsNullOrEmpty(rate_str))
                        {
                            bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(rate_str);

                            if (!checkRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is not a valid Rate!", rate_str) });
                            }
                            else
                            {
                                if (currencyChanged.AcceptableRange > 0)
                                {
                                    decimal GetBuyRate = 0;//Convert.ToDecimal(currencyChanged.BuyRate);

                                    //if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                    //{
                                    //	GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                    //}
                                    //else
                                    //{
                                    //	if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                    //	{
                                    //		GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                    //	}
                                    //	else
                                    //	{
                                    //		GetBuyRate = 0;
                                    //	}
                                    //}

                                    CustomerCustomRate GetCustomRate = _customerCustomRatesModel.GetCustomerProductRate(cid, currencyChanged.ID);

                                    if (GetCustomRate != null)
                                    {
                                        if (GetCustomRate.BuyRate != 0 && GetCustomRate.BuyRate != null)
                                        {
                                            if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                GetBuyRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(GetCustomRate.BuyRate));
                                                    GetBuyRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    GetBuyRate = 0;
                                                }
                                            }
                                            //GetBuyRate = Convert.ToDecimal(GetCustomRate.BuyRate);
                                        }
                                        else
                                        {
                                            if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                            {
                                                if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                                    GetBuyRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                                }
                                            }
                                            else
                                            {
                                                if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                                {
                                                    if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                                    {
                                                        decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                                        GetBuyRate = Convert.ToDecimal(FinalRate);
                                                    }
                                                    else
                                                    {
                                                        GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                                    }
                                                }
                                                else
                                                {
                                                    GetBuyRate = 0;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (currencyChanged.BuyRate != 0 && currencyChanged.BuyRate != null)
                                        {
                                            if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                            {
                                                decimal FinalRate = Convert.ToDecimal(currencyChanged.BuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                                GetBuyRate = Convert.ToDecimal(FinalRate);
                                            }
                                            else
                                            {
                                                GetBuyRate = Convert.ToDecimal(currencyChanged.BuyRate);
                                            }
                                        }
                                        else
                                        {
                                            if (currencyChanged.AutomatedBuyRate != 0 && currencyChanged.AutomatedBuyRate != null)
                                            {
                                                if (currencyChanged.BuyRateAdjustment != 0 && currencyChanged.BuyRateAdjustment != null)
                                                {
                                                    decimal FinalRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate) * (1 - Convert.ToDecimal(currencyChanged.BuyRateAdjustment));
                                                    GetBuyRate = Convert.ToDecimal(FinalRate);
                                                }
                                                else
                                                {
                                                    GetBuyRate = Convert.ToDecimal(currencyChanged.AutomatedBuyRate);
                                                }
                                            }
                                            else
                                            {
                                                GetBuyRate = 0;
                                            }
                                        }
                                    }

                                    //if (GetCustomRate != null)
                                    //{
                                    //	if (GetCustomRate.BuyRate != 0 && GetCustomRate.BuyRate != null)
                                    //	{
                                    //		GetBuyRate = Convert.ToDecimal(GetCustomRate.BuyRate);
                                    //	}
                                    //}

                                    decimal upperLimit = GetBuyRate * (1 + currencyChanged.AcceptableRange / 100);
                                    decimal lowerLimit = GetBuyRate * (1 - currencyChanged.AcceptableRange / 100);
                                    decimal rate = Convert.ToDecimal(rate_str);

                                    if (rate < lowerLimit || rate > upperLimit)
                                    {
                                        modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, String.Format("'{0}' is out of Rate Acceptable Range ({1} to {2})!", rate_str, lowerLimit.ToString(GetRateFormat(rateDP)), upperLimit.ToString(GetRateFormat(rateDP))) });
                                    }
                                }
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_Rate_" + rowId, "Rate is required!" });
                        }

                        string encashmentRate_str = form["Transaction_EncashmentRate_" + rowId];

                        if (!string.IsNullOrEmpty(encashmentRate_str))
                        {
                            bool checkEncashmentRateFormat = FormValidationHelper.NonNegativeAmountValidation(encashmentRate_str);

                            if (!checkEncashmentRateFormat)
                            {
                                modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowId, String.Format("'{0}' is not a valid Encashment Rate!", encashmentRate_str) });
                            }
                            else
                            {
                                encashmentRate_str = Convert.ToDecimal(encashmentRate_str).ToString(GetRateFormat(rateDP));
                            }
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_EncashmentRate_" + rowId, "Encashment Rate is required!" });
                        }

                        Product sgd = _productsModel.FindCurrencyCode("SGD");

                        decimal amountLocalBuy = 0;
                        decimal amountForeignSell = 0;
                        decimal rateSell = 0;
                        decimal amountLocalSell = 0;

                        decimal totalForeign = 0;
                        decimal totalLocal = 0;

                        if (modelErrors.Count == 0)
                        {
                            amountLocalBuy = Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(rate_str) / currencyChanged.Unit;// Transaction Calculation Formula

                            amountForeignSell = Convert.ToDecimal(amountForeign_str) * Convert.ToDecimal(encashmentRate_str);// Transaction Calculation Formula

                            if (amountForeignSell != 0)
                            {
                                rateSell = amountLocalBuy / amountForeignSell;// Transaction Calculation Formula
                            }

                            amountLocalSell = amountLocalBuy;

                            totalForeign += amountForeignSell;
                            totalLocal += amountLocalSell;

                            result = "{\"IsValid\":true,";
                        }
                        else
                        {
                            result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                        }

                        //Calculate Total Amount
                        List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_") && e != "Transaction_AmountForeign_" + (rowId + 1)).ToList();

                        foreach (string key in amountForeignKeys)
                        {
                            string rid = key.Split('_')[2];

                            string transactionType1 = form["Transaction_Type_" + rid];

                            if (transactionType1 == "Sell")
                            {
                                string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                                if (!string.IsNullOrEmpty(amountForeign_str1))
                                {
                                    bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                    if (checkAmountForeignFormat)
                                    {
                                        totalForeign += Convert.ToDecimal(amountForeign_str1);
                                    }
                                }

                                string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                                if (!string.IsNullOrEmpty(amountLocal_str))
                                {
                                    bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                    if (checkAmountLocalFormat)
                                    {
                                        totalLocal += Convert.ToDecimal(amountLocal_str);
                                    }
                                }
                            }
                        }

                        rowId++;

                        Product sellCurrency = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));

                        result += "\"Result\":true,"
                            + "\"EncashmentRate\":\"" + encashmentRate_str + "\","
                            + "\"RowIdSell\":" + rowId + ","
                            + "\"AmountForeignSell\":\"" + amountForeignSell.ToString(GetDecimalFormat(sellCurrency.Decimal)) + "\","
                            + "\"RateSell\":\"" + rateSell.ToString(GetRateFormat(rateDP)) + "\","
                            + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                            + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
                    }
                    else
                    {
                        result = "{\"Result\":false,\"ErrorMessage\":\"Encashment Rate can only be changed for Buy Type!\"}";
                    }
                    #endregion Swap Transaction Type
                }
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: CrossRateChange
        [HttpPost]
        public string CrossRateChange(int rowId, FormCollection form)
        {
            string result = "";

            try
            {
                string transactionType = form["Transaction_Type_" + rowId];

                if (transactionType == "Sell")
                {
                    //Sell Type
                    List<string[]> modelErrors = new List<string[]>();

                    string crossRate_str = form["Transaction_CrossRate_" + rowId];
                    if (!string.IsNullOrEmpty(crossRate_str))
                    {
                        bool checkRateFormat = FormValidationHelper.NonNegativeAmountValidation(crossRate_str);

                        if (checkRateFormat)
                        {
                            crossRate_str = Convert.ToDecimal(crossRate_str).ToString(GetRateFormat(rateDP));
                        }
                        else
                        {
                            modelErrors.Add(new string[] { "Transaction_CrossRate_" + rowId, "'" + crossRate_str + "' is not a valid Cross Rate!" });
                        }
                    }
                    else
                    {
                        modelErrors.Add(new string[] { "Transaction_CrossRate_" + rowId, "Cross Rate is required!" });
                    }

                    if (modelErrors.Count == 0)
                    {
                        result = "{\"IsValid\":true,";
                    }
                    else
                    {
                        result = "{\"IsValid\":true,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                    }

                    result += "\"Result\":true,"
                        + "\"CrossRate\":\"" + crossRate_str + "\"}";
                }
                else
                {
                    result = "{\"Result\":false,\"ErrorMessage\":\"Cross Rate can only be changed for Sell Type!\"}";
                }
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: OpenDenomination
        [HttpPost]
        public string OpenDenomination(int pid, int rowId, string amountForeign)
        {
            string result = "";

            try
            {
                if (!string.IsNullOrEmpty(amountForeign))
                {
                    bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign);

                    if (checkAmountForeignFormat)
                    {
                        Product product = _productsModel.GetSingle(pid);
                        ViewData["ProductDenomination"] = product.ProductDenominations.OrderByDescending(e => e.DenominationValue).ToList();

                        ViewData["RowId"] = rowId;

                        string view = "";

                        using (var sw = new StringWriter())
                        {
                            var viewResult = ViewEngines.Engines.FindPartialView(ControllerContext, "OpenDenomination");
                            var viewContext = new ViewContext(ControllerContext, viewResult.View, ViewData, TempData, sw);
                            viewResult.View.Render(viewContext, sw);
                            viewResult.ViewEngine.ReleaseView(ControllerContext, viewResult.View);
                            view = sw.GetStringBuilder().ToString();
                        }

                        view = JsonConvert.SerializeObject(view);

                        result = "{\"Result\":\"true\",\"ModalTitle\":\"Denomination - " + product.CurrencyCode + "\",\"ColumnName\":\"AMT (" + product.CurrencyCode + ")\",\"View\":" + view + "}";
                    }
                    else
                    {
                        result = "{\"Result\":false,\"ErrorMessage\":\"'" + amountForeign + "' is not a valid Amount (Foreign)!\"}";
                    }
                }
                else
                {
                    result = "{\"Result\":false,\"ErrorMessage\":\"Amount (Foreign) is required!\"}";
                }
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: PiecesChange
        [HttpPost]
        public string PiecesChange(int rowId, int rowId2, FormCollection form)
        {
            string result = "";

            try
            {
                List<string[]> modelErrors = new List<string[]>();

                string pieces = form["Denomination_Value_Pieces_" + rowId + "_" + rowId2];

                if (!string.IsNullOrEmpty(pieces))
                {
                    bool checkPiecesFormat = FormValidationHelper.NonNegativeAmountValidation(pieces);

                    if (checkPiecesFormat)
                    {
                        pieces = Convert.ToDecimal(pieces).ToString(GetDecimalFormat(0));
                    }
                    else
                    {
                        modelErrors.Add(new string[] { "Denomination_Value_Pieces_" + rowId + "_" + rowId2, "'" + pieces + "' is not a valid Pieces!" });
                    }
                }
                else
                {
                    modelErrors.Add(new string[] { "Denomination_Value_Pieces_" + rowId + "_" + rowId2, "Pieces is required!" });
                }

                Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));
                string currencyChangedFormat = GetDecimalFormat(currencyChanged.Decimal);

                decimal amountForeign = 0;

                decimal totalOrder = 0;
                decimal totalCalculated = 0;
                decimal totalRemaining = 0;

                if (modelErrors.Count == 0)
                {
                    int pcs = Convert.ToInt32(pieces.Replace(",", ""));
                    int deno = Convert.ToInt32(form["Denomination_Value_" + rowId + "_" + rowId2]);

                    amountForeign = pcs * deno;

                    totalCalculated += amountForeign;

                    result = "{\"IsValid\":true,";
                }
                else
                {
                    result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                }

                //Calculate total order, total remaining, total calculated
                string amountForeign_str = form["Transaction_AmountForeign_" + rowId];

                if (!string.IsNullOrEmpty(amountForeign_str))
                {
                    bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str);

                    if (checkAmountForeignFormat)
                    {
                        totalOrder = Convert.ToDecimal(amountForeign_str);
                    }
                }

                List<string> denoKeys = form.AllKeys.Where(e => e.Contains("Denomination_Value_AmountForeign_" + rowId + "_") && e != "Denomination_Value_AmountForeign_" + rowId + "_" + rowId2).ToList();

                foreach (string key in denoKeys)
                {
                    bool checkDenoAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(form[key]);

                    if (checkDenoAmountForeignFormat)
                    {
                        totalCalculated += Convert.ToDecimal(form[key]);
                    }
                }

                totalRemaining = totalOrder - totalCalculated;

                result += "\"Result\":true,"
                    + "\"Pieces\":\"" + pieces + "\","
                    + "\"DenoAmountForeign\":\"" + amountForeign.ToString(currencyChangedFormat) + "\","
                    + "\"DenoTotalCalculated\":\"" + totalCalculated.ToString(currencyChangedFormat) + "\","
                    + "\"DenoTotalRemaining\":\"" + totalRemaining.ToString(currencyChangedFormat) + "\","
                    + "\"DenoTotalOrder\":\"" + totalOrder.ToString(currencyChangedFormat) + "\"}";
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: CoinsChange
        [HttpPost]
        public string CoinsChange(int rowId, int rowId2, FormCollection form)
        {
            string result = "";

            try
            {
                List<string[]> modelErrors = new List<string[]>();

                Product currencyChanged = _productsModel.GetSingle(Convert.ToInt32(form["Transaction_Currency_" + rowId]));
                string currencyChangedFormat = GetDecimalFormat(currencyChanged.Decimal);

                string denoAmountForeign_str = form["Denomination_Value_AmountForeign_" + rowId + "_" + rowId2];

                if (!string.IsNullOrEmpty(denoAmountForeign_str))
                {
                    bool checkDenoAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(denoAmountForeign_str);

                    if (checkDenoAmountForeignFormat)
                    {
                        denoAmountForeign_str = Convert.ToDecimal(denoAmountForeign_str).ToString(currencyChangedFormat);
                    }
                    else
                    {
                        modelErrors.Add(new string[] { "Denomination_Value_AmountForeign_" + rowId + "_" + rowId2, "'" + denoAmountForeign_str + "' is not a valid AMT (" + currencyChanged.CurrencyCode + ")!" });
                    }
                }
                else
                {
                    modelErrors.Add(new string[] { "Denomination_Value_AmountForeign_" + rowId + "_" + rowId2, "AMT (" + currencyChanged.CurrencyCode + ") is required!" });
                }

                decimal totalOrder = 0;
                decimal totalCalculated = 0;
                decimal totalRemaining = 0;

                if (modelErrors.Count == 0)
                {
                    decimal amountForeign = Convert.ToDecimal(denoAmountForeign_str);

                    totalCalculated += amountForeign;

                    result = "{\"IsValid\":true,";
                }
                else
                {
                    result = "{\"IsValid\":false,\"ModelErrors\":" + JsonConvert.SerializeObject(modelErrors) + ",";
                }

                //Calculate total order, total remaining, total calculated
                string amountForeign_str = form["Transaction_AmountForeign_" + rowId];

                if (!string.IsNullOrEmpty(amountForeign_str))
                {
                    bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str);

                    if (checkAmountForeignFormat)
                    {
                        totalOrder = Convert.ToDecimal(amountForeign_str);
                    }
                }

                List<string> denoKeys = form.AllKeys.Where(e => e.Contains("Denomination_Value_AmountForeign_" + rowId + "_") && e != "Denomination_Value_AmountForeign_" + rowId + "_" + rowId2).ToList();

                foreach (string key in denoKeys)
                {
                    bool checkDenoAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(form[key]);

                    if (checkDenoAmountForeignFormat)
                    {
                        totalCalculated += Convert.ToDecimal(form[key]);
                    }
                }

                totalRemaining = totalOrder - totalCalculated;

                result += "\"Result\":true,"
                    + "\"DenoAmountForeign\":\"" + denoAmountForeign_str + "\","
                    + "\"DenoTotalCalculated\":\"" + totalCalculated.ToString(currencyChangedFormat) + "\","
                    + "\"DenoTotalRemaining\":\"" + totalRemaining.ToString(currencyChangedFormat) + "\","
                    + "\"DenoTotalOrder\":\"" + totalOrder.ToString(currencyChangedFormat) + "\"}";
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: RemoveTransaction
        [HttpPost]
        public string RemoveTransaction(string type, FormCollection form)
        {
            string result = "";

            try
            {
                Product sgd = _productsModel.FindCurrencyCode("SGD");

                decimal totalForeign = 0;
                decimal totalLocal = 0;

                List<string> amountForeignKeys = form.AllKeys.Where(e => e.Contains("Transaction_AmountForeign_")).ToList();

                if (type == "Buy")
                {
                    #region Buy Transaction Type
                    //Calculate Total Amount
                    foreach (string key in amountForeignKeys)
                    {
                        string rid = key.Split('_')[2];

                        string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                        if (!string.IsNullOrEmpty(amountForeign_str1))
                        {
                            bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                            if (checkAmountForeignFormat)
                            {
                                totalForeign += Convert.ToDecimal(amountForeign_str1);
                            }
                        }

                        string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                        if (!string.IsNullOrEmpty(amountLocal_str))
                        {
                            bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                            if (checkAmountLocalFormat)
                            {
                                totalLocal += Convert.ToDecimal(amountLocal_str);
                            }
                        }
                    }
                    #endregion
                }
                else if (type == "Encashment" || type == "Swap" || type == "CrossCurrency")
                {
                    #region Encashment Transaction Type
                    foreach (string key in amountForeignKeys)
                    {
                        string rid = key.Split('_')[2];

                        string transactionType1 = form["Transaction_Type_" + rid];

                        if (transactionType1 == "Sell")
                        {
                            string amountForeign_str1 = form["Transaction_AmountForeign_" + rid];

                            if (!string.IsNullOrEmpty(amountForeign_str1))
                            {
                                bool checkAmountForeignFormat = FormValidationHelper.NonNegativeAmountValidation(amountForeign_str1);

                                if (checkAmountForeignFormat)
                                {
                                    totalForeign += Convert.ToDecimal(amountForeign_str1);
                                }
                            }

                            string amountLocal_str = form["Transaction_AmountLocal_" + rid];

                            if (!string.IsNullOrEmpty(amountLocal_str))
                            {
                                bool checkAmountLocalFormat = FormValidationHelper.NonNegativeAmountValidation(amountLocal_str);

                                if (checkAmountLocalFormat)
                                {
                                    totalLocal += Convert.ToDecimal(amountLocal_str);
                                }
                            }
                        }
                    }
                    #endregion
                }

                result += "{\"Result\":true,"
                        + "\"TotalAmountForeign\":\"" + totalForeign.ToString(GetRateFormat(8)) + "\","
                        + "\"TotalAmountLocal\":\"" + totalLocal.ToString(GetDecimalFormat(sgd.Decimal)) + "\"}";
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: ValidateAmount
        [HttpPost]
        public string ValidateAmount(string amount, int dp = 2)
        {
            string result = "";

            try
            {
                if (!string.IsNullOrEmpty(amount))
                {
                    bool checkFormat = FormValidationHelper.NonNegativeAmountValidation(amount);

                    if (checkFormat)
                    {
                        amount = Convert.ToDecimal(amount).ToString(GetDecimalFormat(dp));

                        result = "{\"Result\":true,\"Amount\":\"" + amount + "\"}";
                    }
                    else
                    {
                        result = "{\"Result\":false,\"ErrorMessage\":\"'" + amount + "' is not a valid Amount!\"}";
                    }
                }
                else
                {
                    result = "{\"Result\":false,\"ErrorMessage\":\"Amount is required!\"}";
                }
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        //POST: ValidateAmount
        [HttpPost]
        public string ValidateAmount2(string amount, bool allowedNegative, int dp = 2)
        {
            string result = "";

            try
            {
                if (!string.IsNullOrEmpty(amount))
                {
                    bool checkFormat = allowedNegative ? FormValidationHelper.AmountValidation(amount) : FormValidationHelper.NonNegativeAmountValidation(amount);

                    if (checkFormat)
                    {
                        amount = Convert.ToDecimal(amount).ToString(GetDecimalFormat(dp));

                        result = "{\"Result\":true,\"Amount\":\"" + amount + "\"}";
                    }
                    else
                    {
                        result = "{\"Result\":false,\"ErrorMessage\":\"'" + amount + "' is not a valid Amount!\"}";
                    }
                }
                else
                {
                    result = "{\"Result\":false,\"ErrorMessage\":\"Amount is required!\"}";
                }
            }
            catch (Exception e)
            {
                result = "{\"Result\":false,\"ErrorMessage\":\"" + e.Message + "\"}";
            }

            return result;
        }

        public string GetDecimalFormat(int dp)
        {
            string format = "#,##0";

            switch (dp)
            {
                case 1:
                    format += ".0";
                    break;
                case 2:
                    format += ".00";
                    break;
                case 3:
                    format += ".000";
                    break;
                case 4:
                    format += ".0000";
                    break;
                case 5:
                    format += ".00000";
                    break;
                case 6:
                    format += ".000000";
                    break;
                case 7:
                    format += ".0000000";
                    break;
                case 8:
                    format += ".00000000";
                    break;
                default:
                    break;
            }

            return format;
        }

        public string GetRateFormat(int dp)
        {
            string format = "#,##0";

            switch (dp)
            {
                case 1:
                    format += ".#";
                    break;
                case 2:
                    format += ".##";
                    break;
                case 3:
                    format += ".###";
                    break;
                case 4:
                    format += ".####";
                    break;
                case 5:
                    format += ".#####";
                    break;
                case 6:
                    format += ".######";
                    break;
                case 7:
                    format += ".#######";
                    break;
                case 8:
                    format += ".########";
                    break;
                default:
                    break;
            }

            return format;
        }

        //GET: SearchClosestString
        public string SearchClosestString(string searchString, string options)
        {
            string closest = "";
            List<string> list = options.Split(',').ToList();//convert string to list
            list.Add(searchString);//add searchString into list
            list = list.OrderBy(e => e).ToList();//sort list by ascending order
            int index = list.FindIndex(e => e == searchString);//get the index where searchString located
            if (index == 0)//if searchString is the first element of list, closest is the next element
            {
                closest = list[1];
            }
            else if (index == list.Count - 1)//if searchString is the last element of list, closest is previous element
            {
                closest = list[index - 1];
            }
            else//if searchString is in the middle of list
            {
                string up = list[index - 1];//get the previous element
                string down = list[index + 1];//get the next element

                for (int count = 0; count < searchString.Length - 1 && count < up.Length && count < down.Length; count++)//loop through all letters in searchString
                {
                    if (up[count] == searchString[count] && down[count] != searchString[count]) //first letter of searchString equal to first letter of previous element, but not equal to first letter of next element
                    {
                        closest = up;
                        break;
                    }
                    else if (up[count] != searchString[count] && down[count] == searchString[count])//first letter of searchString equal to first letter of next element, but not equal to first letter of previous element
                    {
                        closest = down;
                        break;
                    }
                    else if (up[count] != searchString[count] && down[count] != searchString[count])//if both first letter not equal
                    {
                        int upDist = searchString[count] - up[count];//get the distance from first letter of previous element
                        int downDist = down[count] - searchString[count];//get the distance from first letter of next element

                        if (upDist < downDist)
                        {
                            closest = up;
                            break;
                        }
                        else if (downDist < upDist)
                        {
                            closest = down;
                            break;
                        }
                    }
                }
            }

            if (string.IsNullOrEmpty(closest))
            {
                closest = list[index + 1];
            }

            return closest;
        }

        //POST: ApproveSale
        [HttpPost]
        [RedirectingActionForUpdate]
        public ActionResult ApproveSale(int id, FormCollection form)
        {
            int page = 1;

            if (TempData["Page"] != null)
            {
                page = Convert.ToInt32(TempData["Page"]);
                ViewData["Page"] = page;
            }

            string remarks = form["sales.Remarks"].Trim();

            Sale oldData = _salesModel.GetSingle(id);

            if (oldData != null)
            {
                if (oldData.Status == "Pending GM Approval")
                {
                    oldData.Status = "Pending Accounts";
                    if (!string.IsNullOrEmpty(form["sales.Remarks"]))
                    {
                        oldData.Remarks = form["sales.Remarks"].Trim();
                    }
                    oldData.LastApprovalOn = DateTime.Now;

                    bool result = _salesModel.Update(id, oldData);

                    if (result)
                    {
                        int userid = Convert.ToInt32(Session["UserId"]);
                        string tableAffected = "Sales";
                        string description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Approved Sale";

                        bool sale_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);

                        if (sale_log)
                        {
                            //Add Approval History
                            bool approval_history = _approvalHistorysModel.Add("Sale", oldData.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Approve", "[" + Session["Username"].ToString() + "] Approved Sale");
                        }

                        TempData.Add("Result", "success|" + oldData.MemoID + " has been successfully approved!");
                    }
                    else
                    {
                        TempData.Add("Result", "danger|An error occured while approving sale record!");
                    }
                }
                else if (oldData.Status == "Pending Delete GM Approval")
                {
                    return RedirectToAction("Delete", new { @id = oldData.ID });
                }
                else
                {
                    TempData.Add("Result", "error|" + oldData.MemoID + " no need approval!");
                }
            }
            else
            {
                TempData.Add("Result", "error|Memo ID not found!");
            }

            return RedirectToAction("Listing", new { @page = page });
        }

        //GET: Delete
        [RedirectingActionForDelete]
        public ActionResult Delete(int id)
        {
            int page = 1;

            if (TempData["Page"] != null)
            {
                page = Convert.ToInt32(TempData["Page"]);
                ViewData["Page"] = page;
            }

            Sale sales = _salesModel.GetSingle(id);

            if (sales != null)
            {
                if (sales.Status == "Pending Accounts" || sales.Status == "Pending Packing" || sales.Status == "Pending Assign Delivery")
                {
                    bool result = _salesModel.Delete(id);

                    if (result)
                    {
                        int userid = Convert.ToInt32(Session["UserId"]);
                        string tableAffected = "Sales";
                        string description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Deleted Sale [" + sales.MemoID + "]";

                        bool sale_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);

                        TempData.Add("Result", "success|" + sales.MemoID + " has been successfully deleted!");
                    }
                    else
                    {
                        TempData.Add("Result", "danger|An error occured while deleting sale record!");
                    }
                }
                else if (sales.Status == "Completed")
                {
                    if (Session["UserRole"].ToString().Contains("Super Admin") || Session["UserRole"].ToString().Contains("General Manager"))
                    {
                        bool isDeletable = true;

                        if (sales.TransactionType != "Sell" && sales.Status == "Completed")
                        {
                            List<SaleTransaction> filteredTransactions = sales.SaleTransactions.Where(e => e.TransactionType == "Buy").ToList();

                            foreach (SaleTransaction transaction in filteredTransactions)
                            {
                                EndDayTrade trade = _endDayTradesModel.GetProductCurrentTrade(transaction.CurrencyId, sales.LastApprovalOn);

                                if (trade != null)
                                {
                                    EndDayTrade futureTrade = _endDayTradesModel.GetProductFutureTrade(transaction.CurrencyId, trade.CurrentActivationTime);

                                    if (futureTrade != null)
                                    {
                                        isDeletable = false;
                                    }
                                }
                            }
                        }

                        if (isDeletable)
                        {
                            sales.Status = "Cancelled";

                            bool result = _salesModel.Update(sales.ID, sales);

                            if (result)
                            {
                                int userid = Convert.ToInt32(Session["UserId"]);
                                string tableAffected = "Sales";
                                string description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Approved Pending Delete Sale [" + sales.MemoID + "]";

                                bool sale_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);

                                if (sale_log)
                                {
                                    //Add Approval History
                                    bool approval_history = _approvalHistorysModel.Add("Sale", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Approve Cancel", description);
                                }

                                //Update Each Related Parts
                                #region Return amounts to Product
                                bool add_productInventory = false;
                                bool deduct_productInventory = false;

                                bool add_inventory = false;
                                bool deduct_inventory = false;

                                Dictionary<string, decimal> transactAmount = new Dictionary<string, decimal>();

                                foreach (SaleTransaction transaction in sales.SaleTransactions)
                                {
                                    if (transaction.TransactionType == "Buy")
                                    {
                                        Product addProducts = _productsModel.GetSingle(transaction.CurrencyId);
                                        addProducts.ProductInventories[0].TotalInAccount -= transaction.AmountForeign;
                                        if (transactAmount.ContainsKey(addProducts.CurrencyCode))
                                        {
                                            transactAmount[addProducts.CurrencyCode] -= transaction.AmountForeign;
                                        }
                                        else
                                        {
                                            transactAmount.Add(addProducts.CurrencyCode, transaction.AmountForeign * -1);
                                        }
                                        bool result_addProductInventory = _productInventoriesModel.Update(addProducts.ProductInventories[0].ID, addProducts.ProductInventories[0]);

                                        if (result_addProductInventory)
                                        {
                                            Inventory inventory = new Inventory();
                                            inventory.ProductId = addProducts.ID;
                                            inventory.Type = "Deduct";
                                            inventory.Amount = transaction.AmountForeign;
                                            inventory.Description = "Deleted Sale Transaction [MemoID: " + sales.MemoID + "]";
                                            bool result_inventory = _inventoriesModel.Add(inventory);

                                            if (result_inventory)
                                            {
                                                if (!add_inventory)
                                                {
                                                    add_inventory = true;
                                                }
                                            }

                                            if (!add_productInventory)
                                            {
                                                add_productInventory = true;
                                            }
                                        }

                                        Product deductProducts = _productsModel.FindCurrencyCode("SGD");
                                        deductProducts.ProductInventories[0].TotalInAccount += transaction.AmountLocal;
                                        if (transactAmount.ContainsKey(deductProducts.CurrencyCode))
                                        {
                                            transactAmount[deductProducts.CurrencyCode] += transaction.AmountLocal;
                                        }
                                        else
                                        {
                                            transactAmount.Add(deductProducts.CurrencyCode, transaction.AmountLocal);
                                        }
                                        bool result_deductProductInventory = _productInventoriesModel.Update(deductProducts.ProductInventories[0].ID, deductProducts.ProductInventories[0]);

                                        if (result_deductProductInventory)
                                        {
                                            Inventory inventory = new Inventory();
                                            inventory.ProductId = deductProducts.ID;
                                            inventory.Type = "Add";
                                            inventory.Amount = transaction.AmountLocal;
                                            inventory.Description = "Deleted Sale Transaction [MemoID: " + sales.MemoID + "]";
                                            bool result_inventory = _inventoriesModel.Add(inventory);

                                            if (result_inventory)
                                            {
                                                if (!deduct_inventory)
                                                {
                                                    deduct_inventory = true;
                                                }
                                            }

                                            if (!deduct_productInventory)
                                            {
                                                deduct_productInventory = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        Product deductProducts = _productsModel.GetSingle(transaction.CurrencyId);
                                        deductProducts.ProductInventories[0].TotalInAccount += transaction.AmountForeign;
                                        if (transactAmount.ContainsKey(deductProducts.CurrencyCode))
                                        {
                                            transactAmount[deductProducts.CurrencyCode] += transaction.AmountForeign;
                                        }
                                        else
                                        {
                                            transactAmount.Add(deductProducts.CurrencyCode, transaction.AmountForeign);
                                        }
                                        bool result_deductProductInventory = _productInventoriesModel.Update(deductProducts.ProductInventories[0].ID, deductProducts.ProductInventories[0]);

                                        if (result_deductProductInventory)
                                        {
                                            Inventory inventory = new Inventory();
                                            inventory.ProductId = deductProducts.ID;
                                            inventory.Type = "Add";
                                            inventory.Amount = transaction.AmountForeign;
                                            inventory.Description = "Deleted Sale Transaction [MemoID: " + sales.MemoID + "]";
                                            bool result_inventory = _inventoriesModel.Add(inventory);

                                            if (result_inventory)
                                            {
                                                if (!deduct_inventory)
                                                {
                                                    deduct_inventory = true;
                                                }
                                            }

                                            if (!deduct_productInventory)
                                            {
                                                deduct_productInventory = true;
                                            }
                                        }

                                        Product addProducts = _productsModel.FindCurrencyCode("SGD");
                                        addProducts.ProductInventories[0].TotalInAccount -= transaction.AmountLocal;
                                        if (transactAmount.ContainsKey(addProducts.CurrencyCode))
                                        {
                                            transactAmount[addProducts.CurrencyCode] -= transaction.AmountLocal;
                                        }
                                        else
                                        {
                                            transactAmount.Add(addProducts.CurrencyCode, transaction.AmountLocal * -1);
                                        }
                                        bool result_addProductInventory = _productInventoriesModel.Update(addProducts.ProductInventories[0].ID, addProducts.ProductInventories[0]);

                                        if (result_addProductInventory)
                                        {
                                            Inventory inventory = new Inventory();
                                            inventory.ProductId = addProducts.ID;
                                            inventory.Type = "Deduct";
                                            inventory.Amount = transaction.AmountLocal;
                                            inventory.Description = "Deleted Sale Transaction [MemoID: " + sales.MemoID + "]";
                                            bool result_inventory = _inventoriesModel.Add(inventory);

                                            if (result_inventory)
                                            {
                                                if (!add_inventory)
                                                {
                                                    add_inventory = true;
                                                }
                                            }

                                            if (!add_productInventory)
                                            {
                                                add_productInventory = true;
                                            }
                                        }
                                    }
                                }
                                #endregion

                                #region Update End of Day Trade
                                bool hasDeleteEndDayTradeTransactions = false;
                                bool hasUpdateTrade = false;

                                List<EndDayTradeTransaction> endDayTradeTransactions = _endDayTradeTransactionsModel.GetAll(sales.SaleTransactions.Select(e => e.ID).ToList(), sales.LastApprovalOn);

                                if (endDayTradeTransactions.Count > 0)
                                {
                                    List<EndDayTrade> endDayTrades = endDayTradeTransactions.Select(e => e.EndDayTrade).Distinct().ToList();

                                    //Delete existing records
                                    foreach (EndDayTradeTransaction tradeTransaction in endDayTradeTransactions)
                                    {
                                        bool endDayTradeTransactions_delete = _endDayTradeTransactionsModel.Delete(tradeTransaction.ID);

                                        if (endDayTradeTransactions_delete)
                                        {
                                            hasDeleteEndDayTradeTransactions = true;
                                        }
                                    }

                                    //Recalculate End of Day Trades
                                    if (hasDeleteEndDayTradeTransactions)
                                    {
                                        //Dictionary<int, decimal[]> currentClosings = new Dictionary<int, decimal[]>();

                                        foreach (EndDayTrade trade in endDayTrades)
                                        {
                                            decimal totalAmountForeign = 0;
                                            decimal totalAmountLocal = 0;
                                            List<string> desciptions = new List<string>();

                                            List<EndDayTradeTransaction> tradeTransactions = _endDayTradeTransactionsModel.GetAll(trade.ID);

                                            string amountForeignFormat = GetDecimalFormat(trade.Products.Decimal);
                                            string sgdFormat = GetDecimalFormat(sgdDp);

                                            foreach (EndDayTradeTransaction transaction in tradeTransactions)
                                            {
                                                totalAmountForeign += transaction.AmountForeign;
                                                totalAmountLocal += transaction.AmountLocal;
                                                desciptions.Add(String.Format("{0}-{1}:{2}:{3}:{4}:{5}", transaction.SaleTransaction.Sales.MemoID, transaction.SaleTransaction.TransactionID, transaction.SaleTransaction.Products.Symbol + transaction.AmountForeign.ToString(amountForeignFormat), transaction.SaleTransaction.Rate.ToString(GetRateFormat(rateDP)), transaction.SaleTransaction.EncashmentRate != null ? Convert.ToDecimal(transaction.SaleTransaction.EncashmentRate).ToString(GetRateFormat(rateDP)) : "-", "SGD" + (transaction.AmountLocal * trade.Products.Unit).ToString(sgdFormat)));
                                            }

                                            EndDayTrade previousTrade = _endDayTradesModel.GetProductPreviousTrade(trade.CurrencyId, trade.LastActivationTime);

                                            decimal openingBankAmount = trade.OpeningBankAmount;
                                            decimal openingCashAmount = trade.OpeningCashAmount;
                                            decimal openingForeignCurrencyBal = trade.OpeningForeignCurrencyBalance;
                                            decimal openingAveragePurchaseCost = trade.OpeningAveragePurchaseCost;
                                            decimal openingBalanceAtAveragePurchase = trade.OpeningBalanceAtAveragePurchase;
                                            decimal openingProfitAmount = trade.OpeningProfitAmount;
                                            decimal closingBankAmount = trade.ClosingBankAmount;
                                            decimal closingCashAmount = trade.ClosingCashAmount;
                                            decimal closingForeignCurrencyBal = trade.ClosingForeignCurrencyBalance;
                                            decimal closingAveragePurchaseCost = trade.ClosingAveragePurchaseCost;
                                            decimal closingBalanceAtAveragePurchase = trade.ClosingBalanceAtAveragePurchase;
                                            decimal closingProfitAmount = trade.ClosingProfitAmount;
                                            List<string> transactionDescription = new List<string>();

                                            decimal foreignCurrencyBal = trade.ClosingForeignCurrencyBalance;
                                            decimal averageRate = trade.ClosingAveragePurchaseCost;
                                            decimal closingBal = trade.ClosingBalanceAtAveragePurchase;

                                            if (transactAmount.ContainsKey(trade.Products.CurrencyCode))
                                            {
                                                foreignCurrencyBal += transactAmount[trade.Products.CurrencyCode];
                                            }

                                            if (previousTrade == null)
                                            {
                                                if (transactAmount.ContainsKey("SGD"))
                                                {
                                                    openingBankAmount += transactAmount["SGD"];
                                                    openingCashAmount += transactAmount["SGD"];
                                                }

                                                if (transactAmount.ContainsKey(trade.Products.CurrencyCode))
                                                {
                                                    openingForeignCurrencyBal += transactAmount[trade.Products.CurrencyCode];
                                                }

                                                if (totalAmountForeign != 0)
                                                {
                                                    averageRate = totalAmountLocal / totalAmountForeign;
                                                }

                                                closingBal = foreignCurrencyBal * averageRate;

                                                openingAveragePurchaseCost = averageRate;
                                                openingBalanceAtAveragePurchase = closingBal;
                                            }

                                            if (transactAmount.ContainsKey("SGD"))
                                            {
                                                closingBankAmount += transactAmount["SGD"];
                                                closingCashAmount += transactAmount["SGD"];
                                            }

                                            if (transactAmount.ContainsKey(trade.Products.CurrencyCode))
                                            {
                                                closingForeignCurrencyBal += transactAmount[trade.Products.CurrencyCode];
                                            }

                                            closingAveragePurchaseCost = averageRate;
                                            closingBalanceAtAveragePurchase = closingBal;
                                            closingProfitAmount = (openingForeignCurrencyBal * trade.CurrentSGDBuyRate) + closingBankAmount + closingCashAmount - foreignCurrencyBal * trade.CurrentSGDBuyRate - closingBal * trade.CurrentSGDBuyRate;

                                            trade.OpeningBankAmount = openingBankAmount;
                                            trade.OpeningCashAmount = openingCashAmount;
                                            trade.OpeningForeignCurrencyBalance = openingForeignCurrencyBal;
                                            trade.OpeningAveragePurchaseCost = openingAveragePurchaseCost;
                                            trade.OpeningBalanceAtAveragePurchase = openingBalanceAtAveragePurchase;
                                            trade.OpeningProfitAmount = openingProfitAmount;
                                            trade.ClosingBankAmount = closingBankAmount;
                                            trade.ClosingCashAmount = closingCashAmount;
                                            trade.ClosingForeignCurrencyBalance = closingForeignCurrencyBal;
                                            trade.ClosingAveragePurchaseCost = closingAveragePurchaseCost;
                                            trade.ClosingBalanceAtAveragePurchase = closingBalanceAtAveragePurchase;
                                            trade.ClosingProfitAmount = closingProfitAmount;
                                            trade.Description = String.Join("|", desciptions);

                                            bool trade_update = _endDayTradesModel.Update(trade.ID, trade);

                                            if (trade_update)
                                            {
                                                hasUpdateTrade = true;

                                                //Record for closings, to update the next opening if any
                                                //currentClosings.Add(
                                                //    trade.CurrencyId,
                                                //    new decimal[7]
                                                //    {
                                                //        Convert.ToDecimal(trade.CurrentActivationTime.ToString("yyyyMMddHHmmss.fffffff")),
                                                //        trade.ClosingBankAmount,
                                                //        trade.ClosingCashAmount,
                                                //        trade.ClosingForeignCurrencyBalance,
                                                //        trade.ClosingAveragePurchaseCost,
                                                //        trade.ClosingBalanceAtAveragePurchase,
                                                //        trade.ClosingProfitAmount
                                                //    });
                                            }
                                        }

                                        //Update next end day trade if any
                                        //foreach (KeyValuePair<int, decimal[]> key in currentClosings)
                                        //{
                                        //    int currencyId = key.Key;
                                        //    DateTime currentActivation = Convert.ToDateTime(String.Format("{0}/{1}/{2} {3}:{4}:{5}", key.Value[0].ToString().Substring(0, 4), key.Value[0].ToString().Substring(4, 2), key.Value[0].ToString().Substring(6, 2), key.Value[0].ToString().Substring(8, 2), key.Value[0].ToString().Substring(10)));

                                        //    EndDayTrade nextTrade = _endDayTradesModel.GetProductNextTrade(currencyId, currentActivation);

                                        //    while (nextTrade != null)
                                        //    {

                                        //        currentActivation = nextTrade.CurrentActivationTime;

                                        //        nextTrade = _endDayTradesModel.GetProductNextTrade(currencyId, currentActivation);
                                        //    }
                                        //}
                                    }
                                }
                                #endregion

                                if (add_productInventory)
                                {
                                    userid = Convert.ToInt32(Session["UserId"]);
                                    tableAffected = "ProductInventories";
                                    description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Added Product Inventories [" + sales.MemoID + "]";

                                    bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                }

                                if (add_inventory)
                                {
                                    userid = Convert.ToInt32(Session["UserId"]);
                                    tableAffected = "Inventories";
                                    description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Added Inventories [" + sales.MemoID + "]";

                                    bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                }

                                if (deduct_productInventory)
                                {
                                    userid = Convert.ToInt32(Session["UserId"]);
                                    tableAffected = "ProductInventories";
                                    description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Deducted Product Inventories [" + sales.MemoID + "]";

                                    bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                }

                                if (deduct_inventory)
                                {
                                    userid = Convert.ToInt32(Session["UserId"]);
                                    tableAffected = "Inventories";
                                    description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Deducted Inventories [" + sales.MemoID + "]";

                                    bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                }

                                if (hasDeleteEndDayTradeTransactions)
                                {
                                    userid = Convert.ToInt32(Session["UserId"]);
                                    tableAffected = "EndDayTradeTransactions";
                                    description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Deleted End Day Trade Transactions [" + sales.MemoID + "]";

                                    bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                }

                                if (hasUpdateTrade)
                                {
                                    userid = Convert.ToInt32(Session["UserId"]);
                                    tableAffected = "EndDayTrade";
                                    description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Updated End Day Trades [" + sales.MemoID + "]";

                                    bool transaction_log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);
                                }

                                TempData.Add("Result", "success|" + sales.MemoID + " has been successfully deleted!");
                            }
                            else
                            {
                                TempData.Add("Result", "danger|An error occured while deleting sale record!");
                            }
                        }
                        else
                        {
                            TempData.Add("Result", "danger|Unable to delete! " + sales.MemoID + " is not the last End of Day Trade!");
                        }
                    }
                    else if (Session["UserRole"].ToString().Contains("Finance") || Session["UserRole"].ToString().Contains("Cashier"))
                    {
                        bool result = _salesModel.UpdateDeleteStatus(sales.ID, "Pending Delete GM Approval", Convert.ToInt32(Session["UserId"]));

                        if (result)
                        {
                            int userid = Convert.ToInt32(Session["UserId"]);
                            string tableAffected = "Sales";
                            string description = Session["UserRole"].ToString() + " [" + Session["Username"].ToString() + "] Pending Delete Sales [" + sales.MemoID + "]";

                            bool log = AuditLogHelper.WriteAuditLog(userid, tableAffected, description);

                            TempData.Add("Result", "success|" + sales.MemoID + " has been sent to GM for deletion approval!");
                        }
                        else
                        {
                            TempData.Add("Result", "danger|An error occured while deleting sale record!");
                        }
                    }
                    else
                    {
                        TempData.Add("Result", "danger|You have no access to delete sale record!");
                    }
                }
                else
                {
                    TempData.Add("Result", "error|Cannot delete sale at the moment!");
                }
            }
            else
            {
                TempData.Add("Result", "error|Memo ID not found!");
            }

            return RedirectToAction("Listing", new { @page = page });
        }

        //GET: GenerateMemo
        public ViewAsPdf GenerateMemo(int id, string mode = "Sales", bool allCopy = true, bool saveFile = false)
        {
            Sale sales = _salesModel.GetSingle(id);
            sales.SaleTransactions = sales.SaleTransactions.OrderBy(e => e.ID).ToList();

            string prefixBarcode = _settingsModel.GetCodeValue("PREFIX_BARCODE");
            string barcode = GenerateBarcode(prefixBarcode + sales.MemoID);
            string token = EncryptionHelper.GenerateRandomAlphaNumeric(8);

            string header = WriteMemoHeaderHTML(barcode, token);

            ViewData["MemoMode"] = mode;
            ViewData["AllCopy"] = allCopy;

            if (sales.TransactionType == "Encashment")
            {
                #region Encashment
                List<SaleTransaction> buyTransactions = sales.SaleTransactions.Where(e => e.TransactionType == "Buy").ToList();
                List<MemoCurrencyTable> buyMemos = new List<MemoCurrencyTable>();

                int buyRowCount = 1;

                decimal? buyMemoTotal = null;
                //decimal TotalAmountCheckBuy = 0;
                //List<TotalMemoItemModel> TotalMemoItemBuy = new List<TotalMemoItemModel>();
                //TotalMemoItemModel singleItemBuy = new TotalMemoItemModel();

                foreach (SaleTransaction transaction in buyTransactions)
                {
                    string paymentMode = transaction.PaymentMode;
                    //singleItemBuy = new TotalMemoItemModel();
                    //TotalAmountCheckBuy = 0;
                    if (paymentMode == "Cheque" && !string.IsNullOrEmpty(transaction.ChequeNo))
                    {
                        paymentMode += " (" + transaction.ChequeNo + ")";
                    }
                    else if (paymentMode == "Bank Transfer" && !string.IsNullOrEmpty(transaction.BankTransferNo))
                    {
                        paymentMode += " (" + transaction.BankTransferNo + ")";
                    }

                    //var CheckBuy = TotalMemoItemBuy.Where(e => e.TransactionType == transaction.PaymentMode).FirstOrDefault();

                    //if (CheckBuy != null)
                    //{
                    //    //can add up
                    //    TotalAmountCheckBuy = Convert.ToDecimal(CheckBuy.Amount) + transaction.AmountLocal;
                    //    //Check.Amount = Check.Amount + Convert.ToDecimal(FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal));
                    //    CheckBuy.Amount = FormValidationHelper.AmountFormatter(Convert.ToDecimal(TotalAmountCheckBuy), sgdDp);
                    //}
                    //else
                    //{
                    //    //New Item
                    //    singleItemBuy.TransactionType = transaction.PaymentMode;
                    //    singleItemBuy.Amount = FormValidationHelper.AmountFormatter(transaction.AmountLocal, sgdDp);
                    //    TotalMemoItemBuy.Add(singleItemBuy);
                    //}

                    buyMemos.Add(new MemoCurrencyTable()
                    {
                        RowId = buyRowCount,
                        Currency = transaction.Products.CurrencyCode,
                        Rate = transaction.Rate.ToString(GetRateFormat(rateDP)),
                        Amount = FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal),
                        PaymentMode = paymentMode,
                        TotalAmount = FormValidationHelper.AmountFormatter(transaction.AmountLocal, sgdDp),
                        VesselName = transaction.VesselName
                    });

                    buyMemoTotal = Convert.ToDecimal(buyMemoTotal) + transaction.AmountLocal;

                    buyRowCount++;
                }

                if (buyTransactions.Count > 0 && buyTransactions.Count < 5)
                {
                    for (int i = buyTransactions.Count; i < 5; i++)
                    {
                        buyMemos.Add(new MemoCurrencyTable()
                        {
                            RowId = i + 1,
                            Currency = "",
                            Rate = "",
                            Amount = "",
                            PaymentMode = "",
                            TotalAmount = "",
                            VesselName = "",
                        });
                    }
                }

                //ViewData["TotalMemoItemListBuy"] = TotalMemoItemBuy;
                ViewData["BuyMemo"] = buyMemos;
                ViewData["BuyMemoTotal"] = "";
                if (buyMemoTotal != null)
                {
                    ViewData["BuyMemoTotal"] = "SGD " + FormValidationHelper.AmountFormatter(Convert.ToDecimal(buyMemoTotal), sgdDp);
                }

                List<SaleTransaction> sellTransactions = sales.SaleTransactions.Where(e => e.TransactionType == "Sell").ToList();
                List<MemoCurrencyTable> sellMemos = new List<MemoCurrencyTable>();
                List<MemoCurrencyTable> sellMemosEncashment = new List<MemoCurrencyTable>();

                int sellMemoCount = 1;

                decimal? sellMemoTotal = null;
                decimal? sellMemoEncashmentTotal = null;
                //decimal TotalAmountCheckSell = 0;
                //decimal TotalAmountCheckEncashment = 0;
                //List<TotalMemoItemModel> TotalMemoItemSell = new List<TotalMemoItemModel>();
                //TotalMemoItemModel singleItemSell = new TotalMemoItemModel();
                //List<TotalMemoItemModel> TotalMemoItemEncashment = new List<TotalMemoItemModel>();
                //TotalMemoItemModel singleItemEncashment = new TotalMemoItemModel();

                foreach (SaleTransaction transaction in sellTransactions)
                {
                    string paymentMode = transaction.PaymentMode;

                    //singleItemSell = new TotalMemoItemModel();
                    //TotalAmountCheckSell = 0;
                    //singleItemEncashment = new TotalMemoItemModel();
                    //TotalAmountCheckEncashment = 0;
                    if (paymentMode == "Cheque" && !string.IsNullOrEmpty(transaction.ChequeNo))
                    {
                        paymentMode += " (" + transaction.ChequeNo + ")";
                    }
                    else if (paymentMode == "Bank Transfer" && !string.IsNullOrEmpty(transaction.BankTransferNo))
                    {
                        paymentMode += " (" + transaction.BankTransferNo + ")";
                    }

                    //var CheckSell = TotalMemoItemSell.Where(e => e.TransactionType == transaction.PaymentMode).FirstOrDefault();

                    //if (CheckSell != null)
                    //{
                    //    //can add up
                    //    TotalAmountCheckSell = Convert.ToDecimal(CheckSell.Amount) + transaction.AmountLocal;
                    //    //Check.Amount = Check.Amount + Convert.ToDecimal(FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal));
                    //    CheckSell.Amount = FormValidationHelper.AmountFormatter(Convert.ToDecimal(TotalAmountCheckSell), sgdDp);
                    //}
                    //else
                    //{
                    //    //New Item
                    //    singleItemSell.TransactionType = transaction.PaymentMode;
                    //    singleItemSell.Amount = FormValidationHelper.AmountFormatter(transaction.AmountLocal, sgdDp);
                    //    TotalMemoItemSell.Add(singleItemSell);
                    //}

                    sellMemos.Add(new MemoCurrencyTable()
                    {
                        RowId = sellMemoCount,
                        Currency = transaction.Products.CurrencyCode,
                        Rate = transaction.Rate.ToString(GetRateFormat(rateDP)),
                        Amount = FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal),
                        PaymentMode = paymentMode,
                        TotalAmount = FormValidationHelper.AmountFormatter(transaction.AmountLocal, sgdDp),
                        VesselName = transaction.VesselName
                    });

                    sellMemoTotal = Convert.ToDecimal(sellMemoTotal) + transaction.AmountLocal;

                    sellMemosEncashment.Add(new MemoCurrencyTable()
                    {
                        RowId = sellMemoCount,
                        Currency = transaction.Products.CurrencyCode,
                        Rate = Convert.ToDecimal(transaction.EncashmentRate).ToString(GetRateFormat(rateDP)),
                        Amount = FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal),
                        PaymentMode = paymentMode,
                        TotalAmount = FormValidationHelper.AmountFormatter(transaction.AmountForeign * Convert.ToDecimal(transaction.EncashmentRate), sgdDp),
                        VesselName = transaction.VesselName
                    });

                    //var CheckEncashment = TotalMemoItemEncashment.Where(e => e.TransactionType == transaction.PaymentMode).FirstOrDefault();

                    //if (CheckEncashment != null)
                    //{
                    //    //can add up
                    //    TotalAmountCheckEncashment = Convert.ToDecimal(CheckEncashment.Amount) + transaction.AmountForeign * Convert.ToDecimal(transaction.EncashmentRate);
                    //    //Check.Amount = Check.Amount + Convert.ToDecimal(FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal));
                    //    CheckEncashment.Amount = FormValidationHelper.AmountFormatter(Convert.ToDecimal(TotalAmountCheckEncashment), sgdDp);
                    //}
                    //else
                    //{
                    //    //New Item
                    //    singleItemEncashment.TransactionType = transaction.PaymentMode;
                    //    singleItemEncashment.Amount = FormValidationHelper.AmountFormatter(transaction.AmountForeign * Convert.ToDecimal(transaction.EncashmentRate), sgdDp);
                    //    TotalMemoItemEncashment.Add(singleItemEncashment);
                    //}

                    //sellMemoEncashmentTotal = Convert.ToDecimal(sellMemoEncashmentTotal) + transaction.AmountForeign * Convert.ToDecimal(transaction.EncashmentRate);
                    sellMemoEncashmentTotal = Convert.ToDecimal(sellMemoEncashmentTotal) + (Convert.ToDecimal(FormValidationHelper.AmountFormatter(transaction.AmountForeign * Convert.ToDecimal(transaction.EncashmentRate), sgdDp)));
                    sellMemoCount++;
                }

                if (sellTransactions.Count > 0 && sellTransactions.Count < 5)
                {
                    for (int i = sellTransactions.Count; i < 5; i++)
                    {
                        sellMemos.Add(new MemoCurrencyTable()
                        {
                            RowId = i + 1,
                            Currency = "",
                            Rate = "",
                            Amount = "",
                            PaymentMode = "",
                            TotalAmount = "",
                            VesselName = ""
                        });

                        sellMemosEncashment.Add(new MemoCurrencyTable()
                        {
                            RowId = i + 1,
                            Currency = "",
                            Rate = "",
                            Amount = "",
                            PaymentMode = "",
                            TotalAmount = "",
                            VesselName = ""
                        });
                    }
                }

                //ViewData["TotalMemoItemListSell"] = TotalMemoItemSell;
                //ViewData["TotalMemoItemListEncashment"] = TotalMemoItemEncashment;
                ViewData["SellMemo"] = sellMemos;
                ViewData["SellMemoTotal"] = "";
                if (sellMemoTotal != null)
                {
                    ViewData["SellMemoTotal"] = FormValidationHelper.AmountFormatter(Convert.ToDecimal(sellMemoTotal), sgdDp);
                }
                ViewData["SellMemoCode"] = "";
                if (sellTransactions.Count > 0)
                {
                    ViewData["SellMemoCode"] = sellTransactions.FirstOrDefault().Products.CurrencyCode;
                }

                ViewData["SellMemoEncashment"] = sellMemosEncashment;
                ViewData["SellMemoTotalEncashment"] = "";
                if (sellMemoEncashmentTotal != null)
                {
                    ViewData["SellMemoTotalEncashment"] = FormValidationHelper.AmountFormatter(Convert.ToDecimal(sellMemoEncashmentTotal), sgdDp);
                }
                ViewData["SellMemoCodeEncashment"] = "";
                if (sellTransactions.Count > 0)
                {
                    ViewData["SellMemoCodeEncashment"] = sellTransactions.FirstOrDefault().Products.CurrencyCode;
                }

                ViewData["Sale"] = sales;

                //string header = Server.MapPath("~/Views/Sale/MemoPDFHeader.html");
                string footer = Server.MapPath("~/Views/Sale/MemoPDFFooter.html");
                string customSwitch = string.Format("--header-html \"{0}\" --footer-html \"{1}\"", header, footer);
                string fileName = sales.MemoID + "-memo-" + DateTime.Now.ToString("yyMMddHHmmss") + ".pdf";

                if (saveFile)
                {
                    string path = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["EmailReceiptFolder"].ToString()), fileName);

                    return new Rotativa.ViewAsPdf("MemoEncashmentPDF")
                    {
                        FileName = fileName,
                        PageSize = Rotativa.Options.Size.A4,
                        CustomSwitches = customSwitch,
                        SaveOnServerPath = path
                    };
                }
                else
                {
                    return new Rotativa.ViewAsPdf("MemoEncashmentPDF")
                    {
                        FileName = fileName,
                        PageSize = Rotativa.Options.Size.A4,
                        CustomSwitches = customSwitch
                    };
                }
                #endregion
            }
            else if (sales.TransactionType == "Cross Currency")
            {
                #region Cross Currency
                List<SaleTransaction> buyTransactions = sales.SaleTransactions.Where(e => e.TransactionType == "Buy").ToList();
                List<MemoCurrencyTable> buyMemos = new List<MemoCurrencyTable>();

                int buyRowCount = 1;

                decimal? buyMemoTotal = null;
                //decimal TotalAmountCheckBuy = 0;
                //List<TotalMemoItemModel> TotalMemoItemBuy = new List<TotalMemoItemModel>();
                //TotalMemoItemModel singleItemBuy = new TotalMemoItemModel();
                foreach (SaleTransaction transaction in buyTransactions)
                {
                    string paymentMode = transaction.PaymentMode;
                    //singleItemBuy = new TotalMemoItemModel();
                    //TotalAmountCheckBuy = 0;
                    if (paymentMode == "Cheque" && !string.IsNullOrEmpty(transaction.ChequeNo))
                    {
                        paymentMode += " (" + transaction.ChequeNo + ")";
                    }
                    else if (paymentMode == "Bank Transfer" && !string.IsNullOrEmpty(transaction.BankTransferNo))
                    {
                        paymentMode += " (" + transaction.BankTransferNo + ")";
                    }

                    //var CheckBuy = TotalMemoItemBuy.Where(e => e.TransactionType == transaction.PaymentMode).FirstOrDefault();

                    //if (CheckBuy != null)
                    //{
                    //    //can add up
                    //    TotalAmountCheckBuy = Convert.ToDecimal(CheckBuy.Amount) + transaction.AmountLocal;
                    //    //Check.Amount = Check.Amount + Convert.ToDecimal(FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal));
                    //    CheckBuy.Amount = FormValidationHelper.AmountFormatter(Convert.ToDecimal(TotalAmountCheckBuy), sgdDp);
                    //}
                    //else
                    //{
                    //    //New Item
                    //    singleItemBuy.TransactionType = transaction.PaymentMode;
                    //    singleItemBuy.Amount = FormValidationHelper.AmountFormatter(transaction.AmountLocal, sgdDp);
                    //    TotalMemoItemBuy.Add(singleItemBuy);
                    //}

                    buyMemos.Add(new MemoCurrencyTable()
                    {
                        RowId = buyRowCount,
                        Currency = transaction.Products.CurrencyCode,
                        Rate = transaction.Rate.ToString(GetRateFormat(rateDP)),
                        Amount = FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal),
                        PaymentMode = paymentMode,
                        TotalAmount = FormValidationHelper.AmountFormatter(transaction.AmountLocal, sgdDp),
                        VesselName = transaction.VesselName
                    });

                    buyMemoTotal = Convert.ToDecimal(buyMemoTotal) + transaction.AmountLocal;

                    buyRowCount++;
                }

                if (buyTransactions.Count > 0 && buyTransactions.Count < 5)
                {
                    for (int i = buyTransactions.Count; i < 5; i++)
                    {
                        buyMemos.Add(new MemoCurrencyTable()
                        {
                            RowId = i + 1,
                            Currency = "",
                            Rate = "",
                            Amount = "",
                            PaymentMode = "",
                            TotalAmount = "",
                            VesselName = ""
                        });
                    }
                }

                //ViewData["TotalMemoItemListBuy"] = TotalMemoItemBuy;
                ViewData["BuyMemo"] = buyMemos;
                ViewData["BuyMemoTotal"] = "";
                if (buyMemoTotal != null)
                {
                    ViewData["BuyMemoTotal"] = "SGD " + FormValidationHelper.AmountFormatter(Convert.ToDecimal(buyMemoTotal), sgdDp);
                }

                List<SaleTransaction> sellTransactions = sales.SaleTransactions.Where(e => e.TransactionType == "Sell").ToList();
                List<MemoCurrencyTable> sellMemos = new List<MemoCurrencyTable>();
                List<MemoCurrencyTable> sellMemosCurrency = new List<MemoCurrencyTable>();

                int sellMemoCount = 1;

                decimal? sellMemoTotal = null;
                decimal? sellMemoCurrencyTotal = null;
                //decimal TotalAmountCheckSell = 0;
                //decimal TotalAmountCheckCross = 0;

                //List<TotalMemoItemModel> TotalMemoItemSell = new List<TotalMemoItemModel>();
                //TotalMemoItemModel singleItemSell = new TotalMemoItemModel();
                //List<TotalMemoItemModel> TotalMemoItemCross = new List<TotalMemoItemModel>();
                //TotalMemoItemModel singleItemCross = new TotalMemoItemModel();

                foreach (SaleTransaction transaction in sellTransactions)
                {
                    string paymentMode = transaction.PaymentMode;

                    //singleItemSell = new TotalMemoItemModel();
                    //TotalAmountCheckSell = 0;
                    //singleItemCross = new TotalMemoItemModel();
                    //TotalAmountCheckCross = 0;

                    if (paymentMode == "Cheque" && !string.IsNullOrEmpty(transaction.ChequeNo))
                    {
                        paymentMode += " (" + transaction.ChequeNo + ")";
                    }
                    else if (paymentMode == "Bank Transfer" && !string.IsNullOrEmpty(transaction.BankTransferNo))
                    {
                        paymentMode += " (" + transaction.BankTransferNo + ")";
                    }

                    //var CheckSell = TotalMemoItemSell.Where(e => e.TransactionType == transaction.PaymentMode).FirstOrDefault();

                    //if (CheckSell != null)
                    //{
                    //    //can add up
                    //    TotalAmountCheckSell = Convert.ToDecimal(CheckSell.Amount) + transaction.AmountLocal;
                    //    //Check.Amount = Check.Amount + Convert.ToDecimal(FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal));
                    //    CheckSell.Amount = FormValidationHelper.AmountFormatter(Convert.ToDecimal(TotalAmountCheckSell), sgdDp);
                    //}
                    //else
                    //{
                    //    //New Item
                    //    singleItemSell.TransactionType = transaction.PaymentMode;
                    //    singleItemSell.Amount = FormValidationHelper.AmountFormatter(transaction.AmountLocal, sgdDp);
                    //    TotalMemoItemSell.Add(singleItemSell);
                    //}

                    sellMemos.Add(new MemoCurrencyTable()
                    {
                        RowId = sellMemoCount,
                        Currency = transaction.Products.CurrencyCode,
                        Rate = transaction.Rate.ToString(GetRateFormat(rateDP)),
                        CrossRate = Convert.ToDecimal(transaction.CrossRate).ToString(GetRateFormat(rateDP)),
                        Amount = FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal),
                        PaymentMode = paymentMode,
                        TotalAmount = FormValidationHelper.AmountFormatter(transaction.AmountLocal, sgdDp),
                        VesselName = transaction.VesselName
                    });

                    sellMemoTotal = Convert.ToDecimal(sellMemoTotal) + transaction.AmountLocal;

                    int sellIndex = sales.SaleTransactions.FindIndex(e => e.ID == transaction.ID);

                    SaleTransaction buyTran = sales.SaleTransactions.OrderBy(e => e.ID).ToList()[sellIndex + 1];

                    sellMemosCurrency.Add(new MemoCurrencyTable()
                    {
                        RowId = sellMemoCount,
                        Currency = transaction.Products.CurrencyCode,
                        Rate = Convert.ToDecimal(transaction.CrossRate).ToString(GetRateFormat(rateDP)),
                        CrossRate = Convert.ToDecimal(transaction.CrossRate).ToString(GetRateFormat(rateDP)),
                        Amount = FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal),
                        PaymentMode = paymentMode,
                        TotalAmount = FormValidationHelper.AmountFormatter(buyTran.AmountForeign, buyTran.Products.Decimal),//FormValidationHelper.AmountFormatter(transaction.AmountForeign * Convert.ToDecimal(transaction.CrossRate), buyTran.Products.Decimal)
                        VesselName = transaction.VesselName
                    });

                    //var CheckCross = TotalMemoItemCross.Where(e => e.TransactionType == transaction.PaymentMode).FirstOrDefault();

                    //if (CheckCross != null)
                    //{
                    //    //can add up
                    //    TotalAmountCheckCross = Convert.ToDecimal(CheckCross.Amount) + Convert.ToDecimal(FormValidationHelper.AmountFormatter(buyTran.AmountForeign, buyTran.Products.Decimal));
                    //    //Check.Amount = Check.Amount + Convert.ToDecimal(FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal));
                    //    CheckCross.Amount = FormValidationHelper.AmountFormatter(Convert.ToDecimal(TotalAmountCheckCross), sgdDp);
                    //}
                    //else
                    //{
                    //    //New Item
                    //    singleItemCross.TransactionType = transaction.PaymentMode;
                    //    singleItemCross.Amount = FormValidationHelper.AmountFormatter(Convert.ToDecimal(FormValidationHelper.AmountFormatter(buyTran.AmountForeign, buyTran.Products.Decimal)), sgdDp);
                    //    TotalMemoItemCross.Add(singleItemCross);
                    //}

                    sellMemoCurrencyTotal = Convert.ToDecimal(sellMemoCurrencyTotal) + buyTran.AmountForeign;//transaction.AmountForeign * Convert.ToDecimal(transaction.CrossRate);

                    sellMemoCount++;
                }

                if (sellTransactions.Count > 0 && sellTransactions.Count < 5)
                {
                    for (int i = sellTransactions.Count; i < 5; i++)
                    {
                        sellMemos.Add(new MemoCurrencyTable()
                        {
                            RowId = i + 1,
                            Currency = "",
                            Rate = "",
                            Amount = "",
                            PaymentMode = "",
                            TotalAmount = "",
                            VesselName = ""
                        });

                        sellMemosCurrency.Add(new MemoCurrencyTable()
                        {
                            RowId = i + 1,
                            Currency = "",
                            Rate = "",
                            Amount = "",
                            PaymentMode = "",
                            TotalAmount = "",
                            VesselName = ""
                        });
                    }
                }

                //ViewData["TotalMemoItemListSell"] = TotalMemoItemSell;
                //ViewData["TotalMemoItemListCross"] = TotalMemoItemCross;
                ViewData["SellMemo"] = sellMemos;
                ViewData["SellMemoTotal"] = "";
                if (sellMemoTotal != null)
                {
                    ViewData["SellMemoTotal"] = FormValidationHelper.AmountFormatter(Convert.ToDecimal(sellMemoTotal), sgdDp);
                }
                ViewData["SellMemoCode"] = "";
                if (sellTransactions.Count > 0)
                {
                    ViewData["SellMemoCode"] = sellTransactions.FirstOrDefault().Products.CurrencyCode;
                }

                ViewData["SellMemoCurrency"] = sellMemosCurrency;
                ViewData["SellMemoTotalCurrency"] = "";
                if (sellMemoCurrencyTotal != null)
                {
                    ViewData["SellMemoTotalCurrency"] = FormValidationHelper.AmountFormatter(Convert.ToDecimal(sellMemoCurrencyTotal), sgdDp);
                }
                ViewData["SellMemoCodeCurrency"] = "";
                if (buyTransactions.Count > 0)
                {
                    ViewData["SellMemoCodeCurrency"] = buyTransactions.FirstOrDefault().Products.CurrencyCode;
                }

                ViewData["Sale"] = sales;

                //string header = Server.MapPath("~/Views/Sale/MemoPDFHeader.html");
                string footer = Server.MapPath("~/Views/Sale/MemoPDFFooter.html");
                string customSwitch = string.Format("--header-html \"{0}\" --footer-html \"{1}\"", header, footer);
                string fileName = sales.MemoID + "-memo-" + DateTime.Now.ToString("yyMMddHHmmss") + ".pdf";

                if (saveFile)
                {
                    string path = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["EmailReceiptFolder"].ToString()), fileName);

                    return new Rotativa.ViewAsPdf("MemoCrossCurrencyPDF")
                    {
                        FileName = fileName,
                        PageSize = Rotativa.Options.Size.A4,
                        CustomSwitches = customSwitch,
                        SaveOnServerPath = path
                    };
                }
                else
                {
                    return new Rotativa.ViewAsPdf("MemoCrossCurrencyPDF")
                    {
                        FileName = fileName,
                        PageSize = Rotativa.Options.Size.A4,
                        CustomSwitches = customSwitch
                    };
                }
                #endregion
            }
            else
            {
                #region Sell/Buy/Swap
                List<SaleTransaction> buyTransactions = sales.SaleTransactions.Where(e => e.TransactionType == "Buy").ToList();
                List<MemoCurrencyTable> buyMemos = new List<MemoCurrencyTable>();

                int buyRowCount = 1;
                decimal TotalAmountCheckBuy = 0;
                decimal? buyMemoTotal = null;
                List<TotalMemoItemModel> TotalMemoItemBuy = new List<TotalMemoItemModel>();
                TotalMemoItemModel singleItemBuy = new TotalMemoItemModel();

                //New Update partial
                List<TotalMemoItemModel> TotalPartialBuy = new List<TotalMemoItemModel>();
                TotalMemoItemModel singleItemPartialBuy = new TotalMemoItemModel();
                decimal ChequeAmountPartial = 0;
                if(sales.CashAmount != null)
                {
                    singleItemPartialBuy.TransactionType = "CASH";
                    singleItemPartialBuy.Amount = FormValidationHelper.AmountFormatter(Convert.ToDecimal(sales.CashAmount), sgdDp);
                    TotalPartialBuy.Add(singleItemPartialBuy);
                    singleItemPartialBuy = new TotalMemoItemModel();
                }

                if(sales.Cheque1Amount != null)
                {
                    ChequeAmountPartial = ChequeAmountPartial + Convert.ToDecimal(sales.Cheque1Amount);
                }

                if(sales.Cheque2Amount != null)
                {
                    ChequeAmountPartial = ChequeAmountPartial + Convert.ToDecimal(sales.Cheque2Amount);
                }

                if (sales.Cheque3Amount != null)
                {
                    ChequeAmountPartial = ChequeAmountPartial + Convert.ToDecimal(sales.Cheque3Amount);
                }

                if(ChequeAmountPartial > 0)
                {
                    singleItemPartialBuy.TransactionType = "CHEQUE";
                    singleItemPartialBuy.Amount = FormValidationHelper.AmountFormatter(ChequeAmountPartial, sgdDp);
                    TotalPartialBuy.Add(singleItemPartialBuy);
                    singleItemPartialBuy = new TotalMemoItemModel();
                }

                if(sales.BankTransferAmount != null)
                {
                    singleItemPartialBuy.TransactionType = "BANK TRANSFER";
                    singleItemPartialBuy.Amount = FormValidationHelper.AmountFormatter(Convert.ToDecimal(sales.BankTransferAmount), sgdDp);
                    TotalPartialBuy.Add(singleItemPartialBuy);
                    singleItemPartialBuy = new TotalMemoItemModel();
                }
                ViewData["TotalMemoItemListPartialBuy"] = TotalPartialBuy;

                //End New Update partial

                foreach (SaleTransaction transaction in buyTransactions)
                {
                    string paymentMode = transaction.PaymentMode;

                    singleItemBuy = new TotalMemoItemModel();
                    TotalAmountCheckBuy = 0;
                    if (paymentMode == "Cheque" && !string.IsNullOrEmpty(transaction.ChequeNo))
                    {
                        paymentMode += " (" + transaction.ChequeNo + ")";
                    }
                    else if (paymentMode == "Bank Transfer" && !string.IsNullOrEmpty(transaction.BankTransferNo))
                    {
                        paymentMode += " (" + transaction.BankTransferNo + ")";
                    }

                    //var CheckBuy = TotalMemoItemBuy.Where(e => e.TransactionType == transaction.PaymentMode).FirstOrDefault();

                    //if (CheckBuy != null)
                    //{
                    //    //can add up
                    //    TotalAmountCheckBuy = Convert.ToDecimal(CheckBuy.Amount) + transaction.AmountLocal;
                    //    //Check.Amount = Check.Amount + Convert.ToDecimal(FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal));
                    //    CheckBuy.Amount = FormValidationHelper.AmountFormatter(Convert.ToDecimal(TotalAmountCheckBuy), sgdDp);
                    //}
                    //else
                    //{
                    //    //New Item
                    //    singleItemBuy.TransactionType = transaction.PaymentMode;
                    //    singleItemBuy.Amount = FormValidationHelper.AmountFormatter(transaction.AmountLocal, sgdDp);
                    //    TotalMemoItemBuy.Add(singleItemBuy);
                    //}

                    buyMemos.Add(new MemoCurrencyTable()
                    {
                        RowId = buyRowCount,
                        Currency = transaction.Products.CurrencyCode,
                        Rate = transaction.Rate.ToString(GetRateFormat(rateDP)),
                        Amount = FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal),
                        PaymentMode = paymentMode,
                        TotalAmount = FormValidationHelper.AmountFormatter(transaction.AmountLocal, sgdDp),
                        VesselName = transaction.VesselName
                    });

                    buyMemoTotal = Convert.ToDecimal(buyMemoTotal) + transaction.AmountLocal;

                    buyRowCount++;
                }

                if (buyTransactions.Count > 0 && buyTransactions.Count < 5)
                {
                    for (int i = buyTransactions.Count; i < 5; i++)
                    {
                        buyMemos.Add(new MemoCurrencyTable()
                        {
                            RowId = i + 1,
                            Currency = "",
                            Rate = "",
                            Amount = "",
                            PaymentMode = "",
                            TotalAmount = "",
                            VesselName = ""
                        });
                    }
                }
                //ViewData["TotalMemoItemListBuy"] = TotalMemoItemBuy;
                ViewData["BuyMemo"] = buyMemos;
                ViewData["BuyMemoTotal"] = "";
                if (buyMemoTotal != null)
                {
                    ViewData["BuyMemoTotal"] = "SGD " + FormValidationHelper.AmountFormatter(Convert.ToDecimal(buyMemoTotal), sgdDp);
                }

                List<SaleTransaction> sellTransactions = sales.SaleTransactions.Where(e => e.TransactionType == "Sell").ToList();
                List<MemoCurrencyTable> sellMemos = new List<MemoCurrencyTable>();

                int sellMemoCount = 1;
                decimal TotalAmountCheckSell = 0;
                decimal? sellMemoTotal = null;
                List<TotalMemoItemModel> TotalMemoItemSell = new List<TotalMemoItemModel>();
                TotalMemoItemModel singleItemSell = new TotalMemoItemModel();

                //New Update partial
                List<TotalMemoItemModel> TotalPartialSell = new List<TotalMemoItemModel>();
                TotalMemoItemModel singleItemPartialSell = new TotalMemoItemModel();
                decimal ChequeAmountPartialSell = 0;
                if (sales.CashAmount != null)
                {
                    singleItemPartialSell.TransactionType = "CASH";
                    singleItemPartialSell.Amount = FormValidationHelper.AmountFormatter(Convert.ToDecimal(sales.CashAmount), sgdDp);
                    TotalPartialSell.Add(singleItemPartialSell);
                    singleItemPartialSell = new TotalMemoItemModel();
                }

                if (sales.Cheque1Amount != null)
                {
                    ChequeAmountPartialSell = ChequeAmountPartialSell + Convert.ToDecimal(sales.Cheque1Amount);
                }

                if (sales.Cheque2Amount != null)
                {
                    ChequeAmountPartialSell = ChequeAmountPartialSell + Convert.ToDecimal(sales.Cheque2Amount);
                }

                if (sales.Cheque3Amount != null)
                {
                    ChequeAmountPartialSell = ChequeAmountPartialSell + Convert.ToDecimal(sales.Cheque3Amount);
                }

                if (ChequeAmountPartialSell > 0)
                {
                    singleItemPartialSell.TransactionType = "CHEQUE";
                    singleItemPartialSell.Amount = FormValidationHelper.AmountFormatter(ChequeAmountPartialSell, sgdDp);
                    TotalPartialSell.Add(singleItemPartialSell);
                    singleItemPartialSell = new TotalMemoItemModel();
                }

                if (sales.BankTransferAmount != null)
                {
                    singleItemPartialSell.TransactionType = "BANK TRANSFER";
                    singleItemPartialSell.Amount = FormValidationHelper.AmountFormatter(Convert.ToDecimal(sales.BankTransferAmount), sgdDp);
                    TotalPartialSell.Add(singleItemPartialSell);
                    singleItemPartialSell = new TotalMemoItemModel();
                }
                ViewData["TotalMemoItemListPartialSell"] = TotalPartialSell;

                //End New Update partial

                foreach (SaleTransaction transaction in sellTransactions)
                {
                    string paymentMode = transaction.PaymentMode;

                    singleItemSell = new TotalMemoItemModel();
                    TotalAmountCheckSell = 0;

                    if (paymentMode == "Cheque" && !string.IsNullOrEmpty(transaction.ChequeNo))
                    {
                        paymentMode += " (" + transaction.ChequeNo + ")";
                    }
                    else if (paymentMode == "Bank Transfer" && !string.IsNullOrEmpty(transaction.BankTransferNo))
                    {
                        paymentMode += " (" + transaction.BankTransferNo + ")";
                    }

                    //var CheckSell = TotalMemoItemSell.Where(e => e.TransactionType == transaction.PaymentMode).FirstOrDefault();

                    //if (CheckSell != null)
                    //{
                    //    //can add up
                    //    TotalAmountCheckSell = Convert.ToDecimal(CheckSell.Amount) + transaction.AmountLocal;
                    //    //Check.Amount = Check.Amount + Convert.ToDecimal(FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal));
                    //    CheckSell.Amount = FormValidationHelper.AmountFormatter(Convert.ToDecimal(TotalAmountCheckSell), sgdDp);
                    //}
                    //else
                    //{
                    //    //New Item
                    //    singleItemSell.TransactionType = transaction.PaymentMode;
                    //    singleItemSell.Amount = FormValidationHelper.AmountFormatter(transaction.AmountLocal, sgdDp);
                    //    TotalMemoItemSell.Add(singleItemSell);
                    //}

                    sellMemos.Add(new MemoCurrencyTable()
                    {
                        RowId = sellMemoCount,
                        Currency = transaction.Products.CurrencyCode,
                        Rate = transaction.Rate.ToString(GetRateFormat(rateDP)),
                        Amount = FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal),
                        PaymentMode = paymentMode,
                        TotalAmount = FormValidationHelper.AmountFormatter(transaction.AmountLocal, sgdDp),
                        VesselName = transaction.VesselName
                    });

                    sellMemoTotal = Convert.ToDecimal(sellMemoTotal) + transaction.AmountLocal;

                    sellMemoCount++;
                }

                if (sellTransactions.Count > 0 && sellTransactions.Count < 5)
                {
                    for (int i = sellTransactions.Count; i < 5; i++)
                    {
                        sellMemos.Add(new MemoCurrencyTable()
                        {
                            RowId = i + 1,
                            Currency = "",
                            Rate = "",
                            Amount = "",
                            PaymentMode = "",
                            TotalAmount = "",
                            VesselName = ""
                        });
                    }
                }

                //ViewData["TotalMemoItemListBuy"] = TotalMemoItemBuy;
                //ViewData["TotalMemoItemListSell"] = TotalMemoItemSell;
                ViewData["SellMemo"] = sellMemos;
                ViewData["SellMemoTotal"] = "";
                if (sellMemoTotal != null)
                {
                    ViewData["SellMemoTotal"] = FormValidationHelper.AmountFormatter(Convert.ToDecimal(sellMemoTotal), sgdDp);
                }
                ViewData["SellMemoCode"] = "";
                if (sellTransactions.Count > 0)
                {
                    ViewData["SellMemoCode"] = sellTransactions.FirstOrDefault().Products.CurrencyCode;
                }

                ViewData["Sale"] = sales;

                //string header = Server.MapPath("~/Views/Sale/MemoPDFHeader.html");
                string footer = Server.MapPath("~/Views/Sale/MemoPDFFooter.html");
                string customSwitch = string.Format("--header-html \"{0}\" --footer-html \"{1}\"", header, footer);
                string fileName = sales.MemoID + "-memo-" + DateTime.Now.ToString("yyMMddHHmmss") + ".pdf";

                if (saveFile)
                {
                    string path = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["EmailReceiptFolder"].ToString()), fileName);

                    return new Rotativa.ViewAsPdf("MemoPDF")
                    {
                        FileName = fileName,
                        PageSize = Rotativa.Options.Size.A4,
                        CustomSwitches = customSwitch,
                        SaveOnServerPath = path
                    };
                }
                else
                {
                    return new Rotativa.ViewAsPdf("MemoPDF")
                    {
                        FileName = fileName,
                        PageSize = Rotativa.Options.Size.A4,
                        CustomSwitches = customSwitch
                    };
                }
                #endregion
            }
        }

        //GET: GenerateConfirmationEmail
        public ViewAsPdf GenerateConfirmationEmail(int id, bool saveFile = false, bool GenerateConfirmation = false)
        {
            Sale sales = _salesModel.GetSingle(id);
            sales.SaleTransactions = sales.SaleTransactions.OrderBy(e => e.ID).ToList();
            string token = EncryptionHelper.GenerateRandomAlphaNumeric(8);

            string header = WriteMemoHeaderHTML(null, token, false);

            if (sales.TransactionType == "Encashment")
            {
                #region Encashment
                List<SaleTransaction> sellTransactions = sales.SaleTransactions.Where(e => e.TransactionType == "Sell").ToList();
                List<MemoCurrencyTable> sellMemosEncashment = new List<MemoCurrencyTable>();

                int sellMemoCount = 1;

                decimal? sellMemoTotal = null;
                decimal? sellMemoEncashmentTotal = null;

                foreach (SaleTransaction transaction in sellTransactions)
                {
                    string paymentMode = transaction.PaymentMode;

                    if (paymentMode == "Cheque" && !string.IsNullOrEmpty(transaction.ChequeNo))
                    {
                        paymentMode += " (" + transaction.ChequeNo + ")";
                    }
                    else if (paymentMode == "Bank Transfer" && !string.IsNullOrEmpty(transaction.BankTransferNo))
                    {
                        paymentMode += " (" + transaction.BankTransferNo + ")";
                    }

                    sellMemoTotal = Convert.ToDecimal(sellMemoTotal) + transaction.AmountLocal;

                    sellMemosEncashment.Add(new MemoCurrencyTable()
                    {
                        RowId = sellMemoCount,
                        Currency = transaction.Products.CurrencyCode,
                        Rate = Convert.ToDecimal(transaction.EncashmentRate).ToString(GetRateFormat(rateDP)),
                        Amount = FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal),
                        PaymentMode = paymentMode,
                        TotalAmount = FormValidationHelper.AmountFormatter(transaction.AmountForeign * Convert.ToDecimal(transaction.EncashmentRate), sgdDp)
                    });

                    //sellMemoEncashmentTotal = Convert.ToDecimal(sellMemoEncashmentTotal) + transaction.AmountForeign * Convert.ToDecimal(transaction.EncashmentRate);
                    sellMemoEncashmentTotal = Convert.ToDecimal(sellMemoEncashmentTotal) + (Convert.ToDecimal(FormValidationHelper.AmountFormatter(transaction.AmountForeign * Convert.ToDecimal(transaction.EncashmentRate), sgdDp)));
                    sellMemoCount++;
                }

                if (sellTransactions.Count > 0 && sellTransactions.Count < 5)
                {
                    for (int i = sellTransactions.Count; i < 5; i++)
                    {
                        sellMemosEncashment.Add(new MemoCurrencyTable()
                        {
                            RowId = i + 1,
                            Currency = "",
                            Rate = "",
                            Amount = "",
                            PaymentMode = "",
                            TotalAmount = ""
                        });
                    }
                }

                //ViewData["SellMemo"] = sellMemos;
                ViewData["SellMemoTotal"] = "";
                if (sellMemoTotal != null)
                {
                    ViewData["SellMemoTotal"] = FormValidationHelper.AmountFormatter(Convert.ToDecimal(sellMemoTotal), sgdDp);
                }
                ViewData["SellMemoCode"] = "";
                if (sellTransactions.Count > 0)
                {
                    ViewData["SellMemoCode"] = sellTransactions.FirstOrDefault().Products.CurrencyCode;
                }

                ViewData["SellMemoEncashment"] = sellMemosEncashment;
                ViewData["SellMemoTotalEncashment"] = "";
                if (sellMemoEncashmentTotal != null)
                {
                    ViewData["SellMemoTotalEncashment"] = FormValidationHelper.AmountFormatter(Convert.ToDecimal(sellMemoEncashmentTotal), sgdDp);
                }
                ViewData["SellMemoCodeEncashment"] = "";
                if (sellTransactions.Count > 0)
                {
                    ViewData["SellMemoCodeEncashment"] = sellTransactions.FirstOrDefault().Products.CurrencyCode;
                }

                ViewData["Sale"] = sales;

                //string header = Server.MapPath("~/Views/Sale/MemoPDFHeader.html");
                string customSwitch = string.Format("--header-html \"{0}\"", header);
                string fileName = sales.MemoID + "-confirmation-" + DateTime.Now.ToString("yyMMddHHmmss") + ".pdf";

                if (saveFile)
                {
                    string path = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["EmailConfirmationFolder"].ToString()), fileName);

                    return new Rotativa.ViewAsPdf("ConfirmationEncashmentPDF")
                    {
                        FileName = fileName,
                        PageSize = Rotativa.Options.Size.A4,
                        CustomSwitches = customSwitch,
                        SaveOnServerPath = path
                    };
                }
                else if (GenerateConfirmation)
                {
                    return new Rotativa.ViewAsPdf("ConfirmationEncashmentPDF")
                    {
                        PageSize = Rotativa.Options.Size.A4
                    };
                }
                else
                {
                    return new Rotativa.ViewAsPdf("ConfirmationEncashmentPDF")
                    {
                        FileName = fileName,
                        PageSize = Rotativa.Options.Size.A4,
                        CustomSwitches = customSwitch
                    };
                }
                #endregion
            }
            else if (sales.TransactionType == "Cross Currency")
            {
                #region Cross Currency
                List<SaleTransaction> sellTransactions = sales.SaleTransactions.Where(e => e.TransactionType == "Sell").ToList();
                List<MemoCurrencyTable> sellMemosCurrency = new List<MemoCurrencyTable>();

                int sellMemoCount = 1;

                decimal? sellMemoTotal = null;
                decimal? sellMemoCurrencyTotal = null;

                foreach (SaleTransaction transaction in sellTransactions)
                {
                    string paymentMode = transaction.PaymentMode;

                    if (paymentMode == "Cheque" && !string.IsNullOrEmpty(transaction.ChequeNo))
                    {
                        paymentMode += " (" + transaction.ChequeNo + ")";
                    }
                    else if (paymentMode == "Bank Transfer" && !string.IsNullOrEmpty(transaction.BankTransferNo))
                    {
                        paymentMode += " (" + transaction.BankTransferNo + ")";
                    }

                    sellMemoTotal = Convert.ToDecimal(sellMemoTotal) + transaction.AmountLocal;

                    int sellIndex = sales.SaleTransactions.FindIndex(e => e.ID == transaction.ID);

                    SaleTransaction buyTran = sales.SaleTransactions.OrderBy(e => e.ID).ToList()[sellIndex + 1];

                    sellMemosCurrency.Add(new MemoCurrencyTable()
                    {
                        RowId = sellMemoCount,
                        Currency = transaction.Products.CurrencyCode,
                        Rate = Convert.ToDecimal(transaction.CrossRate).ToString(GetRateFormat(rateDP)),
                        CrossRate = Convert.ToDecimal(transaction.CrossRate).ToString(GetRateFormat(rateDP)),
                        Amount = FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal),
                        PaymentMode = paymentMode,
                        TotalAmount = FormValidationHelper.AmountFormatter(transaction.AmountForeign * Convert.ToDecimal(transaction.CrossRate), buyTran.Products.Decimal)
                    });

                    sellMemoCurrencyTotal = Convert.ToDecimal(sellMemoCurrencyTotal) + transaction.AmountForeign * Convert.ToDecimal(transaction.CrossRate);

                    sellMemoCount++;
                }

                if (sellTransactions.Count > 0 && sellTransactions.Count < 5)
                {
                    for (int i = sellTransactions.Count; i < 5; i++)
                    {
                        sellMemosCurrency.Add(new MemoCurrencyTable()
                        {
                            RowId = i + 1,
                            Currency = "",
                            Rate = "",
                            Amount = "",
                            PaymentMode = "",
                            TotalAmount = ""
                        });
                    }
                }

                ViewData["SellMemoTotal"] = "";
                if (sellMemoTotal != null)
                {
                    ViewData["SellMemoTotal"] = FormValidationHelper.AmountFormatter(Convert.ToDecimal(sellMemoTotal), sgdDp);
                }
                ViewData["SellMemoCode"] = "";
                if (sellTransactions.Count > 0)
                {
                    ViewData["SellMemoCode"] = sellTransactions.FirstOrDefault().Products.CurrencyCode;
                }

                ViewData["SellMemoCurrency"] = sellMemosCurrency;
                ViewData["SellMemoTotalCurrency"] = "";
                if (sellMemoCurrencyTotal != null)
                {
                    ViewData["SellMemoTotalCurrency"] = FormValidationHelper.AmountFormatter(Convert.ToDecimal(sellMemoCurrencyTotal), sgdDp);
                }
                ViewData["SellMemoCodeCurrency"] = "";
                if (sellTransactions.Count > 0)
                {
                    ViewData["SellMemoCodeCurrency"] = sellTransactions.FirstOrDefault().Products.CurrencyCode;
                }

                ViewData["Sale"] = sales;

                //string header = Server.MapPath("~/Views/Sale/MemoPDFHeader.html");
                string customSwitch = string.Format("--header-html \"{0}\"", header);
                string fileName = sales.MemoID + "-confirmation-" + DateTime.Now.ToString("yyMMddHHmmss") + ".pdf";

                if (saveFile)
                {
                    string path = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["EmailConfirmationFolder"].ToString()), fileName);

                    return new Rotativa.ViewAsPdf("ConfirmationCrossCurrencyPDF")
                    {
                        FileName = fileName,
                        PageSize = Rotativa.Options.Size.A4,
                        CustomSwitches = customSwitch,
                        SaveOnServerPath = path
                    };
                }
                else if (GenerateConfirmation)
                {
                    return new Rotativa.ViewAsPdf("ConfirmationCrossCurrencyPDF")
                    {
                        PageSize = Rotativa.Options.Size.A4
                    };
                }
                else
                {
                    return new Rotativa.ViewAsPdf("ConfirmationCrossCurrencyPDF")
                    {
                        FileName = fileName,
                        PageSize = Rotativa.Options.Size.A4,
                        CustomSwitches = customSwitch
                    };
                }
                #endregion
            }
            else
            {
                #region Sell/Buy/Swap
                List<SaleTransaction> buyTransactions = sales.SaleTransactions.Where(e => e.TransactionType == "Buy").ToList();
                List<MemoCurrencyTable> buyMemos = new List<MemoCurrencyTable>();

                int buyRowCount = 1;

                decimal? buyMemoTotal = null;

                foreach (SaleTransaction transaction in buyTransactions)
                {
                    string paymentMode = transaction.PaymentMode;

                    if (paymentMode == "Cheque" && !string.IsNullOrEmpty(transaction.ChequeNo))
                    {
                        paymentMode += " (" + transaction.ChequeNo + ")";
                    }
                    else if (paymentMode == "Bank Transfer" && !string.IsNullOrEmpty(transaction.BankTransferNo))
                    {
                        paymentMode += " (" + transaction.BankTransferNo + ")";
                    }

                    buyMemos.Add(new MemoCurrencyTable()
                    {
                        RowId = buyRowCount,
                        Currency = transaction.Products.CurrencyCode,
                        Rate = transaction.Rate.ToString(GetRateFormat(rateDP)),
                        Amount = FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal),
                        PaymentMode = paymentMode,
                        TotalAmount = FormValidationHelper.AmountFormatter(transaction.AmountLocal, sgdDp)
                    });

                    buyMemoTotal = Convert.ToDecimal(buyMemoTotal) + transaction.AmountLocal;

                    buyRowCount++;
                }

                if (buyTransactions.Count > 0 && buyTransactions.Count < 5)
                {
                    for (int i = buyTransactions.Count; i < 5; i++)
                    {
                        buyMemos.Add(new MemoCurrencyTable()
                        {
                            RowId = i + 1,
                            Currency = "",
                            Rate = "",
                            Amount = "",
                            PaymentMode = "",
                            TotalAmount = ""
                        });
                    }
                }

                ViewData["BuyMemo"] = buyMemos;
                ViewData["BuyMemoTotal"] = "";
                if (buyMemoTotal != null)
                {
                    ViewData["BuyMemoTotal"] = "SGD " + FormValidationHelper.AmountFormatter(Convert.ToDecimal(buyMemoTotal), sgdDp);
                }

                List<SaleTransaction> sellTransactions = sales.SaleTransactions.Where(e => e.TransactionType == "Sell").ToList();
                List<MemoCurrencyTable> sellMemos = new List<MemoCurrencyTable>();

                int sellMemoCount = 1;

                decimal? sellMemoTotal = null;

                foreach (SaleTransaction transaction in sellTransactions)
                {
                    string paymentMode = transaction.PaymentMode;

                    if (paymentMode == "Cheque" && !string.IsNullOrEmpty(transaction.ChequeNo))
                    {
                        paymentMode += " (" + transaction.ChequeNo + ")";
                    }
                    else if (paymentMode == "Bank Transfer" && !string.IsNullOrEmpty(transaction.BankTransferNo))
                    {
                        paymentMode += " (" + transaction.BankTransferNo + ")";
                    }

                    sellMemos.Add(new MemoCurrencyTable()
                    {
                        RowId = sellMemoCount,
                        Currency = transaction.Products.CurrencyCode,
                        Rate = transaction.Rate.ToString(GetRateFormat(rateDP)),
                        Amount = FormValidationHelper.AmountFormatter(transaction.AmountForeign, transaction.Products.Decimal),
                        PaymentMode = paymentMode,
                        TotalAmount = FormValidationHelper.AmountFormatter(transaction.AmountLocal, sgdDp)
                    });

                    sellMemoTotal = Convert.ToDecimal(sellMemoTotal) + transaction.AmountLocal;

                    sellMemoCount++;
                }

                if (sellTransactions.Count > 0 && sellTransactions.Count < 5)
                {
                    for (int i = sellTransactions.Count; i < 5; i++)
                    {
                        sellMemos.Add(new MemoCurrencyTable()
                        {
                            RowId = i + 1,
                            Currency = "",
                            Rate = "",
                            Amount = "",
                            PaymentMode = "",
                            TotalAmount = ""
                        });
                    }
                }

                ViewData["SellMemo"] = sellMemos;
                ViewData["SellMemoTotal"] = "";
                if (sellMemoTotal != null)
                {
                    ViewData["SellMemoTotal"] = FormValidationHelper.AmountFormatter(Convert.ToDecimal(sellMemoTotal), sgdDp);
                }
                ViewData["SellMemoCode"] = "";
                if (sellTransactions.Count > 0)
                {
                    ViewData["SellMemoCode"] = sellTransactions.FirstOrDefault().Products.CurrencyCode;
                }

                ViewData["Sale"] = sales;

                //string header = Server.MapPath("~/Views/Sale/MemoPDFHeader.html");
                string customSwitch = string.Format("--header-html \"{0}\"", header);
                string fileName = sales.MemoID + "-confirmation-" + DateTime.Now.ToString("yyMMddHHmmss") + ".pdf";

                if (saveFile)
                {
                    string path = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["EmailConfirmationFolder"].ToString()), fileName);

                    return new Rotativa.ViewAsPdf("ConfirmationPDF")
                    {
                        FileName = fileName,
                        PageSize = Rotativa.Options.Size.A4,
                        CustomSwitches = customSwitch,
                        SaveOnServerPath = path
                    };
                }
                else if (GenerateConfirmation)
                {
                    return new Rotativa.ViewAsPdf("ConfirmationPDF")
                    {
                        PageSize = Rotativa.Options.Size.A4
                    };
                }
                else
                {
                    return new Rotativa.ViewAsPdf("ConfirmationPDF")
                    {
                        FileName = fileName,
                        PageSize = Rotativa.Options.Size.A4,
                        CustomSwitches = customSwitch
                    };
                }
                #endregion
            }
        }

        //Write Memo Header Html
        public string WriteMemoHeaderHTML(string barcode, string token, bool requireBarcode = true)
        {
            string memoHeaderPath = Server.MapPath("~/FileUploads/MemoHeader/MemoPDFHeader_" + token + ".html");
            List<string> content = new List<string>();

            content.Add("<!DOCTYPE html>");
            content.Add("<html>");
            content.Add("<head>");
            content.Add("    <title></title>");
            content.Add("    <style type=\"text/css\">");
            content.Add("        body {");
            content.Add("            font-family: Calibri;");
            content.Add("            font-size: 11px;");
            content.Add("            width: 100%;");
            content.Add("            padding-top: 10px;");
            content.Add("        }");
            content.Add("        strong {");
            content.Add("            font-weight: bold;");
            content.Add("        }");
            content.Add("        table {");
            content.Add("            width: 100%;");
            content.Add("        }");
            content.Add("    </style>");
            content.Add("</head>");
            content.Add("<body>");
            content.Add("    <table>");
            content.Add("        <tr>");
            content.Add("            <td style=\"width: 210px;\"><img src=\"../../Content/images/gefx_logo-blue.png\" style=\"width: 210px;margin-top:-40px;\" /></td>");
            //content.Add("            <td><strong style=\"font-size: 26px;\">Great East Forex</strong></td>");
            if (requireBarcode)
            {
                string barcodePath = "../../FileUploads/Barcode/" + barcode;

                content.Add("            <td style=\"text-align: right;\"><img src=\"" + barcodePath + "\" style=\"margin-right: -30px;\" /></td>");
            }
            else
            {
                content.Add("            <td style=\"text-align: right;\"> </td>");
            }
            content.Add("        </tr>");
            content.Add("    </table>");
            content.Add("</body>");
            content.Add("</html>");

            System.IO.File.WriteAllLines(memoHeaderPath, content);

            return memoHeaderPath;
        }

        //Generate Barcode: Return file name
        public string GenerateBarcode(string data)
        {
            //Read in the parameters
            int imageWidth = Convert.ToInt32(ConfigurationManager.AppSettings["BarcodeWidth"]);
            int imageHeight = Convert.ToInt32(ConfigurationManager.AppSettings["BarcodeHeight"]);
            bool bIncludeLabel = Convert.ToBoolean(ConfigurationManager.AppSettings["BarcodeLabel"]);

            Barcode barcode = new Barcode();
            barcode.Width = imageWidth;
            barcode.Height = imageHeight;
            barcode.IncludeLabel = bIncludeLabel;
            TYPE type = BarcodeLib.TYPE.UNSPECIFIED;
            string barcodeType = ConfigurationManager.AppSettings["BarcodeType"].ToString();
            switch (barcodeType)
            {
                case "UPC-A": type = BarcodeLib.TYPE.UPCA; break;
                case "UPC-E": type = BarcodeLib.TYPE.UPCE; break;
                case "UPC 2 Digit Ext": type = BarcodeLib.TYPE.UPC_SUPPLEMENTAL_2DIGIT; break;
                case "UPC 5 Digit Ext": type = BarcodeLib.TYPE.UPC_SUPPLEMENTAL_5DIGIT; break;
                case "EAN-13": type = BarcodeLib.TYPE.EAN13; break;
                case "JAN-13": type = BarcodeLib.TYPE.JAN13; break;
                case "EAN-8": type = BarcodeLib.TYPE.EAN8; break;
                case "ITF-14": type = BarcodeLib.TYPE.ITF14; break;
                case "Codabar": type = BarcodeLib.TYPE.Codabar; break;
                case "PostNet": type = BarcodeLib.TYPE.PostNet; break;
                case "Bookland-ISBN": type = BarcodeLib.TYPE.BOOKLAND; break;
                case "Code 11": type = BarcodeLib.TYPE.CODE11; break;
                case "Code 39": type = BarcodeLib.TYPE.CODE39; break;
                case "Code 39 Extended": type = BarcodeLib.TYPE.CODE39Extended; break;
                case "Code 93": type = BarcodeLib.TYPE.CODE93; break;
                case "LOGMARS": type = BarcodeLib.TYPE.LOGMARS; break;
                case "MSI": type = BarcodeLib.TYPE.MSI_Mod10; break;
                case "Interleaved 2 of 5": type = BarcodeLib.TYPE.Interleaved2of5; break;
                case "Standard 2 of 5": type = BarcodeLib.TYPE.Standard2of5; break;
                case "Code 128": type = BarcodeLib.TYPE.CODE128; break;
                case "Code 128-A": type = BarcodeLib.TYPE.CODE128A; break;
                case "Code 128-B": type = BarcodeLib.TYPE.CODE128B; break;
                case "Code 128-C": type = BarcodeLib.TYPE.CODE128C; break;
                case "Telepen": type = BarcodeLib.TYPE.TELEPEN; break;
                case "FIM (Facing Identification Mark)": type = BarcodeLib.TYPE.FIM; break;
                case "Pharmacode": type = BarcodeLib.TYPE.PHARMACODE; break;
                default: break;
            }
            SaveTypes saveType = SaveTypes.UNSPECIFIED;
            string strImageFormat = ConfigurationManager.AppSettings["BarcodeFileType"].ToString();
            switch (strImageFormat)
            {
                case "jpg": saveType = SaveTypes.JPG; break;
                case "jpeg": saveType = SaveTypes.JPG; break;
                case "png": saveType = SaveTypes.PNG; break;
                default: break;
            }

            barcode.Encode(type, data);

            data += "_" + DateTime.Now.ToString("yyMMddHHmmss") + "." + strImageFormat;

            string filePath = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["BarcodeFolder"].ToString()), data);
            barcode.SaveImage(filePath, saveType);

            return data;
        }

        //GET: GenerateSealingCert
        public ActionResult GenerateSealingCert(int id)
        {
            Sale sales = _salesModel.GetSingle(id);

            if (sales.TransactionType != "Buy")
            {
                sales.SaleTransactions = sales.SaleTransactions.Where(e => e.TransactionType == "Sell").ToList();
            }

            ViewData["Date"] = Convert.ToDateTime(sales.CollectionDate).ToString("dd/MM/yyyy");
            ViewData["CustomerRequested"] = "";
            if (sales.CustomerParticulars.CustomerType == "Corporate & Trading Company")
            {
                ViewData["CustomerRequested"] = sales.CustomerParticulars.Company_RegisteredName;
            }
            else
            {
                ViewData["CustomerRequested"] = sales.CustomerParticulars.Natural_Name;
            }
            ViewData["CompanyCode"] = sales.CustomerParticulars.CustomerCode;

            //if (sales.TransactionType == "Encashment")
            //{
            //    ViewData["SaleTransaction"] = sales.SaleTransactions.Where(e => e.TransactionType == "Sell").ToList();
            //}
            //else
            //{
            //    ViewData["SaleTransaction"] = sales.SaleTransactions;
            //}

            ViewData["SaleTransaction"] = sales.SaleTransactions;

            Dictionary<int, IList<ProductDenomination>> transactionsWithNoDenomination = new Dictionary<int, IList<ProductDenomination>>();

            foreach (SaleTransaction transaction in sales.SaleTransactions.OrderBy(e => e.ID))
            {
                if (transaction.SaleTransactionDenominations.Count == 0)
                {
                    IList<ProductDenomination> productDenominations = _productDenominationsModel.GetProductDenomination(transaction.CurrencyId);

                    transactionsWithNoDenomination.Add(transaction.ID, productDenominations.OrderByDescending(e => e.DenominationValue).ToList());
                }
            }

            ViewData["TransactionsWithNoDenomination"] = transactionsWithNoDenomination;

            //return View("SealingCertPDF");
            return new Rotativa.ViewAsPdf("SealingCertPDF")
            {
                FileName = sales.MemoID + "-sealing-cert-" + DateTime.Now.ToString("yyMMddHHmmss") + ".pdf",
                PageSize = Rotativa.Options.Size.A6,
                PageMargins = new Rotativa.Options.Margins(4, 4, 4, 4),
                PageWidth = 105,
                PageHeight = 148,
                //CustomSwitches = "--disable-smart-shrinking",
                PageOrientation = Rotativa.Options.Orientation.Portrait
            };
        }

        //GET: SendEmail
        public ActionResult SendEmail(int id)
        {
            Sale sales = _salesModel.GetSingle(id);
            ViewData["SaleId"] = id;
            ViewData["MemoID"] = sales.MemoID;
            ViewData["To"] = "";
            if (sales.CustomerParticulars.CustomerType == "Corporate & Trading Company")
            {
                if (!string.IsNullOrEmpty(sales.CustomerParticulars.Company_Email))
                {
                    ViewData["To"] = sales.CustomerParticulars.Company_Email;
                }
            }
            else
            {
                if (!string.IsNullOrEmpty(sales.CustomerParticulars.Natural_Email))
                {
                    ViewData["To"] = sales.CustomerParticulars.Natural_Email;
                }
            }

            ViewData["Subject"] = "Transaction Receipt ID: " + sales.MemoID;

            return View();
        }

        //POST: SendEmail
        [HttpPost]
        public ActionResult SendEmail(int id, FormCollection form)
        {
            List<string[]> modelErrors = new List<string[]>();

            string updateResult = "";

            if (string.IsNullOrEmpty(form["To"]))
            {
                string[] error = new string[2];
                error[0] = "To";
                error[1] = "To is required!";
                modelErrors.Add(error);
            }
            else
            {
                bool checkEmail = FormValidationHelper.EmailValidation(form["To"].ToString());

                if (!checkEmail)
                {
                    string[] error = new string[2];
                    error[0] = "To";
                    error[1] = "To is not a valid email!";
                    modelErrors.Add(error);
                }
            }

            if (!string.IsNullOrEmpty(form["Cc"]))
            {
                bool checkEmail = FormValidationHelper.EmailValidation(form["Cc"].ToString());

                if (!checkEmail)
                {
                    string[] error = new string[2];
                    error[0] = "Cc";
                    error[1] = "Cc is not a valid email!";
                    modelErrors.Add(error);
                }
            }

            if (!string.IsNullOrEmpty(form["Bcc"]))
            {
                bool checkEmail = FormValidationHelper.EmailValidation(form["Bcc"].ToString());

                if (!checkEmail)
                {
                    string[] error = new string[2];
                    error[0] = "Bcc";
                    error[1] = "Bcc is not a valid email!";
                    modelErrors.Add(error);
                }
            }

            if (modelErrors.Count == 0)
            {
                Sale sales = _salesModel.GetSingle(id);

                if (sales != null)
                {
                    var attachment = GenerateMemo(id, "Customer", false, true);
                    string fileName = attachment.FileName;
                    byte[] pdf = attachment.BuildPdf(ControllerContext);
                    int userid = Convert.ToInt32(Session["UserId"]);

                    string subject = form["Subject"].ToString();
                    string body = System.IO.File.ReadAllText(Server.MapPath("~/Templates/Memo.html"));
                    string customerName = "";
                    if (sales.CustomerParticulars.CustomerType == "Corporate & Trading Company")
                    {
                        customerName = sales.CustomerParticulars.Company_RegisteredName;
                    }
                    else
                    {
                        customerName = sales.CustomerParticulars.Natural_Name;
                    }
                    ListDictionary replacements = new ListDictionary();
                    replacements.Add("<%Name%>", customerName);
                    replacements.Add("<%MemoID%>", sales.MemoID);
                    replacements.Add("<%EmailType%>", "Receipt");
                    replacements.Add("<%Message%>", form["Message"].ToString());
                    replacements.Add("<%AcknowledgeMessage%>", "");
                    string recipient = form["To"].ToString();
                    string cc = form["Cc"].ToString();
                    string bcc = form["Bcc"].ToString();

                    bool sent = EmailHelper.sendEmail(subject, body, replacements, recipient, cc, bcc, pdf, fileName, Convert.ToInt32(Session["UserId"]), "Email Receipt", sales.ID);

                    if (sent)
                    {
                        updateResult = "{\"result\":\"success\", \"msg\":\"Sale Memo has been sent to " + customerName.Replace("\"", "\\\"") + "!\"}";

                        bool approval_history = _approvalHistorysModel.Add("Sale", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Sent Email", "Sale Memo has been sent to " + customerName);

                    }
                    else
                    {
                        updateResult = "{\"result\":\"error\", \"msg\":\"Failed to send Sale Memo!\"}";
                    }
                }
                else
                {
                    updateResult = "{\"result\":\"error\", \"msg\":\"Memo ID not found!\"}";
                }
            }
            else
            {
                string msg = "";

                foreach (string[] error in modelErrors)
                {
                    msg += "{\"id\":\"" + error[0] + "\",\"error\":\"" + error[1] + "\"},";
                }

                updateResult = "{\"result\":\"form-error\", \"msg\":[" + msg.Substring(0, msg.Length - 1) + "]}";
            }

            return Json(updateResult);
        }

        //GET: SendConfirmationEmail
        public ActionResult SendConfirmationEmail(int id)
        {
            Sale sales = _salesModel.GetSingle(id);
            ViewData["SaleId"] = id;
            ViewData["MemoID"] = sales.MemoID;
            ViewData["To"] = "";
            if (sales.CustomerParticulars.CustomerType == "Corporate & Trading Company")
            {
                if (!string.IsNullOrEmpty(sales.CustomerParticulars.Company_Email))
                {
                    ViewData["To"] = sales.CustomerParticulars.Company_Email;
                }
            }
            else
            {
                if (!string.IsNullOrEmpty(sales.CustomerParticulars.Natural_Email))
                {
                    ViewData["To"] = sales.CustomerParticulars.Natural_Email;
                }
            }

            ViewData["Subject"] = "Transaction Confirmation ID: " + sales.MemoID;

            return View();
        }

        //POST: SendConfirmationEmail
        [HttpPost]
        public ActionResult SendConfirmationEmail(int id, FormCollection form)
        {
            List<string[]> modelErrors = new List<string[]>();

            string updateResult = "";

            if (string.IsNullOrEmpty(form["ConfirmationTo"]))
            {
                string[] error = new string[2];
                error[0] = "ConfirmationTo";
                error[1] = "To is required!";
                modelErrors.Add(error);
            }
            else
            {
                bool checkEmail = FormValidationHelper.EmailValidation(form["ConfirmationTo"].ToString());

                if (!checkEmail)
                {
                    string[] error = new string[2];
                    error[0] = "ConfirmationTo";
                    error[1] = "To is not a valid email!";
                    modelErrors.Add(error);
                }
            }

            if (!string.IsNullOrEmpty(form["ConfirmationCc"]))
            {
                bool checkEmail = FormValidationHelper.EmailValidation(form["ConfirmationCc"].ToString());

                if (!checkEmail)
                {
                    string[] error = new string[2];
                    error[0] = "ConfirmationCc";
                    error[1] = "Cc is not a valid email!";
                    modelErrors.Add(error);
                }
            }

            if (!string.IsNullOrEmpty(form["ConfirmationBcc"]))
            {
                bool checkEmail = FormValidationHelper.EmailValidation(form["ConfirmationBcc"].ToString());

                if (!checkEmail)
                {
                    string[] error = new string[2];
                    error[0] = "ConfirmationBcc";
                    error[1] = "Bcc is not a valid email!";
                    modelErrors.Add(error);
                }
            }

            if (modelErrors.Count == 0)
            {
                Sale sales = _salesModel.GetSingle(id);

                if (sales != null)
                {
                    var attachment = GenerateConfirmationEmail(id, true);
                    string fileName = attachment.FileName;
                    byte[] pdf = attachment.BuildPdf(ControllerContext);
                    int userid = Convert.ToInt32(Session["UserId"]);

                    string subject = form["ConfirmationSubject"].ToString();
                    string body = System.IO.File.ReadAllText(Server.MapPath("~/Templates/Memo.html"));
                    string customerName = "";
                    if (sales.CustomerParticulars.CustomerType == "Corporate & Trading Company")
                    {
                        customerName = sales.CustomerParticulars.Company_RegisteredName;
                    }
                    else
                    {
                        customerName = sales.CustomerParticulars.Natural_Name;
                    }
                    ListDictionary replacements = new ListDictionary();
                    replacements.Add("<%Name%>", customerName);
                    replacements.Add("<%MemoID%>", sales.MemoID);
                    replacements.Add("<%EmailType%>", "Confirmation");
                    replacements.Add("<%Message%>", form["ConfirmationMessage"].ToString());
                    replacements.Add("<%AcknowledgeMessage%>", "<p><strong>Please kindly acknowledge to confirm.</strong></p>");
                    string recipient = form["ConfirmationTo"].ToString();
                    string cc = form["ConfirmationCc"].ToString();
                    string bcc = form["ConfirmationBcc"].ToString();

                    bool sent = EmailHelper.sendEmail(subject, body, replacements, recipient, cc, bcc, pdf, fileName, Convert.ToInt32(Session["UserId"]), "Email Confirmation", sales.ID);

                    if (sent)
                    {
                        updateResult = "{\"result\":\"success\", \"msg\":\"Sale Memo has been sent to " + customerName.Replace("\"", "\\\"") + "!\"}";

                        bool approval_history = _approvalHistorysModel.Add("Sale", sales.ID, userid, Session["Username"].ToString(), Session["UserRole"].ToString(), "Confirm Received", "Sale Memo has been sent to " + customerName);
                    }
                    else
                    {
                        updateResult = "{\"result\":\"error\", \"msg\":\"Failed to send Sale Memo!\"}";
                    }
                }
                else
                {
                    updateResult = "{\"result\":\"error\", \"msg\":\"Memo ID not found!\"}";
                }
            }
            else
            {
                string msg = "";

                foreach (string[] error in modelErrors)
                {
                    msg += "{\"id\":\"" + error[0] + "\",\"error\":\"" + error[1] + "\"},";
                }

                updateResult = "{\"result\":\"form-error\", \"msg\":[" + msg.Substring(0, msg.Length - 1) + "]}";
            }

            return Json(updateResult);
        }

        //GET: SummaryIndex
        public ActionResult SummaryIndex()
        {
            if (TempData["SearchStatus"] != null)
            {
                TempData.Remove("SearchStatus");
            }

            return RedirectToAction("Summary");
        }

        //GET: Summary
        [RedirectingActionSaleSummary]
        public ActionResult Summary(int page = 1, string searchStatus = "Pending")
        {
            IList<Sale> todaySales = _salesModel.GetTodaySales();
            decimal totalPendingBuy = 0;
            decimal totalBuy = 0;
            decimal totalPendingSell = 0;
            decimal totalSell = 0;

            foreach (Sale sale in todaySales)
            {
                foreach (SaleTransaction transaction in sale.SaleTransactions)
                {
                    if (transaction.TransactionType == "Buy")
                    {
                        if (sale.Status.Contains("Pending"))
                        {
                            totalPendingBuy += transaction.AmountLocal;
                        }
                        totalBuy += transaction.AmountLocal;
                    }
                    else
                    {
                        if (sale.Status.Contains("Pending"))
                        {
                            totalPendingSell += transaction.AmountLocal;
                        }
                        totalSell += transaction.AmountLocal;
                    }
                }
            }

            string[] weeklyDates = GetWeeklyDates();

            IList<Sale> weeklySales = _salesModel.GetWeeklySales(weeklyDates[0], weeklyDates[1]);
            decimal totalWeeklyTransaction = 0;
            decimal totalWeeklyBuy = 0;
            decimal totalWeeklySell = 0;

            foreach (Sale sale in weeklySales)
            {
                foreach (SaleTransaction transaction in sale.SaleTransactions)
                {
                    totalWeeklyTransaction += transaction.AmountLocal;

                    if (transaction.TransactionType == "Buy")
                    {
                        totalWeeklyBuy += transaction.AmountLocal;
                    }
                    else
                    {
                        totalWeeklySell += transaction.AmountLocal;
                    }
                }
            }

            int pageSize = Convert.ToInt32(ConfigurationManager.AppSettings["PageSize"]);

            TempData["Page"] = page;
            ViewData["Page"] = page;

            TempData["PageSize"] = pageSize;
            ViewData["PageSize"] = pageSize;

            ViewData["SearchKeyword"] = "";

            ViewData["SearchStatus"] = searchStatus;
            TempData["SearchStatus"] = searchStatus;

            ViewData["AllPendingActive"] = "";
            ViewData["PendingAssignDeliveryActive"] = "";
            ViewData["PendingDeliveryActive"] = "";

            if (searchStatus == "Pending Assign Delivery")
            {
                ViewData["PendingAssignDeliveryActive"] = "active";
                ViewData["CurrentStatus"] = "Today's Pending Assign Delivery Only";
            }
            else if (searchStatus == "Pending Delivery")
            {
                ViewData["PendingDeliveryActive"] = "active";
                ViewData["CurrentStatus"] = "Today's Pending Delivery Only";
            }
            else
            {
                ViewData["AllPendingActive"] = "active";
                ViewData["CurrentStatus"] = "Today's Pending";
            }

            string today = DateTime.Now.ToString("dd/MM/yyyy");

            IPagedList<Sale> sales = _salesModel.GetPaged(ViewData["SearchKeyword"].ToString(), ViewData["SearchStatus"].ToString(), page, pageSize, today);
            ViewData["Sale"] = sales;

            string sgdFormat = GetDecimalFormat(sgdDp);
            string rateFormat = GetRateFormat(rateDP);

            ViewData["TodayTotalBuy"] = totalBuy.ToString(sgdFormat);
            ViewData["TodayTotalPendingBuy"] = totalPendingBuy.ToString(sgdFormat);
            ViewData["TodayTotalSell"] = totalSell.ToString(sgdFormat);
            ViewData["TodayTotalPendingSell"] = totalPendingSell.ToString(sgdFormat);

            ViewData["WeeklyTotalTransaction"] = totalWeeklyTransaction.ToString(sgdFormat);
            ViewData["WeeklyTotalBuy"] = totalWeeklyBuy.ToString(sgdFormat);
            ViewData["WeeklyTotalSell"] = totalWeeklySell.ToString(sgdFormat);

            ViewData["SiteName"] = ConfigurationManager.AppSettings["SiteName"].ToString();
            return View();
        }

        //GET: ViewSaleDetail
        public ActionResult ViewSaleDetail(int id)
        {
            Sale sales = _salesModel.GetSingle(id);
            ViewData["Sale"] = sales;

            return View();
        }

        public string[] GetWeeklyDates()
        {
            string[] dates = new string[2];

            DateTime today = DateTime.Now;

            int dayBefore = 0;
            int dayAfter = 0;

            string day = today.DayOfWeek.ToString();

            switch (day)
            {
                case "Monday": dayBefore = 0; dayAfter = 6; break;
                case "Tuesday": dayBefore = 1; dayAfter = 5; break;
                case "Wednesday": dayBefore = 2; dayAfter = 4; break;
                case "Thursday": dayBefore = 3; dayAfter = 3; break;
                case "Friday": dayBefore = 4; dayAfter = 2; break;
                case "Saturday": dayBefore = 5; dayAfter = 1; break;
                case "Sunday": dayBefore = 6; dayAfter = 0; break;
            }

            DateTime firstWeekDay = today.AddDays(-dayBefore);
            DateTime lastWeekDay = today.AddDays(dayAfter);

            dates[0] = firstWeekDay.ToString("dd/MM/yyyy");
            dates[1] = lastWeekDay.ToString("dd/MM/yyyy");

            return dates;
        }

        //Customer Dropdown
        public Dropdown[] CustomerDDL(int id = 0)
        {
            //Start
            using (var conn = new SqlConnection(ConfigurationManager.ConnectionStrings["GreatEastForex"].ConnectionString))
            {
                try
                {
                    conn.Open();

                    List<GetAllCustomerActiveListInSalesModule> customerList = new List<GetAllCustomerActiveListInSalesModule>();
                    GetAllCustomerActiveListInSalesModule singleItem = new GetAllCustomerActiveListInSalesModule();

                    SqlCommand cmd = new SqlCommand("GetAllCustomerActiveListInSalesModule", conn);

                    cmd.ExecuteNonQuery();
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = 5000;

                    // execute the command
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        customerList = reader.Cast<IDataRecord>()
                        .Select(x => new GetAllCustomerActiveListInSalesModule
                        {
                            ID = (int)x["ID"],
                            IsSubAccount = (long)x["IsSubAccount"],
                            IsDeleted = (string)x["IsDeleted"],
                            CustomerType = (string)x["CustomerType"],
                            Company_RegisteredName = (x["Company_RegisteredName"] == DBNull.Value) ? "" : (string)x["Company_RegisteredName"],
                            Natural_Name = (x["Natural_Name"] == DBNull.Value) ? "" : (string)x["Natural_Name"],
                            Customer_Profile = (string)x["CustomerProfile"],
                            CustomerCode = (x["CustomerCode"] == DBNull.Value) ? "" : (string)x["CustomerCode"],
                            Status = (string)x["Status"]
                        }).ToList();
                    }

                    if (id > 0)
                    {
                        singleItem = customerList.Where(e => e.ID == id).FirstOrDefault();

                        if (singleItem == null)
                        {
                            using (var context = new DataAccess.GreatEastForex())
                            {
                                var CustomerParticularSingleItem = context.CustomerParticulars.Where(e => e.ID == id).FirstOrDefault();

                                if (CustomerParticularSingleItem != null)
                                {
                                    singleItem = new GetAllCustomerActiveListInSalesModule();
                                    singleItem.ID = CustomerParticularSingleItem.ID;
                                    singleItem.IsDeleted = CustomerParticularSingleItem.IsDeleted;
                                    singleItem.IsSubAccount = CustomerParticularSingleItem.IsSubAccount;
                                    singleItem.Natural_ContactNoH = CustomerParticularSingleItem.Natural_ContactNoH;
                                    singleItem.Natural_EmployedEmployerName = CustomerParticularSingleItem.Natural_EmployedEmployerName;
                                    singleItem.Natural_EmploymentType = CustomerParticularSingleItem.Natural_EmploymentType;
                                    singleItem.Natural_Name = CustomerParticularSingleItem.Natural_Name;
                                    singleItem.Natural_SelfEmployedBusinessName = CustomerParticularSingleItem.Natural_SelfEmployedBusinessName;
                                    singleItem.SearchTags = CustomerParticularSingleItem.SearchTags;
                                    singleItem.Status = CustomerParticularSingleItem.Others.FirstOrDefault().Status;
                                    singleItem.CustomerCode = CustomerParticularSingleItem.CustomerCode;
                                    singleItem.Company_ContactName = CustomerParticularSingleItem.Company_ContactName;
                                    singleItem.CustomerType = CustomerParticularSingleItem.CustomerType;
                                    singleItem.Company_RegisteredName = CustomerParticularSingleItem.Company_RegisteredName;
                                    singleItem.Customer_Profile = CustomerParticularSingleItem.Others.FirstOrDefault().CustomerProfile;
                                    singleItem.Company_TelNo = CustomerParticularSingleItem.Company_TelNo;
                                }
                            }
                        }
                    }

                    int size = customerList.Count + 1;

                    if (singleItem != null)
                    {
                        size++;
                    }

                    Dropdown[] ddl = new Dropdown[size];
                    ddl[0] = new Dropdown { val = "", name = "" };

                    int count = 1;

                    if (singleItem.ID != 0)
                    {
                        if (singleItem.CustomerType == "Corporate & Trading Company")
                        {
                            if (singleItem.Customer_Profile == "Incomplete")
                            {
                                ddl[count] = new Dropdown { name = singleItem.CustomerCode + " - " + singleItem.Company_RegisteredName + " (" + singleItem.Customer_Profile + ")", val = singleItem.ID.ToString() };
                            }
                            else
                            {
                                ddl[count] = new Dropdown { name = singleItem.CustomerCode + " - " + singleItem.Company_RegisteredName, val = singleItem.ID.ToString() };
                            }
                        }
                        else
                        {
                            if (singleItem.Customer_Profile == "Incomplete")
                            {
                                ddl[count] = new Dropdown { name = singleItem.CustomerCode + " - " + singleItem.Natural_Name + " (" + singleItem.Customer_Profile + ")", val = singleItem.ID.ToString() };
                            }
                            else
                            {
                                ddl[count] = new Dropdown { name = singleItem.CustomerCode + " - " + singleItem.Natural_Name, val = singleItem.ID.ToString() };
                            }
                        }
                        count++;
                    }

                    foreach (GetAllCustomerActiveListInSalesModule customer in customerList)
                    {
                        if (customer.CustomerType == "Corporate & Trading Company")
                        {
                            if (customer.Customer_Profile == "Incomplete")
                            {
                                ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Company_RegisteredName + " (" + customer.Customer_Profile + ")", val = customer.ID.ToString() };
                            }
                            else
                            {
                                ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Company_RegisteredName, val = customer.ID.ToString() };
                            }
                        }
                        else
                        {
                            if (customer.Customer_Profile == "Incomplete")
                            {
                                ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Natural_Name + " (" + customer.Customer_Profile + ")", val = customer.ID.ToString() };
                            }
                            else
                            {
                                ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Natural_Name, val = customer.ID.ToString() };
                            }
                        }
                        count++;
                    }
                    conn.Close();
                    return ddl;
                }
                catch (Exception ex)
                {
                    throw;
                }
            }
            //End


            //IList<CustomerParticular> customerParticulars = _customerParticularsModel.GetAllByStatus("Active").OrderByDescending(e => e.CustomerType == "Corporate & Trading Company").ThenBy(e => e.Company_RegisteredName).ThenBy(e => e.Natural_Name).ToList();

            //CustomerParticular selectedCustomer = null;

            //         if (id > 0)
            //         {
            //             selectedCustomer = _customerParticularsModel.GetSingle2(id);
            //             //selectedCustomer = _customerParticularsModel.GetSingle(id);
            //         }

            //         int size = customerParticulars.Count + 1;

            //         if (selectedCustomer != null)
            //         {
            //             size++;
            //         }

            //Dropdown[] ddl = new Dropdown[size];
            //ddl[0] = new Dropdown { val = "", name = "" };

            //int count = 1;

            //if (selectedCustomer != null)
            //{
            //    if (selectedCustomer.CustomerType == "Corporate & Trading Company")
            //    {
            //        if (selectedCustomer.Others[0].CustomerProfile == "Incomplete")
            //        {
            //            ddl[count] = new Dropdown { name = selectedCustomer.CustomerCode + " - " + selectedCustomer.Company_RegisteredName + " (" + selectedCustomer.Others[0].CustomerProfile + ")", val = selectedCustomer.ID.ToString() };
            //        }
            //        else
            //        {
            //            ddl[count] = new Dropdown { name = selectedCustomer.CustomerCode + " - " + selectedCustomer.Company_RegisteredName, val = selectedCustomer.ID.ToString() };
            //        }
            //    }
            //    else
            //    {
            //        if (selectedCustomer.Others[0].CustomerProfile == "Incomplete")
            //        {
            //            ddl[count] = new Dropdown { name = selectedCustomer.CustomerCode + " - " + selectedCustomer.Natural_Name + " (" + selectedCustomer.Others[0].CustomerProfile + ")", val = selectedCustomer.ID.ToString() };
            //        }
            //        else
            //        {
            //            ddl[count] = new Dropdown { name = selectedCustomer.CustomerCode + " - " + selectedCustomer.Natural_Name, val = selectedCustomer.ID.ToString() };
            //        }
            //    }
            //    count++;
            //}

            //foreach (CustomerParticular customer in customerParticulars)
            //{
            //    if (customer.CustomerType == "Corporate & Trading Company")
            //    {
            //        if (customer.Others[0].CustomerProfile == "Incomplete")
            //        {
            //            ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Company_RegisteredName + " (" + customer.Others[0].CustomerProfile + ")", val = customer.ID.ToString() };
            //        }
            //        else
            //        {
            //            ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Company_RegisteredName, val = customer.ID.ToString() };
            //        }
            //    }
            //    else
            //    {
            //        if (customer.Others[0].CustomerProfile == "Incomplete")
            //        {
            //            ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Natural_Name + " (" + customer.Others[0].CustomerProfile + ")", val = customer.ID.ToString() };
            //        }
            //        else
            //        {
            //            ddl[count] = new Dropdown { name = customer.CustomerCode + " - " + customer.Natural_Name, val = customer.ID.ToString() };
            //        }
            //    }
            //    count++;
            //}
        }

        public List<decimal> AutomatedRate(int productID)
        {
            var list = new List<decimal>();
            var product = _productsModel.GetSingle(productID);
            if (product.AutomatedBuyRate != null && product.AutomatedBuyRate > 0)
            {
                list[0] = (Convert.ToDecimal(product.AutomatedBuyRate));
            }
            else
            {
                list[0] = 0.00M;
            }
            if (product.AutomatedSellRate != null && product.AutomatedSellRate > 0)
            {
                list[1] = (Convert.ToDecimal(product.AutomatedSellRate));
            }
            else
            {
                list[1] = 0.00M;
            }
            return list;
        }


        //CollectionTime Dropdown
        public Dropdown[] CollectionTimeDDL()
        {
            Dropdown[] ddl = new Dropdown[4];
            ddl[0] = new Dropdown { name = "9am to 10am", val = "9am to 10am" };
            ddl[1] = new Dropdown { name = "10am to 12pm", val = "10am to 12pm" };
            ddl[2] = new Dropdown { name = "2pm to 3pm", val = "2pm to 3pm" };
            ddl[3] = new Dropdown { name = "3pm to 5pm", val = "3pm to 5pm" };
            return ddl;
        }

        //Currency Dropdown
        public Dropdown[] CurrencyDDL(string transactionType = "")
        {
            IList<Product> products = null;

            if (!string.IsNullOrEmpty(transactionType))
            {
                products = _productsModel.GetAll2(transactionType).ToList();
                //products = _productsModel.GetAll(transactionType).Where(e => e.Status == "Active" && e.CurrencyCode != "SGD").ToList();
            }
            else
            {
                products = _productsModel.GetAll2(transactionType).ToList();
                //products = _productsModel.GetAll().Where(e => e.Status == "Active" && e.CurrencyCode != "SGD").ToList();
            }

            //products = products.OrderByDescending(e => e.ID).ToList();
            List<int> getCount = new List<int>();//to store currency id
            IList<SaleTransaction> getSalesTransactionList = new List<SaleTransaction>();
            int getSingleSalesTransactionList = 0;
            List<CalculateSalesTransaction> FinalResult = new List<CalculateSalesTransaction>();

            foreach (var _prod in products)
            {
                getSingleSalesTransactionList = _saleTransactionsModel.GetProductTransactions(_prod.ID, null, null, new List<string>());

                //first get the total count number
                FinalResult.Add(new CalculateSalesTransaction
                {
                    PrimaryID = _prod.ID,
                    TotalCount = getSingleSalesTransactionList
                });
                //((List<SaleTransaction>)getSalesTransactionList).AddRange(getSingleSalesTransactionList);
                //getSalesTransactionList = getSalesTransactionList.Concat(getSingleSalesTransactionList);
                //getCount.Add(insideCount);
            }

            FinalResult = FinalResult.OrderByDescending(e => e.TotalCount).ToList();

            foreach (var _final in FinalResult)
            {
                getCount.Add(_final.PrimaryID);
            }

            //int checks = 0;

            //getCount.Sort();
            //getCount.Reverse();

            //List<int> getCount2 = new List<int>();
            //getCount2.Add(7);77
            //getCount2.Add(47);51
            //getCount2.Add(51);52
            //getCount2.Add(1);54
            //getCount2.Add(53);1
            //getCount2.Add(54);7
            //getCount2.Add(52);47
            //getCount2.Add(34);34
            //getCount2.Add(77);53
            //getCount2.Add(72);72

            //products = products.OrderBy(e => getCount2).ToList();
            products = products.OrderBy(i => getCount.IndexOf(i.ID)).ToList();
            //products = products.OrderByDescending(e => _saleTransactionsModel.GetProductTransactions(e.ID, null, null, new List<string>()).Count).ToList();

            Dropdown[] ddl = new Dropdown[products.Count];

            int count = 0;

            foreach (Product product in products)
            {
                ddl[count] = new Dropdown { name = product.CurrencyCode, val = product.ID.ToString() };
                count++;
            }

            return ddl;
        }

        //PaymentMode Dropdown
        public Dropdown[] PaymentModeDDL(int selectedProductId)
        {
            Product selectedProduct = _productsModel.GetSingle(selectedProductId);

            string[] paymentMode = null;

            if (selectedProduct != null)
            {
                paymentMode = selectedProduct.PaymentModeAllowed.Split(',');
            }

            if (paymentMode != null)
            {
                Dropdown[] ddl = new Dropdown[paymentMode.Length];

                int count = 0;

                foreach (string mode in paymentMode)
                {
                    ddl[count] = new Dropdown { name = mode, val = mode };
                    count++;
                }

                return ddl;
            }
            else
            {
                Dropdown[] ddl = new Dropdown[1];
                ddl[0] = new Dropdown { name = "Pending", val = "Pending" };
                return ddl;
            }
        }

        //LocalPaymentBank Dropdown
        public Dropdown[] LocalPaymentBankDDL(string selectedBank = "")
        {
            List<string> localPaymentBanks = _settingsModel.GetCodeValue("LOCAL_PAYMENT_BANK").Split('|').OrderByDescending(e => e == "CASH").ThenBy(e => e).ToList();

            if (!string.IsNullOrEmpty(selectedBank) && !localPaymentBanks.Contains(selectedBank))
            {
                localPaymentBanks.Insert(0, selectedBank);
            }

            Dropdown[] ddl = new Dropdown[localPaymentBanks.Count + 1];

            int count = 1;

            foreach (string bank in localPaymentBanks)
            {
                ddl[count] = new Dropdown { name = bank, val = bank };

                count++;
            }

            return ddl;
        }

        //POST: FileUploader
        [HttpPost]
        public void FileUploader()
        {
            string filesUploaded = "";

            try
            {
                if (Request.Files.Count > 0)
                {
                    foreach (string key in Request.Files)
                    {
                        HttpPostedFileBase attachment = Request.Files[key];

                        if (!string.IsNullOrEmpty(attachment.FileName))
                        {
                            string mimeType = attachment.ContentType;
                            int fileLength = attachment.ContentLength;

                            string[] allowedTypes = ConfigurationManager.AppSettings["AllowedFileTypes"].ToString().Split(',');

                            if (allowedTypes.Contains(mimeType))
                            {
                                if (fileLength <= Convert.ToInt32(ConfigurationManager.AppSettings["MaxFileSize"]) * 1024 * 1024)
                                {
                                    string file = attachment.FileName.Substring(attachment.FileName.LastIndexOf(@"\") + 1, attachment.FileName.Length - (attachment.FileName.LastIndexOf(@"\") + 1));
                                    string fileName = Path.GetFileNameWithoutExtension(file);
                                    string newFileName = FileHelper.sanitiseFilename(fileName) + "_" + DateTime.Now.ToString("yyMMddHHmmss") + Path.GetExtension(file).ToLower();
                                    string path = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), newFileName);

                                    if (!System.IO.File.Exists(path))
                                    {
                                        string oriPath = "";

                                        if (mimeType != "application/pdf")
                                        {
                                            oriPath = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), "ori_" + newFileName);

                                            attachment.SaveAs(oriPath);

                                            string resizedPath = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), newFileName);

                                            int maxWidth = int.Parse(ConfigurationManager.AppSettings["MaxImgWidth"].ToString());
                                            int maxHeight = int.Parse(ConfigurationManager.AppSettings["MaxImgHeight"].ToString());

                                            int width = 0;
                                            int height = 0;

                                            using (System.Drawing.Image Img = System.Drawing.Image.FromFile(oriPath))
                                            {
                                                width = Img.Width;
                                                height = Img.Height;
                                            }

                                            if (width >= maxWidth || height >= maxHeight)
                                            {
                                                ImageResizer.ImageJob i = new ImageResizer.ImageJob(oriPath, resizedPath, new ImageResizer.ResizeSettings(
                                           "width=" + maxWidth + ";height=" + maxHeight + ";format=jpg;mode=pad"));//mode=null, max, pad(default), crop, carve, stretch

                                                i.Build();
                                            }
                                            else
                                            {
                                                ImageResizer.ImageJob i = new ImageResizer.ImageJob(oriPath, resizedPath, new ImageResizer.ResizeSettings(
                                           "width=" + maxWidth + ";height=" + maxHeight + ";format=jpg;scale=canvas"));

                                                i.Build();
                                            }

                                            System.IO.File.Delete(oriPath);
                                        }
                                        else
                                        {
                                            oriPath = Path.Combine(Server.MapPath(ConfigurationManager.AppSettings["TempFolder"].ToString()), newFileName);

                                            attachment.SaveAs(oriPath);
                                        }

                                        filesUploaded += newFileName + ",";
                                    }
                                    else
                                    {
                                        Response.Write("{\"result\":\"error\",\"msg\":\"" + newFileName + " already exists.\"}");
                                        break;
                                    }
                                }
                                else
                                {
                                    Response.Write("{\"result\":\"error\",\"msg\":\"File size exceeds 2MB.\"}");
                                    break;
                                }
                            }
                            else
                            {
                                Response.Write("{\"result\":\"error\",\"msg\":\"Invalid file type.\"}");
                                break;
                            }
                        }
                        else
                        {
                            Response.Write("{\"result\":\"error\",\"msg\":\"Please select a file to upload.\"}");
                            break;
                        }
                    }
                }
                else
                {
                    Response.Write("{\"result\":\"error\",\"msg\":\"Please select a file to upload.\"}");
                }

                if (!string.IsNullOrEmpty(filesUploaded))
                {
                    Response.Write("{\"result\":\"success\",\"msg\":\"" + filesUploaded.Substring(0, filesUploaded.Length - 1) + "\"}");
                }
            }
            catch
            {
                Response.Write("{\"result\":\"error\",\"msg\":\"An error occured while uploading file.\"}");
            }
        }
    }

    public class TotalInAccountModel
    {
        public int id { get; set; }

        public decimal Amount { get; set; }

        public string TransactionType { get; set; }
    }

    public class RedirectingActionForCreate : ActionFilterAttribute
    {
        public override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            if (!(HttpContext.Current.Session["UserRole"].ToString().Contains("Dealer") || HttpContext.Current.Session["UserRole"].ToString().Contains("Finance") || HttpContext.Current.Session["UserRole"].ToString().Contains("Super Admin") || HttpContext.Current.Session["UserRole"].ToString().Contains("General Manager")))
            {
                filterContext.Controller.TempData.Add("Result", "danger|You have no access to this module!");

                filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary(new
                {
                    controller = "Access",
                    action = "Logout"
                }));
            }
        }
    }

    public class RedirectingActionForUpdate : ActionFilterAttribute
    {
        public override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            if (HttpContext.Current.Session["UserRole"].ToString() == "Ops Manager")
            {
                filterContext.Controller.TempData.Add("Result", "danger|You have no access to this module!");

                filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary(new
                {
                    controller = "Access",
                    action = "Logout"
                }));
            }
        }
    }

    public class RedirectingActionForDelete : ActionFilterAttribute
    {
        public override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            if (!(HttpContext.Current.Session["UserRole"].ToString().Contains("Super Admin") || HttpContext.Current.Session["UserRole"].ToString().Contains("General Manager") || HttpContext.Current.Session["UserRole"].ToString().Contains("Finance") || HttpContext.Current.Session["UserRole"].ToString().Contains("Cashier")))
            {
                filterContext.Controller.TempData.Add("Result", "danger|You have no access to this module!");

                filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary(new
                {
                    controller = "Access",
                    action = "Logout"
                }));
            }
        }
    }

    public class RedirectingActionSaleSummary : ActionFilterAttribute
    {
        public override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            if (HttpContext.Current.Session["UserRole"].ToString() == "Ops Exec")
            {
                filterContext.Controller.TempData.Add("Result", "danger|You have no access to this module!");

                filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary(new
                {
                    controller = "Access",
                    action = "Logout"
                }));
            }
        }
    }
}